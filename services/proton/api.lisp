;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/proton/api (:use)
                             (:nicknames #:aws/proton)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/proton/api)
(common-lisp:progn
 (common-lisp:define-condition proton-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'proton-error))
(common-lisp:progn
 (common-lisp:defclass proton-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "proton" :api-version
                        "2020-07-20" :host-prefix "proton" :signing-name
                        "proton" :global-host common-lisp:nil :target-prefix
                        "AwsProton20200720" :json-version "1.0"))
 (common-lisp:export 'proton-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass accept-environment-account-connection-input
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-environment-account-connection-input-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-environment-account-connection-input
                    'make-accept-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         (common-lisp:error
                          ":environmentaccountconnection is required")
                         :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-environment-account-connection-output
                    'make-accept-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass account-settings common-lisp:nil
                       ((pipeline-codebuild-role-arn :initarg
                         :pipeline-codebuild-role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or role-arn-or-empty-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-settings-pipeline-codebuild-role-arn
                         :shape "RoleArnOrEmptyString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pipeline-provisioning-repository :initarg
                         :pipeline-provisioning-repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-branch common-lisp:null)
                         :accessor
                         struct-shape-account-settings-pipeline-provisioning-repository
                         :shape "RepositoryBranch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-service-role-arn :initarg
                         :pipeline-service-role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or role-arn-or-empty-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-settings-pipeline-service-role-arn
                         :shape "RoleArnOrEmptyString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-settings 'make-account-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineCodebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-settings))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype blocker-status () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-component-deployment-input common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         (common-lisp:error ":componentname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-component-deployment-input-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-component-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-component-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-component-deployment-input
                    'make-cancel-component-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-component-deployment-output common-lisp:nil
                       ((component :initarg :component :initform
                         (common-lisp:error ":component is required") :type
                         (common-lisp:or component common-lisp:null) :accessor
                         struct-shape-cancel-component-deployment-output-component
                         :shape "Component" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-component-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-component-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-component-deployment-output
                    'make-cancel-component-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-component-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-environment-deployment-input common-lisp:nil
                       ((environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-environment-deployment-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-environment-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-environment-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-environment-deployment-input
                    'make-cancel-environment-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-environment-deployment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-cancel-environment-deployment-output-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-environment-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-environment-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-environment-deployment-output
                    'make-cancel-environment-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-environment-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-service-instance-deployment-input common-lisp:nil
                       ((service-instance-name :initarg :service-instance-name
                         :initform
                         (common-lisp:error ":serviceinstancename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-service-instance-deployment-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-service-instance-deployment-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-service-instance-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-instance-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-service-instance-deployment-input
                    'make-cancel-service-instance-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-service-instance-deployment-output
                       common-lisp:nil
                       ((service-instance :initarg :service-instance :initform
                         (common-lisp:error ":serviceinstance is required")
                         :type
                         (common-lisp:or service-instance common-lisp:null)
                         :accessor
                         struct-shape-cancel-service-instance-deployment-output-service-instance
                         :shape "ServiceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-service-instance-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-instance-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-service-instance-deployment-output
                    'make-cancel-service-instance-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-instance-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-service-pipeline-deployment-input common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-service-pipeline-deployment-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-service-pipeline-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-pipeline-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-service-pipeline-deployment-input
                    'make-cancel-service-pipeline-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-service-pipeline-deployment-output
                       common-lisp:nil
                       ((pipeline :initarg :pipeline :initform
                         (common-lisp:error ":pipeline is required") :type
                         (common-lisp:or service-pipeline common-lisp:null)
                         :accessor
                         struct-shape-cancel-service-pipeline-deployment-output-pipeline
                         :shape "ServicePipeline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-service-pipeline-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-pipeline-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-service-pipeline-deployment-output
                    'make-cancel-service-pipeline-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-pipeline-deployment-output))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compatible-environment-template common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-compatible-environment-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-compatible-environment-template-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatible-environment-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compatible-environment-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compatible-environment-template
                    'make-compatible-environment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compatible-environment-template-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-compatible-environment-template-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-compatible-environment-template-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatible-environment-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compatible-environment-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compatible-environment-template-input
                    'make-compatible-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compatible-environment-template-input-list ()
   '(trivial-types:proper-list compatible-environment-template-input))
 (common-lisp:defun make-compatible-environment-template-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-environment-template-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype compatible-environment-template-list ()
   '(trivial-types:proper-list compatible-environment-template))
 (common-lisp:defun make-compatible-environment-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compatible-environment-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or component-arn common-lisp:null)
                         :accessor struct-shape-component-arn :shape
                         "ComponentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-component-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-component-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-component-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-component-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-client-request-token :initarg
                         :last-client-request-token :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-component-last-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-component-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-component-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-spec :initarg :service-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-component-service-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'component 'make-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-client-request-token))
      (common-lisp:list
       (common-lisp:cons "lastClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component))
   common-lisp:nil))
(common-lisp:deftype component-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-deployment-id-list ()
   '(trivial-types:proper-list deployment-id))
 (common-lisp:defun make-component-deployment-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-deployment-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-state common-lisp:nil
                       ((service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name-or-empty
                                         common-lisp:null)
                         :accessor
                         struct-shape-component-state-service-instance-name
                         :shape "ResourceNameOrEmpty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-or-empty
                                         common-lisp:null)
                         :accessor struct-shape-component-state-service-name
                         :shape "ResourceNameOrEmpty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-spec :initarg :service-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-component-state-service-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-file :initarg :template-file :initform
                         common-lisp:nil :type
                         (common-lisp:or template-file-contents
                                         common-lisp:null)
                         :accessor struct-shape-component-state-template-file
                         :shape "TemplateFileContents" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'component-state 'make-component-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-file))
      (common-lisp:list
       (common-lisp:cons "templateFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or component-arn common-lisp:null)
                         :accessor struct-shape-component-summary-arn :shape
                         "ComponentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-component-summary-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-component-summary-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-component-summary-environment-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-component-summary-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-summary-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-component-summary-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-component-summary-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-component-summary-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-summary-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-component-summary-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-component-summary-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-component-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'component-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'component-summary 'make-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-summary-list ()
   '(trivial-types:proper-list component-summary))
 (common-lisp:defun make-component-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass counts-summary common-lisp:nil
                       ((components :initarg :components :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor struct-shape-counts-summary-components
                         :shape "ResourceCountsSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-templates :initarg :environment-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-counts-summary-environment-templates
                         :shape "ResourceCountsSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environments :initarg :environments :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor struct-shape-counts-summary-environments
                         :shape "ResourceCountsSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pipelines :initarg :pipelines :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor struct-shape-counts-summary-pipelines :shape
                         "ResourceCountsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instances :initarg :service-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-counts-summary-service-instances :shape
                         "ResourceCountsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-templates :initarg :service-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-counts-summary-service-templates :shape
                         "ResourceCountsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-counts-summary
                                         common-lisp:null)
                         :accessor struct-shape-counts-summary-services :shape
                         "ResourceCountsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-counts-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'counts-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'counts-summary 'make-counts-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input counts-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input counts-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-templates))
      (common-lisp:list
       (common-lisp:cons "environmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instances))
      (common-lisp:list
       (common-lisp:cons "serviceInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-templates))
      (common-lisp:list
       (common-lisp:cons "serviceTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input counts-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manifest :initarg :manifest :initform
                         (common-lisp:error ":manifest is required") :type
                         (common-lisp:or template-manifest-contents
                                         common-lisp:null)
                         :accessor struct-shape-create-component-input-manifest
                         :shape "TemplateManifestContents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-component-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-spec :initarg :service-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-service-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-component-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-file :initarg :template-file :initform
                         (common-lisp:error ":templatefile is required") :type
                         (common-lisp:or template-file-contents
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-component-input-template-file
                         :shape "TemplateFileContents" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-component-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-component-input 'make-create-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest))
      (common-lisp:list
       (common-lisp:cons "manifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-file))
      (common-lisp:list
       (common-lisp:cons "templateFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-output common-lisp:nil
                       ((component :initarg :component :initform
                         (common-lisp:error ":component is required") :type
                         (common-lisp:or component common-lisp:null) :accessor
                         struct-shape-create-component-output-component :shape
                         "Component" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-component-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-component-output 'make-create-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-account-connection-input
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-environment-account-connection-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-environment-account-connection-input-codebuild-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-environment-account-connection-input-component-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-environment-account-connection-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (management-account-id :initarg :management-account-id
                         :initform
                         (common-lisp:error ":managementaccountid is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-create-environment-account-connection-input-management-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-environment-account-connection-input-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-environment-account-connection-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-account-connection-input
                    'make-create-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         (common-lisp:error
                          ":environmentaccountconnection is required")
                         :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-account-connection-output
                    'make-create-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-input common-lisp:nil
                       ((codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-environment-input-codebuild-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-environment-input-component-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-account-connection-id :initarg
                         :environment-account-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-environment-account-connection-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-environment-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proton-service-role-arn :initarg
                         :proton-service-role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-environment-input-proton-service-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioning-repository :initarg
                         :provisioning-repository :initform common-lisp:nil
                         :type
                         (common-lisp:or repository-branch-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-provisioning-repository
                         :shape "RepositoryBranchInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-create-environment-input-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-environment-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-environment-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-input 'make-create-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-create-environment-output-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-output
                    'make-create-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-template-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-input-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-environment-template-input-encryption-key
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning :initarg :provisioning :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-input-provisioning
                         :shape "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-environment-template-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-input
                    'make-create-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-template-output common-lisp:nil
                       ((environment-template :initarg :environment-template
                         :initform
                         (common-lisp:error ":environmenttemplate is required")
                         :type
                         (common-lisp:or environment-template common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-output-environment-template
                         :shape "EnvironmentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-output
                    'make-create-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-template-version-input
                       common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or template-version-source-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-input-source
                         :shape "TemplateVersionSourceInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-environment-template-version-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-version-input
                    'make-create-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-environment-template-version-output
                       common-lisp:nil
                       ((environment-template-version :initarg
                         :environment-template-version :initform
                         (common-lisp:error
                          ":environmenttemplateversion is required")
                         :type
                         (common-lisp:or environment-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-environment-template-version-output-environment-template-version
                         :shape "EnvironmentTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-environment-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-environment-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-environment-template-version-output
                    'make-create-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connectionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-repository-input-connection-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-repository-input-encryption-key
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-create-repository-input-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-create-repository-input-provider :shape
                         "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-repository-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-input 'make-create-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-output common-lisp:nil
                       ((repository :initarg :repository :initform
                         (common-lisp:error ":repository is required") :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-create-repository-output-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-repository-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-repository-output 'make-create-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-input common-lisp:nil
                       ((branch-name :initarg :branch-name :initform
                         common-lisp:nil :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-branch-name :shape
                         "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-service-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-connection-arn :initarg
                         :repository-connection-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-service-input-repository-connection-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-id :initarg :repository-id :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-id common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-repository-id :shape
                         "RepositoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-create-service-input-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-service-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-input-template-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-input 'make-create-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-connection-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-instance-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-service-instance-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-instance-input
                    'make-create-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-instance-output common-lisp:nil
                       ((service-instance :initarg :service-instance :initform
                         (common-lisp:error ":serviceinstance is required")
                         :type
                         (common-lisp:or service-instance common-lisp:null)
                         :accessor
                         struct-shape-create-service-instance-output-service-instance
                         :shape "ServiceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-instance-output
                    'make-create-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-output common-lisp:nil
                       ((service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or service common-lisp:null) :accessor
                         struct-shape-create-service-output-service :shape
                         "Service" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-output 'make-create-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-sync-config-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-path :initarg :file-path :initform
                         (common-lisp:error ":filepath is required") :type
                         (common-lisp:or ops-file-path common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-input-file-path
                         :shape "OpsFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-sync-config-input
                    'make-create-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-sync-config-output common-lisp:nil
                       ((service-sync-config :initarg :service-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or service-sync-config common-lisp:null)
                         :accessor
                         struct-shape-create-service-sync-config-output-service-sync-config
                         :shape "ServiceSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-sync-config-output
                    'make-create-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-template-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-input-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-service-template-input-encryption-key
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-provisioning :initarg :pipeline-provisioning
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-input-pipeline-provisioning
                         :shape "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-service-template-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-template-input
                    'make-create-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-template-output common-lisp:nil
                       ((service-template :initarg :service-template :initform
                         (common-lisp:error ":servicetemplate is required")
                         :type
                         (common-lisp:or service-template common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-output-service-template
                         :shape "ServiceTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-template-output
                    'make-create-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-template-version-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatible-environment-templates :initarg
                         :compatible-environment-templates :initform
                         (common-lisp:error
                          ":compatibleenvironmenttemplates is required")
                         :type
                         (common-lisp:or
                          compatible-environment-template-input-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-compatible-environment-templates
                         :shape "CompatibleEnvironmentTemplateInputList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or template-version-source-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-source
                         :shape "TemplateVersionSourceInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-component-sources :initarg
                         :supported-component-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          service-template-supported-component-source-input-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-supported-component-sources
                         :shape
                         "ServiceTemplateSupportedComponentSourceInputList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-service-template-version-input-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-template-version-input
                    'make-create-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-template-version-output common-lisp:nil
                       ((service-template-version :initarg
                         :service-template-version :initform
                         (common-lisp:error
                          ":servicetemplateversion is required")
                         :type
                         (common-lisp:or service-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-service-template-version-output-service-template-version
                         :shape "ServiceTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-service-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-service-template-version-output
                    'make-create-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-sync-config-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subdirectory :initarg :subdirectory :initform
                         common-lisp:nil :type
                         (common-lisp:or subdirectory common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-subdirectory
                         :shape "Subdirectory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-input-template-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-template-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-sync-config-input
                    'make-create-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-template-sync-config-output common-lisp:nil
                       ((template-sync-config :initarg :template-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or template-sync-config common-lisp:null)
                         :accessor
                         struct-shape-create-template-sync-config-output-template-sync-config
                         :shape "TemplateSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-template-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-template-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-template-sync-config-output
                    'make-create-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-component-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-component-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-component-input 'make-delete-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-output common-lisp:nil
                       ((component :initarg :component :initform
                         common-lisp:nil :type
                         (common-lisp:or component common-lisp:null) :accessor
                         struct-shape-delete-component-output-component :shape
                         "Component" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-component-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-component-output 'make-delete-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-delete-deployment-input-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-input 'make-delete-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-deployment-output common-lisp:nil
                       ((deployment :initarg :deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         struct-shape-delete-deployment-output-deployment
                         :shape "Deployment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-deployment-output 'make-delete-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-account-connection-input
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-account-connection-input-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-account-connection-input
                    'make-delete-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-account-connection-output
                    'make-delete-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-environment-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-input 'make-delete-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-output-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-output
                    'make-delete-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-template-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-input
                    'make-delete-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-template-output common-lisp:nil
                       ((environment-template :initarg :environment-template
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-template common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-output-environment-template
                         :shape "EnvironmentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-output
                    'make-delete-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-template-version-input
                       common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-version-input
                    'make-delete-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-environment-template-version-output
                       common-lisp:nil
                       ((environment-template-version :initarg
                         :environment-template-version :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-environment-template-version-output-environment-template-version
                         :shape "EnvironmentTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-environment-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-environment-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-environment-template-version-output
                    'make-delete-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-delete-repository-input-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-delete-repository-input-provider :shape
                         "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-input 'make-delete-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-output common-lisp:nil
                       ((repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-delete-repository-output-repository
                         :shape "Repository" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-repository-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-repository-output 'make-delete-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-service-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-input 'make-delete-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-output common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-delete-service-output-service
                         :shape "Service" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-output 'make-delete-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-sync-config-input common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-service-sync-config-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-sync-config-input
                    'make-delete-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-sync-config-output common-lisp:nil
                       ((service-sync-config :initarg :service-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or service-sync-config common-lisp:null)
                         :accessor
                         struct-shape-delete-service-sync-config-output-service-sync-config
                         :shape "ServiceSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-sync-config-output
                    'make-delete-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-template-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-input
                    'make-delete-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-template-output common-lisp:nil
                       ((service-template :initarg :service-template :initform
                         common-lisp:nil :type
                         (common-lisp:or service-template common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-output-service-template
                         :shape "ServiceTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-output
                    'make-delete-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-template-version-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-version-input
                    'make-delete-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-template-version-output common-lisp:nil
                       ((service-template-version :initarg
                         :service-template-version :initform common-lisp:nil
                         :type
                         (common-lisp:or service-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-service-template-version-output-service-template-version
                         :shape "ServiceTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-service-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-service-template-version-output
                    'make-delete-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-sync-config-input common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-template-sync-config-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-delete-template-sync-config-input-template-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-template-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-sync-config-input
                    'make-delete-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-template-sync-config-output common-lisp:nil
                       ((template-sync-config :initarg :template-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or template-sync-config common-lisp:null)
                         :accessor
                         struct-shape-delete-template-sync-config-output-template-sync-config
                         :shape "TemplateSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-template-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-template-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-template-sync-config-output
                    'make-delete-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or deployment-arn common-lisp:null)
                         :accessor struct-shape-deployment-arn :shape
                         "DeploymentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-completed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-deployment-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-deployment-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-deployment-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-deployment-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-deployment-id :shape
                         "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-state :initarg :initial-state :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-state common-lisp:null)
                         :accessor struct-shape-deployment-initial-state :shape
                         "DeploymentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-deployment-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-deployment-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-deployment-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-deployment-service-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-deployment-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-deployment-target-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-resource-created-at :initarg
                         :target-resource-created-at :initform
                         (common-lisp:error
                          ":targetresourcecreatedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-deployment-target-resource-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-resource-type :initarg :target-resource-type
                         :initform
                         (common-lisp:error ":targetresourcetype is required")
                         :type
                         (common-lisp:or deployment-target-resource-type
                                         common-lisp:null)
                         :accessor struct-shape-deployment-target-resource-type
                         :shape "DeploymentTargetResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-state :initarg :target-state :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-state common-lisp:null)
                         :accessor struct-shape-deployment-target-state :shape
                         "DeploymentState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-state))
      (common-lisp:list
       (common-lisp:cons "initialState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-created-at))
      (common-lisp:list
       (common-lisp:cons "targetResourceCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-type))
      (common-lisp:list
       (common-lisp:cons "targetResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-state))
      (common-lisp:list
       (common-lisp:cons "targetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:deftype deployment-arn () 'common-lisp:string)
(common-lisp:deftype deployment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-state common-lisp:nil
                       ((component :initarg :component :initform
                         common-lisp:nil :type
                         (common-lisp:or component-state common-lisp:null)
                         :accessor struct-shape-deployment-state-component
                         :shape "ComponentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-state common-lisp:null)
                         :accessor struct-shape-deployment-state-environment
                         :shape "EnvironmentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance :initarg :service-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or service-instance-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-state-service-instance :shape
                         "ServiceInstanceState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-pipeline :initarg :service-pipeline :initform
                         common-lisp:nil :type
                         (common-lisp:or service-pipeline-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-state-service-pipeline :shape
                         "ServicePipelineState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-state 'make-deployment-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-pipeline))
      (common-lisp:list
       (common-lisp:cons "servicePipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-state))
   common-lisp:nil))
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or deployment-arn common-lisp:null)
                         :accessor struct-shape-deployment-summary-arn :shape
                         "DeploymentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-summary-completed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-component-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-deployment-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-deployment-summary-id :shape
                         "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-deployment-summary-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-arn :initarg :target-arn :initform
                         (common-lisp:error ":targetarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-deployment-summary-target-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-resource-created-at :initarg
                         :target-resource-created-at :initform
                         (common-lisp:error
                          ":targetresourcecreatedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-target-resource-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-resource-type :initarg :target-resource-type
                         :initform
                         (common-lisp:error ":targetresourcetype is required")
                         :type
                         (common-lisp:or deployment-target-resource-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-deployment-summary-target-resource-type
                         :shape "DeploymentTargetResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-summary 'make-deployment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "targetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-created-at))
      (common-lisp:list
       (common-lisp:cons "targetResourceCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-resource-type))
      (common-lisp:list
       (common-lisp:cons "targetResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-summary-list ()
   '(trivial-types:proper-list deployment-summary))
 (common-lisp:defun make-deployment-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype deployment-target-resource-type () 'common-lisp:string)
(common-lisp:deftype deployment-update-type () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype empty-next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-environment-arn :shape
                         "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-environment-codebuild-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-environment-component-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor struct-shape-environment-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-environment-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-environment-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-account-connection-id :initarg
                         :environment-account-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-environment-account-connection-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-account-id :initarg
                         :environment-account-id :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-environment-account-id :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-environment-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         (common-lisp:error
                          ":lastdeploymentattemptedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         (common-lisp:error
                          ":lastdeploymentsucceededat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-environment-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-environment-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proton-service-role-arn :initarg
                         :proton-service-role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-proton-service-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioning :initarg :provisioning :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor struct-shape-environment-provisioning :shape
                         "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning-repository :initarg
                         :provisioning-repository :initform common-lisp:nil
                         :type
                         (common-lisp:or repository-branch common-lisp:null)
                         :accessor
                         struct-shape-environment-provisioning-repository
                         :shape "RepositoryBranch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-environment-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-major-version :shape
                         "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-minor-version :shape
                         "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-environment-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'environment 'make-environment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-account-connection common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-account-connection-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-arn :shape
                         "EnvironmentAccountConnectionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-environment-account-connection-codebuild-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-environment-account-connection-component-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-account-id :initarg
                         :environment-account-id :initform
                         (common-lisp:error
                          ":environmentaccountid is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-environment-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-id :shape
                         "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (management-account-id :initarg :management-account-id
                         :initform
                         (common-lisp:error ":managementaccountid is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-management-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-at :initarg :requested-at :initform
                         (common-lisp:error ":requestedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-account-connection-requested-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-account-connection-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or environment-account-connection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-status
                         :shape "EnvironmentAccountConnectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-account-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-account-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-account-connection
                    'make-environment-account-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-at))
      (common-lisp:list
       (common-lisp:cons "requestedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection))
   common-lisp:nil))
(common-lisp:deftype environment-account-connection-arn () 'common-lisp:string)
(common-lisp:deftype environment-account-connection-id () 'common-lisp:string)
(common-lisp:deftype environment-account-connection-requester-account-type ()
  'common-lisp:string)
(common-lisp:deftype environment-account-connection-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-account-connection-status-list ()
   '(trivial-types:proper-list environment-account-connection-status))
 (common-lisp:defun make-environment-account-connection-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-account-connection-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-account-connection-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-account-connection-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-arn
                         :shape "EnvironmentAccountConnectionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-account-connection-summary-component-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (environment-account-id :initarg
                         :environment-account-id :initform
                         (common-lisp:error
                          ":environmentaccountid is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-environment-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (management-account-id :initarg :management-account-id
                         :initform
                         (common-lisp:error ":managementaccountid is required")
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-management-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-at :initarg :requested-at :initform
                         (common-lisp:error ":requestedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-account-connection-summary-requested-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-account-connection-summary-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or environment-account-connection-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-account-connection-summary-status
                         :shape "EnvironmentAccountConnectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-account-connection-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-account-connection-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-account-connection-summary
                    'make-environment-account-connection-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'management-account-id))
      (common-lisp:list
       (common-lisp:cons "managementAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-at))
      (common-lisp:list
       (common-lisp:cons "requestedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-account-connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-account-connection-summary-list ()
   '(trivial-types:proper-list environment-account-connection-summary))
 (common-lisp:defun make-environment-account-connection-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-account-connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-state common-lisp:nil
                       ((spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-environment-state-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-state-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-state-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-environment-state-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-state 'make-environment-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass environment-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-arn common-lisp:null)
                         :accessor struct-shape-environment-summary-arn :shape
                         "EnvironmentArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-summary-component-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-environment-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-account-connection-id :initarg
                         :environment-account-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-environment-account-connection-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment-account-id :initarg
                         :environment-account-id :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-environment-account-id
                         :shape "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         (common-lisp:error
                          ":lastdeploymentattemptedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         (common-lisp:error
                          ":lastdeploymentsucceededat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-environment-summary-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proton-service-role-arn :initarg
                         :proton-service-role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-summary-proton-service-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioning :initarg :provisioning :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-provisioning :shape
                         "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-summary-template-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-summary 'make-environment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-summary-list ()
   '(trivial-types:proper-list environment-summary))
 (common-lisp:defun make-environment-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-template common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-template-arn
                                         common-lisp:null)
                         :accessor struct-shape-environment-template-arn :shape
                         "EnvironmentTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-template-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-template-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-environment-template-encryption-key
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-template-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-environment-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning :initarg :provisioning :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-environment-template-provisioning :shape
                         "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-version :initarg :recommended-version
                         :initform common-lisp:nil :type
                         (common-lisp:or full-template-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-recommended-version
                         :shape "FullTemplateVersionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-template 'make-environment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-template))
   common-lisp:nil))
(common-lisp:deftype environment-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-template-filter common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-filter-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-filter-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-template-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-template-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-template-filter
                    'make-environment-template-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-filter-list ()
   '(trivial-types:proper-list environment-template-filter))
 (common-lisp:defun make-environment-template-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-template-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-template-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-arn :shape
                         "EnvironmentTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-template-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioning :initarg :provisioning :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-provisioning
                         :shape "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-version :initarg :recommended-version
                         :initform common-lisp:nil :type
                         (common-lisp:or full-template-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-summary-recommended-version
                         :shape "FullTemplateVersionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-template-summary
                    'make-environment-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning))
      (common-lisp:list
       (common-lisp:cons "provisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-summary-list ()
   '(trivial-types:proper-list environment-template-summary))
 (common-lisp:defun make-environment-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-template-version common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-template-version-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-arn :shape
                         "EnvironmentTemplateVersionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-template-version-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-minor-version :initarg
                         :recommended-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-recommended-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or template-schema common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-schema
                         :shape "TemplateSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-template-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-template-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-template-version
                    'make-environment-template-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version))
   common-lisp:nil))
(common-lisp:deftype environment-template-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass environment-template-version-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or environment-template-version-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-arn
                         :shape "EnvironmentTemplateVersionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-environment-template-version-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-minor-version :initarg
                         :recommended-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-recommended-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-environment-template-version-summary-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-template-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'environment-template-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-template-version-summary
                    'make-environment-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-template-version-summary-list ()
   '(trivial-types:proper-list environment-template-version-summary))
 (common-lisp:defun make-environment-template-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            environment-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype full-template-version-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-account-settings-input common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-input
                    'make-get-account-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-account-settings-output common-lisp:nil
                       ((account-settings :initarg :account-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or account-settings common-lisp:null)
                         :accessor
                         struct-shape-get-account-settings-output-account-settings
                         :shape "AccountSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-account-settings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-account-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-account-settings-output
                    'make-get-account-settings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "accountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-component-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-component-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-component-input 'make-get-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-output common-lisp:nil
                       ((component :initarg :component :initform
                         common-lisp:nil :type
                         (common-lisp:or component common-lisp:null) :accessor
                         struct-shape-get-component-output-component :shape
                         "Component" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-component-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-component-output 'make-get-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-input common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-input-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor struct-shape-get-deployment-input-id :shape
                         "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-deployment-input-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-input 'make-get-deployment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-deployment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-deployment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployment-output common-lisp:nil
                       ((deployment :initarg :deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment common-lisp:null) :accessor
                         struct-shape-get-deployment-output-deployment :shape
                         "Deployment" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-deployment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-deployment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-deployment-output 'make-get-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-account-connection-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-account-connection-input-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-account-connection-input
                    'make-get-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         (common-lisp:error
                          ":environmentaccountconnection is required")
                         :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-account-connection-output
                    'make-get-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-environment-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-input 'make-get-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-get-environment-output-environment :shape
                         "Environment" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-output 'make-get-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-template-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-input
                    'make-get-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-template-output common-lisp:nil
                       ((environment-template :initarg :environment-template
                         :initform
                         (common-lisp:error ":environmenttemplate is required")
                         :type
                         (common-lisp:or environment-template common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-output-environment-template
                         :shape "EnvironmentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-output
                    'make-get-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-template-version-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-version-input
                    'make-get-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-environment-template-version-output common-lisp:nil
                       ((environment-template-version :initarg
                         :environment-template-version :initform
                         (common-lisp:error
                          ":environmenttemplateversion is required")
                         :type
                         (common-lisp:or environment-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-environment-template-version-output-environment-template-version
                         :shape "EnvironmentTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-environment-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-environment-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-environment-template-version-output
                    'make-get-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-get-repository-input-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor struct-shape-get-repository-input-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-repository-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-input 'make-get-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-output common-lisp:nil
                       ((repository :initarg :repository :initform
                         (common-lisp:error ":repository is required") :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         struct-shape-get-repository-output-repository :shape
                         "Repository" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-repository-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-output 'make-get-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-sync-status-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":synctype is required") :type
                         (common-lisp:or sync-type common-lisp:null) :accessor
                         struct-shape-get-repository-sync-status-input-sync-type
                         :shape "SyncType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-sync-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-sync-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-input
                    'make-get-repository-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "syncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-sync-status-output common-lisp:nil
                       ((latest-sync :initarg :latest-sync :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-repository-sync-status-output-latest-sync
                         :shape "RepositorySyncAttempt" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-repository-sync-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-sync-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-repository-sync-status-output
                    'make-get-repository-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resources-summary-input common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resources-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resources-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resources-summary-input
                    'make-get-resources-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resources-summary-output common-lisp:nil
                       ((counts :initarg :counts :initform
                         (common-lisp:error ":counts is required") :type
                         (common-lisp:or counts-summary common-lisp:null)
                         :accessor
                         struct-shape-get-resources-summary-output-counts
                         :shape "CountsSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resources-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resources-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resources-summary-output
                    'make-get-resources-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'counts))
      (common-lisp:list
       (common-lisp:cons "counts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resources-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-service-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-input 'make-get-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-instance-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-service-instance-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-input
                    'make-get-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-instance-output common-lisp:nil
                       ((service-instance :initarg :service-instance :initform
                         (common-lisp:error ":serviceinstance is required")
                         :type
                         (common-lisp:or service-instance common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-output-service-instance
                         :shape "ServiceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-output
                    'make-get-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-instance-sync-status-input common-lisp:nil
                       ((service-instance-name :initarg :service-instance-name
                         :initform
                         (common-lisp:error ":serviceinstancename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-sync-status-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-sync-status-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-instance-sync-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-instance-sync-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-sync-status-input
                    'make-get-service-instance-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-instance-sync-status-output common-lisp:nil
                       ((desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-service-instance-sync-status-output-desired-state
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-successful-sync :initarg
                         :latest-successful-sync :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-sync-status-output-latest-successful-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-sync :initarg :latest-sync :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-instance-sync-status-output-latest-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-instance-sync-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-instance-sync-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-instance-sync-status-output
                    'make-get-service-instance-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-successful-sync))
      (common-lisp:list
       (common-lisp:cons "latestSuccessfulSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-instance-sync-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-output common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or service common-lisp:null)
                         :accessor struct-shape-get-service-output-service
                         :shape "Service" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-output 'make-get-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-sync-blocker-summary-input common-lisp:nil
                       ((service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-sync-blocker-summary-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-sync-blocker-summary-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-sync-blocker-summary-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-sync-blocker-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-blocker-summary-input
                    'make-get-service-sync-blocker-summary-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-sync-blocker-summary-output common-lisp:nil
                       ((service-sync-blocker-summary :initarg
                         :service-sync-blocker-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or service-sync-blocker-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-sync-blocker-summary-output-service-sync-blocker-summary
                         :shape "ServiceSyncBlockerSummary" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-sync-blocker-summary-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-sync-blocker-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-blocker-summary-output
                    'make-get-service-sync-blocker-summary-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-sync-blocker-summary))
      (common-lisp:list
       (common-lisp:cons "serviceSyncBlockerSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-blocker-summary-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-sync-config-input common-lisp:nil
                       ((service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-sync-config-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-config-input
                    'make-get-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-sync-config-output common-lisp:nil
                       ((service-sync-config :initarg :service-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or service-sync-config common-lisp:null)
                         :accessor
                         struct-shape-get-service-sync-config-output-service-sync-config
                         :shape "ServiceSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-sync-config-output
                    'make-get-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-template-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-get-service-template-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-template-input
                    'make-get-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-template-output common-lisp:nil
                       ((service-template :initarg :service-template :initform
                         (common-lisp:error ":servicetemplate is required")
                         :type
                         (common-lisp:or service-template common-lisp:null)
                         :accessor
                         struct-shape-get-service-template-output-service-template
                         :shape "ServiceTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-template-output
                    'make-get-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-template-version-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-service-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-template-version-input
                    'make-get-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-template-version-output common-lisp:nil
                       ((service-template-version :initarg
                         :service-template-version :initform
                         (common-lisp:error
                          ":servicetemplateversion is required")
                         :type
                         (common-lisp:or service-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-service-template-version-output-service-template-version
                         :shape "ServiceTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-service-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-service-template-version-output
                    'make-get-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-sync-config-input common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-config-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-config-input-template-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-config-input
                    'make-get-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-sync-config-output common-lisp:nil
                       ((template-sync-config :initarg :template-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or template-sync-config common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-config-output-template-sync-config
                         :shape "TemplateSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-config-output
                    'make-get-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-sync-status-input common-lisp:nil
                       ((template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-status-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-status-input-template-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-version :initarg :template-version :initform
                         (common-lisp:error ":templateversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-status-input-template-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-sync-status-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-sync-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-status-input
                    'make-get-template-sync-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-version))
      (common-lisp:list
       (common-lisp:cons "templateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-sync-status-output common-lisp:nil
                       ((desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or revision common-lisp:null) :accessor
                         struct-shape-get-template-sync-status-output-desired-state
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-successful-sync :initarg
                         :latest-successful-sync :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-status-output-latest-successful-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-sync :initarg :latest-sync :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-sync-attempt
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-template-sync-status-output-latest-sync
                         :shape "ResourceSyncAttempt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-template-sync-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-template-sync-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-template-sync-status-output
                    'make-get-template-sync-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "desiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-successful-sync))
      (common-lisp:list
       (common-lisp:cons "latestSuccessfulSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sync))
      (common-lisp:list
       (common-lisp:cons "latestSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-sync-status-output))
   common-lisp:nil))
(common-lisp:deftype git-branch-name () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype latest-sync-blockers ()
   '(trivial-types:proper-list sync-blocker))
 (common-lisp:defun make-latest-sync-blockers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-component-outputs-input common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         (common-lisp:error ":componentname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-component-outputs-input-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-list-component-outputs-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-component-outputs-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-outputs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-component-outputs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-outputs-input
                    'make-list-component-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-outputs-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-component-outputs-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or outputs-list common-lisp:null)
                         :accessor
                         struct-shape-list-component-outputs-output-outputs
                         :shape "OutputsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-outputs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-outputs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-outputs-output
                    'make-list-component-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-provisioned-resources-input
                       common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         (common-lisp:error ":componentname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-component-provisioned-resources-input-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-component-provisioned-resources-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-provisioned-resources-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-provisioned-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-provisioned-resources-input
                    'make-list-component-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-provisioned-resources-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-component-provisioned-resources-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform
                         (common-lisp:error
                          ":provisionedresources is required")
                         :type
                         (common-lisp:or provisioned-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-component-provisioned-resources-output-provisioned-resources
                         :shape "ProvisionedResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-component-provisioned-resources-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-provisioned-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-component-provisioned-resources-output
                    'make-list-component-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-input common-lisp:nil
                       ((environment-name :initarg :environment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-components-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-components-input-max-results :shape
                         "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-components-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-components-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-components-input-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-components-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-components-input 'make-list-components-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-output common-lisp:nil
                       ((components :initarg :components :initform
                         (common-lisp:error ":components is required") :type
                         (common-lisp:or component-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-components-output-components :shape
                         "ComponentSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-components-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-components-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-components-output 'make-list-components-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-input common-lisp:nil
                       ((component-name :initarg :component-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-component-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-max-results :shape
                         "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployments-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployments-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployments-input 'make-list-deployments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-deployments-output common-lisp:nil
                       ((deployments :initarg :deployments :initform
                         (common-lisp:error ":deployments is required") :type
                         (common-lisp:or deployment-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-deployments-output-deployments
                         :shape "DeploymentSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-deployments-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-deployments-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-deployments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-deployments-output 'make-list-deployments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-deployments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-account-connections-input
                       common-lisp:nil
                       ((environment-name :initarg :environment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-environment-account-connections-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-account-connections-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-account-connections-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-by :initarg :requested-by :initform
                         (common-lisp:error ":requestedby is required") :type
                         (common-lisp:or
                          environment-account-connection-requester-account-type
                          common-lisp:null)
                         :accessor
                         struct-shape-list-environment-account-connections-input-requested-by
                         :shape
                         "EnvironmentAccountConnectionRequesterAccountType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statuses :initarg :statuses :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          environment-account-connection-status-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-environment-account-connections-input-statuses
                         :shape "EnvironmentAccountConnectionStatusList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-account-connections-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-account-connections-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-account-connections-input
                    'make-list-environment-account-connections-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-by))
      (common-lisp:list
       (common-lisp:cons "requestedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-account-connections-output
                       common-lisp:nil
                       ((environment-account-connections :initarg
                         :environment-account-connections :initform
                         (common-lisp:error
                          ":environmentaccountconnections is required")
                         :type
                         (common-lisp:or
                          environment-account-connection-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-environment-account-connections-output-environment-account-connections
                         :shape "EnvironmentAccountConnectionSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-account-connections-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-account-connections-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-account-connections-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-account-connections-output
                    'make-list-environment-account-connections-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connections))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-account-connections-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-outputs-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-list-environment-outputs-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-environment-outputs-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-outputs-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-outputs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-outputs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-outputs-input
                    'make-list-environment-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-outputs-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-outputs-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or outputs-list common-lisp:null)
                         :accessor
                         struct-shape-list-environment-outputs-output-outputs
                         :shape "OutputsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-outputs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-outputs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-outputs-output
                    'make-list-environment-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-provisioned-resources-input
                       common-lisp:nil
                       ((environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-environment-provisioned-resources-input-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-provisioned-resources-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-provisioned-resources-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-provisioned-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-provisioned-resources-input
                    'make-list-environment-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-provisioned-resources-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-environment-provisioned-resources-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform
                         (common-lisp:error
                          ":provisionedresources is required")
                         :type
                         (common-lisp:or provisioned-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-provisioned-resources-output-provisioned-resources
                         :shape "ProvisionedResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-provisioned-resources-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-provisioned-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-provisioned-resources-output
                    'make-list-environment-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-template-versions-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-template-versions-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-template-versions-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-template-versions-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-environment-template-versions-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-template-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-template-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-template-versions-input
                    'make-list-environment-template-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-template-versions-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-template-versions-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-versions :initarg :template-versions
                         :initform
                         (common-lisp:error ":templateversions is required")
                         :type
                         (common-lisp:or
                          environment-template-version-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-environment-template-versions-output-template-versions
                         :shape "EnvironmentTemplateVersionSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-template-versions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-template-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-template-versions-output
                    'make-list-environment-template-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-versions))
      (common-lisp:list
       (common-lisp:cons "templateVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-template-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-templates-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-environment-templates-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-templates-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-templates-input
                    'make-list-environment-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environment-templates-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environment-templates-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (templates :initarg :templates :initform
                         (common-lisp:error ":templates is required") :type
                         (common-lisp:or environment-template-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environment-templates-output-templates
                         :shape "EnvironmentTemplateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environment-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-environment-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environment-templates-output
                    'make-list-environment-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environment-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-input common-lisp:nil
                       ((environment-templates :initarg :environment-templates
                         :initform common-lisp:nil :type
                         (common-lisp:or environment-template-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-environment-templates
                         :shape "EnvironmentTemplateFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-environments-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environments-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-input 'make-list-environments-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-templates))
      (common-lisp:list
       (common-lisp:cons "environmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-environments-output common-lisp:nil
                       ((environments :initarg :environments :initform
                         (common-lisp:error ":environments is required") :type
                         (common-lisp:or environment-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-environments-output-environments
                         :shape "EnvironmentSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-environments-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-environments-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-environments-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-environments-output 'make-list-environments-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environments))
      (common-lisp:list
       (common-lisp:cons "environments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-environments-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repositories-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-repositories-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-repositories-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repositories-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-repositories-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repositories-input 'make-list-repositories-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repositories-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-repositories-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repositories :initarg :repositories :initform
                         (common-lisp:error ":repositories is required") :type
                         (common-lisp:or repository-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-repositories-output-repositories
                         :shape "RepositorySummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repositories-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-repositories-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repositories-output 'make-list-repositories-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-sync-definitions-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-type :initarg :sync-type :initform
                         (common-lisp:error ":synctype is required") :type
                         (common-lisp:or sync-type common-lisp:null) :accessor
                         struct-shape-list-repository-sync-definitions-input-sync-type
                         :shape "SyncType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-sync-definitions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-sync-definitions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-input
                    'make-list-repository-sync-definitions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "syncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-sync-definitions-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sync-definitions :initarg :sync-definitions :initform
                         (common-lisp:error ":syncdefinitions is required")
                         :type
                         (common-lisp:or repository-sync-definition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-repository-sync-definitions-output-sync-definitions
                         :shape "RepositorySyncDefinitionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-repository-sync-definitions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-sync-definitions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-repository-sync-definitions-output
                    'make-list-repository-sync-definitions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-definitions))
      (common-lisp:list
       (common-lisp:cons "syncDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-sync-definitions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instance-outputs-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform
                         (common-lisp:error ":serviceinstancename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instance-outputs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instance-outputs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-outputs-input
                    'make-list-service-instance-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instance-outputs-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or outputs-list common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-outputs-output-outputs
                         :shape "OutputsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instance-outputs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instance-outputs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-outputs-output
                    'make-list-service-instance-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instance-provisioned-resources-input
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-provisioned-resources-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform
                         (common-lisp:error ":serviceinstancename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-provisioned-resources-input-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-provisioned-resources-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instance-provisioned-resources-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instance-provisioned-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-provisioned-resources-input
                    'make-list-service-instance-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instance-provisioned-resources-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-provisioned-resources-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform
                         (common-lisp:error
                          ":provisionedresources is required")
                         :type
                         (common-lisp:or provisioned-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instance-provisioned-resources-output-provisioned-resources
                         :shape "ProvisionedResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instance-provisioned-resources-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instance-provisioned-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instance-provisioned-resources-output
                    'make-list-service-instance-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instance-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instances-filter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or list-service-instances-filter-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-filter-key :shape
                         "ListServiceInstancesFilterBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or list-service-instances-filter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-filter-value
                         :shape "ListServiceInstancesFilterValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instances-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instances-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-filter
                    'make-list-service-instances-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-filter))
   common-lisp:nil))
(common-lisp:deftype list-service-instances-filter-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype list-service-instances-filter-list ()
   '(trivial-types:proper-list list-service-instances-filter))
 (common-lisp:defun make-list-service-instances-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-service-instances-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-service-instances-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-service-instances-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-service-instances-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-input-filters
                         :shape "ListServiceInstancesFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-instances-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or list-service-instances-sort-by
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-input-sort-by
                         :shape "ListServiceInstancesSortBy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-service-instances-input-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instances-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-service-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-input
                    'make-list-service-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-instances-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-instances-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instances :initarg :service-instances
                         :initform
                         (common-lisp:error ":serviceinstances is required")
                         :type
                         (common-lisp:or service-instance-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-instances-output-service-instances
                         :shape "ServiceInstanceSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-instances-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-instances-output
                    'make-list-service-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instances))
      (common-lisp:list
       (common-lisp:cons "serviceInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-instances-output))
   common-lisp:nil))
(common-lisp:deftype list-service-instances-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-service-pipeline-outputs-input common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-outputs-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-outputs-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-outputs-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-pipeline-outputs-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-pipeline-outputs-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-outputs-input
                    'make-list-service-pipeline-outputs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-pipeline-outputs-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-outputs-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outputs :initarg :outputs :initform
                         (common-lisp:error ":outputs is required") :type
                         (common-lisp:or outputs-list common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-outputs-output-outputs
                         :shape "OutputsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-pipeline-outputs-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-pipeline-outputs-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-outputs-output
                    'make-list-service-pipeline-outputs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-outputs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-pipeline-provisioned-resources-input
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-provisioned-resources-input-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-provisioned-resources-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-pipeline-provisioned-resources-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-pipeline-provisioned-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-provisioned-resources-input
                    'make-list-service-pipeline-provisioned-resources-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-pipeline-provisioned-resources-output
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or empty-next-token common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-provisioned-resources-output-next-token
                         :shape "EmptyNextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provisioned-resources :initarg :provisioned-resources
                         :initform
                         (common-lisp:error
                          ":provisionedresources is required")
                         :type
                         (common-lisp:or provisioned-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-pipeline-provisioned-resources-output-provisioned-resources
                         :shape "ProvisionedResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-pipeline-provisioned-resources-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-pipeline-provisioned-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-pipeline-provisioned-resources-output
                    'make-list-service-pipeline-provisioned-resources-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-resources))
      (common-lisp:list
       (common-lisp:cons "provisionedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-pipeline-provisioned-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-template-versions-input common-lisp:nil
                       ((major-version :initarg :major-version :initform
                         common-lisp:nil :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-template-versions-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-service-template-versions-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-template-versions-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-service-template-versions-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-template-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-template-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-template-versions-input
                    'make-list-service-template-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-template-versions-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-template-versions-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-versions :initarg :template-versions
                         :initform
                         (common-lisp:error ":templateversions is required")
                         :type
                         (common-lisp:or service-template-version-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-template-versions-output-template-versions
                         :shape "ServiceTemplateVersionSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-template-versions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-template-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-template-versions-output
                    'make-list-service-template-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-versions))
      (common-lisp:list
       (common-lisp:cons "templateVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-template-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-templates-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-service-templates-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-templates-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-templates-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-service-templates-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-templates-input
                    'make-list-service-templates-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-templates-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-service-templates-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (templates :initarg :templates :initform
                         (common-lisp:error ":templates is required") :type
                         (common-lisp:or service-template-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-service-templates-output-templates
                         :shape "ServiceTemplateSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-service-templates-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-templates-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-service-templates-output
                    'make-list-service-templates-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-templates-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor struct-shape-list-services-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-services-input-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-input 'make-list-services-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-services-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-services-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-services-output-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (services :initarg :services :initform
                         (common-lisp:error ":services is required") :type
                         (common-lisp:or service-summary-list common-lisp:null)
                         :accessor struct-shape-list-services-output-services
                         :shape "ServiceSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-services-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-services-output 'make-list-services-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-page-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-input-max-results
                         :shape "MaxPageResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype max-page-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notify-resource-deployment-status-change-input
                       common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-notify-resource-deployment-status-change-input-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outputs :initarg :outputs :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          notify-resource-deployment-status-change-input-outputs-list
                          common-lisp:null)
                         :accessor
                         struct-shape-notify-resource-deployment-status-change-input-outputs
                         :shape
                         "NotifyResourceDeploymentStatusChangeInputOutputsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-notify-resource-deployment-status-change-input-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-deployment-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-notify-resource-deployment-status-change-input-status
                         :shape "ResourceDeploymentStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          notify-resource-deployment-status-change-input-status-message-string
                          common-lisp:null)
                         :accessor
                         struct-shape-notify-resource-deployment-status-change-input-status-message
                         :shape
                         "NotifyResourceDeploymentStatusChangeInputStatusMessageString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-resource-deployment-status-change-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-resource-deployment-status-change-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-resource-deployment-status-change-input
                    'make-notify-resource-deployment-status-change-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notify-resource-deployment-status-change-input-outputs-list
                      ()
   '(trivial-types:proper-list output))
 (common-lisp:defun make-notify-resource-deployment-status-change-input-outputs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notify-resource-deployment-status-change-input-status-message-string
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notify-resource-deployment-status-change-output
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notify-resource-deployment-status-change-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notify-resource-deployment-status-change-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notify-resource-deployment-status-change-output
                    'make-notify-resource-deployment-status-change-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notify-resource-deployment-status-change-output))
   common-lisp:nil))
(common-lisp:deftype ops-file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or output-key common-lisp:null) :accessor
                         struct-shape-output-key :shape "OutputKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value-string :initarg :value-string :initform
                         common-lisp:nil :type
                         (common-lisp:or output-value-string common-lisp:null)
                         :accessor struct-shape-output-value-string :shape
                         "OutputValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-string))
      (common-lisp:list
       (common-lisp:cons "valueString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outputs-list () '(trivial-types:proper-list output))
 (common-lisp:defun make-outputs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass provisioned-resource common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or provisioned-resource-identifier
                                         common-lisp:null)
                         :accessor struct-shape-provisioned-resource-identifier
                         :shape "ProvisionedResourceIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or provisioned-resource-name
                                         common-lisp:null)
                         :accessor struct-shape-provisioned-resource-name
                         :shape "ProvisionedResourceName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provisioning-engine :initarg :provisioning-engine
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioned-resource-engine
                                         common-lisp:null)
                         :accessor
                         struct-shape-provisioned-resource-provisioning-engine
                         :shape "ProvisionedResourceEngine" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provisioned-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provisioned-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provisioned-resource 'make-provisioned-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provisioned-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provisioned-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-engine))
      (common-lisp:list
       (common-lisp:cons "provisioningEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provisioned-resource))
   common-lisp:nil))
(common-lisp:deftype provisioned-resource-engine () 'common-lisp:string)
(common-lisp:deftype provisioned-resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioned-resource-list ()
   '(trivial-types:proper-list provisioned-resource))
 (common-lisp:defun make-provisioned-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provisioned-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provisioned-resource-name () 'common-lisp:string)
(common-lisp:deftype provisioning () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-environment-account-connection-input
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-environment-account-connection-input-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-environment-account-connection-input
                    'make-reject-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         (common-lisp:error
                          ":environmentaccountconnection is required")
                         :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-environment-account-connection-output
                    'make-reject-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or repository-arn common-lisp:null)
                         :accessor struct-shape-repository-arn :shape
                         "RepositoryArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connectionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-connection-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-encryption-key :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor struct-shape-repository-provider :shape
                         "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:deftype repository-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-branch common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or repository-arn common-lisp:null)
                         :accessor struct-shape-repository-branch-arn :shape
                         "RepositoryArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-repository-branch-branch :shape
                         "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-branch-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor struct-shape-repository-branch-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-branch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-branch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-branch 'make-repository-branch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-branch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-branch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-branch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-branch-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-repository-branch-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-branch-input-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-repository-branch-input-provider :shape
                         "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-branch-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-branch-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-branch-input 'make-repository-branch-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-branch-input))
   common-lisp:nil))
(common-lisp:deftype repository-id () 'common-lisp:string)
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:deftype repository-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or repository-arn common-lisp:null)
                         :accessor struct-shape-repository-summary-arn :shape
                         "RepositoryArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-arn :initarg :connection-arn :initform
                         (common-lisp:error ":connectionarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-repository-summary-connection-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-repository-summary-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform
                         (common-lisp:error ":provider is required") :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor struct-shape-repository-summary-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-summary 'make-repository-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "connectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-summary-list ()
   '(trivial-types:proper-list repository-summary))
 (common-lisp:defun make-repository-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass repository-sync-attempt common-lisp:nil
                       ((events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or repository-sync-events
                                         common-lisp:null)
                         :accessor struct-shape-repository-sync-attempt-events
                         :shape "RepositorySyncEvents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         (common-lisp:error ":startedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-repository-sync-attempt-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or repository-sync-status
                                         common-lisp:null)
                         :accessor struct-shape-repository-sync-attempt-status
                         :shape "RepositorySyncStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-attempt
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-attempt
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-attempt 'make-repository-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-sync-definition common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-repository-sync-definition-branch :shape
                         "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory :initarg :directory :initform
                         (common-lisp:error ":directory is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-directory
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parent :initarg :parent :initform
                         (common-lisp:error ":parent is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-parent :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-definition-target :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-definition
                    'make-repository-sync-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent))
      (common-lisp:list
       (common-lisp:cons "parent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-definition-list ()
   '(trivial-types:proper-list repository-sync-definition))
 (common-lisp:defun make-repository-sync-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-sync-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass repository-sync-event common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-event-event :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-event-external-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-repository-sync-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-repository-sync-event-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-repository-sync-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'repository-sync-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'repository-sync-event 'make-repository-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-sync-events ()
   '(trivial-types:proper-list repository-sync-event))
 (common-lisp:defun make-repository-sync-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-counts-summary common-lisp:nil
                       ((behind-major :initarg :behind-major :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resource-counts-summary-behind-major
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (behind-minor :initarg :behind-minor :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resource-counts-summary-behind-minor
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed :initarg :failed :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-resource-counts-summary-failed
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform
                         (common-lisp:error ":total is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resource-counts-summary-total :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (up-to-date :initarg :up-to-date :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-resource-counts-summary-up-to-date :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-counts-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-counts-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-counts-summary 'make-resource-counts-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behind-major))
      (common-lisp:list
       (common-lisp:cons "behindMajor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behind-minor))
      (common-lisp:list
       (common-lisp:cons "behindMinor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'up-to-date))
      (common-lisp:list
       (common-lisp:cons "upToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-counts-summary))
   common-lisp:nil))
(common-lisp:deftype resource-deployment-status () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype resource-name-or-empty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-sync-attempt common-lisp:nil
                       ((events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or resource-sync-events common-lisp:null)
                         :accessor struct-shape-resource-sync-attempt-events
                         :shape "ResourceSyncEvents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-revision :initarg :initial-revision :initform
                         (common-lisp:error ":initialrevision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-resource-sync-attempt-initial-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-at :initarg :started-at :initform
                         (common-lisp:error ":startedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-sync-attempt-started-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or resource-sync-status common-lisp:null)
                         :accessor struct-shape-resource-sync-attempt-status
                         :shape "ResourceSyncStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-sync-attempt-target :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-revision :initarg :target-revision :initform
                         (common-lisp:error ":targetrevision is required")
                         :type (common-lisp:or revision common-lisp:null)
                         :accessor
                         struct-shape-resource-sync-attempt-target-revision
                         :shape "Revision" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-sync-attempt
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-sync-attempt
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-sync-attempt 'make-resource-sync-attempt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-revision))
      (common-lisp:list
       (common-lisp:cons "initialRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-revision))
      (common-lisp:list
       (common-lisp:cons "targetRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-sync-attempt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-sync-event common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-sync-event-event :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-sync-event-external-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-sync-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-sync-event-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-sync-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-sync-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-sync-event 'make-resource-sync-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-sync-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-sync-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-sync-events ()
   '(trivial-types:proper-list resource-sync-event))
 (common-lisp:defun make-resource-sync-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-sync-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass revision common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-revision-branch :shape
                         "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (directory :initarg :directory :initform
                         (common-lisp:error ":directory is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-revision-directory :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-revision-repository-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor struct-shape-revision-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sha :initarg :sha :initform
                         (common-lisp:error ":sha is required") :type
                         (common-lisp:or sha common-lisp:null) :accessor
                         struct-shape-revision-sha :shape "SHA" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revision
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revision
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'revision 'make-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha))
      (common-lisp:list
       (common-lisp:cons "sha"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revision))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-arn-or-empty-string () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3object-source common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-s3object-source-bucket :shape "S3Bucket"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-s3object-source-key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3object-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3object-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3object-source 'make-s3object-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object-source))
   common-lisp:nil))
(common-lisp:deftype sha () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-arn common-lisp:null)
                         :accessor struct-shape-service-arn :shape "ServiceArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (branch-name :initarg :branch-name :initform
                         common-lisp:nil :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-service-branch-name :shape
                         "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-service-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-service-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline :initarg :pipeline :initform common-lisp:nil
                         :type
                         (common-lisp:or service-pipeline common-lisp:null)
                         :accessor struct-shape-service-pipeline :shape
                         "ServicePipeline" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-connection-arn :initarg
                         :repository-connection-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-service-repository-connection-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (repository-id :initarg :repository-id :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-id common-lisp:null)
                         :accessor struct-shape-service-repository-id :shape
                         "RepositoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-service-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or service-status common-lisp:null)
                         :accessor struct-shape-service-status :shape
                         "ServiceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor struct-shape-service-status-message :shape
                         "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-template-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "branchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-connection-arn))
      (common-lisp:list
       (common-lisp:cons "repositoryConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-id))
      (common-lisp:list
       (common-lisp:cons "repositoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:deftype service-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-instance common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-instance-arn common-lisp:null)
                         :accessor struct-shape-service-instance-arn :shape
                         "ServiceInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-instance-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-service-instance-deployment-status :shape
                         "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-service-instance-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-instance-environment-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-client-request-token :initarg
                         :last-client-request-token :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-service-instance-last-client-request-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         (common-lisp:error
                          ":lastdeploymentattemptedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-instance-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         (common-lisp:error
                          ":lastdeploymentsucceededat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-instance-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-instance-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-instance-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-service-instance-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-instance-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-instance 'make-service-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-client-request-token))
      (common-lisp:list
       (common-lisp:cons "lastClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-instance))
   common-lisp:nil))
(common-lisp:deftype service-instance-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-instance-state common-lisp:nil
                       ((last-successful-component-deployment-ids :initarg
                         :last-successful-component-deployment-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or component-deployment-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-last-successful-component-deployment-ids
                         :shape "ComponentDeploymentIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-successful-environment-deployment-id :initarg
                         :last-successful-environment-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-last-successful-environment-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-successful-service-pipeline-deployment-id
                         :initarg
                         :last-successful-service-pipeline-deployment-id
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-last-successful-service-pipeline-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-service-instance-state-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-instance-state-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-instance-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-instance-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-instance-state 'make-service-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-component-deployment-ids))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulComponentDeploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-environment-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulEnvironmentDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-service-pipeline-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulServicePipelineDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-instance-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-instance-arn common-lisp:null)
                         :accessor struct-shape-service-instance-summary-arn
                         :shape "ServiceInstanceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-instance-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-deployment-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-name :initarg :environment-name :initform
                         (common-lisp:error ":environmentname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-environment-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         (common-lisp:error
                          ":lastdeploymentattemptedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         (common-lisp:error
                          ":lastdeploymentsucceededat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-instance-summary-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-instance-summary-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-instance-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-instance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-instance-summary 'make-service-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment-name))
      (common-lisp:list
       (common-lisp:cons "environmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-instance-summary-list ()
   '(trivial-types:proper-list service-instance-summary))
 (common-lisp:defun make-service-instance-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-pipeline common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-service-pipeline-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-pipeline-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status
                         :initform
                         (common-lisp:error ":deploymentstatus is required")
                         :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-deployment-status :shape
                         "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-status-message :initarg
                         :deployment-status-message :initform common-lisp:nil
                         :type (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-deployment-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempted-deployment-id :initarg
                         :last-attempted-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-last-attempted-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-attempted-at :initarg
                         :last-deployment-attempted-at :initform
                         (common-lisp:error
                          ":lastdeploymentattemptedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-last-deployment-attempted-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-deployment-succeeded-at :initarg
                         :last-deployment-succeeded-at :initform
                         (common-lisp:error
                          ":lastdeploymentsucceededat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-last-deployment-succeeded-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-succeeded-deployment-id :initarg
                         :last-succeeded-deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-id common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-last-succeeded-deployment-id
                         :shape "DeploymentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-service-pipeline-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-pipeline-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-pipeline
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-pipeline
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-pipeline 'make-service-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "deploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "deploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-attempted-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastAttemptedDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-attempted-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentAttemptedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-succeeded-at))
      (common-lisp:list
       (common-lisp:cons "lastDeploymentSucceededAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-succeeded-deployment-id))
      (common-lisp:list
       (common-lisp:cons "lastSucceededDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-pipeline))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-pipeline-state common-lisp:nil
                       ((spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-service-pipeline-state-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform
                         (common-lisp:error
                          ":templatemajorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-state-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform
                         (common-lisp:error
                          ":templateminorversion is required")
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-state-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-pipeline-state-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-pipeline-state
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-pipeline-state
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-pipeline-state 'make-service-pipeline-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-pipeline-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-pipeline-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-pipeline-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-arn common-lisp:null)
                         :accessor struct-shape-service-summary-arn :shape
                         "ServiceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-service-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-summary-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-summary-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or service-status common-lisp:null)
                         :accessor struct-shape-service-summary-status :shape
                         "ServiceStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor struct-shape-service-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-summary-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-summary 'make-service-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-summary-list ()
   '(trivial-types:proper-list service-summary))
 (common-lisp:defun make-service-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass service-sync-blocker-summary common-lisp:nil
                       ((latest-blockers :initarg :latest-blockers :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-sync-blockers common-lisp:null)
                         :accessor
                         struct-shape-service-sync-blocker-summary-latest-blockers
                         :shape "LatestSyncBlockers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-sync-blocker-summary-service-instance-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-sync-blocker-summary-service-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-sync-blocker-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-sync-blocker-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-sync-blocker-summary
                    'make-service-sync-blocker-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-blockers))
      (common-lisp:list
       (common-lisp:cons "latestBlockers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-sync-blocker-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-sync-config common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-service-sync-config-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-path :initarg :file-path :initform
                         (common-lisp:error ":filepath is required") :type
                         (common-lisp:or ops-file-path common-lisp:null)
                         :accessor struct-shape-service-sync-config-file-path
                         :shape "OpsFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-service-sync-config-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-service-sync-config-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-sync-config-service-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-sync-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-sync-config 'make-service-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-sync-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-template common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-template-arn common-lisp:null)
                         :accessor struct-shape-service-template-arn :shape
                         "ServiceTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-template-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-service-template-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-service-template-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-key :initarg :encryption-key :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-service-template-encryption-key :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-template-last-modified-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-template-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-provisioning :initarg :pipeline-provisioning
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-service-template-pipeline-provisioning
                         :shape "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-version :initarg :recommended-version
                         :initform common-lisp:nil :type
                         (common-lisp:or full-template-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-recommended-version
                         :shape "FullTemplateVersionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-template 'make-service-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-template))
   common-lisp:nil))
(common-lisp:deftype service-template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-template-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-template-arn common-lisp:null)
                         :accessor struct-shape-service-template-summary-arn
                         :shape "ServiceTemplateArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-template-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-service-template-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-service-template-summary-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-template-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-service-template-summary-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-provisioning :initarg :pipeline-provisioning
                         :initform common-lisp:nil :type
                         (common-lisp:or provisioning common-lisp:null)
                         :accessor
                         struct-shape-service-template-summary-pipeline-provisioning
                         :shape "Provisioning" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-version :initarg :recommended-version
                         :initform common-lisp:nil :type
                         (common-lisp:or full-template-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-summary-recommended-version
                         :shape "FullTemplateVersionNumber" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-template-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-template-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-template-summary 'make-service-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-version))
      (common-lisp:list
       (common-lisp:cons "recommendedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-template-summary-list ()
   '(trivial-types:proper-list service-template-summary))
 (common-lisp:defun make-service-template-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype service-template-supported-component-source-input-list ()
   '(trivial-types:proper-list
     service-template-supported-component-source-type))
 (common-lisp:defun make-service-template-supported-component-source-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-supported-component-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-template-supported-component-source-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-template-version common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-template-version-arn
                                         common-lisp:null)
                         :accessor struct-shape-service-template-version-arn
                         :shape "ServiceTemplateVersionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compatible-environment-templates :initarg
                         :compatible-environment-templates :initform
                         (common-lisp:error
                          ":compatibleenvironmenttemplates is required")
                         :type
                         (common-lisp:or compatible-environment-template-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-compatible-environment-templates
                         :shape "CompatibleEnvironmentTemplateList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-template-version-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-minor-version :initarg
                         :recommended-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-recommended-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or template-schema common-lisp:null)
                         :accessor struct-shape-service-template-version-schema
                         :shape "TemplateSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor struct-shape-service-template-version-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-component-sources :initarg
                         :supported-component-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          service-template-supported-component-source-input-list
                          common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-supported-component-sources
                         :shape
                         "ServiceTemplateSupportedComponentSourceInputList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-template-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-template-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-template-version 'make-service-template-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version))
   common-lisp:nil))
(common-lisp:deftype service-template-version-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-template-version-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or service-template-version-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-arn
                         :shape "ServiceTemplateVersionArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-service-template-version-summary-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-at :initarg :last-modified-at :initform
                         (common-lisp:error ":lastmodifiedat is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-last-modified-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-minor-version :initarg
                         :recommended-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-recommended-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-service-template-version-summary-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-template-version-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-template-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-template-version-summary
                    'make-service-template-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "lastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-minor-version))
      (common-lisp:list
       (common-lisp:cons "recommendedMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-template-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-template-version-summary-list ()
   '(trivial-types:proper-list service-template-version-summary))
 (common-lisp:defun make-service-template-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-template-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype spec-contents () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subdirectory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-blocker common-lisp:nil
                       ((contexts :initarg :contexts :initform common-lisp:nil
                         :type
                         (common-lisp:or sync-blocker-contexts
                                         common-lisp:null)
                         :accessor struct-shape-sync-blocker-contexts :shape
                         "SyncBlockerContexts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-blocker-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-reason :initarg :created-reason :initform
                         (common-lisp:error ":createdreason is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sync-blocker-created-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sync-blocker-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolved-at :initarg :resolved-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-sync-blocker-resolved-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resolved-reason :initarg :resolved-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sync-blocker-resolved-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or blocker-status common-lisp:null)
                         :accessor struct-shape-sync-blocker-status :shape
                         "BlockerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or blocker-type common-lisp:null)
                         :accessor struct-shape-sync-blocker-type :shape
                         "BlockerType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-blocker
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-blocker
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sync-blocker 'make-sync-blocker))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contexts))
      (common-lisp:list
       (common-lisp:cons "contexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-reason))
      (common-lisp:list
       (common-lisp:cons "createdReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-at))
      (common-lisp:list
       (common-lisp:cons "resolvedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "resolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-blocker-context common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sync-blocker-context-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sync-blocker-context-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sync-blocker-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sync-blocker-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sync-blocker-context 'make-sync-blocker-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-blocker-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-blocker-contexts ()
   '(trivial-types:proper-list sync-blocker-context))
 (common-lisp:defun make-sync-blocker-contexts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-blocker-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-input-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype template-file-contents () 'common-lisp:string)
(common-lisp:deftype template-manifest-contents () 'common-lisp:string)
(common-lisp:deftype template-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-sync-config common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor struct-shape-template-sync-config-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-template-sync-config-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-template-sync-config-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subdirectory :initarg :subdirectory :initform
                         common-lisp:nil :type
                         (common-lisp:or subdirectory common-lisp:null)
                         :accessor
                         struct-shape-template-sync-config-subdirectory :shape
                         "Subdirectory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-template-sync-config-template-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-template-sync-config-template-type :shape
                         "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-sync-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-sync-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-sync-config 'make-template-sync-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-sync-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-sync-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-sync-config))
   common-lisp:nil))
(common-lisp:deftype template-type () 'common-lisp:string)
(common-lisp:deftype template-version-part () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-version-source-input common-lisp:nil
                       ((s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3object-source common-lisp:null)
                         :accessor
                         struct-shape-template-version-source-input-s3 :shape
                         "S3ObjectSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-version-source-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'template-version-source-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-version-source-input
                    'make-template-version-source-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-version-source-input))
   common-lisp:nil))
(common-lisp:deftype template-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-settings-input common-lisp:nil
                       ((delete-pipeline-provisioning-repository :initarg
                         :delete-pipeline-provisioning-repository :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-account-settings-input-delete-pipeline-provisioning-repository
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pipeline-codebuild-role-arn :initarg
                         :pipeline-codebuild-role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or role-arn-or-empty-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-settings-input-pipeline-codebuild-role-arn
                         :shape "RoleArnOrEmptyString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pipeline-provisioning-repository :initarg
                         :pipeline-provisioning-repository :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-branch-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-settings-input-pipeline-provisioning-repository
                         :shape "RepositoryBranchInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pipeline-service-role-arn :initarg
                         :pipeline-service-role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or role-arn-or-empty-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-account-settings-input-pipeline-service-role-arn
                         :shape "RoleArnOrEmptyString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-settings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-settings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-input
                    'make-update-account-settings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "deletePipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineCodebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "pipelineProvisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "pipelineServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-account-settings-output common-lisp:nil
                       ((account-settings :initarg :account-settings :initform
                         (common-lisp:error ":accountsettings is required")
                         :type
                         (common-lisp:or account-settings common-lisp:null)
                         :accessor
                         struct-shape-update-account-settings-output-account-settings
                         :shape "AccountSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-account-settings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-account-settings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-account-settings-output
                    'make-update-account-settings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-settings))
      (common-lisp:list
       (common-lisp:cons "accountSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-settings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-type :initarg :deployment-type :initform
                         (common-lisp:error ":deploymenttype is required")
                         :type
                         (common-lisp:or component-deployment-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-deployment-type
                         :shape "ComponentDeploymentUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-component-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name-or-empty
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-service-instance-name
                         :shape "ResourceNameOrEmpty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name-or-empty
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-service-name
                         :shape "ResourceNameOrEmpty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-spec :initarg :service-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-service-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-file :initarg :template-file :initform
                         common-lisp:nil :type
                         (common-lisp:or template-file-contents
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-component-input-template-file
                         :shape "TemplateFileContents" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-component-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-component-input 'make-update-component-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-spec))
      (common-lisp:list
       (common-lisp:cons "serviceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-file))
      (common-lisp:list
       (common-lisp:cons "templateFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-output common-lisp:nil
                       ((component :initarg :component :initform
                         (common-lisp:error ":component is required") :type
                         (common-lisp:or component common-lisp:null) :accessor
                         struct-shape-update-component-output-component :shape
                         "Component" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-component-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-component-output 'make-update-component-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-account-connection-input
                       common-lisp:nil
                       ((codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-environment-account-connection-input-codebuild-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-environment-account-connection-input-component-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-account-connection-input-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-environment-account-connection-input-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-account-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-account-connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-account-connection-input
                    'make-update-environment-account-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-account-connection-output
                       common-lisp:nil
                       ((environment-account-connection :initarg
                         :environment-account-connection :initform
                         (common-lisp:error
                          ":environmentaccountconnection is required")
                         :type
                         (common-lisp:or environment-account-connection
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-account-connection-output-environment-account-connection
                         :shape "EnvironmentAccountConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-account-connection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-account-connection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-account-connection-output
                    'make-update-environment-account-connection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-account-connection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-input common-lisp:nil
                       ((codebuild-role-arn :initarg :codebuild-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-environment-input-codebuild-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (component-role-arn :initarg :component-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-update-environment-input-component-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-type :initarg :deployment-type :initform
                         (common-lisp:error ":deploymenttype is required")
                         :type
                         (common-lisp:or deployment-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-deployment-type
                         :shape "DeploymentUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment-account-connection-id :initarg
                         :environment-account-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-account-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-environment-account-connection-id
                         :shape "EnvironmentAccountConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-environment-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (proton-service-role-arn :initarg
                         :proton-service-role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-environment-input-proton-service-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioning-repository :initarg
                         :provisioning-repository :initform common-lisp:nil
                         :type
                         (common-lisp:or repository-branch-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-provisioning-repository
                         :shape "RepositoryBranchInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-update-environment-input-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-input 'make-update-environment-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codebuild-role-arn))
      (common-lisp:list
       (common-lisp:cons "codebuildRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-role-arn))
      (common-lisp:list
       (common-lisp:cons "componentRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-account-connection-id))
      (common-lisp:list
       (common-lisp:cons "environmentAccountConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proton-service-role-arn))
      (common-lisp:list
       (common-lisp:cons "protonServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-repository))
      (common-lisp:list
       (common-lisp:cons "provisioningRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-output common-lisp:nil
                       ((environment :initarg :environment :initform
                         (common-lisp:error ":environment is required") :type
                         (common-lisp:or environment common-lisp:null)
                         :accessor
                         struct-shape-update-environment-output-environment
                         :shape "Environment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-environment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-output
                    'make-update-environment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-template-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-input-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-input
                    'make-update-environment-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-template-output common-lisp:nil
                       ((environment-template :initarg :environment-template
                         :initform
                         (common-lisp:error ":environmenttemplate is required")
                         :type
                         (common-lisp:or environment-template common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-output-environment-template
                         :shape "EnvironmentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-output
                    'make-update-environment-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template))
      (common-lisp:list
       (common-lisp:cons "environmentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-template-version-input
                       common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-input-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-version-input
                    'make-update-environment-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-environment-template-version-output
                       common-lisp:nil
                       ((environment-template-version :initarg
                         :environment-template-version :initform
                         (common-lisp:error
                          ":environmenttemplateversion is required")
                         :type
                         (common-lisp:or environment-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-environment-template-version-output-environment-template-version
                         :shape "EnvironmentTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-environment-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-environment-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-environment-template-version-output
                    'make-update-environment-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-template-version))
      (common-lisp:list
       (common-lisp:cons "environmentTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-environment-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-service-input-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-service-input-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor struct-shape-update-service-input-spec
                         :shape "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-input 'make-update-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-instance-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-type :initarg :deployment-type :initform
                         (common-lisp:error ":deploymenttype is required")
                         :type
                         (common-lisp:or deployment-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-deployment-type
                         :shape "DeploymentUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-instance-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-instance-input
                    'make-update-service-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-instance-output common-lisp:nil
                       ((service-instance :initarg :service-instance :initform
                         (common-lisp:error ":serviceinstance is required")
                         :type
                         (common-lisp:or service-instance common-lisp:null)
                         :accessor
                         struct-shape-update-service-instance-output-service-instance
                         :shape "ServiceInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-instance-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-instance-output
                    'make-update-service-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-instance))
      (common-lisp:list
       (common-lisp:cons "serviceInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-output common-lisp:nil
                       ((service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or service common-lisp:null) :accessor
                         struct-shape-update-service-output-service :shape
                         "Service" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-output 'make-update-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-pipeline-input common-lisp:nil
                       ((deployment-type :initarg :deployment-type :initform
                         (common-lisp:error ":deploymenttype is required")
                         :type
                         (common-lisp:or deployment-update-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-input-deployment-type
                         :shape "DeploymentUpdateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or spec-contents common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-input-spec :shape
                         "SpecContents" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-major-version :initarg
                         :template-major-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-input-template-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-minor-version :initarg
                         :template-minor-version :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-input-template-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-pipeline-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-pipeline-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-pipeline-input
                    'make-update-service-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "deploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-major-version))
      (common-lisp:list
       (common-lisp:cons "templateMajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-minor-version))
      (common-lisp:list
       (common-lisp:cons "templateMinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-pipeline-output common-lisp:nil
                       ((pipeline :initarg :pipeline :initform
                         (common-lisp:error ":pipeline is required") :type
                         (common-lisp:or service-pipeline common-lisp:null)
                         :accessor
                         struct-shape-update-service-pipeline-output-pipeline
                         :shape "ServicePipeline" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-pipeline-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-pipeline-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-pipeline-output
                    'make-update-service-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-pipeline-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-sync-blocker-input common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-service-sync-blocker-input-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolved-reason :initarg :resolved-reason :initform
                         (common-lisp:error ":resolvedreason is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-blocker-input-resolved-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-sync-blocker-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-sync-blocker-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-blocker-input
                    'make-update-service-sync-blocker-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-reason))
      (common-lisp:list
       (common-lisp:cons "resolvedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-sync-blocker-output common-lisp:nil
                       ((service-instance-name :initarg :service-instance-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-blocker-output-service-instance-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-blocker-output-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-sync-blocker :initarg :service-sync-blocker
                         :initform
                         (common-lisp:error ":servicesyncblocker is required")
                         :type (common-lisp:or sync-blocker common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-blocker-output-service-sync-blocker
                         :shape "SyncBlocker" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-sync-blocker-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-sync-blocker-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-blocker-output
                    'make-update-service-sync-blocker-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-instance-name))
      (common-lisp:list
       (common-lisp:cons "serviceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-sync-blocker))
      (common-lisp:list
       (common-lisp:cons "serviceSyncBlocker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-blocker-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-sync-config-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-path :initarg :file-path :initform
                         (common-lisp:error ":filepath is required") :type
                         (common-lisp:or ops-file-path common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-input-file-path
                         :shape "OpsFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-input-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-config-input
                    'make-update-service-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "filePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-sync-config-output common-lisp:nil
                       ((service-sync-config :initarg :service-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or service-sync-config common-lisp:null)
                         :accessor
                         struct-shape-update-service-sync-config-output-service-sync-config
                         :shape "ServiceSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-sync-config-output
                    'make-update-service-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-sync-config))
      (common-lisp:list
       (common-lisp:cons "serviceSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-template-input common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-input-display-name
                         :shape "DisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-input-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-template-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-template-input
                    'make-update-service-template-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-template-output common-lisp:nil
                       ((service-template :initarg :service-template :initform
                         (common-lisp:error ":servicetemplate is required")
                         :type
                         (common-lisp:or service-template common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-output-service-template
                         :shape "ServiceTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-template-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-template-output
                    'make-update-service-template-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-template))
      (common-lisp:list
       (common-lisp:cons "serviceTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-template-version-input common-lisp:nil
                       ((compatible-environment-templates :initarg
                         :compatible-environment-templates :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          compatible-environment-template-input-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-compatible-environment-templates
                         :shape "CompatibleEnvironmentTemplateInputList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (major-version :initarg :major-version :initform
                         (common-lisp:error ":majorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-major-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minor-version :initarg :minor-version :initform
                         (common-lisp:error ":minorversion is required") :type
                         (common-lisp:or template-version-part
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-minor-version
                         :shape "TemplateVersionPart" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or template-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-status
                         :shape "TemplateVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-component-sources :initarg
                         :supported-component-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          service-template-supported-component-source-input-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-supported-component-sources
                         :shape
                         "ServiceTemplateSupportedComponentSourceInputList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-template-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-template-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-template-version-input
                    'make-update-service-template-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-environment-templates))
      (common-lisp:list
       (common-lisp:cons "compatibleEnvironmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "majorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "minorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-component-sources))
      (common-lisp:list
       (common-lisp:cons "supportedComponentSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-template-version-output common-lisp:nil
                       ((service-template-version :initarg
                         :service-template-version :initform
                         (common-lisp:error
                          ":servicetemplateversion is required")
                         :type
                         (common-lisp:or service-template-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-service-template-version-output-service-template-version
                         :shape "ServiceTemplateVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-service-template-version-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-template-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-service-template-version-output
                    'make-update-service-template-version-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-template-version))
      (common-lisp:list
       (common-lisp:cons "serviceTemplateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-template-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-sync-config-input common-lisp:nil
                       ((branch :initarg :branch :initform
                         (common-lisp:error ":branch is required") :type
                         (common-lisp:or git-branch-name common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-branch
                         :shape "GitBranchName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         (common-lisp:error ":repositoryname is required")
                         :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-repository-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-provider :initarg :repository-provider
                         :initform
                         (common-lisp:error ":repositoryprovider is required")
                         :type
                         (common-lisp:or repository-provider common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-repository-provider
                         :shape "RepositoryProvider" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subdirectory :initarg :subdirectory :initform
                         common-lisp:nil :type
                         (common-lisp:or subdirectory common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-subdirectory
                         :shape "Subdirectory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-name :initarg :template-name :initform
                         (common-lisp:error ":templatename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-template-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-type :initarg :template-type :initform
                         (common-lisp:error ":templatetype is required") :type
                         (common-lisp:or template-type common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-input-template-type
                         :shape "TemplateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-sync-config-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-sync-config-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-sync-config-input
                    'make-update-template-sync-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-provider))
      (common-lisp:list
       (common-lisp:cons "repositoryProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subdirectory))
      (common-lisp:list
       (common-lisp:cons "subdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-name))
      (common-lisp:list
       (common-lisp:cons "templateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-type))
      (common-lisp:list
       (common-lisp:cons "templateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-template-sync-config-output common-lisp:nil
                       ((template-sync-config :initarg :template-sync-config
                         :initform common-lisp:nil :type
                         (common-lisp:or template-sync-config common-lisp:null)
                         :accessor
                         struct-shape-update-template-sync-config-output-template-sync-config
                         :shape "TemplateSyncConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-template-sync-config-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-template-sync-config-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-template-sync-config-output
                    'make-update-template-sync-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-sync-config))
      (common-lisp:list
       (common-lisp:cons "templateSyncConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-sync-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (proton-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun accept-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AcceptEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun cancel-component-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name)
   (common-lisp:declare (common-lisp:ignorable component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-component-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelComponentDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-component-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-environment-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name)
   (common-lisp:declare (common-lisp:ignorable environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-environment-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelEnvironmentDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-environment-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-service-instance-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-service-instance-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelServiceInstanceDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-service-instance-deployment))
(common-lisp:progn
 (common-lisp:defun cancel-service-pipeline-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-service-pipeline-deployment-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelServicePipelineDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-service-pipeline-deployment))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description environment-name
                     manifest name service-instance-name service-name
                     service-spec tags template-file)
   (common-lisp:declare
    (common-lisp:ignorable client-token description environment-name manifest
     name service-instance-name service-name service-spec tags template-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn
                     description environment-account-connection-id name
                     proton-service-role-arn provisioning-repository spec tags
                     template-major-version template-minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn description
     environment-account-connection-id name proton-service-role-arn
     provisioning-repository spec tags template-major-version
     template-minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment))
(common-lisp:progn
 (common-lisp:defun create-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token codebuild-role-arn
                     component-role-arn environment-name management-account-id
                     role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token codebuild-role-arn component-role-arn
     environment-name management-account-id role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun create-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name encryption-key
                     name provisioning tags)
   (common-lisp:declare
    (common-lisp:ignorable description display-name encryption-key name
     provisioning tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment-template))
(common-lisp:progn
 (common-lisp:defun create-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description major-version
                     source tags template-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token description major-version source tags
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEnvironmentTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-environment-template-version))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn encryption-key name
                     provider tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-arn encryption-key name provider tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch-name description name
                     repository-connection-arn repository-id spec tags
                     template-major-version template-minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable branch-name description name
     repository-connection-arn repository-id spec tags template-major-version
     template-minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token name service-name spec tags
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token name service-name spec tags
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service-instance))
(common-lisp:progn
 (common-lisp:defun create-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch file-path repository-name
                     repository-provider service-name)
   (common-lisp:declare
    (common-lisp:ignorable branch file-path repository-name repository-provider
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service-sync-config))
(common-lisp:progn
 (common-lisp:defun create-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name encryption-key
                     name pipeline-provisioning tags)
   (common-lisp:declare
    (common-lisp:ignorable description display-name encryption-key name
     pipeline-provisioning tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service-template))
(common-lisp:progn
 (common-lisp:defun create-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token
                     compatible-environment-templates description major-version
                     source supported-component-sources tags template-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token compatible-environment-templates
     description major-version source supported-component-sources tags
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-service-template-version))
(common-lisp:progn
 (common-lisp:defun create-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider subdirectory template-name
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     subdirectory template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTemplateSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-template-sync-config))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-deployment))
(common-lisp:progn
 (common-lisp:defun delete-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment))
(common-lisp:progn
 (common-lisp:defun delete-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun delete-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment-template))
(common-lisp:progn
 (common-lisp:defun delete-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEnvironmentTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-environment-template-version))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider)
   (common-lisp:declare (common-lisp:ignorable name provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service-sync-config))
(common-lisp:progn
 (common-lisp:defun delete-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service-template))
(common-lisp:progn
 (common-lisp:defun delete-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-service-template-version))
(common-lisp:progn
 (common-lisp:defun delete-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type)
   (common-lisp:declare (common-lisp:ignorable template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTemplateSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-template-sync-config))
(common-lisp:progn
 (common-lisp:defun get-account-settings ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'proton-request :method "POST" :path "/"
                                :operation "GetAccountSettings"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-account-settings))
(common-lisp:progn
 (common-lisp:defun get-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-component))
(common-lisp:progn
 (common-lisp:defun get-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name environment-name id
                     service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable component-name environment-name id
     service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-deployment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-deployment))
(common-lisp:progn
 (common-lisp:defun get-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment))
(common-lisp:progn
 (common-lisp:defun get-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun get-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-environment-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-template))
(common-lisp:progn
 (common-lisp:defun get-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEnvironmentTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-environment-template-version))
(common-lisp:progn
 (common-lisp:defun get-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name provider)
   (common-lisp:declare (common-lisp:ignorable name provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepository"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository))
(common-lisp:progn
 (common-lisp:defun get-repository-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider sync-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRepositorySyncStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-repository-sync-status))
(common-lisp:progn
 (common-lisp:defun get-resources-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'proton-request :method "POST" :path "/"
                                :operation "GetResourcesSummary"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-resources-summary))
(common-lisp:progn
 (common-lisp:defun get-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service))
(common-lisp:progn
 (common-lisp:defun get-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name service-name)
   (common-lisp:declare (common-lisp:ignorable name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-instance))
(common-lisp:progn
 (common-lisp:defun get-service-instance-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-instance-sync-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceInstanceSyncStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-instance-sync-status))
(common-lisp:progn
 (common-lisp:defun get-service-sync-blocker-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-sync-blocker-summary-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceSyncBlockerSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-sync-blocker-summary))
(common-lisp:progn
 (common-lisp:defun get-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-sync-config))
(common-lisp:progn
 (common-lisp:defun get-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-template))
(common-lisp:progn
 (common-lisp:defun get-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version minor-version
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version minor-version template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-service-template-version))
(common-lisp:progn
 (common-lisp:defun get-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type)
   (common-lisp:declare (common-lisp:ignorable template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplateSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-template-sync-config))
(common-lisp:progn
 (common-lisp:defun get-template-sync-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-name template-type
                     template-version)
   (common-lisp:declare
    (common-lisp:ignorable template-name template-type template-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-sync-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTemplateSyncStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-template-sync-status))
(common-lisp:progn
 (common-lisp:defun list-component-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name deployment-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable component-name deployment-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-component-outputs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponentOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-component-outputs))
(common-lisp:progn
 (common-lisp:defun list-component-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name next-token)
   (common-lisp:declare (common-lisp:ignorable component-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-component-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponentProvisionedResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-component-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name max-results next-token
                     service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable environment-name max-results next-token
     service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListComponents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name environment-name
                     max-results next-token service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable component-name environment-name max-results
     next-token service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-deployments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDeployments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-deployments))
(common-lisp:progn
 (common-lisp:defun list-environment-account-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name max-results next-token
                     requested-by statuses)
   (common-lisp:declare
    (common-lisp:ignorable environment-name max-results next-token requested-by
     statuses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-account-connections-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentAccountConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-account-connections))
(common-lisp:progn
 (common-lisp:defun list-environment-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id environment-name
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-outputs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-outputs))
(common-lisp:progn
 (common-lisp:defun list-environment-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-name next-token)
   (common-lisp:declare (common-lisp:ignorable environment-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentProvisionedResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-environment-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version max-results next-token
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version max-results next-token template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-environment-template-versions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentTemplateVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-template-versions))
(common-lisp:progn
 (common-lisp:defun list-environment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environment-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironmentTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environment-templates))
(common-lisp:progn
 (common-lisp:defun list-environments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key environment-templates max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable environment-templates max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-environments-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEnvironments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-environments))
(common-lisp:progn
 (common-lisp:defun list-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repositories-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRepositories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-repositories))
(common-lisp:progn
 (common-lisp:defun list-repository-sync-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token repository-name
                     repository-provider sync-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token repository-name repository-provider
     sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repository-sync-definitions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRepositorySyncDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-repository-sync-definitions))
(common-lisp:progn
 (common-lisp:defun list-service-instance-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token
                     service-instance-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token service-instance-name
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-instance-outputs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstanceOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-instance-outputs))
(common-lisp:progn
 (common-lisp:defun list-service-instance-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-instance-name
                     service-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token service-instance-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-instance-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstanceProvisionedResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-instance-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-service-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token
                     service-name sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results next-token service-name sort-by
     sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-instances))
(common-lisp:progn
 (common-lisp:defun list-service-pipeline-outputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id next-token service-name)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id next-token service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-pipeline-outputs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServicePipelineOutputs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-pipeline-outputs))
(common-lisp:progn
 (common-lisp:defun list-service-pipeline-provisioned-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token service-name)
   (common-lisp:declare (common-lisp:ignorable next-token service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-pipeline-provisioned-resources-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServicePipelineProvisionedResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-pipeline-provisioned-resources))
(common-lisp:progn
 (common-lisp:defun list-service-template-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key major-version max-results next-token
                     template-name)
   (common-lisp:declare
    (common-lisp:ignorable major-version max-results next-token template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-template-versions-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceTemplateVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-template-versions))
(common-lisp:progn
 (common-lisp:defun list-service-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-templates-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-service-templates))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun notify-resource-deployment-status-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id outputs resource-arn status
                     status-message)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id outputs resource-arn status
     status-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-notify-resource-deployment-status-change-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "NotifyResourceDeploymentStatusChange"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'notify-resource-deployment-status-change))
(common-lisp:progn
 (common-lisp:defun reject-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RejectEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-account-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-pipeline-provisioning-repository
                     pipeline-codebuild-role-arn
                     pipeline-provisioning-repository
                     pipeline-service-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable delete-pipeline-provisioning-repository
     pipeline-codebuild-role-arn pipeline-provisioning-repository
     pipeline-service-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-account-settings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccountSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-account-settings))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token deployment-type description
                     name service-instance-name service-name service-spec
                     template-file)
   (common-lisp:declare
    (common-lisp:ignorable client-token deployment-type description name
     service-instance-name service-name service-spec template-file))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateComponent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-environment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn
                     deployment-type description
                     environment-account-connection-id name
                     proton-service-role-arn provisioning-repository spec
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn
     deployment-type description environment-account-connection-id name
     proton-service-role-arn provisioning-repository spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-environment-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment))
(common-lisp:progn
 (common-lisp:defun update-environment-account-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key codebuild-role-arn component-role-arn id
                     role-arn)
   (common-lisp:declare
    (common-lisp:ignorable codebuild-role-arn component-role-arn id role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-account-connection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentAccountConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment-account-connection))
(common-lisp:progn
 (common-lisp:defun update-environment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name name)
   (common-lisp:declare (common-lisp:ignorable description display-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-template-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment-template))
(common-lisp:progn
 (common-lisp:defun update-environment-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description major-version minor-version
                     status template-name)
   (common-lisp:declare
    (common-lisp:ignorable description major-version minor-version status
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-environment-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEnvironmentTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-environment-template-version))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name spec)
   (common-lisp:declare (common-lisp:ignorable description name spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-service-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token deployment-type name
                     service-name spec template-major-version
                     template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable client-token deployment-type name service-name spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-instance))
(common-lisp:progn
 (common-lisp:defun update-service-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-type service-name spec
                     template-major-version template-minor-version)
   (common-lisp:declare
    (common-lisp:ignorable deployment-type service-name spec
     template-major-version template-minor-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServicePipeline"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-pipeline))
(common-lisp:progn
 (common-lisp:defun update-service-sync-blocker
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id resolved-reason)
   (common-lisp:declare (common-lisp:ignorable id resolved-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-sync-blocker-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSyncBlocker"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-sync-blocker))
(common-lisp:progn
 (common-lisp:defun update-service-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch file-path repository-name
                     repository-provider service-name)
   (common-lisp:declare
    (common-lisp:ignorable branch file-path repository-name repository-provider
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-sync-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-sync-config))
(common-lisp:progn
 (common-lisp:defun update-service-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name name)
   (common-lisp:declare (common-lisp:ignorable description display-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-template))
(common-lisp:progn
 (common-lisp:defun update-service-template-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compatible-environment-templates
                     description major-version minor-version status
                     supported-component-sources template-name)
   (common-lisp:declare
    (common-lisp:ignorable compatible-environment-templates description
     major-version minor-version status supported-component-sources
     template-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-template-version-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceTemplateVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-service-template-version))
(common-lisp:progn
 (common-lisp:defun update-template-sync-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key branch repository-name
                     repository-provider subdirectory template-name
                     template-type)
   (common-lisp:declare
    (common-lisp:ignorable branch repository-name repository-provider
     subdirectory template-name template-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-sync-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'proton-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTemplateSyncConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-template-sync-config))
