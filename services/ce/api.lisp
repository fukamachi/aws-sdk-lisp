;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ce/api
  (:use)
  (:nicknames #:aws/ce)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ce/api)
(common-lisp:progn
 (common-lisp:define-condition ce-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ce-error))
(common-lisp:progn
 (common-lisp:defclass ce-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "ce" :api-version
                        "2017-10-25" :host-prefix "ce" :signing-name "ce"
                        :global-host common-lisp:nil :target-prefix
                        "AWSInsightsIndexService" :json-version "1.1"))
 (common-lisp:export 'ce-request))
(common-lisp:defvar *error-map*
  '(("BillExpirationException" . bill-expiration-exception)
    ("DataUnavailableException" . data-unavailable-exception)
    ("GenerationExistsException" . generation-exists-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("RequestChangedException" . request-changed-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnknownMonitorException" . unknown-monitor-exception)
    ("UnknownSubscriptionException" . unknown-subscription-exception)
    ("UnresolvableUsageUnitException" . unresolvable-usage-unit-exception)))
(common-lisp:deftype account-scope () 'common-lisp:string)
(common-lisp:deftype amortized-recurring-fee () 'common-lisp:string)
(common-lisp:deftype amortized-upfront-fee () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomalies () '(trivial-types:proper-list anomaly))
 (common-lisp:defun make-anomalies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((anomaly-id :initarg :anomaly-id :initform
                         (common-lisp:error ":anomaly-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-anomaly-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-start-date :initarg :anomaly-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-anomaly-anomaly-start-date
                         :shape "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anomaly-end-date :initarg :anomaly-end-date :initform
                         common-lisp:nil :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-anomaly-anomaly-end-date :shape
                         "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-value :initarg :dimension-value :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-dimension-value :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-causes :initarg :root-causes :initform
                         common-lisp:nil :type
                         (common-lisp:or root-causes common-lisp:null)
                         :accessor struct-shape-anomaly-root-causes :shape
                         "RootCauses" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (anomaly-score :initarg :anomaly-score :initform
                         (common-lisp:error ":anomaly-score is required") :type
                         (common-lisp:or anomaly-score common-lisp:null)
                         :accessor struct-shape-anomaly-anomaly-score :shape
                         "AnomalyScore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform
                         (common-lisp:error ":impact is required") :type
                         (common-lisp:or impact common-lisp:null) :accessor
                         struct-shape-anomaly-impact :shape "Impact" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-monitor-arn :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback :initarg :feedback :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-feedback-type
                                         common-lisp:null)
                         :accessor struct-shape-anomaly-feedback :shape
                         "AnomalyFeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-start-date))
      (common-lisp:list
       (common-lisp:cons "AnomalyStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-end-date))
      (common-lisp:list
       (common-lisp:cons "AnomalyEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-value))
      (common-lisp:list
       (common-lisp:cons "DimensionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-causes))
      (common-lisp:list
       (common-lisp:cons "RootCauses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-score))
      (common-lisp:list
       (common-lisp:cons "AnomalyScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "Impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-date-interval common-lisp:nil
                       ((start-date :initarg :start-date :initform
                         (common-lisp:error ":start-date is required") :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor
                         struct-shape-anomaly-date-interval-start-date :shape
                         "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date :initarg :end-date :initform common-lisp:nil
                         :type (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-anomaly-date-interval-end-date
                         :shape "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-date-interval
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-date-interval
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomaly-date-interval 'make-anomaly-date-interval))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          anomaly-date-interval))
   common-lisp:nil))
(common-lisp:deftype anomaly-feedback-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass anomaly-monitor common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-monitor-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-name :initarg :monitor-name :initform
                         (common-lisp:error ":monitor-name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-monitor-monitor-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-anomaly-monitor-creation-date
                         :shape "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date
                         :initform common-lisp:nil :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor
                         struct-shape-anomaly-monitor-last-updated-date :shape
                         "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-evaluated-date :initarg :last-evaluated-date
                         :initform common-lisp:nil :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor
                         struct-shape-anomaly-monitor-last-evaluated-date
                         :shape "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-type :initarg :monitor-type :initform
                         (common-lisp:error ":monitor-type is required") :type
                         (common-lisp:or monitor-type common-lisp:null)
                         :accessor struct-shape-anomaly-monitor-monitor-type
                         :shape "MonitorType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-dimension :initarg :monitor-dimension
                         :initform common-lisp:nil :type
                         (common-lisp:or monitor-dimension common-lisp:null)
                         :accessor
                         struct-shape-anomaly-monitor-monitor-dimension :shape
                         "MonitorDimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-specification :initarg :monitor-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-anomaly-monitor-monitor-specification
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimensional-value-count :initarg
                         :dimensional-value-count :initform common-lisp:nil
                         :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-anomaly-monitor-dimensional-value-count
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-monitor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-monitor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly-monitor 'make-anomaly-monitor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-evaluated-date))
      (common-lisp:list
       (common-lisp:cons "LastEvaluatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-type))
      (common-lisp:list
       (common-lisp:cons "MonitorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-dimension))
      (common-lisp:list
       (common-lisp:cons "MonitorDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitor-specification))
      (common-lisp:list
       (common-lisp:cons "MonitorSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimensional-value-count))
      (common-lisp:list
       (common-lisp:cons "DimensionalValueCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-monitor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype anomaly-monitors ()
   '(trivial-types:proper-list anomaly-monitor))
 (common-lisp:defun make-anomaly-monitors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-monitor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly-score common-lisp:nil
                       ((max-score :initarg :max-score :initform
                         (common-lisp:error ":max-score is required") :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-anomaly-score-max-score :shape
                         "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-score :initarg :current-score :initform
                         (common-lisp:error ":current-score is required") :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-anomaly-score-current-score
                         :shape "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-score
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-score
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly-score 'make-anomaly-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-score))
      (common-lisp:list
       (common-lisp:cons "MaxScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-score))
      (common-lisp:list
       (common-lisp:cons "CurrentScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-subscription common-lisp:nil
                       ((subscription-arn :initarg :subscription-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-anomaly-subscription-subscription-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-anomaly-subscription-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-arn-list :initarg :monitor-arn-list :initform
                         (common-lisp:error ":monitor-arn-list is required")
                         :type
                         (common-lisp:or monitor-arn-list common-lisp:null)
                         :accessor
                         struct-shape-anomaly-subscription-monitor-arn-list
                         :shape "MonitorArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribers :initarg :subscribers :initform
                         (common-lisp:error ":subscribers is required") :type
                         (common-lisp:or subscribers common-lisp:null)
                         :accessor
                         struct-shape-anomaly-subscription-subscribers :shape
                         "Subscribers" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-non-negative-double
                                         common-lisp:null)
                         :accessor struct-shape-anomaly-subscription-threshold
                         :shape "NullableNonNegativeDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (frequency :initarg :frequency :initform
                         (common-lisp:error ":frequency is required") :type
                         (common-lisp:or anomaly-subscription-frequency
                                         common-lisp:null)
                         :accessor struct-shape-anomaly-subscription-frequency
                         :shape "AnomalySubscriptionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-anomaly-subscription-subscription-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold-expression :initarg :threshold-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-anomaly-subscription-threshold-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-subscription
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomaly-subscription 'make-anomaly-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-expression))
      (common-lisp:list
       (common-lisp:cons "ThresholdExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-subscription))
   common-lisp:nil))
(common-lisp:deftype anomaly-subscription-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-subscriptions ()
   '(trivial-types:proper-list anomaly-subscription))
 (common-lisp:defun make-anomaly-subscriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype approximate-usage-records-per-service ()
   'common-lisp:hash-table)
 (common-lisp:defun make-approximate-usage-records-per-service
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype approximation-dimension () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype attribute-type () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition bill-expiration-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bill-expiration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bill-expiration-exception
                    'bill-expiration-exception-message)))
(common-lisp:deftype context () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cost-allocation-tag common-lisp:nil
                       ((tag-key :initarg :tag-key :initform
                         (common-lisp:error ":tag-key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-cost-allocation-tag-tag-key :shape
                         "TagKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or cost-allocation-tag-type
                                         common-lisp:null)
                         :accessor struct-shape-cost-allocation-tag-type :shape
                         "CostAllocationTagType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or cost-allocation-tag-status
                                         common-lisp:null)
                         :accessor struct-shape-cost-allocation-tag-status
                         :shape "CostAllocationTagStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date
                         :initform common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-cost-allocation-tag-last-updated-date
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-used-date :initarg :last-used-date :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-cost-allocation-tag-last-used-date :shape
                         "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-allocation-tag
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-allocation-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-allocation-tag 'make-cost-allocation-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-allocation-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-key-list ()
   '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-cost-allocation-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-list ()
   '(trivial-types:proper-list cost-allocation-tag))
 (common-lisp:defun make-cost-allocation-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-allocation-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-allocation-tag-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cost-allocation-tag-status-entry common-lisp:nil
                       ((tag-key :initarg :tag-key :initform
                         (common-lisp:error ":tag-key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-cost-allocation-tag-status-entry-tag-key
                         :shape "TagKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or cost-allocation-tag-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-cost-allocation-tag-status-entry-status
                         :shape "CostAllocationTagStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-allocation-tag-status-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cost-allocation-tag-status-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-allocation-tag-status-entry
                    'make-cost-allocation-tag-status-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-allocation-tag-status-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-allocation-tag-status-list ()
   '(trivial-types:proper-list cost-allocation-tag-status-entry))
 (common-lisp:defun make-cost-allocation-tag-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-allocation-tag-status-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-allocation-tag-type () 'common-lisp:string)
(common-lisp:deftype cost-allocation-tags-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass cost-category common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform
                         (common-lisp:error ":cost-category-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-cost-category-cost-category-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         (common-lisp:error ":effective-start is required")
                         :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor struct-shape-cost-category-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-end :initarg :effective-end :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor struct-shape-cost-category-effective-end
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or cost-category-name common-lisp:null)
                         :accessor struct-shape-cost-category-name :shape
                         "CostCategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-version :initarg :rule-version :initform
                         (common-lisp:error ":rule-version is required") :type
                         (common-lisp:or cost-category-rule-version
                                         common-lisp:null)
                         :accessor struct-shape-cost-category-rule-version
                         :shape "CostCategoryRuleVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or cost-category-rules-list
                                         common-lisp:null)
                         :accessor struct-shape-cost-category-rules :shape
                         "CostCategoryRulesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (split-charge-rules :initarg :split-charge-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-split-charge-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rules :shape
                         "CostCategorySplitChargeRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (processing-status :initarg :processing-status
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-processing-status-list
                                         common-lisp:null)
                         :accessor struct-shape-cost-category-processing-status
                         :shape "CostCategoryProcessingStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-value common-lisp:null)
                         :accessor struct-shape-cost-category-default-value
                         :shape "CostCategoryValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-category
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cost-category 'make-cost-category))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cost-category-inherited-value-dimension common-lisp:nil
                       ((dimension-name :initarg :dimension-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cost-category-inherited-value-dimension-name
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-inherited-value-dimension-dimension-name
                         :shape "CostCategoryInheritedValueDimensionName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dimension-key :initarg :dimension-key :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cost-category-inherited-value-dimension-dimension-key
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-inherited-value-dimension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cost-category-inherited-value-dimension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-inherited-value-dimension
                    'make-cost-category-inherited-value-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-name))
      (common-lisp:list
       (common-lisp:cons "DimensionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-key))
      (common-lisp:list
       (common-lisp:cons "DimensionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-inherited-value-dimension))
   common-lisp:nil))
(common-lisp:deftype cost-category-inherited-value-dimension-name ()
  'common-lisp:string)
(common-lisp:deftype cost-category-max-results () 'common-lisp:integer)
(common-lisp:deftype cost-category-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-names-list ()
   '(trivial-types:proper-list cost-category-name))
 (common-lisp:defun make-cost-category-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cost-category-processing-status common-lisp:nil
                       ((component :initarg :component :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-status-component
                                         common-lisp:null)
                         :accessor
                         struct-shape-cost-category-processing-status-component
                         :shape "CostCategoryStatusComponent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or cost-category-status common-lisp:null)
                         :accessor
                         struct-shape-cost-category-processing-status-status
                         :shape "CostCategoryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-processing-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cost-category-processing-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-processing-status
                    'make-cost-category-processing-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component))
      (common-lisp:list
       (common-lisp:cons "Component"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-processing-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-processing-status-list ()
   '(trivial-types:proper-list cost-category-processing-status))
 (common-lisp:defun make-cost-category-processing-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-processing-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cost-category-reference common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-cost-category-reference-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or cost-category-name common-lisp:null)
                         :accessor struct-shape-cost-category-reference-name
                         :shape "CostCategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-cost-category-reference-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-end :initarg :effective-end :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-cost-category-reference-effective-end
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-rules :initarg :number-of-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-cost-category-reference-number-of-rules
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing-status :initarg :processing-status
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-processing-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cost-category-reference-processing-status
                         :shape "CostCategoryProcessingStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or cost-category-values-list
                                         common-lisp:null)
                         :accessor struct-shape-cost-category-reference-values
                         :shape "CostCategoryValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-value common-lisp:null)
                         :accessor
                         struct-shape-cost-category-reference-default-value
                         :shape "CostCategoryValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-category-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-reference 'make-cost-category-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-rules))
      (common-lisp:list
       (common-lisp:cons "NumberOfRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-references-list ()
   '(trivial-types:proper-list cost-category-reference))
 (common-lisp:defun make-cost-category-references-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cost-category-rule common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or cost-category-value common-lisp:null)
                         :accessor struct-shape-cost-category-rule-value :shape
                         "CostCategoryValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-cost-category-rule-rule :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inherited-value :initarg :inherited-value :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cost-category-inherited-value-dimension
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-rule-inherited-value :shape
                         "CostCategoryInheritedValueDimension" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or cost-category-rule-type
                                         common-lisp:null)
                         :accessor struct-shape-cost-category-rule-type :shape
                         "CostCategoryRuleType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-category-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-rule 'make-cost-category-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inherited-value))
      (common-lisp:list
       (common-lisp:cons "InheritedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category-rule))
   common-lisp:nil))
(common-lisp:deftype cost-category-rule-type () 'common-lisp:string)
(common-lisp:deftype cost-category-rule-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-rules-list ()
   '(trivial-types:proper-list cost-category-rule))
 (common-lisp:defun make-cost-category-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-category-split-charge-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cost-category-split-charge-rule common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-source
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or
                          cost-category-split-charge-rule-targets-list
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-targets
                         :shape "CostCategorySplitChargeRuleTargetsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (method :initarg :method :initform
                         (common-lisp:error ":method is required") :type
                         (common-lisp:or cost-category-split-charge-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-method
                         :shape "CostCategorySplitChargeMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          cost-category-split-charge-rule-parameters-list
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-parameters
                         :shape "CostCategorySplitChargeRuleParametersList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-split-charge-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cost-category-split-charge-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-split-charge-rule
                    'make-cost-category-split-charge-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cost-category-split-charge-rule-parameter
                       common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or
                          cost-category-split-charge-rule-parameter-type
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-parameter-type
                         :shape "CostCategorySplitChargeRuleParameterType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or
                          cost-category-split-charge-rule-parameter-values-list
                          common-lisp:null)
                         :accessor
                         struct-shape-cost-category-split-charge-rule-parameter-values
                         :shape
                         "CostCategorySplitChargeRuleParameterValuesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-split-charge-rule-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cost-category-split-charge-rule-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-split-charge-rule-parameter
                    'make-cost-category-split-charge-rule-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cost-category-split-charge-rule-parameter))
   common-lisp:nil))
(common-lisp:deftype cost-category-split-charge-rule-parameter-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-parameter-values-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-cost-category-split-charge-rule-parameter-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-parameters-list ()
   '(trivial-types:proper-list cost-category-split-charge-rule-parameter))
 (common-lisp:defun make-cost-category-split-charge-rule-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-split-charge-rule-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rule-targets-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-cost-category-split-charge-rule-targets-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cost-category-split-charge-rules-list ()
   '(trivial-types:proper-list cost-category-split-charge-rule))
 (common-lisp:defun make-cost-category-split-charge-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cost-category-split-charge-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cost-category-status () 'common-lisp:string)
(common-lisp:deftype cost-category-status-component () 'common-lisp:string)
(common-lisp:deftype cost-category-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cost-category-values common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or cost-category-name common-lisp:null)
                         :accessor struct-shape-cost-category-values-key :shape
                         "CostCategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or values common-lisp:null)
                         :accessor struct-shape-cost-category-values-values
                         :shape "Values" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-options :initarg :match-options :initform
                         common-lisp:nil :type
                         (common-lisp:or match-options common-lisp:null)
                         :accessor
                         struct-shape-cost-category-values-match-options :shape
                         "MatchOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cost-category-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cost-category-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cost-category-values 'make-cost-category-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-category-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-category-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-category-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-category-values-list ()
   '(trivial-types:proper-list cost-category-value))
 (common-lisp:defun make-cost-category-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-category-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass coverage common-lisp:nil
                       ((coverage-hours :initarg :coverage-hours :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-hours common-lisp:null)
                         :accessor struct-shape-coverage-coverage-hours :shape
                         "CoverageHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage-normalized-units :initarg
                         :coverage-normalized-units :initform common-lisp:nil
                         :type
                         (common-lisp:or coverage-normalized-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-coverage-normalized-units :shape
                         "CoverageNormalizedUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage-cost :initarg :coverage-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-cost common-lisp:null)
                         :accessor struct-shape-coverage-coverage-cost :shape
                         "CoverageCost" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'coverage 'make-coverage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-hours))
      (common-lisp:list
       (common-lisp:cons "CoverageHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-normalized-units))
      (common-lisp:list
       (common-lisp:cons "CoverageNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-cost))
      (common-lisp:list
       (common-lisp:cons "CoverageCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-by-time common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor struct-shape-coverage-by-time-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-coverage-groups
                                         common-lisp:null)
                         :accessor struct-shape-coverage-by-time-groups :shape
                         "ReservationCoverageGroups" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or coverage common-lisp:null) :accessor
                         struct-shape-coverage-by-time-total :shape "Coverage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-by-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-by-time 'make-coverage-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-cost common-lisp:nil
                       ((on-demand-cost :initarg :on-demand-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or on-demand-cost common-lisp:null)
                         :accessor struct-shape-coverage-cost-on-demand-cost
                         :shape "OnDemandCost" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-cost
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-cost
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'coverage-cost 'make-coverage-cost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-cost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-cost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "OnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-cost))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass coverage-hours common-lisp:nil
                       ((on-demand-hours :initarg :on-demand-hours :initform
                         common-lisp:nil :type
                         (common-lisp:or on-demand-hours common-lisp:null)
                         :accessor struct-shape-coverage-hours-on-demand-hours
                         :shape "OnDemandHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-hours :initarg :reserved-hours :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-hours common-lisp:null)
                         :accessor struct-shape-coverage-hours-reserved-hours
                         :shape "ReservedHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-running-hours :initarg :total-running-hours
                         :initform common-lisp:nil :type
                         (common-lisp:or total-running-hours common-lisp:null)
                         :accessor
                         struct-shape-coverage-hours-total-running-hours :shape
                         "TotalRunningHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage-hours-percentage :initarg
                         :coverage-hours-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or coverage-hours-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-hours-coverage-hours-percentage
                         :shape "CoverageHoursPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-hours
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-hours
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'coverage-hours 'make-coverage-hours))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input coverage-hours))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input coverage-hours))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-hours))
      (common-lisp:list
       (common-lisp:cons "OnDemandHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-hours))
      (common-lisp:list
       (common-lisp:cons "ReservedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-running-hours))
      (common-lisp:list
       (common-lisp:cons "TotalRunningHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-hours-percentage))
      (common-lisp:list
       (common-lisp:cons "CoverageHoursPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input coverage-hours))
   common-lisp:nil))
(common-lisp:deftype coverage-hours-percentage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass coverage-normalized-units common-lisp:nil
                       ((on-demand-normalized-units :initarg
                         :on-demand-normalized-units :initform common-lisp:nil
                         :type
                         (common-lisp:or on-demand-normalized-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-normalized-units-on-demand-normalized-units
                         :shape "OnDemandNormalizedUnits" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reserved-normalized-units :initarg
                         :reserved-normalized-units :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-normalized-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-normalized-units-reserved-normalized-units
                         :shape "ReservedNormalizedUnits" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-running-normalized-units :initarg
                         :total-running-normalized-units :initform
                         common-lisp:nil :type
                         (common-lisp:or total-running-normalized-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-normalized-units-total-running-normalized-units
                         :shape "TotalRunningNormalizedUnits" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (coverage-normalized-units-percentage :initarg
                         :coverage-normalized-units-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or coverage-normalized-units-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-coverage-normalized-units-coverage-normalized-units-percentage
                         :shape "CoverageNormalizedUnitsPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-coverage-normalized-units
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'coverage-normalized-units
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'coverage-normalized-units
                    'make-coverage-normalized-units))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-normalized-units))
      (common-lisp:list
       (common-lisp:cons "OnDemandNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-normalized-units))
      (common-lisp:list
       (common-lisp:cons "ReservedNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-running-normalized-units))
      (common-lisp:list
       (common-lisp:cons "TotalRunningNormalizedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'coverage-normalized-units-percentage))
      (common-lisp:list
       (common-lisp:cons "CoverageNormalizedUnitsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          coverage-normalized-units))
   common-lisp:nil))
(common-lisp:deftype coverage-normalized-units-percentage ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype coverages-by-time ()
   '(trivial-types:proper-list coverage-by-time))
 (common-lisp:defun make-coverages-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coverage-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-monitor-request common-lisp:nil
                       ((anomaly-monitor :initarg :anomaly-monitor :initform
                         (common-lisp:error ":anomaly-monitor is required")
                         :type
                         (common-lisp:or anomaly-monitor common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-monitor-request-anomaly-monitor
                         :shape "AnomalyMonitor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-tags :initarg :resource-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-monitor-request-resource-tags
                         :shape "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-anomaly-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-monitor-request
                    'make-create-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-monitor))
      (common-lisp:list
       (common-lisp:cons "AnomalyMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-monitor-response common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-monitor-response-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-anomaly-monitor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-monitor-response
                    'make-create-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-subscription-request common-lisp:nil
                       ((anomaly-subscription :initarg :anomaly-subscription
                         :initform
                         (common-lisp:error
                          ":anomaly-subscription is required")
                         :type
                         (common-lisp:or anomaly-subscription common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-subscription-request-anomaly-subscription
                         :shape "AnomalySubscription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-tags :initarg :resource-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-subscription-request-resource-tags
                         :shape "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-anomaly-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-subscription-request
                    'make-create-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-subscription))
      (common-lisp:list
       (common-lisp:cons "AnomalySubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-anomaly-subscription-response common-lisp:nil
                       ((subscription-arn :initarg :subscription-arn :initform
                         (common-lisp:error ":subscription-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-anomaly-subscription-response-subscription-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-anomaly-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-anomaly-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-anomaly-subscription-response
                    'make-create-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cost-category-definition-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or cost-category-name common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-name
                         :shape "CostCategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-version :initarg :rule-version :initform
                         (common-lisp:error ":rule-version is required") :type
                         (common-lisp:or cost-category-rule-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-rule-version
                         :shape "CostCategoryRuleVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or cost-category-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-rules
                         :shape "CostCategoryRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-value common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-default-value
                         :shape "CostCategoryValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (split-charge-rules :initarg :split-charge-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-split-charge-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-split-charge-rules
                         :shape "CostCategorySplitChargeRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-tags :initarg :resource-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-request-resource-tags
                         :shape "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cost-category-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cost-category-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cost-category-definition-request
                    'make-create-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-cost-category-definition-response common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-cost-category-definition-response-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-create-cost-category-definition-response-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-cost-category-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-cost-category-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-cost-category-definition-response
                    'make-create-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass current-instance common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-current-instance-resource-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-name :initarg :instance-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-current-instance-instance-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-values-list common-lisp:null)
                         :accessor struct-shape-current-instance-tags :shape
                         "TagValuesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-details :initarg :resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-current-instance-resource-details :shape
                         "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-utilization :initarg :resource-utilization
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-utilization common-lisp:null)
                         :accessor
                         struct-shape-current-instance-resource-utilization
                         :shape "ResourceUtilization" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reservation-covered-hours-in-lookback-period :initarg
                         :reservation-covered-hours-in-lookback-period
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-current-instance-reservation-covered-hours-in-lookback-period
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-plans-covered-hours-in-lookback-period
                         :initarg
                         :savings-plans-covered-hours-in-lookback-period
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-current-instance-savings-plans-covered-hours-in-lookback-period
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-demand-hours-in-lookback-period :initarg
                         :on-demand-hours-in-lookback-period :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-current-instance-on-demand-hours-in-lookback-period
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-running-hours-in-lookback-period :initarg
                         :total-running-hours-in-lookback-period :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-current-instance-total-running-hours-in-lookback-period
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-cost :initarg :monthly-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-current-instance-monthly-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-current-instance-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-current-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'current-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'current-instance 'make-current-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input current-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input current-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "InstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-utilization))
      (common-lisp:list
       (common-lisp:cons "ResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reservation-covered-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "ReservationCoveredHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-covered-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansCoveredHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "OnDemandHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-running-hours-in-lookback-period))
      (common-lisp:list
       (common-lisp:cons "TotalRunningHoursInLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-cost))
      (common-lisp:list
       (common-lisp:cons "MonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input current-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition data-unavailable-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       data-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'data-unavailable-exception
                    'data-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass date-interval common-lisp:nil
                       ((start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-date-interval-start :shape
                         "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end :initarg :end :initform
                         (common-lisp:error ":end is required") :type
                         (common-lisp:or year-month-day common-lisp:null)
                         :accessor struct-shape-date-interval-end :shape
                         "YearMonthDay" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-interval
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-interval
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'date-interval 'make-date-interval))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input date-interval))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input date-interval))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input date-interval))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-monitor-request common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-anomaly-monitor-request-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-anomaly-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-monitor-request
                    'make-delete-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-monitor-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-anomaly-monitor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-monitor-response
                    'make-delete-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-subscription-request common-lisp:nil
                       ((subscription-arn :initarg :subscription-arn :initform
                         (common-lisp:error ":subscription-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-anomaly-subscription-request-subscription-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-anomaly-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-subscription-request
                    'make-delete-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-anomaly-subscription-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-anomaly-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-anomaly-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-anomaly-subscription-response
                    'make-delete-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cost-category-definition-request common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform
                         (common-lisp:error ":cost-category-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-cost-category-definition-request-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cost-category-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cost-category-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cost-category-definition-request
                    'make-delete-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-cost-category-definition-response common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-cost-category-definition-response-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-end :initarg :effective-end :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-delete-cost-category-definition-response-effective-end
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-cost-category-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-cost-category-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-cost-category-definition-response
                    'make-delete-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-end))
      (common-lisp:list
       (common-lisp:cons "EffectiveEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cost-category-definition-request
                       common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform
                         (common-lisp:error ":cost-category-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-cost-category-definition-request-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-on :initarg :effective-on :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-describe-cost-category-definition-request-effective-on
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cost-category-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cost-category-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cost-category-definition-request
                    'make-describe-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-on))
      (common-lisp:list
       (common-lisp:cons "EffectiveOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cost-category-definition-response
                       common-lisp:nil
                       ((cost-category :initarg :cost-category :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category common-lisp:null)
                         :accessor
                         struct-shape-describe-cost-category-definition-response-cost-category
                         :shape "CostCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-cost-category-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cost-category-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-cost-category-definition-response
                    'make-describe-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category))
      (common-lisp:list
       (common-lisp:cons "CostCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:deftype dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dimension-values common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or dimension common-lisp:null) :accessor
                         struct-shape-dimension-values-key :shape "Dimension"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or values common-lisp:null)
                         :accessor struct-shape-dimension-values-values :shape
                         "Values" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-options :initarg :match-options :initform
                         common-lisp:nil :type
                         (common-lisp:or match-options common-lisp:null)
                         :accessor struct-shape-dimension-values-match-options
                         :shape "MatchOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dimension-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dimension-values 'make-dimension-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dimension-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dimension-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dimension-values-with-attributes common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-dimension-values-with-attributes-value
                         :shape "Value" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-dimension-values-with-attributes-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dimension-values-with-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dimension-values-with-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dimension-values-with-attributes
                    'make-dimension-values-with-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dimension-values-with-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dimension-values-with-attributes-list ()
   '(trivial-types:proper-list dimension-values-with-attributes))
 (common-lisp:defun make-dimension-values-with-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dimension-values-with-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disk-resource-utilization common-lisp:nil
                       ((disk-read-ops-per-second :initarg
                         :disk-read-ops-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-disk-resource-utilization-disk-read-ops-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-write-ops-per-second :initarg
                         :disk-write-ops-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-disk-resource-utilization-disk-write-ops-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-read-bytes-per-second :initarg
                         :disk-read-bytes-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-disk-resource-utilization-disk-read-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disk-write-bytes-per-second :initarg
                         :disk-write-bytes-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-disk-resource-utilization-disk-write-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk-resource-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk-resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disk-resource-utilization
                    'make-disk-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-read-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskReadOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-write-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskWriteOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-read-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskReadBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-write-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "DiskWriteBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disk-resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebsresource-utilization common-lisp:nil
                       ((ebs-read-ops-per-second :initarg
                         :ebs-read-ops-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ebsresource-utilization-ebs-read-ops-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-write-ops-per-second :initarg
                         :ebs-write-ops-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ebsresource-utilization-ebs-write-ops-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-read-bytes-per-second :initarg
                         :ebs-read-bytes-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ebsresource-utilization-ebs-read-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-write-bytes-per-second :initarg
                         :ebs-write-bytes-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ebsresource-utilization-ebs-write-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebsresource-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebsresource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebsresource-utilization 'make-ebsresource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-read-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsReadOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-write-ops-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsWriteOpsPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-read-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsReadBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-write-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "EbsWriteBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebsresource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance-details common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2instance-details-family
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-details-instance-type :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2instance-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-details-availability-zone
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2instance-details-platform
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenancy :initarg :tenancy :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2instance-details-tenancy
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2instance-details 'make-ec2instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2resource-details common-lisp:nil
                       ((hourly-on-demand-rate :initarg :hourly-on-demand-rate
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-details-hourly-on-demand-rate
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-details-instance-type :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-platform
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sku :initarg :sku :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-sku :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory :initarg :memory :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-memory
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-performance :initarg :network-performance
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-details-network-performance
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage :initarg :storage :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-storage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vcpu :initarg :vcpu :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-ec2resource-details-vcpu :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2resource-details 'make-ec2resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-on-demand-rate))
      (common-lisp:list
       (common-lisp:cons "HourlyOnDemandRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sku))
      (common-lisp:list
       (common-lisp:cons "Sku"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-performance))
      (common-lisp:list
       (common-lisp:cons "NetworkPerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcpu))
      (common-lisp:list
       (common-lisp:cons "Vcpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2resource-utilization common-lisp:nil
                       ((max-cpu-utilization-percentage :initarg
                         :max-cpu-utilization-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-max-cpu-utilization-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-memory-utilization-percentage :initarg
                         :max-memory-utilization-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-max-memory-utilization-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-storage-utilization-percentage :initarg
                         :max-storage-utilization-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-max-storage-utilization-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebsresource-utilization :initarg
                         :ebsresource-utilization :initform common-lisp:nil
                         :type
                         (common-lisp:or ebsresource-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-ebsresource-utilization
                         :shape "EBSResourceUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (disk-resource-utilization :initarg
                         :disk-resource-utilization :initform common-lisp:nil
                         :type
                         (common-lisp:or disk-resource-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-disk-resource-utilization
                         :shape "DiskResourceUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-resource-utilization :initarg
                         :network-resource-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or network-resource-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2resource-utilization-network-resource-utilization
                         :shape "NetworkResourceUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2resource-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2resource-utilization 'make-ec2resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-cpu-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxCpuUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-memory-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxMemoryUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-storage-utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxStorageUtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebsresource-utilization))
      (common-lisp:list
       (common-lisp:cons "EBSResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disk-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "DiskResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "NetworkResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2specification common-lisp:nil
                       ((offering-class :initarg :offering-class :initform
                         common-lisp:nil :type
                         (common-lisp:or offering-class common-lisp:null)
                         :accessor struct-shape-ec2specification-offering-class
                         :shape "OfferingClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2specification 'make-ec2specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "OfferingClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esinstance-details common-lisp:nil
                       ((instance-class :initarg :instance-class :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-esinstance-details-instance-class :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-size :initarg :instance-size :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-esinstance-details-instance-size :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-esinstance-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-esinstance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-esinstance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-esinstance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'esinstance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'esinstance-details 'make-esinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-class))
      (common-lisp:list
       (common-lisp:cons "InstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-size))
      (common-lisp:list
       (common-lisp:cons "InstanceSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esinstance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasti-cache-instance-details common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-family
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-node-type
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (product-description :initarg :product-description
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-product-description
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-instance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasti-cache-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasti-cache-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-instance-details
                    'make-elasti-cache-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-description))
      (common-lisp:list
       (common-lisp:cons "ProductDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-instance-details))
   common-lisp:nil))
(common-lisp:deftype entity () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype estimated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass expression common-lisp:nil
                       ((or :initarg :or :initform common-lisp:nil :type
                         (common-lisp:or expressions common-lisp:null)
                         :accessor struct-shape-expression-or :shape
                         "Expressions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or expressions common-lisp:null)
                         :accessor struct-shape-expression-and :shape
                         "Expressions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not :initarg :not :initform common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-expression-not :shape "Expression"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dimensions :initarg :dimensions :initform
                         common-lisp:nil :type
                         (common-lisp:or dimension-values common-lisp:null)
                         :accessor struct-shape-expression-dimensions :shape
                         "DimensionValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-values common-lisp:null) :accessor
                         struct-shape-expression-tags :shape "TagValues"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost-categories :initarg :cost-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-values common-lisp:null)
                         :accessor struct-shape-expression-cost-categories
                         :shape "CostCategoryValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'expression 'make-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'or))
      (common-lisp:list
       (common-lisp:cons "Or"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not))
      (common-lisp:list
       (common-lisp:cons "Not"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-categories))
      (common-lisp:list
       (common-lisp:cons "CostCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expressions () '(trivial-types:proper-list expression))
 (common-lisp:defun make-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-reason-codes ()
   '(trivial-types:proper-list finding-reason-code))
 (common-lisp:defun make-finding-reason-codes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-reason-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass forecast-result common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor struct-shape-forecast-result-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mean-value :initarg :mean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-forecast-result-mean-value
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-interval-lower-bound :initarg
                         :prediction-interval-lower-bound :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-forecast-result-prediction-interval-lower-bound
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prediction-interval-upper-bound :initarg
                         :prediction-interval-upper-bound :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-forecast-result-prediction-interval-upper-bound
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-forecast-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'forecast-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'forecast-result 'make-forecast-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forecast-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forecast-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mean-value))
      (common-lisp:list
       (common-lisp:cons "MeanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-lower-bound))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-upper-bound))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalUpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forecast-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype forecast-results-by-time ()
   '(trivial-types:proper-list forecast-result))
 (common-lisp:defun make-forecast-results-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list forecast-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition generation-exists-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       generation-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'generation-exists-exception
                    'generation-exists-exception-message)))
(common-lisp:deftype generation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass generation-summary common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-recommendation-id
                         :shape "RecommendationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-status :initarg :generation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or generation-status common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-generation-status
                         :shape "GenerationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-started-time :initarg
                         :generation-started-time :initform common-lisp:nil
                         :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-generation-started-time
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-completion-time :initarg
                         :generation-completion-time :initform common-lisp:nil
                         :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-generation-completion-time
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-completion-time :initarg
                         :estimated-completion-time :initform common-lisp:nil
                         :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-generation-summary-estimated-completion-time
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generation-summary 'make-generation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "GenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-started-time))
      (common-lisp:list
       (common-lisp:cons "GenerationStartedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-completion-time))
      (common-lisp:list
       (common-lisp:cons "GenerationCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-completion-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generation-summary-list ()
   '(trivial-types:proper-list generation-summary))
 (common-lisp:defun make-generation-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype generic-boolean () 'common-lisp:boolean)
(common-lisp:deftype generic-double () 'common-lisp:double-float)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-anomalies-request common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-anomalies-request-monitor-arn :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-interval :initarg :date-interval :initform
                         (common-lisp:error ":date-interval is required") :type
                         (common-lisp:or anomaly-date-interval
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-anomalies-request-date-interval
                         :shape "AnomalyDateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback :initarg :feedback :initform common-lisp:nil
                         :type
                         (common-lisp:or anomaly-feedback-type
                                         common-lisp:null)
                         :accessor struct-shape-get-anomalies-request-feedback
                         :shape "AnomalyFeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-impact :initarg :total-impact :initform
                         common-lisp:nil :type
                         (common-lisp:or total-impact-filter common-lisp:null)
                         :accessor
                         struct-shape-get-anomalies-request-total-impact :shape
                         "TotalImpactFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomalies-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-anomalies-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomalies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-anomalies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomalies-request 'make-get-anomalies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-interval))
      (common-lisp:list
       (common-lisp:cons "DateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-impact))
      (common-lisp:list
       (common-lisp:cons "TotalImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomalies-response common-lisp:nil
                       ((anomalies :initarg :anomalies :initform
                         (common-lisp:error ":anomalies is required") :type
                         (common-lisp:or anomalies common-lisp:null) :accessor
                         struct-shape-get-anomalies-response-anomalies :shape
                         "Anomalies" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomalies-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomalies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-anomalies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomalies-response 'make-get-anomalies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "Anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomalies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomaly-monitors-request common-lisp:nil
                       ((monitor-arn-list :initarg :monitor-arn-list :initform
                         common-lisp:nil :type
                         (common-lisp:or values common-lisp:null) :accessor
                         struct-shape-get-anomaly-monitors-request-monitor-arn-list
                         :shape "Values" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-monitors-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-anomaly-monitors-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomaly-monitors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-anomaly-monitors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-monitors-request
                    'make-get-anomaly-monitors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomaly-monitors-response common-lisp:nil
                       ((anomaly-monitors :initarg :anomaly-monitors :initform
                         (common-lisp:error ":anomaly-monitors is required")
                         :type
                         (common-lisp:or anomaly-monitors common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-monitors-response-anomaly-monitors
                         :shape "AnomalyMonitors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-monitors-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomaly-monitors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-anomaly-monitors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-monitors-response
                    'make-get-anomaly-monitors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-monitors))
      (common-lisp:list
       (common-lisp:cons "AnomalyMonitors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-monitors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomaly-subscriptions-request common-lisp:nil
                       ((subscription-arn-list :initarg :subscription-arn-list
                         :initform common-lisp:nil :type
                         (common-lisp:or values common-lisp:null) :accessor
                         struct-shape-get-anomaly-subscriptions-request-subscription-arn-list
                         :shape "Values" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-arn :initarg :monitor-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-subscriptions-request-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-subscriptions-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-anomaly-subscriptions-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomaly-subscriptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-anomaly-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-subscriptions-request
                    'make-get-anomaly-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-arn-list))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-anomaly-subscriptions-response common-lisp:nil
                       ((anomaly-subscriptions :initarg :anomaly-subscriptions
                         :initform
                         (common-lisp:error
                          ":anomaly-subscriptions is required")
                         :type
                         (common-lisp:or anomaly-subscriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-subscriptions-response-anomaly-subscriptions
                         :shape "AnomalySubscriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-anomaly-subscriptions-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-anomaly-subscriptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-anomaly-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-anomaly-subscriptions-response
                    'make-get-anomaly-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anomaly-subscriptions))
      (common-lisp:list
       (common-lisp:cons "AnomalySubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-anomaly-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-approximate-usage-records-request common-lisp:nil
                       ((granularity :initarg :granularity :initform
                         (common-lisp:error ":granularity is required") :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (services :initarg :services :initform common-lisp:nil
                         :type (common-lisp:or usage-services common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-request-services
                         :shape "UsageServices" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (approximation-dimension :initarg
                         :approximation-dimension :initform
                         (common-lisp:error
                          ":approximation-dimension is required")
                         :type
                         (common-lisp:or approximation-dimension
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-request-approximation-dimension
                         :shape "ApproximationDimension" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-approximate-usage-records-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-approximate-usage-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-approximate-usage-records-request
                    'make-get-approximate-usage-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approximation-dimension))
      (common-lisp:list
       (common-lisp:cons "ApproximationDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-approximate-usage-records-response common-lisp:nil
                       ((services :initarg :services :initform common-lisp:nil
                         :type
                         (common-lisp:or approximate-usage-records-per-service
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-response-services
                         :shape "ApproximateUsageRecordsPerService" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-records :initarg :total-records :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-response-total-records
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period :initarg :lookback-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-approximate-usage-records-response-lookback-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-approximate-usage-records-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-approximate-usage-records-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-approximate-usage-records-response
                    'make-get-approximate-usage-records-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "Services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-records))
      (common-lisp:list
       (common-lisp:cons "TotalRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookback-period))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-approximate-usage-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-and-usage-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         (common-lisp:error ":granularity is required") :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-filter :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metrics :initarg :metrics :initform
                         (common-lisp:error ":metrics is required") :type
                         (common-lisp:or metric-names common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-metrics :shape
                         "MetricNames" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-group-by
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-and-usage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-and-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-request
                    'make-get-cost-and-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-and-usage-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-definitions :initarg :group-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-response-group-definitions
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-by-time :initarg :results-by-time :initform
                         common-lisp:nil :type
                         (common-lisp:or results-by-time common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-response-results-by-time
                         :shape "ResultsByTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-value-attributes :initarg
                         :dimension-value-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or dimension-values-with-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-response-dimension-value-attributes
                         :shape "DimensionValuesWithAttributesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-and-usage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-and-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-response
                    'make-get-cost-and-usage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-definitions))
      (common-lisp:list
       (common-lisp:cons "GroupDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "ResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-attributes))
      (common-lisp:list
       (common-lisp:cons "DimensionValueAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-and-usage-with-resources-request
                       common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         (common-lisp:error ":granularity is required") :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metric-names common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-metrics
                         :shape "MetricNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-group-by
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-and-usage-with-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cost-and-usage-with-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-with-resources-request
                    'make-get-cost-and-usage-with-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-and-usage-with-resources-response
                       common-lisp:nil
                       ((next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-definitions :initarg :group-definitions
                         :initform common-lisp:nil :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-response-group-definitions
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-by-time :initarg :results-by-time :initform
                         common-lisp:nil :type
                         (common-lisp:or results-by-time common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-response-results-by-time
                         :shape "ResultsByTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension-value-attributes :initarg
                         :dimension-value-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or dimension-values-with-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-and-usage-with-resources-response-dimension-value-attributes
                         :shape "DimensionValuesWithAttributesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-and-usage-with-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-cost-and-usage-with-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-and-usage-with-resources-response
                    'make-get-cost-and-usage-with-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-definitions))
      (common-lisp:list
       (common-lisp:cons "GroupDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "ResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dimension-value-attributes))
      (common-lisp:list
       (common-lisp:cons "DimensionValueAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-and-usage-with-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-categories-request common-lisp:nil
                       ((search-string :initarg :search-string :initform
                         common-lisp:nil :type
                         (common-lisp:or search-string common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-search-string
                         :shape "SearchString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cost-category-name :initarg :cost-category-name
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-name common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-cost-category-name
                         :shape "CostCategoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-filter :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-sort-by
                         :shape "SortDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-categories-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-categories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-categories-request
                    'make-get-cost-categories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-name))
      (common-lisp:list
       (common-lisp:cons "CostCategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-categories-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cost-category-names :initarg :cost-category-names
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-response-cost-category-names
                         :shape "CostCategoryNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-category-values :initarg :cost-category-values
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-values-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-categories-response-cost-category-values
                         :shape "CostCategoryValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (return-size :initarg :return-size :initform
                         (common-lisp:error ":return-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-cost-categories-response-return-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-size :initarg :total-size :initform
                         (common-lisp:error ":total-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-cost-categories-response-total-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-categories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-categories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-categories-response
                    'make-get-cost-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-names))
      (common-lisp:list
       (common-lisp:cons "CostCategoryNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-category-values))
      (common-lisp:list
       (common-lisp:cons "CostCategoryValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-forecast-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric :initarg :metric :initform
                         (common-lisp:error ":metric is required") :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         struct-shape-get-cost-forecast-request-metric :shape
                         "Metric" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         (common-lisp:error ":granularity is required") :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-request-filter :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prediction-interval-level :initarg
                         :prediction-interval-level :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-interval-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-request-prediction-interval-level
                         :shape "PredictionIntervalLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-forecast-request
                    'make-get-cost-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-level))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cost-forecast-response common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-response-total :shape
                         "MetricValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-results-by-time :initarg
                         :forecast-results-by-time :initform common-lisp:nil
                         :type
                         (common-lisp:or forecast-results-by-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-cost-forecast-response-forecast-results-by-time
                         :shape "ForecastResultsByTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-cost-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-cost-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-cost-forecast-response
                    'make-get-cost-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-results-by-time))
      (common-lisp:list
       (common-lisp:cons "ForecastResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-forecast-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dimension-values-request common-lisp:nil
                       ((search-string :initarg :search-string :initform
                         common-lisp:nil :type
                         (common-lisp:or search-string common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-search-string
                         :shape "SearchString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dimension :initarg :dimension :initform
                         (common-lisp:error ":dimension is required") :type
                         (common-lisp:or dimension common-lisp:null) :accessor
                         struct-shape-get-dimension-values-request-dimension
                         :shape "Dimension" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context :initarg :context :initform common-lisp:nil
                         :type (common-lisp:or context common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-context
                         :shape "Context" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-sort-by
                         :shape "SortDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dimension-values-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dimension-values-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dimension-values-request
                    'make-get-dimension-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "Dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dimension-values-response common-lisp:nil
                       ((dimension-values :initarg :dimension-values :initform
                         (common-lisp:error ":dimension-values is required")
                         :type
                         (common-lisp:or dimension-values-with-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-response-dimension-values
                         :shape "DimensionValuesWithAttributesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (return-size :initarg :return-size :initform
                         (common-lisp:error ":return-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-dimension-values-response-return-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-size :initarg :total-size :initform
                         (common-lisp:error ":total-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-dimension-values-response-total-size
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-dimension-values-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dimension-values-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dimension-values-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dimension-values-response
                    'make-get-dimension-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-values))
      (common-lisp:list
       (common-lisp:cons "DimensionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dimension-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-coverage-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-group-by
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         common-lisp:nil :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metric-names common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-metrics
                         :shape "MetricNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definition common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-sort-by
                         :shape "SortDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-coverage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-coverage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-coverage-request
                    'make-get-reservation-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-coverage-response common-lisp:nil
                       ((coverages-by-time :initarg :coverages-by-time
                         :initform
                         (common-lisp:error ":coverages-by-time is required")
                         :type
                         (common-lisp:or coverages-by-time common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-response-coverages-by-time
                         :shape "CoveragesByTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or coverage common-lisp:null) :accessor
                         struct-shape-get-reservation-coverage-response-total
                         :shape "Coverage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-coverage-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-coverage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-coverage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-coverage-response
                    'make-get-reservation-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverages-by-time))
      (common-lisp:list
       (common-lisp:cons "CoveragesByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-purchase-recommendation-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-service
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-account-scope
                         :shape "AccountScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term-in-years :initarg :term-in-years :initform
                         common-lisp:nil :type
                         (common-lisp:or term-in-years common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-term-in-years
                         :shape "TermInYears" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-payment-option
                         :shape "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specification :initarg :service-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or service-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-service-specification
                         :shape "ServiceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-page-size
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-purchase-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-purchase-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-purchase-recommendation-request
                    'make-get-reservation-purchase-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specification))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-purchase-recommendation-response
                       common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          reservation-purchase-recommendation-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-response-metadata
                         :shape "ReservationPurchaseRecommendationMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendations :initarg :recommendations :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-purchase-recommendations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-response-recommendations
                         :shape "ReservationPurchaseRecommendations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-purchase-recommendation-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-purchase-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-purchase-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-purchase-recommendation-response
                    'make-get-reservation-purchase-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "Recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-purchase-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-utilization-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-group-by
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         common-lisp:nil :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definition common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-sort-by
                         :shape "SortDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-utilization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-utilization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-utilization-request
                    'make-get-reservation-utilization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-reservation-utilization-response common-lisp:nil
                       ((utilizations-by-time :initarg :utilizations-by-time
                         :initform
                         (common-lisp:error
                          ":utilizations-by-time is required")
                         :type
                         (common-lisp:or utilizations-by-time common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-response-utilizations-by-time
                         :shape "UtilizationsByTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or reservation-aggregates
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-response-total
                         :shape "ReservationAggregates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-reservation-utilization-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-reservation-utilization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-reservation-utilization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-reservation-utilization-response
                    'make-get-reservation-utilization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilizations-by-time))
      (common-lisp:list
       (common-lisp:cons "UtilizationsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-reservation-utilization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rightsizing-recommendation-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          rightsizing-recommendation-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-request-configuration
                         :shape "RightsizingRecommendationConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-request-service
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-request-page-size
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-rightsizing-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-rightsizing-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-rightsizing-recommendation-request
                    'make-get-rightsizing-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-rightsizing-recommendation-response common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or rightsizing-recommendation-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-response-metadata
                         :shape "RightsizingRecommendationMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or rightsizing-recommendation-summary
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-response-summary
                         :shape "RightsizingRecommendationSummary" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rightsizing-recommendations :initarg
                         :rightsizing-recommendations :initform common-lisp:nil
                         :type
                         (common-lisp:or rightsizing-recommendation-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-response-rightsizing-recommendations
                         :shape "RightsizingRecommendationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          rightsizing-recommendation-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-get-rightsizing-recommendation-response-configuration
                         :shape "RightsizingRecommendationConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-rightsizing-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-rightsizing-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-rightsizing-recommendation-response
                    'make-get-rightsizing-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rightsizing-recommendations))
      (common-lisp:list
       (common-lisp:cons "RightsizingRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rightsizing-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plan-purchase-recommendation-details-request
                       common-lisp:nil
                       ((recommendation-detail-id :initarg
                         :recommendation-detail-id :initform
                         (common-lisp:error
                          ":recommendation-detail-id is required")
                         :type
                         (common-lisp:or recommendation-detail-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plan-purchase-recommendation-details-request-recommendation-detail-id
                         :shape "RecommendationDetailId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plan-purchase-recommendation-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plan-purchase-recommendation-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plan-purchase-recommendation-details-request
                    'make-get-savings-plan-purchase-recommendation-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-savings-plan-purchase-recommendation-details-response common-lisp:nil
  ((recommendation-detail-id :initarg :recommendation-detail-id :initform
    common-lisp:nil :type
    (common-lisp:or recommendation-detail-id common-lisp:null) :accessor
    struct-shape-get-savings-plan-purchase-recommendation-details-response-recommendation-detail-id
    :shape "RecommendationDetailId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (recommendation-detail-data :initarg :recommendation-detail-data :initform
    common-lisp:nil :type
    (common-lisp:or recommendation-detail-data common-lisp:null) :accessor
    struct-shape-get-savings-plan-purchase-recommendation-details-response-recommendation-detail-data
    :shape "RecommendationDetailData" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plan-purchase-recommendation-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plan-purchase-recommendation-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plan-purchase-recommendation-details-response
                    'make-get-savings-plan-purchase-recommendation-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-data))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plan-purchase-recommendation-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-coverage-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type
                         (common-lisp:or group-definitions common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-group-by
                         :shape "GroupDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         common-lisp:nil :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metric-names common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-metrics
                         :shape "MetricNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definition common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-request-sort-by
                         :shape "SortDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-coverage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-coverage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-coverage-request
                    'make-get-savings-plans-coverage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "GroupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-coverage-response common-lisp:nil
                       ((savings-plans-coverages :initarg
                         :savings-plans-coverages :initform
                         (common-lisp:error
                          ":savings-plans-coverages is required")
                         :type
                         (common-lisp:or savings-plans-coverages
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-response-savings-plans-coverages
                         :shape "SavingsPlansCoverages" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-coverage-response-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-coverage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-coverage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-coverage-response
                    'make-get-savings-plans-coverage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-coverages))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansCoverages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-coverage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-purchase-recommendation-request
                       common-lisp:nil
                       ((savings-plans-type :initarg :savings-plans-type
                         :initform
                         (common-lisp:error ":savings-plans-type is required")
                         :type
                         (common-lisp:or supported-savings-plans-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-savings-plans-type
                         :shape "SupportedSavingsPlansType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term-in-years :initarg :term-in-years :initform
                         (common-lisp:error ":term-in-years is required") :type
                         (common-lisp:or term-in-years common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-term-in-years
                         :shape "TermInYears" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         (common-lisp:error ":payment-option is required")
                         :type (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-payment-option
                         :shape "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-account-scope
                         :shape "AccountScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (page-size :initarg :page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-page-size
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform
                         (common-lisp:error
                          ":lookback-period-in-days is required")
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-purchase-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-purchase-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-purchase-recommendation-request
                    'make-get-savings-plans-purchase-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-purchase-recommendation-response
                       common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          savings-plans-purchase-recommendation-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-response-metadata
                         :shape "SavingsPlansPurchaseRecommendationMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (savings-plans-purchase-recommendation :initarg
                         :savings-plans-purchase-recommendation :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-purchase-recommendation
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-response-savings-plans-purchase-recommendation
                         :shape "SavingsPlansPurchaseRecommendation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-purchase-recommendation-response-next-page-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-purchase-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-purchase-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-purchase-recommendation-response
                    'make-get-savings-plans-purchase-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-purchase-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-utilization-details-request
                       common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-data-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-data-type
                         :shape "SavingsPlansDataTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definition common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-request-sort-by
                         :shape "SortDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-utilization-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-utilization-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-details-request
                    'make-get-savings-plans-utilization-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-utilization-details-response
                       common-lisp:nil
                       ((savings-plans-utilization-details :initarg
                         :savings-plans-utilization-details :initform
                         (common-lisp:error
                          ":savings-plans-utilization-details is required")
                         :type
                         (common-lisp:or savings-plans-utilization-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-response-savings-plans-utilization-details
                         :shape "SavingsPlansUtilizationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or savings-plans-utilization-aggregates
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-response-total
                         :shape "SavingsPlansUtilizationAggregates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-response-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-details-response-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-utilization-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-utilization-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-details-response
                    'make-get-savings-plans-utilization-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-utilization-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansUtilizationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-utilization-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         common-lisp:nil :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-request-filter
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definition common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-request-sort-by
                         :shape "SortDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-utilization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-utilization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-request
                    'make-get-savings-plans-utilization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-savings-plans-utilization-response common-lisp:nil
                       ((savings-plans-utilizations-by-time :initarg
                         :savings-plans-utilizations-by-time :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-utilizations-by-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-response-savings-plans-utilizations-by-time
                         :shape "SavingsPlansUtilizationsByTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total :initarg :total :initform
                         (common-lisp:error ":total is required") :type
                         (common-lisp:or savings-plans-utilization-aggregates
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-savings-plans-utilization-response-total
                         :shape "SavingsPlansUtilizationAggregates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-savings-plans-utilization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-savings-plans-utilization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-savings-plans-utilization-response
                    'make-get-savings-plans-utilization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-utilizations-by-time))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansUtilizationsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-savings-plans-utilization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tags-request common-lisp:nil
                       ((search-string :initarg :search-string :initform
                         common-lisp:nil :type
                         (common-lisp:or search-string common-lisp:null)
                         :accessor struct-shape-get-tags-request-search-string
                         :shape "SearchString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor struct-shape-get-tags-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-key :initarg :tag-key :initform common-lisp:nil
                         :type (common-lisp:or tag-key common-lisp:null)
                         :accessor struct-shape-get-tags-request-tag-key :shape
                         "TagKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor struct-shape-get-tags-request-filter :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or sort-definitions common-lisp:null)
                         :accessor struct-shape-get-tags-request-sort-by :shape
                         "SortDefinitions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-get-tags-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-tags-request-next-page-token :shape
                         "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tags-request 'make-get-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-string))
      (common-lisp:list
       (common-lisp:cons "SearchString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tags-response common-lisp:nil
                       ((next-page-token :initarg :next-page-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-get-tags-response-next-page-token :shape
                         "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-get-tags-response-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (return-size :initarg :return-size :initform
                         (common-lisp:error ":return-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-tags-response-return-size :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (total-size :initarg :total-size :initform
                         (common-lisp:error ":total-size is required") :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-tags-response-total-size :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tags-response 'make-get-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-size))
      (common-lisp:list
       (common-lisp:cons "ReturnSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-size))
      (common-lisp:list
       (common-lisp:cons "TotalSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-forecast-request common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-request-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric :initarg :metric :initform
                         (common-lisp:error ":metric is required") :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         struct-shape-get-usage-forecast-request-metric :shape
                         "Metric" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (granularity :initarg :granularity :initform
                         (common-lisp:error ":granularity is required") :type
                         (common-lisp:or granularity common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-request-granularity
                         :shape "Granularity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or expression common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-request-filter :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prediction-interval-level :initarg
                         :prediction-interval-level :initform common-lisp:nil
                         :type
                         (common-lisp:or prediction-interval-level
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-request-prediction-interval-level
                         :shape "PredictionIntervalLevel" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-usage-forecast-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-forecast-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-usage-forecast-request
                    'make-get-usage-forecast-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "Metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'prediction-interval-level))
      (common-lisp:list
       (common-lisp:cons "PredictionIntervalLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-usage-forecast-response common-lisp:nil
                       ((total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or metric-value common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-response-total :shape
                         "MetricValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forecast-results-by-time :initarg
                         :forecast-results-by-time :initform common-lisp:nil
                         :type
                         (common-lisp:or forecast-results-by-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-usage-forecast-response-forecast-results-by-time
                         :shape "ForecastResultsByTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-usage-forecast-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-usage-forecast-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-usage-forecast-response
                    'make-get-usage-forecast-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forecast-results-by-time))
      (common-lisp:list
       (common-lisp:cons "ForecastResultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-forecast-response))
   common-lisp:nil))
(common-lisp:deftype granularity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass group common-lisp:nil
                       ((keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or keys common-lisp:null) :accessor
                         struct-shape-group-keys :shape "Keys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metrics common-lisp:null)
                         :accessor struct-shape-group-metrics :shape "Metrics"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass group-definition common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or group-definition-type
                                         common-lisp:null)
                         :accessor struct-shape-group-definition-type :shape
                         "GroupDefinitionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or group-definition-key common-lisp:null)
                         :accessor struct-shape-group-definition-key :shape
                         "GroupDefinitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-group-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'group-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'group-definition 'make-group-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-definition))
   common-lisp:nil))
(common-lisp:deftype group-definition-key () 'common-lisp:string)
(common-lisp:deftype group-definition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype group-definitions ()
   '(trivial-types:proper-list group-definition))
 (common-lisp:defun make-group-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun make-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass impact common-lisp:nil
                       ((max-impact :initarg :max-impact :initform
                         (common-lisp:error ":max-impact is required") :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-impact-max-impact :shape
                         "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-impact :initarg :total-impact :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-impact-total-impact :shape
                         "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-actual-spend :initarg :total-actual-spend
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-non-negative-double
                                         common-lisp:null)
                         :accessor struct-shape-impact-total-actual-spend
                         :shape "NullableNonNegativeDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-expected-spend :initarg :total-expected-spend
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-non-negative-double
                                         common-lisp:null)
                         :accessor struct-shape-impact-total-expected-spend
                         :shape "NullableNonNegativeDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-impact-percentage :initarg
                         :total-impact-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-non-negative-double
                                         common-lisp:null)
                         :accessor struct-shape-impact-total-impact-percentage
                         :shape "NullableNonNegativeDouble" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-impact
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'impact
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'impact 'make-impact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input impact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input impact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-impact))
      (common-lisp:list
       (common-lisp:cons "MaxImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-impact))
      (common-lisp:list
       (common-lisp:cons "TotalImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-spend))
      (common-lisp:list
       (common-lisp:cons "TotalActualSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-expected-spend))
      (common-lisp:list
       (common-lisp:cons "TotalExpectedSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-impact-percentage))
      (common-lisp:list
       (common-lisp:cons "TotalImpactPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input impact))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-details common-lisp:nil
                       ((ec2instance-details :initarg :ec2instance-details
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2instance-details common-lisp:null)
                         :accessor
                         struct-shape-instance-details-ec2instance-details
                         :shape "EC2InstanceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rdsinstance-details :initarg :rdsinstance-details
                         :initform common-lisp:nil :type
                         (common-lisp:or rdsinstance-details common-lisp:null)
                         :accessor
                         struct-shape-instance-details-rdsinstance-details
                         :shape "RDSInstanceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-instance-details :initarg
                         :redshift-instance-details :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-instance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-details-redshift-instance-details
                         :shape "RedshiftInstanceDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasti-cache-instance-details :initarg
                         :elasti-cache-instance-details :initform
                         common-lisp:nil :type
                         (common-lisp:or elasti-cache-instance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-details-elasti-cache-instance-details
                         :shape "ElastiCacheInstanceDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (esinstance-details :initarg :esinstance-details
                         :initform common-lisp:nil :type
                         (common-lisp:or esinstance-details common-lisp:null)
                         :accessor
                         struct-shape-instance-details-esinstance-details
                         :shape "ESInstanceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-dbinstance-details :initarg
                         :memory-dbinstance-details :initform common-lisp:nil
                         :type
                         (common-lisp:or memory-dbinstance-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-details-memory-dbinstance-details
                         :shape "MemoryDBInstanceDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-details 'make-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-details))
      (common-lisp:list
       (common-lisp:cons "EC2InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rdsinstance-details))
      (common-lisp:list
       (common-lisp:cons "RDSInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-instance-details))
      (common-lisp:list
       (common-lisp:cons "RedshiftInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasti-cache-instance-details))
      (common-lisp:list
       (common-lisp:cons "ElastiCacheInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esinstance-details))
      (common-lisp:list
       (common-lisp:cons "ESInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'memory-dbinstance-details))
      (common-lisp:list
       (common-lisp:cons "MemoryDBInstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype keys () '(trivial-types:proper-list key))
 (common-lisp:defun make-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-cost-allocation-tags-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or cost-allocation-tag-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-request-status
                         :shape "CostAllocationTagStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform common-lisp:nil
                         :type
                         (common-lisp:or cost-allocation-tag-key-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-request-tag-keys
                         :shape "CostAllocationTagKeyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or cost-allocation-tag-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-request-type
                         :shape "CostAllocationTagType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-request-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-allocation-tags-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-request-max-results
                         :shape "CostAllocationTagsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cost-allocation-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cost-allocation-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cost-allocation-tags-request
                    'make-list-cost-allocation-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cost-allocation-tags-response common-lisp:nil
                       ((cost-allocation-tags :initarg :cost-allocation-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-allocation-tag-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-response-cost-allocation-tags
                         :shape "CostAllocationTagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-list-cost-allocation-tags-response-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cost-allocation-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cost-allocation-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cost-allocation-tags-response
                    'make-list-cost-allocation-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-allocation-tags))
      (common-lisp:list
       (common-lisp:cons "CostAllocationTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-allocation-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cost-category-definitions-request common-lisp:nil
                       ((effective-on :initarg :effective-on :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-list-cost-category-definitions-request-effective-on
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-list-cost-category-definitions-request-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-category-definitions-request-max-results
                         :shape "CostCategoryMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cost-category-definitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cost-category-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cost-category-definitions-request
                    'make-list-cost-category-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-on))
      (common-lisp:list
       (common-lisp:cons "EffectiveOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-cost-category-definitions-response common-lisp:nil
                       ((cost-category-references :initarg
                         :cost-category-references :initform common-lisp:nil
                         :type
                         (common-lisp:or cost-category-references-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-cost-category-definitions-response-cost-category-references
                         :shape "CostCategoryReferencesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-page-token common-lisp:null)
                         :accessor
                         struct-shape-list-cost-category-definitions-response-next-token
                         :shape "NextPageToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-cost-category-definitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-cost-category-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-cost-category-definitions-response
                    'make-list-cost-category-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-category-references))
      (common-lisp:list
       (common-lisp:cons "CostCategoryReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-cost-category-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-savings-plans-purchase-recommendation-generation-request common-lisp:nil
  ((generation-status :initarg :generation-status :initform common-lisp:nil
    :type (common-lisp:or generation-status common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-request-generation-status
    :shape "GenerationStatus" :location common-lisp:nil :location-name
    common-lisp:nil)
   (recommendation-ids :initarg :recommendation-ids :initform common-lisp:nil
    :type (common-lisp:or recommendation-id-list common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-request-recommendation-ids
    :shape "RecommendationIdList" :location common-lisp:nil :location-name
    common-lisp:nil)
   (page-size :initarg :page-size :initform common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-request-page-size
    :shape "NonNegativeInteger" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-page-token :initarg :next-page-token :initform common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-request-next-page-token
    :shape "NextPageToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-savings-plans-purchase-recommendation-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-savings-plans-purchase-recommendation-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'list-savings-plans-purchase-recommendation-generation-request
   'make-list-savings-plans-purchase-recommendation-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-status))
      (common-lisp:list
       (common-lisp:cons "GenerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "RecommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-size))
      (common-lisp:list
       (common-lisp:cons "PageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  list-savings-plans-purchase-recommendation-generation-response
  common-lisp:nil
  ((generation-summary-list :initarg :generation-summary-list :initform
    common-lisp:nil :type
    (common-lisp:or generation-summary-list common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-response-generation-summary-list
    :shape "GenerationSummaryList" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-page-token :initarg :next-page-token :initform common-lisp:nil :type
    (common-lisp:or next-page-token common-lisp:null) :accessor
    struct-shape-list-savings-plans-purchase-recommendation-generation-response-next-page-token
    :shape "NextPageToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-savings-plans-purchase-recommendation-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-savings-plans-purchase-recommendation-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'list-savings-plans-purchase-recommendation-generation-response
   'make-list-savings-plans-purchase-recommendation-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-summary-list))
      (common-lisp:list
       (common-lisp:cons "GenerationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-savings-plans-purchase-recommendation-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((resource-tags :initarg :resource-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-resource-tags
                         :shape "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype lookback-period-in-days () 'common-lisp:string)
(common-lisp:deftype match-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype match-options ()
   '(trivial-types:proper-list match-option))
 (common-lisp:defun make-match-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass memory-dbinstance-details common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-memory-dbinstance-details-family :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-memory-dbinstance-details-node-type
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-memory-dbinstance-details-region :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-memory-dbinstance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-memory-dbinstance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-memory-dbinstance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'memory-dbinstance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'memory-dbinstance-details
                    'make-memory-dbinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          memory-dbinstance-details))
   common-lisp:nil))
(common-lisp:deftype metric () 'common-lisp:string)
(common-lisp:deftype metric-amount () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-names () '(trivial-types:proper-list metric-name))
 (common-lisp:defun make-metric-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-value common-lisp:nil
                       ((amount :initarg :amount :initform common-lisp:nil
                         :type (common-lisp:or metric-amount common-lisp:null)
                         :accessor struct-shape-metric-value-amount :shape
                         "MetricAmount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or metric-unit common-lisp:null)
                         :accessor struct-shape-metric-value-unit :shape
                         "MetricUnit" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric-value 'make-metric-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "Amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics () 'common-lisp:hash-table)
 (common-lisp:defun make-metrics (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype metrics-over-lookback-period ()
   '(trivial-types:proper-list recommendation-detail-hourly-metrics))
 (common-lisp:defun make-metrics-over-lookback-period
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-detail-hourly-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass modify-recommendation-detail common-lisp:nil
                       ((target-instances :initarg :target-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or target-instances-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-recommendation-detail-target-instances
                         :shape "TargetInstancesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-recommendation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-recommendation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-recommendation-detail
                    'make-modify-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instances))
      (common-lisp:list
       (common-lisp:cons "TargetInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitor-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun make-monitor-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitor-dimension () 'common-lisp:string)
(common-lisp:deftype monitor-type () 'common-lisp:string)
(common-lisp:deftype net-risavings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-resource-utilization common-lisp:nil
                       ((network-in-bytes-per-second :initarg
                         :network-in-bytes-per-second :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-utilization-network-in-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-out-bytes-per-second :initarg
                         :network-out-bytes-per-second :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-utilization-network-out-bytes-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-packets-in-per-second :initarg
                         :network-packets-in-per-second :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-utilization-network-packets-in-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-packets-out-per-second :initarg
                         :network-packets-out-per-second :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-utilization-network-packets-out-per-second
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-resource-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-resource-utilization
                    'make-network-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-in-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkInBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-out-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkOutBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-packets-in-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkPacketsInPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-packets-out-per-second))
      (common-lisp:list
       (common-lisp:cons "NetworkPacketsOutPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-utilization))
   common-lisp:nil))
(common-lisp:deftype next-page-token () 'common-lisp:string)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:deftype non-negative-long () 'common-lisp:integer)
(common-lisp:deftype nullable-non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype numeric-operator () 'common-lisp:string)
(common-lisp:deftype offering-class () 'common-lisp:string)
(common-lisp:deftype on-demand-cost () 'common-lisp:string)
(common-lisp:deftype on-demand-cost-of-rihours-used () 'common-lisp:string)
(common-lisp:deftype on-demand-hours () 'common-lisp:string)
(common-lisp:deftype on-demand-normalized-units () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype payment-option () 'common-lisp:string)
(common-lisp:deftype platform-difference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-differences ()
   '(trivial-types:proper-list platform-difference))
 (common-lisp:defun make-platform-differences
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype prediction-interval-level () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass provide-anomaly-feedback-request common-lisp:nil
                       ((anomaly-id :initarg :anomaly-id :initform
                         (common-lisp:error ":anomaly-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-provide-anomaly-feedback-request-anomaly-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (feedback :initarg :feedback :initform
                         (common-lisp:error ":feedback is required") :type
                         (common-lisp:or anomaly-feedback-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-provide-anomaly-feedback-request-feedback
                         :shape "AnomalyFeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provide-anomaly-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provide-anomaly-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provide-anomaly-feedback-request
                    'make-provide-anomaly-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provide-anomaly-feedback-response common-lisp:nil
                       ((anomaly-id :initarg :anomaly-id :initform
                         (common-lisp:error ":anomaly-id is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-provide-anomaly-feedback-response-anomaly-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provide-anomaly-feedback-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'provide-anomaly-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'provide-anomaly-feedback-response
                    'make-provide-anomaly-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomaly-id))
      (common-lisp:list
       (common-lisp:cons "AnomalyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provide-anomaly-feedback-response))
   common-lisp:nil))
(common-lisp:deftype purchased-hours () 'common-lisp:string)
(common-lisp:deftype purchased-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rdsinstance-details common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-rdsinstance-details-family
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-instance-type :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-rdsinstance-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-engine :initarg :database-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-database-engine
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-edition :initarg :database-edition :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-database-edition
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-option :initarg :deployment-option
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-deployment-option
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-license-model :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-rdsinstance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rdsinstance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rdsinstance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rdsinstance-details 'make-rdsinstance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-engine))
      (common-lisp:list
       (common-lisp:cons "DatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-edition))
      (common-lisp:list
       (common-lisp:cons "DatabaseEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "DeploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "LicenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rdsinstance-details))
   common-lisp:nil))
(common-lisp:deftype ricost-for-unused-hours () 'common-lisp:string)
(common-lisp:deftype realized-savings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation-detail-data common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-account-scope
                         :shape "AccountScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings-plans-type :initarg :savings-plans-type
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-savings-plans-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-savings-plans-type
                         :shape "SupportedSavingsPlansType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term-in-years :initarg :term-in-years :initform
                         common-lisp:nil :type
                         (common-lisp:or term-in-years common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-term-in-years
                         :shape "TermInYears" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-payment-option
                         :shape "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-instance-family
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-region :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-offering-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-timestamp :initarg :generation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-generation-timestamp
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-usage-timestamp :initarg
                         :latest-usage-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-latest-usage-timestamp
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-average-hourly-on-demand-spend :initarg
                         :current-average-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-current-average-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-maximum-hourly-on-demand-spend :initarg
                         :current-maximum-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-current-maximum-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-minimum-hourly-on-demand-spend :initarg
                         :current-minimum-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-current-minimum-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-average-utilization :initarg
                         :estimated-average-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-average-utilization
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings-amount :initarg
                         :estimated-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost :initarg
                         :estimated-on-demand-cost :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-on-demand-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost-with-current-commitment
                         :initarg
                         :estimated-on-demand-cost-with-current-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-on-demand-cost-with-current-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-roi :initarg :estimated-roi :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-roi
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-spcost :initarg :estimated-spcost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-spcost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-amount :initarg
                         :estimated-savings-amount :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-percentage :initarg
                         :estimated-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (existing-hourly-commitment :initarg
                         :existing-hourly-commitment :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-existing-hourly-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment-to-purchase :initarg
                         :hourly-commitment-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-hourly-commitment-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-upfront-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-average-coverage :initarg
                         :current-average-coverage :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-current-average-coverage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-average-coverage :initarg
                         :estimated-average-coverage :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-estimated-average-coverage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics-over-lookback-period :initarg
                         :metrics-over-lookback-period :initform
                         common-lisp:nil :type
                         (common-lisp:or metrics-over-lookback-period
                                         common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-data-metrics-over-lookback-period
                         :shape "MetricsOverLookbackPeriod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-detail-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-detail-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-detail-data
                    'make-recommendation-detail-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-usage-timestamp))
      (common-lisp:list
       (common-lisp:cons "LatestUsageTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-maximum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMaximumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-minimum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMinimumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-spcost))
      (common-lisp:list
       (common-lisp:cons "EstimatedSPCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "ExistingHourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-coverage))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-coverage))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-over-lookback-period))
      (common-lisp:list
       (common-lisp:cons "MetricsOverLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation-detail-hourly-metrics common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-hourly-metrics-start-time
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost :initarg
                         :estimated-on-demand-cost :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-hourly-metrics-estimated-on-demand-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-coverage :initarg :current-coverage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-hourly-metrics-current-coverage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-coverage :initarg :estimated-coverage
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-hourly-metrics-estimated-coverage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-new-commitment-utilization :initarg
                         :estimated-new-commitment-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-detail-hourly-metrics-estimated-new-commitment-utilization
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-detail-hourly-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'recommendation-detail-hourly-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-detail-hourly-metrics
                    'make-recommendation-detail-hourly-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-coverage))
      (common-lisp:list
       (common-lisp:cons "CurrentCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-coverage))
      (common-lisp:list
       (common-lisp:cons "EstimatedCoverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-new-commitment-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedNewCommitmentUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-detail-hourly-metrics))
   common-lisp:nil))
(common-lisp:deftype recommendation-detail-id () 'common-lisp:string)
(common-lisp:deftype recommendation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list recommendation-id))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redshift-instance-details common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-redshift-instance-details-family :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-redshift-instance-details-node-type
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-redshift-instance-details-region :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-redshift-instance-details-current-generation
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-redshift-instance-details-size-flex-eligible
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-instance-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-instance-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-instance-details
                    'make-redshift-instance-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "CurrentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "SizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-instance-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-changed-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-changed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-changed-exception
                    'request-changed-exception-message)))
(common-lisp:progn
 (common-lisp:defclass reservation-aggregates common-lisp:nil
                       ((utilization-percentage :initarg
                         :utilization-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or utilization-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-utilization-percentage
                         :shape "UtilizationPercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (utilization-percentage-in-units :initarg
                         :utilization-percentage-in-units :initform
                         common-lisp:nil :type
                         (common-lisp:or utilization-percentage-in-units
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-utilization-percentage-in-units
                         :shape "UtilizationPercentageInUnits" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (purchased-hours :initarg :purchased-hours :initform
                         common-lisp:nil :type
                         (common-lisp:or purchased-hours common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-purchased-hours
                         :shape "PurchasedHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (purchased-units :initarg :purchased-units :initform
                         common-lisp:nil :type
                         (common-lisp:or purchased-units common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-purchased-units
                         :shape "PurchasedUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-actual-hours :initarg :total-actual-hours
                         :initform common-lisp:nil :type
                         (common-lisp:or total-actual-hours common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-total-actual-hours
                         :shape "TotalActualHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-actual-units :initarg :total-actual-units
                         :initform common-lisp:nil :type
                         (common-lisp:or total-actual-units common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-total-actual-units
                         :shape "TotalActualUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unused-hours :initarg :unused-hours :initform
                         common-lisp:nil :type
                         (common-lisp:or unused-hours common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-unused-hours
                         :shape "UnusedHours" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unused-units :initarg :unused-units :initform
                         common-lisp:nil :type
                         (common-lisp:or unused-units common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-unused-units
                         :shape "UnusedUnits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-demand-cost-of-rihours-used :initarg
                         :on-demand-cost-of-rihours-used :initform
                         common-lisp:nil :type
                         (common-lisp:or on-demand-cost-of-rihours-used
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-on-demand-cost-of-rihours-used
                         :shape "OnDemandCostOfRIHoursUsed" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (net-risavings :initarg :net-risavings :initform
                         common-lisp:nil :type
                         (common-lisp:or net-risavings common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-net-risavings
                         :shape "NetRISavings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-potential-risavings :initarg
                         :total-potential-risavings :initform common-lisp:nil
                         :type
                         (common-lisp:or total-potential-risavings
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-total-potential-risavings
                         :shape "TotalPotentialRISavings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amortized-upfront-fee :initarg :amortized-upfront-fee
                         :initform common-lisp:nil :type
                         (common-lisp:or amortized-upfront-fee
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-amortized-upfront-fee
                         :shape "AmortizedUpfrontFee" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amortized-recurring-fee :initarg
                         :amortized-recurring-fee :initform common-lisp:nil
                         :type
                         (common-lisp:or amortized-recurring-fee
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-amortized-recurring-fee
                         :shape "AmortizedRecurringFee" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-amortized-fee :initarg :total-amortized-fee
                         :initform common-lisp:nil :type
                         (common-lisp:or total-amortized-fee common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-total-amortized-fee
                         :shape "TotalAmortizedFee" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ricost-for-unused-hours :initarg
                         :ricost-for-unused-hours :initform common-lisp:nil
                         :type
                         (common-lisp:or ricost-for-unused-hours
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-ricost-for-unused-hours
                         :shape "RICostForUnusedHours" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (realized-savings :initarg :realized-savings :initform
                         common-lisp:nil :type
                         (common-lisp:or realized-savings common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-realized-savings
                         :shape "RealizedSavings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unrealized-savings :initarg :unrealized-savings
                         :initform common-lisp:nil :type
                         (common-lisp:or unrealized-savings common-lisp:null)
                         :accessor
                         struct-shape-reservation-aggregates-unrealized-savings
                         :shape "UnrealizedSavings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-aggregates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reservation-aggregates
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-aggregates 'make-reservation-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage-in-units))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentageInUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchased-hours))
      (common-lisp:list
       (common-lisp:cons "PurchasedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchased-units))
      (common-lisp:list
       (common-lisp:cons "PurchasedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-hours))
      (common-lisp:list
       (common-lisp:cons "TotalActualHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actual-units))
      (common-lisp:list
       (common-lisp:cons "TotalActualUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-hours))
      (common-lisp:list
       (common-lisp:cons "UnusedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-units))
      (common-lisp:list
       (common-lisp:cons "UnusedUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-cost-of-rihours-used))
      (common-lisp:list
       (common-lisp:cons "OnDemandCostOfRIHoursUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-risavings))
      (common-lisp:list
       (common-lisp:cons "NetRISavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-potential-risavings))
      (common-lisp:list
       (common-lisp:cons "TotalPotentialRISavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-upfront-fee))
      (common-lisp:list
       (common-lisp:cons "AmortizedUpfrontFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-recurring-fee))
      (common-lisp:list
       (common-lisp:cons "AmortizedRecurringFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-amortized-fee))
      (common-lisp:list
       (common-lisp:cons "TotalAmortizedFee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ricost-for-unused-hours))
      (common-lisp:list
       (common-lisp:cons "RICostForUnusedHours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'realized-savings))
      (common-lisp:list
       (common-lisp:cons "RealizedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unrealized-savings))
      (common-lisp:list
       (common-lisp:cons "UnrealizedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation-coverage-group common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-reservation-coverage-group-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage :initarg :coverage :initform common-lisp:nil
                         :type (common-lisp:or coverage common-lisp:null)
                         :accessor
                         struct-shape-reservation-coverage-group-coverage
                         :shape "Coverage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-coverage-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reservation-coverage-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-coverage-group
                    'make-reservation-coverage-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage))
      (common-lisp:list
       (common-lisp:cons "Coverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-coverage-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-coverage-groups ()
   '(trivial-types:proper-list reservation-coverage-group))
 (common-lisp:defun make-reservation-coverage-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-coverage-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reservation-group-key () 'common-lisp:string)
(common-lisp:deftype reservation-group-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reservation-purchase-recommendation common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-account-scope
                         :shape "AccountScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term-in-years :initarg :term-in-years :initform
                         common-lisp:nil :type
                         (common-lisp:or term-in-years common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-term-in-years
                         :shape "TermInYears" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-payment-option
                         :shape "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-specification :initarg :service-specification
                         :initform common-lisp:nil :type
                         (common-lisp:or service-specification
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-service-specification
                         :shape "ServiceSpecification" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recommendation-details :initarg
                         :recommendation-details :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          reservation-purchase-recommendation-details
                          common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-recommendation-details
                         :shape "ReservationPurchaseRecommendationDetails"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-summary :initarg
                         :recommendation-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          reservation-purchase-recommendation-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-recommendation-summary
                         :shape "ReservationPurchaseRecommendationSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-purchase-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-purchase-recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation
                    'make-reservation-purchase-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specification))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-details))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-summary))
      (common-lisp:list
       (common-lisp:cons "RecommendationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation-purchase-recommendation-detail
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-details :initarg :instance-details :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-details common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-instance-details
                         :shape "InstanceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-number-of-instances-to-purchase :initarg
                         :recommended-number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-recommended-number-of-instances-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-normalized-units-to-purchase :initarg
                         :recommended-normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-recommended-normalized-units-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-number-of-instances-used-per-hour :initarg
                         :minimum-number-of-instances-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-minimum-number-of-instances-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (minimum-normalized-units-used-per-hour :initarg
                         :minimum-normalized-units-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-minimum-normalized-units-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-number-of-instances-used-per-hour :initarg
                         :maximum-number-of-instances-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-maximum-number-of-instances-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-normalized-units-used-per-hour :initarg
                         :maximum-normalized-units-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-maximum-normalized-units-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-number-of-instances-used-per-hour :initarg
                         :average-number-of-instances-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-average-number-of-instances-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-normalized-units-used-per-hour :initarg
                         :average-normalized-units-used-per-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-average-normalized-units-used-per-hour
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-utilization :initarg :average-utilization
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-average-utilization
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-break-even-in-months :initarg
                         :estimated-break-even-in-months :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-estimated-break-even-in-months
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings-amount :initarg
                         :estimated-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-estimated-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings-percentage :initarg
                         :estimated-monthly-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-estimated-monthly-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-on-demand-cost :initarg
                         :estimated-monthly-on-demand-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-estimated-monthly-on-demand-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-reservation-cost-for-lookback-period
                         :initarg
                         :estimated-reservation-cost-for-lookback-period
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-estimated-reservation-cost-for-lookback-period
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-upfront-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-standard-monthly-cost :initarg
                         :recurring-standard-monthly-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-detail-recurring-standard-monthly-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-purchase-recommendation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-purchase-recommendation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-detail
                    'make-reservation-purchase-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-details))
      (common-lisp:list
       (common-lisp:cons "InstanceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "RecommendedNumberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "RecommendedNormalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MinimumNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MinimumNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MaximumNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "MaximumNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-number-of-instances-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "AverageNumberOfInstancesUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'average-normalized-units-used-per-hour))
      (common-lisp:list
       (common-lisp:cons "AverageNormalizedUnitsUsedPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-utilization))
      (common-lisp:list
       (common-lisp:cons "AverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-break-even-in-months))
      (common-lisp:list
       (common-lisp:cons "EstimatedBreakEvenInMonths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlyOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-reservation-cost-for-lookback-period))
      (common-lisp:list
       (common-lisp:cons "EstimatedReservationCostForLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-standard-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "RecurringStandardMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-purchase-recommendation-details ()
   '(trivial-types:proper-list reservation-purchase-recommendation-detail))
 (common-lisp:defun make-reservation-purchase-recommendation-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-purchase-recommendation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reservation-purchase-recommendation-metadata
                       common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-metadata-recommendation-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-timestamp :initarg :generation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-metadata-generation-timestamp
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-purchase-recommendation-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-purchase-recommendation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-metadata
                    'make-reservation-purchase-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation-purchase-recommendation-summary
                       common-lisp:nil
                       ((total-estimated-monthly-savings-amount :initarg
                         :total-estimated-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-summary-total-estimated-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-estimated-monthly-savings-percentage :initarg
                         :total-estimated-monthly-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-summary-total-estimated-monthly-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-reservation-purchase-recommendation-summary-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-purchase-recommendation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-purchase-recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-purchase-recommendation-summary
                    'make-reservation-purchase-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "TotalEstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-estimated-monthly-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "TotalEstimatedMonthlySavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-purchase-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-purchase-recommendations ()
   '(trivial-types:proper-list reservation-purchase-recommendation))
 (common-lisp:defun make-reservation-purchase-recommendations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-purchase-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reservation-utilization-group common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or reservation-group-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-utilization-group-key :shape
                         "ReservationGroupKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or reservation-group-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-utilization-group-value
                         :shape "ReservationGroupValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-reservation-utilization-group-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utilization :initarg :utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-aggregates
                                         common-lisp:null)
                         :accessor
                         struct-shape-reservation-utilization-group-utilization
                         :shape "ReservationAggregates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reservation-utilization-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-utilization-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reservation-utilization-group
                    'make-reservation-utilization-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-utilization-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reservation-utilization-groups ()
   '(trivial-types:proper-list reservation-utilization-group))
 (common-lisp:defun make-reservation-utilization-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reservation-utilization-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-hours () 'common-lisp:string)
(common-lisp:deftype reserved-normalized-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((ec2resource-details :initarg :ec2resource-details
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2resource-details common-lisp:null)
                         :accessor
                         struct-shape-resource-details-ec2resource-details
                         :shape "EC2ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2resource-details))
      (common-lisp:list
       (common-lisp:cons "EC2ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass resource-tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or resource-tag-key common-lisp:null)
                         :accessor struct-shape-resource-tag-key :shape
                         "ResourceTagKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or resource-tag-value common-lisp:null)
                         :accessor struct-shape-resource-tag-value :shape
                         "ResourceTagValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-tag
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:deftype resource-tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-tag-key-list ()
   '(trivial-types:proper-list resource-tag-key))
 (common-lisp:defun make-resource-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun make-resource-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-utilization common-lisp:nil
                       ((ec2resource-utilization :initarg
                         :ec2resource-utilization :initform common-lisp:nil
                         :type
                         (common-lisp:or ec2resource-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-utilization-ec2resource-utilization
                         :shape "EC2ResourceUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-utilization 'make-resource-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2resource-utilization))
      (common-lisp:list
       (common-lisp:cons "EC2ResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-by-time common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor struct-shape-result-by-time-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         struct-shape-result-by-time-total :shape "Metrics"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (groups :initarg :groups :initform common-lisp:nil
                         :type (common-lisp:or groups common-lisp:null)
                         :accessor struct-shape-result-by-time-groups :shape
                         "Groups" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (estimated :initarg :estimated :initform
                         common-lisp:nil :type
                         (common-lisp:or estimated common-lisp:null) :accessor
                         struct-shape-result-by-time-estimated :shape
                         "Estimated" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-by-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result-by-time 'make-result-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated))
      (common-lisp:list
       (common-lisp:cons "Estimated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype results-by-time ()
   '(trivial-types:proper-list result-by-time))
 (common-lisp:defun make-results-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rightsizing-recommendation common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-instance :initarg :current-instance :initform
                         common-lisp:nil :type
                         (common-lisp:or current-instance common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-current-instance
                         :shape "CurrentInstance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rightsizing-type :initarg :rightsizing-type :initform
                         common-lisp:nil :type
                         (common-lisp:or rightsizing-type common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-rightsizing-type
                         :shape "RightsizingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modify-recommendation-detail :initarg
                         :modify-recommendation-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or modify-recommendation-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-modify-recommendation-detail
                         :shape "ModifyRecommendationDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (terminate-recommendation-detail :initarg
                         :terminate-recommendation-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or terminate-recommendation-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-terminate-recommendation-detail
                         :shape "TerminateRecommendationDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (finding-reason-codes :initarg :finding-reason-codes
                         :initform common-lisp:nil :type
                         (common-lisp:or finding-reason-codes common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-finding-reason-codes
                         :shape "FindingReasonCodes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rightsizing-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rightsizing-recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation
                    'make-rightsizing-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-instance))
      (common-lisp:list
       (common-lisp:cons "CurrentInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rightsizing-type))
      (common-lisp:list
       (common-lisp:cons "RightsizingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modify-recommendation-detail))
      (common-lisp:list
       (common-lisp:cons "ModifyRecommendationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'terminate-recommendation-detail))
      (common-lisp:list
       (common-lisp:cons "TerminateRecommendationDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'finding-reason-codes))
      (common-lisp:list
       (common-lisp:cons "FindingReasonCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rightsizing-recommendation-configuration common-lisp:nil
                       ((recommendation-target :initarg :recommendation-target
                         :initform
                         (common-lisp:error
                          ":recommendation-target is required")
                         :type
                         (common-lisp:or recommendation-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-configuration-recommendation-target
                         :shape "RecommendationTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (benefits-considered :initarg :benefits-considered
                         :initform
                         (common-lisp:error ":benefits-considered is required")
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-configuration-benefits-considered
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rightsizing-recommendation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rightsizing-recommendation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-configuration
                    'make-rightsizing-recommendation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-target))
      (common-lisp:list
       (common-lisp:cons "RecommendationTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'benefits-considered))
      (common-lisp:list
       (common-lisp:cons "BenefitsConsidered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rightsizing-recommendation-list ()
   '(trivial-types:proper-list rightsizing-recommendation))
 (common-lisp:defun make-rightsizing-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rightsizing-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rightsizing-recommendation-metadata common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-metadata-recommendation-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-timestamp :initarg :generation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-metadata-generation-timestamp
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-metadata-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-metadata :initarg :additional-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-metadata-additional-metadata
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rightsizing-recommendation-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rightsizing-recommendation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-metadata
                    'make-rightsizing-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metadata))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rightsizing-recommendation-summary common-lisp:nil
                       ((total-recommendation-count :initarg
                         :total-recommendation-count :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-summary-total-recommendation-count
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-total-monthly-savings-amount :initarg
                         :estimated-total-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-summary-estimated-total-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-currency-code :initarg :savings-currency-code
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-summary-savings-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-percentage :initarg :savings-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-rightsizing-recommendation-summary-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rightsizing-recommendation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rightsizing-recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rightsizing-recommendation-summary
                    'make-rightsizing-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-recommendation-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedTotalMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-currency-code))
      (common-lisp:list
       (common-lisp:cons "SavingsCurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "SavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rightsizing-recommendation-summary))
   common-lisp:nil))
(common-lisp:deftype rightsizing-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass root-cause common-lisp:nil
                       ((service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-root-cause-service :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-root-cause-region :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (linked-account :initarg :linked-account :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-root-cause-linked-account
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-type :initarg :usage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-root-cause-usage-type :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (linked-account-name :initarg :linked-account-name
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-root-cause-linked-account-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-root-cause
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'root-cause
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'root-cause 'make-root-cause))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input root-cause))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input root-cause))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-account))
      (common-lisp:list
       (common-lisp:cons "LinkedAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "UsageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linked-account-name))
      (common-lisp:list
       (common-lisp:cons "LinkedAccountName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input root-cause))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype root-causes () '(trivial-types:proper-list root-cause))
 (common-lisp:defun make-root-causes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list root-cause))
   aws-sdk/generator/shape::members))
(common-lisp:deftype savings-plan-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass savings-plans-amortized-commitment common-lisp:nil
                       ((amortized-recurring-commitment :initarg
                         :amortized-recurring-commitment :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-amortized-commitment-amortized-recurring-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amortized-upfront-commitment :initarg
                         :amortized-upfront-commitment :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-amortized-commitment-amortized-upfront-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-amortized-commitment :initarg
                         :total-amortized-commitment :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-amortized-commitment-total-amortized-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-amortized-commitment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-amortized-commitment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-amortized-commitment
                    'make-savings-plans-amortized-commitment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-recurring-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedRecurringCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-upfront-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedUpfrontCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "TotalAmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-amortized-commitment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-coverage common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-savings-plans-coverage-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (coverage :initarg :coverage :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-plans-coverage-data
                                         common-lisp:null)
                         :accessor struct-shape-savings-plans-coverage-coverage
                         :shape "SavingsPlansCoverageData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-coverage-time-period :shape
                         "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-coverage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-coverage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-coverage 'make-savings-plans-coverage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage))
      (common-lisp:list
       (common-lisp:cons "Coverage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-coverage-data common-lisp:nil
                       ((spend-covered-by-savings-plans :initarg
                         :spend-covered-by-savings-plans :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-coverage-data-spend-covered-by-savings-plans
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-demand-cost :initarg :on-demand-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-coverage-data-on-demand-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-cost :initarg :total-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-coverage-data-total-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (coverage-percentage :initarg :coverage-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-coverage-data-coverage-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-coverage-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-coverage-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-coverage-data
                    'make-savings-plans-coverage-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spend-covered-by-savings-plans))
      (common-lisp:list
       (common-lisp:cons "SpendCoveredBySavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "OnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-cost))
      (common-lisp:list
       (common-lisp:cons "TotalCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coverage-percentage))
      (common-lisp:list
       (common-lisp:cons "CoveragePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-coverage-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-coverages ()
   '(trivial-types:proper-list savings-plans-coverage))
 (common-lisp:defun make-savings-plans-coverages
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list savings-plans-coverage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype savings-plans-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype savings-plans-data-types ()
   '(trivial-types:proper-list savings-plans-data-type))
 (common-lisp:defun make-savings-plans-data-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list savings-plans-data-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass savings-plans-details common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-savings-plans-details-region
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-details-instance-family
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-id :initarg :offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-details-offering-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-details 'make-savings-plans-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "InstanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-purchase-recommendation common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or account-scope common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-account-scope
                         :shape "AccountScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-plans-type :initarg :savings-plans-type
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-savings-plans-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-savings-plans-type
                         :shape "SupportedSavingsPlansType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (term-in-years :initarg :term-in-years :initform
                         common-lisp:nil :type
                         (common-lisp:or term-in-years common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-term-in-years
                         :shape "TermInYears" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-payment-option
                         :shape "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lookback-period-in-days :initarg
                         :lookback-period-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or lookback-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-lookback-period-in-days
                         :shape "LookbackPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings-plans-purchase-recommendation-details :initarg
                         :savings-plans-purchase-recommendation-details
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          savings-plans-purchase-recommendation-detail-list
                          common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-savings-plans-purchase-recommendation-details
                         :shape "SavingsPlansPurchaseRecommendationDetailList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (savings-plans-purchase-recommendation-summary :initarg
                         :savings-plans-purchase-recommendation-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          savings-plans-purchase-recommendation-summary
                          common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-savings-plans-purchase-recommendation-summary
                         :shape "SavingsPlansPurchaseRecommendationSummary"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-purchase-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-purchase-recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation
                    'make-savings-plans-purchase-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "AccountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plans-type))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-in-years))
      (common-lisp:list
       (common-lisp:cons "TermInYears"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "LookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-purchase-recommendation-summary))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansPurchaseRecommendationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-purchase-recommendation-detail
                       common-lisp:nil
                       ((savings-plans-details :initarg :savings-plans-details
                         :initform common-lisp:nil :type
                         (common-lisp:or savings-plans-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-savings-plans-details
                         :shape "SavingsPlansDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-account-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-upfront-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-roi :initarg :estimated-roi :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-roi
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-spcost :initarg :estimated-spcost :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-spcost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost :initarg
                         :estimated-on-demand-cost :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-on-demand-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost-with-current-commitment
                         :initarg
                         :estimated-on-demand-cost-with-current-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-on-demand-cost-with-current-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-amount :initarg
                         :estimated-savings-amount :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-percentage :initarg
                         :estimated-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment-to-purchase :initarg
                         :hourly-commitment-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-hourly-commitment-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-average-utilization :initarg
                         :estimated-average-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-average-utilization
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings-amount :initarg
                         :estimated-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-estimated-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-minimum-hourly-on-demand-spend :initarg
                         :current-minimum-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-current-minimum-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-maximum-hourly-on-demand-spend :initarg
                         :current-maximum-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-current-maximum-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-average-hourly-on-demand-spend :initarg
                         :current-average-hourly-on-demand-spend :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-current-average-hourly-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-detail-id :initarg
                         :recommendation-detail-id :initform common-lisp:nil
                         :type
                         (common-lisp:or recommendation-detail-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-detail-recommendation-detail-id
                         :shape "RecommendationDetailId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-purchase-recommendation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-purchase-recommendation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-detail
                    'make-savings-plans-purchase-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-details))
      (common-lisp:list
       (common-lisp:cons "SavingsPlansDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "UpfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-spcost))
      (common-lisp:list
       (common-lisp:cons "EstimatedSPCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-average-utilization))
      (common-lisp:list
       (common-lisp:cons "EstimatedAverageUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-minimum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMinimumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-maximum-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentMaximumHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-average-hourly-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentAverageHourlyOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-detail-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationDetailId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-purchase-recommendation-detail-list ()
   '(trivial-types:proper-list savings-plans-purchase-recommendation-detail))
 (common-lisp:defun make-savings-plans-purchase-recommendation-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-purchase-recommendation-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass savings-plans-purchase-recommendation-metadata
                       common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-metadata-recommendation-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generation-timestamp :initarg :generation-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-metadata-generation-timestamp
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-metadata :initarg :additional-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-metadata-additional-metadata
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-purchase-recommendation-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-purchase-recommendation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-metadata
                    'make-savings-plans-purchase-recommendation-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-timestamp))
      (common-lisp:list
       (common-lisp:cons "GenerationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-metadata))
      (common-lisp:list
       (common-lisp:cons "AdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-purchase-recommendation-summary
                       common-lisp:nil
                       ((estimated-roi :initarg :estimated-roi :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-roi
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-total-cost :initarg :estimated-total-cost
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-total-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-on-demand-spend :initarg
                         :current-on-demand-spend :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-current-on-demand-spend
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-amount :initarg
                         :estimated-savings-amount :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-recommendation-count :initarg
                         :total-recommendation-count :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-total-recommendation-count
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (daily-commitment-to-purchase :initarg
                         :daily-commitment-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-daily-commitment-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment-to-purchase :initarg
                         :hourly-commitment-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-hourly-commitment-to-purchase
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-percentage :initarg
                         :estimated-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-savings-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings-amount :initarg
                         :estimated-monthly-savings-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-monthly-savings-amount
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost-with-current-commitment
                         :initarg
                         :estimated-on-demand-cost-with-current-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-purchase-recommendation-summary-estimated-on-demand-cost-with-current-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-purchase-recommendation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-purchase-recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-purchase-recommendation-summary
                    'make-savings-plans-purchase-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-roi))
      (common-lisp:list
       (common-lisp:cons "EstimatedROI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedTotalCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-on-demand-spend))
      (common-lisp:list
       (common-lisp:cons "CurrentOnDemandSpend"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-recommendation-count))
      (common-lisp:list
       (common-lisp:cons "TotalRecommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'daily-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "DailyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hourly-commitment-to-purchase))
      (common-lisp:list
       (common-lisp:cons "HourlyCommitmentToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "EstimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings-amount))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavingsAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost-with-current-commitment))
      (common-lisp:list
       (common-lisp:cons "EstimatedOnDemandCostWithCurrentCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-purchase-recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-savings common-lisp:nil
                       ((net-savings :initarg :net-savings :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-savings-net-savings :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (on-demand-cost-equivalent :initarg
                         :on-demand-cost-equivalent :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-savings-on-demand-cost-equivalent
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-savings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-savings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-savings 'make-savings-plans-savings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-savings))
      (common-lisp:list
       (common-lisp:cons "NetSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'on-demand-cost-equivalent))
      (common-lisp:list
       (common-lisp:cons "OnDemandCostEquivalent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-savings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-utilization common-lisp:nil
                       ((total-commitment :initarg :total-commitment :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-total-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (used-commitment :initarg :used-commitment :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-used-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unused-commitment :initarg :unused-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-unused-commitment
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utilization-percentage :initarg
                         :utilization-percentage :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-utilization-percentage
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-utilization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-utilization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization
                    'make-savings-plans-utilization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-commitment))
      (common-lisp:list
       (common-lisp:cons "TotalCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used-commitment))
      (common-lisp:list
       (common-lisp:cons "UsedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-commitment))
      (common-lisp:list
       (common-lisp:cons "UnusedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'utilization-percentage))
      (common-lisp:list
       (common-lisp:cons "UtilizationPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-utilization-aggregates common-lisp:nil
                       ((utilization :initarg :utilization :initform
                         (common-lisp:error ":utilization is required") :type
                         (common-lisp:or savings-plans-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-aggregates-utilization
                         :shape "SavingsPlansUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings :initarg :savings :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-plans-savings
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-aggregates-savings
                         :shape "SavingsPlansSavings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amortized-commitment :initarg :amortized-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or savings-plans-amortized-commitment
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-aggregates-amortized-commitment
                         :shape "SavingsPlansAmortizedCommitment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-utilization-aggregates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-utilization-aggregates
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-aggregates
                    'make-savings-plans-utilization-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-utilization-by-time common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         (common-lisp:error ":time-period is required") :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-by-time-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utilization :initarg :utilization :initform
                         (common-lisp:error ":utilization is required") :type
                         (common-lisp:or savings-plans-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-by-time-utilization
                         :shape "SavingsPlansUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings :initarg :savings :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-plans-savings
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-by-time-savings
                         :shape "SavingsPlansSavings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amortized-commitment :initarg :amortized-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or savings-plans-amortized-commitment
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-by-time-amortized-commitment
                         :shape "SavingsPlansAmortizedCommitment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-utilization-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-utilization-by-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-by-time
                    'make-savings-plans-utilization-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-utilization-detail common-lisp:nil
                       ((savings-plan-arn :initarg :savings-plan-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plan-arn common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-detail-savings-plan-arn
                         :shape "SavingsPlanArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-savings-plans-utilization-detail-attributes
                         :shape "Attributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (utilization :initarg :utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-utilization
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-detail-utilization
                         :shape "SavingsPlansUtilization" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings :initarg :savings :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-plans-savings
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-detail-savings
                         :shape "SavingsPlansSavings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amortized-commitment :initarg :amortized-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or savings-plans-amortized-commitment
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-utilization-detail-amortized-commitment
                         :shape "SavingsPlansAmortizedCommitment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-utilization-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-utilization-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-utilization-detail
                    'make-savings-plans-utilization-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-plan-arn))
      (common-lisp:list
       (common-lisp:cons "SavingsPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utilization))
      (common-lisp:list
       (common-lisp:cons "Utilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings))
      (common-lisp:list
       (common-lisp:cons "Savings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amortized-commitment))
      (common-lisp:list
       (common-lisp:cons "AmortizedCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-utilization-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype savings-plans-utilization-details ()
   '(trivial-types:proper-list savings-plans-utilization-detail))
 (common-lisp:defun make-savings-plans-utilization-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-utilization-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype savings-plans-utilizations-by-time ()
   '(trivial-types:proper-list savings-plans-utilization-by-time))
 (common-lisp:defun make-savings-plans-utilizations-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            savings-plans-utilization-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass service-specification common-lisp:nil
                       ((ec2specification :initarg :ec2specification :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2specification common-lisp:null)
                         :accessor
                         struct-shape-service-specification-ec2specification
                         :shape "EC2Specification" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-specification 'make-service-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2specification))
      (common-lisp:list
       (common-lisp:cons "EC2Specification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sort-definition common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or sort-definition-key common-lisp:null)
                         :accessor struct-shape-sort-definition-key :shape
                         "SortDefinitionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-sort-definition-sort-order :shape
                         "SortOrder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort-definition 'make-sort-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-definition))
   common-lisp:nil))
(common-lisp:deftype sort-definition-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-definitions ()
   '(trivial-types:proper-list sort-definition))
 (common-lisp:defun make-sort-definitions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass
  start-savings-plans-purchase-recommendation-generation-request
  common-lisp:nil common-lisp:nil
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-savings-plans-purchase-recommendation-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-savings-plans-purchase-recommendation-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'start-savings-plans-purchase-recommendation-generation-request
   'make-start-savings-plans-purchase-recommendation-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  start-savings-plans-purchase-recommendation-generation-response
  common-lisp:nil
  ((recommendation-id :initarg :recommendation-id :initform common-lisp:nil
    :type (common-lisp:or recommendation-id common-lisp:null) :accessor
    struct-shape-start-savings-plans-purchase-recommendation-generation-response-recommendation-id
    :shape "RecommendationId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (generation-started-time :initarg :generation-started-time :initform
    common-lisp:nil :type (common-lisp:or zoned-date-time common-lisp:null)
    :accessor
    struct-shape-start-savings-plans-purchase-recommendation-generation-response-generation-started-time
    :shape "ZonedDateTime" :location common-lisp:nil :location-name
    common-lisp:nil)
   (estimated-completion-time :initarg :estimated-completion-time :initform
    common-lisp:nil :type (common-lisp:or zoned-date-time common-lisp:null)
    :accessor
    struct-shape-start-savings-plans-purchase-recommendation-generation-response-estimated-completion-time
    :shape "ZonedDateTime" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-savings-plans-purchase-recommendation-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-savings-plans-purchase-recommendation-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'start-savings-plans-purchase-recommendation-generation-response
   'make-start-savings-plans-purchase-recommendation-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-started-time))
      (common-lisp:list
       (common-lisp:cons "GenerationStartedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-completion-time))
      (common-lisp:list
       (common-lisp:cons "EstimatedCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-savings-plans-purchase-recommendation-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscriber common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type
                         (common-lisp:or subscriber-address common-lisp:null)
                         :accessor struct-shape-subscriber-address :shape
                         "SubscriberAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or subscriber-type common-lisp:null)
                         :accessor struct-shape-subscriber-type :shape
                         "SubscriberType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or subscriber-status common-lisp:null)
                         :accessor struct-shape-subscriber-status :shape
                         "SubscriberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscriber
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscriber
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subscriber 'make-subscriber))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber))
   common-lisp:nil))
(common-lisp:deftype subscriber-address () 'common-lisp:string)
(common-lisp:deftype subscriber-status () 'common-lisp:string)
(common-lisp:deftype subscriber-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subscribers () '(trivial-types:proper-list subscriber))
 (common-lisp:defun make-subscribers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-savings-plans-type () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list entity))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-tags :initarg :resource-tags :initform
                         (common-lisp:error ":resource-tags is required") :type
                         (common-lisp:or resource-tag-list common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-tags :shape
                         "ResourceTagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-values common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-values-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or values common-lisp:null)
                         :accessor struct-shape-tag-values-values :shape
                         "Values" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-options :initarg :match-options :initform
                         common-lisp:nil :type
                         (common-lisp:or match-options common-lisp:null)
                         :accessor struct-shape-tag-values-match-options :shape
                         "MatchOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag-values 'make-tag-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-options))
      (common-lisp:list
       (common-lisp:cons "MatchOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-values-list ()
   '(trivial-types:proper-list tag-values))
 (common-lisp:defun make-tag-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-instance common-lisp:nil
                       ((estimated-monthly-cost :initarg
                         :estimated-monthly-cost :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-target-instance-estimated-monthly-cost
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings :initarg
                         :estimated-monthly-savings :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-target-instance-estimated-monthly-savings
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-target-instance-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-target-instance :initarg
                         :default-target-instance :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-boolean common-lisp:null)
                         :accessor
                         struct-shape-target-instance-default-target-instance
                         :shape "GenericBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-details :initarg :resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-target-instance-resource-details :shape
                         "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-resource-utilization :initarg
                         :expected-resource-utilization :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-utilization common-lisp:null)
                         :accessor
                         struct-shape-target-instance-expected-resource-utilization
                         :shape "ResourceUtilization" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform-differences :initarg :platform-differences
                         :initform common-lisp:nil :type
                         (common-lisp:or platform-differences common-lisp:null)
                         :accessor
                         struct-shape-target-instance-platform-differences
                         :shape "PlatformDifferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-instance 'make-target-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-target-instance))
      (common-lisp:list
       (common-lisp:cons "DefaultTargetInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-resource-utilization))
      (common-lisp:list
       (common-lisp:cons "ExpectedResourceUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'platform-differences))
      (common-lisp:list
       (common-lisp:cons "PlatformDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-instances-list ()
   '(trivial-types:proper-list target-instance))
 (common-lisp:defun make-target-instances-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype term-in-years () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass terminate-recommendation-detail common-lisp:nil
                       ((estimated-monthly-savings :initarg
                         :estimated-monthly-savings :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-terminate-recommendation-detail-estimated-monthly-savings
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-terminate-recommendation-detail-currency-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-recommendation-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-recommendation-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-recommendation-detail
                    'make-terminate-recommendation-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "EstimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-recommendation-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype total-actual-hours () 'common-lisp:string)
(common-lisp:deftype total-actual-units () 'common-lisp:string)
(common-lisp:deftype total-amortized-fee () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass total-impact-filter common-lisp:nil
                       ((numeric-operator :initarg :numeric-operator :initform
                         (common-lisp:error ":numeric-operator is required")
                         :type
                         (common-lisp:or numeric-operator common-lisp:null)
                         :accessor
                         struct-shape-total-impact-filter-numeric-operator
                         :shape "NumericOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-value :initarg :start-value :initform
                         (common-lisp:error ":start-value is required") :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-total-impact-filter-start-value
                         :shape "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-value :initarg :end-value :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-double common-lisp:null)
                         :accessor struct-shape-total-impact-filter-end-value
                         :shape "GenericDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-total-impact-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'total-impact-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'total-impact-filter 'make-total-impact-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input total-impact-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input total-impact-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric-operator))
      (common-lisp:list
       (common-lisp:cons "NumericOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input total-impact-filter))
   common-lisp:nil))
(common-lisp:deftype total-potential-risavings () 'common-lisp:string)
(common-lisp:deftype total-running-hours () 'common-lisp:string)
(common-lisp:deftype total-running-normalized-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unknown-monitor-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-monitor-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-monitor-exception
                    'unknown-monitor-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unknown-subscription-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-subscription-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-subscription-exception
                    'unknown-subscription-exception-message)))
(common-lisp:deftype unrealized-savings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unresolvable-usage-unit-exception
     (ce-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unresolvable-usage-unit-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unresolvable-usage-unit-exception
                    'unresolvable-usage-unit-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-tag-keys :initarg :resource-tag-keys
                         :initform
                         (common-lisp:error ":resource-tag-keys is required")
                         :type
                         (common-lisp:or resource-tag-key-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-tag-keys
                         :shape "ResourceTagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tag-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceTagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype unused-hours () 'common-lisp:string)
(common-lisp:deftype unused-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-anomaly-monitor-request common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-monitor-request-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monitor-name :initarg :monitor-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-monitor-request-monitor-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-anomaly-monitor-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-monitor-request
                    'make-update-anomaly-monitor-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-name))
      (common-lisp:list
       (common-lisp:cons "MonitorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-monitor-response common-lisp:nil
                       ((monitor-arn :initarg :monitor-arn :initform
                         (common-lisp:error ":monitor-arn is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-monitor-response-monitor-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-anomaly-monitor-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-monitor-response
                    'make-update-anomaly-monitor-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn))
      (common-lisp:list
       (common-lisp:cons "MonitorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-subscription-request common-lisp:nil
                       ((subscription-arn :initarg :subscription-arn :initform
                         (common-lisp:error ":subscription-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-subscription-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold :initarg :threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-non-negative-double
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-threshold
                         :shape "NullableNonNegativeDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (frequency :initarg :frequency :initform
                         common-lisp:nil :type
                         (common-lisp:or anomaly-subscription-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-frequency
                         :shape "AnomalySubscriptionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (monitor-arn-list :initarg :monitor-arn-list :initform
                         common-lisp:nil :type
                         (common-lisp:or monitor-arn-list common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-monitor-arn-list
                         :shape "MonitorArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribers :initarg :subscribers :initform
                         common-lisp:nil :type
                         (common-lisp:or subscribers common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-subscribers
                         :shape "Subscribers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-name :initarg :subscription-name
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-request-subscription-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold-expression :initarg :threshold-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-update-anomaly-subscription-request-threshold-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-anomaly-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-subscription-request
                    'make-update-anomaly-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor-arn-list))
      (common-lisp:list
       (common-lisp:cons "MonitorArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "Subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-expression))
      (common-lisp:list
       (common-lisp:cons "ThresholdExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-anomaly-subscription-response common-lisp:nil
                       ((subscription-arn :initarg :subscription-arn :initform
                         (common-lisp:error ":subscription-arn is required")
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-anomaly-subscription-response-subscription-arn
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-anomaly-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-anomaly-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-anomaly-subscription-response
                    'make-update-anomaly-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-arn))
      (common-lisp:list
       (common-lisp:cons "SubscriptionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-anomaly-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cost-allocation-tags-status-error common-lisp:nil
                       ((tag-key :initarg :tag-key :initform common-lisp:nil
                         :type (common-lisp:or tag-key common-lisp:null)
                         :accessor
                         struct-shape-update-cost-allocation-tags-status-error-tag-key
                         :shape "TagKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-cost-allocation-tags-status-error-code
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-update-cost-allocation-tags-status-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cost-allocation-tags-status-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cost-allocation-tags-status-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-error
                    'make-update-cost-allocation-tags-status-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-cost-allocation-tags-status-errors ()
   '(trivial-types:proper-list update-cost-allocation-tags-status-error))
 (common-lisp:defun make-update-cost-allocation-tags-status-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-cost-allocation-tags-status-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-cost-allocation-tags-status-request
                       common-lisp:nil
                       ((cost-allocation-tags-status :initarg
                         :cost-allocation-tags-status :initform
                         (common-lisp:error
                          ":cost-allocation-tags-status is required")
                         :type
                         (common-lisp:or cost-allocation-tag-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cost-allocation-tags-status-request-cost-allocation-tags-status
                         :shape "CostAllocationTagStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cost-allocation-tags-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cost-allocation-tags-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-request
                    'make-update-cost-allocation-tags-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-allocation-tags-status))
      (common-lisp:list
       (common-lisp:cons "CostAllocationTagsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cost-allocation-tags-status-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          update-cost-allocation-tags-status-errors
                          common-lisp:null)
                         :accessor
                         struct-shape-update-cost-allocation-tags-status-response-errors
                         :shape "UpdateCostAllocationTagsStatusErrors"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cost-allocation-tags-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cost-allocation-tags-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cost-allocation-tags-status-response
                    'make-update-cost-allocation-tags-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-allocation-tags-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cost-category-definition-request common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform
                         (common-lisp:error ":cost-category-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-cost-category-definition-request-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-request-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-version :initarg :rule-version :initform
                         (common-lisp:error ":rule-version is required") :type
                         (common-lisp:or cost-category-rule-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-request-rule-version
                         :shape "CostCategoryRuleVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or cost-category-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-request-rules
                         :shape "CostCategoryRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or cost-category-value common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-request-default-value
                         :shape "CostCategoryValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (split-charge-rules :initarg :split-charge-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or cost-category-split-charge-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-request-split-charge-rules
                         :shape "CostCategorySplitChargeRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cost-category-definition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cost-category-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cost-category-definition-request
                    'make-update-cost-category-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-version))
      (common-lisp:list
       (common-lisp:cons "RuleVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-charge-rules))
      (common-lisp:list
       (common-lisp:cons "SplitChargeRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-cost-category-definition-response common-lisp:nil
                       ((cost-category-arn :initarg :cost-category-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-cost-category-definition-response-cost-category-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (effective-start :initarg :effective-start :initform
                         common-lisp:nil :type
                         (common-lisp:or zoned-date-time common-lisp:null)
                         :accessor
                         struct-shape-update-cost-category-definition-response-effective-start
                         :shape "ZonedDateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-cost-category-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-cost-category-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-cost-category-definition-response
                    'make-update-cost-category-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-category-arn))
      (common-lisp:list
       (common-lisp:cons "CostCategoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-start))
      (common-lisp:list
       (common-lisp:cons "EffectiveStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-cost-category-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-services ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-usage-services
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass utilization-by-time common-lisp:nil
                       ((time-period :initarg :time-period :initform
                         common-lisp:nil :type
                         (common-lisp:or date-interval common-lisp:null)
                         :accessor struct-shape-utilization-by-time-time-period
                         :shape "DateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups :initarg :groups :initform common-lisp:nil
                         :type
                         (common-lisp:or reservation-utilization-groups
                                         common-lisp:null)
                         :accessor struct-shape-utilization-by-time-groups
                         :shape "ReservationUtilizationGroups" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total :initarg :total :initform common-lisp:nil :type
                         (common-lisp:or reservation-aggregates
                                         common-lisp:null)
                         :accessor struct-shape-utilization-by-time-total
                         :shape "ReservationAggregates" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-utilization-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'utilization-by-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'utilization-by-time 'make-utilization-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input utilization-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input utilization-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "TimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input utilization-by-time))
   common-lisp:nil))
(common-lisp:deftype utilization-percentage () 'common-lisp:string)
(common-lisp:deftype utilization-percentage-in-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype utilizations-by-time ()
   '(trivial-types:proper-list utilization-by-time))
 (common-lisp:defun make-utilizations-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list utilization-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list value))
 (common-lisp:defun make-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype year-month-day () 'common-lisp:string)
(common-lisp:deftype zoned-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-monitor resource-tags)
   (common-lisp:declare (common-lisp:ignorable anomaly-monitor resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun create-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-subscription resource-tags)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-subscription resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun create-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name effective-start rule-version rules
                     default-value split-charge-rules resource-tags)
   (common-lisp:declare
    (common-lisp:ignorable name effective-start rule-version rules
     default-value split-charge-rules resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun delete-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn)
   (common-lisp:declare (common-lisp:ignorable monitor-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun delete-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn)
   (common-lisp:declare (common-lisp:ignorable subscription-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun delete-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn)
   (common-lisp:declare (common-lisp:ignorable cost-category-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun describe-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn effective-on)
   (common-lisp:declare (common-lisp:ignorable cost-category-arn effective-on))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-cost-category-definition))
(common-lisp:progn
 (common-lisp:defun get-anomalies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn date-interval feedback
                     total-impact next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitor-arn date-interval feedback total-impact
     next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-anomalies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-anomalies))
(common-lisp:progn
 (common-lisp:defun get-anomaly-monitors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn-list next-page-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitor-arn-list next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-anomaly-monitors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalyMonitors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-anomaly-monitors))
(common-lisp:progn
 (common-lisp:defun get-anomaly-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn-list monitor-arn
                     next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable subscription-arn-list monitor-arn next-page-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-anomaly-subscriptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAnomalySubscriptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-anomaly-subscriptions))
(common-lisp:progn
 (common-lisp:defun get-approximate-usage-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key granularity services
                     approximation-dimension)
   (common-lisp:declare
    (common-lisp:ignorable granularity services approximation-dimension))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-approximate-usage-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetApproximateUsageRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-approximate-usage-records))
(common-lisp:progn
 (common-lisp:defun get-cost-and-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter metrics
                     group-by next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter metrics group-by
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-and-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostAndUsage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cost-and-usage))
(common-lisp:progn
 (common-lisp:defun get-cost-and-usage-with-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter metrics
                     group-by next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter metrics group-by
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cost-and-usage-with-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostAndUsageWithResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cost-and-usage-with-resources))
(common-lisp:progn
 (common-lisp:defun get-cost-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period
                     cost-category-name filter sort-by max-results
                     next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period cost-category-name filter
     sort-by max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-categories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostCategories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cost-categories))
(common-lisp:progn
 (common-lisp:defun get-cost-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period metric granularity filter
                     prediction-interval-level)
   (common-lisp:declare
    (common-lisp:ignorable time-period metric granularity filter
     prediction-interval-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-cost-forecast))
(common-lisp:progn
 (common-lisp:defun get-dimension-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period dimension
                     context filter sort-by max-results next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period dimension context filter
     sort-by max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dimension-values-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDimensionValues"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dimension-values))
(common-lisp:progn
 (common-lisp:defun get-reservation-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     metrics next-page-token sort-by max-results)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter metrics
     next-page-token sort-by max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-reservation-coverage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationCoverage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-reservation-coverage))
(common-lisp:progn
 (common-lisp:defun get-reservation-purchase-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id service filter account-scope
                     lookback-period-in-days term-in-years payment-option
                     service-specification page-size next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id service filter account-scope
     lookback-period-in-days term-in-years payment-option service-specification
     page-size next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reservation-purchase-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationPurchaseRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-reservation-purchase-recommendation))
(common-lisp:progn
 (common-lisp:defun get-reservation-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     sort-by next-page-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter sort-by
     next-page-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reservation-utilization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetReservationUtilization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-reservation-utilization))
(common-lisp:progn
 (common-lisp:defun get-rightsizing-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter configuration service page-size
                     next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable filter configuration service page-size
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-rightsizing-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRightsizingRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-rightsizing-recommendation))
(common-lisp:progn
 (common-lisp:defun get-savings-plan-purchase-recommendation-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommendation-detail-id)
   (common-lisp:declare (common-lisp:ignorable recommendation-detail-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plan-purchase-recommendation-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlanPurchaseRecommendationDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-savings-plan-purchase-recommendation-details))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-coverage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period group-by granularity filter
                     metrics next-token max-results sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period group-by granularity filter metrics
     next-token max-results sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-coverage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansCoverage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-savings-plans-coverage))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-purchase-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key savings-plans-type term-in-years
                     payment-option account-scope next-page-token page-size
                     lookback-period-in-days filter)
   (common-lisp:declare
    (common-lisp:ignorable savings-plans-type term-in-years payment-option
     account-scope next-page-token page-size lookback-period-in-days filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-purchase-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansPurchaseRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-savings-plans-purchase-recommendation))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-utilization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period granularity filter sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period granularity filter sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-utilization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansUtilization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-savings-plans-utilization))
(common-lisp:progn
 (common-lisp:defun get-savings-plans-utilization-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period filter data-type next-token
                     max-results sort-by)
   (common-lisp:declare
    (common-lisp:ignorable time-period filter data-type next-token max-results
     sort-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-savings-plans-utilization-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSavingsPlansUtilizationDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-savings-plans-utilization-details))
(common-lisp:progn
 (common-lisp:defun get-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-string time-period tag-key filter
                     sort-by max-results next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable search-string time-period tag-key filter sort-by
     max-results next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-tags))
(common-lisp:progn
 (common-lisp:defun get-usage-forecast
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key time-period metric granularity filter
                     prediction-interval-level)
   (common-lisp:declare
    (common-lisp:ignorable time-period metric granularity filter
     prediction-interval-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-forecast-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUsageForecast"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-usage-forecast))
(common-lisp:progn
 (common-lisp:defun list-cost-allocation-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status tag-keys type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status tag-keys type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cost-allocation-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCostAllocationTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cost-allocation-tags))
(common-lisp:progn
 (common-lisp:defun list-cost-category-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key effective-on next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable effective-on next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-cost-category-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCostCategoryDefinitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-cost-category-definitions))
(common-lisp:progn
 (common-lisp:defun list-savings-plans-purchase-recommendation-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key generation-status recommendation-ids
                     page-size next-page-token)
   (common-lisp:declare
    (common-lisp:ignorable generation-status recommendation-ids page-size
     next-page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-savings-plans-purchase-recommendation-generation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSavingsPlansPurchaseRecommendationGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-savings-plans-purchase-recommendation-generation))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun provide-anomaly-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-id feedback)
   (common-lisp:declare (common-lisp:ignorable anomaly-id feedback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-provide-anomaly-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ProvideAnomalyFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'provide-anomaly-feedback))
(common-lisp:progn
 (common-lisp:defun start-savings-plans-purchase-recommendation-generation ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'ce-request :method "POST" :path "/" :operation
                                "StartSavingsPlansPurchaseRecommendationGeneration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'start-savings-plans-purchase-recommendation-generation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-anomaly-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitor-arn monitor-name)
   (common-lisp:declare (common-lisp:ignorable monitor-arn monitor-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-anomaly-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAnomalyMonitor"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-anomaly-monitor))
(common-lisp:progn
 (common-lisp:defun update-anomaly-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-arn threshold frequency
                     monitor-arn-list subscribers subscription-name
                     threshold-expression)
   (common-lisp:declare
    (common-lisp:ignorable subscription-arn threshold frequency
     monitor-arn-list subscribers subscription-name threshold-expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-anomaly-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAnomalySubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-anomaly-subscription))
(common-lisp:progn
 (common-lisp:defun update-cost-allocation-tags-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-allocation-tags-status)
   (common-lisp:declare (common-lisp:ignorable cost-allocation-tags-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cost-allocation-tags-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCostAllocationTagsStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cost-allocation-tags-status))
(common-lisp:progn
 (common-lisp:defun update-cost-category-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cost-category-arn effective-start
                     rule-version rules default-value split-charge-rules)
   (common-lisp:declare
    (common-lisp:ignorable cost-category-arn effective-start rule-version rules
     default-value split-charge-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-cost-category-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ce-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCostCategoryDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-cost-category-definition))
