;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codestar/api
  (:use)
  (:nicknames #:aws/codestar)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codestar/api)
(common-lisp:progn
 (common-lisp:define-condition codestar-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codestar-error))
(common-lisp:progn
 (common-lisp:defclass codestar-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "codestar" :api-version
                        "2017-04-19" :host-prefix "codestar" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "CodeStar_20170419" :json-version
                        "1.1"))
 (common-lisp:export 'codestar-request))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidServiceRoleException" . invalid-service-role-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ProjectAlreadyExistsException" . project-already-exists-exception)
    ("ProjectConfigurationException" . project-configuration-exception)
    ("ProjectCreationFailedException" . project-creation-failed-exception)
    ("ProjectNotFoundException" . project-not-found-exception)
    ("TeamMemberAlreadyAssociatedException"
     . team-member-already-associated-exception)
    ("TeamMemberNotFoundException" . team-member-not-found-exception)
    ("UserProfileAlreadyExistsException"
     . user-profile-already-exists-exception)
    ("UserProfileNotFoundException" . user-profile-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass associate-team-member-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-associate-team-member-request-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-associate-team-member-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-associate-team-member-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-role :initarg :project-role :initform
                         (common-lisp:error ":projectrole is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-associate-team-member-request-project-role
                         :shape "Role" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access-allowed :initarg :remote-access-allowed
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-allowed
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-team-member-request-remote-access-allowed
                         :shape "RemoteAccessAllowed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-team-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-team-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-team-member-request
                    'make-associate-team-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-role))
      (common-lisp:list
       (common-lisp:cons "projectRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-allowed))
      (common-lisp:list
       (common-lisp:cons "remoteAccessAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-team-member-result common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-associate-team-member-result-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-team-member-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-team-member-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-team-member-result
                    'make-associate-team-member-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-team-member-result))
   common-lisp:nil))
(common-lisp:deftype bucket-key () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or code-source common-lisp:null)
                         :accessor struct-shape-code-source :shape "CodeSource"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or code-destination common-lisp:null)
                         :accessor struct-shape-code-destination :shape
                         "CodeDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code 'make-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-commit-code-destination common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         struct-shape-code-commit-code-destination-name :shape
                         "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-commit-code-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-commit-code-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-commit-code-destination
                    'make-code-commit-code-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-code-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-code-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-code-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-destination common-lisp:nil
                       ((code-commit :initarg :code-commit :initform
                         common-lisp:nil :type
                         (common-lisp:or code-commit-code-destination
                                         common-lisp:null)
                         :accessor struct-shape-code-destination-code-commit
                         :shape "CodeCommitCodeDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (git-hub :initarg :git-hub :initform common-lisp:nil
                         :type
                         (common-lisp:or git-hub-code-destination
                                         common-lisp:null)
                         :accessor struct-shape-code-destination-git-hub :shape
                         "GitHubCodeDestination" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-destination 'make-code-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-commit))
      (common-lisp:list
       (common-lisp:cons "codeCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-hub))
      (common-lisp:list
       (common-lisp:cons "gitHub"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-source common-lisp:nil
                       ((s3 :initarg :s3 :initform
                         (common-lisp:error ":s3 is required") :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-code-source-s3 :shape "S3Location"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code-source 'make-code-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'concurrent-modification-exception)))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-create-project-request-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-description :shape
                         "ProjectDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-code :initarg :source-code :initform
                         common-lisp:nil :type
                         (common-lisp:or source-code common-lisp:null)
                         :accessor
                         struct-shape-create-project-request-source-code :shape
                         "SourceCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (toolchain :initarg :toolchain :initform
                         common-lisp:nil :type
                         (common-lisp:or toolchain common-lisp:null) :accessor
                         struct-shape-create-project-request-toolchain :shape
                         "Toolchain" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-project-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code))
      (common-lisp:list
       (common-lisp:cons "sourceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'toolchain))
      (common-lisp:list
       (common-lisp:cons "toolchain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-project-result common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-create-project-result-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-create-project-result-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-create-project-result-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-template-id :initarg :project-template-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-template-id common-lisp:null)
                         :accessor
                         struct-shape-create-project-result-project-template-id
                         :shape "ProjectTemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-project-result 'make-create-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-template-id))
      (common-lisp:list
       (common-lisp:cons "projectTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         (common-lisp:error ":displayname is required") :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-request-display-name
                         :shape "UserProfileDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         (common-lisp:error ":emailaddress is required") :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-request-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-request
                    'make-create-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-result common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-create-user-profile-result-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-result-display-name
                         :shape "UserProfileDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-create-user-profile-result-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-result-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-result-created-timestamp
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modified-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-profile-result-last-modified-timestamp
                         :shape "LastModifiedTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-result
                    'make-create-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   common-lisp:nil))
(common-lisp:deftype created-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-delete-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-stack :initarg :delete-stack :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-stack common-lisp:null)
                         :accessor
                         struct-shape-delete-project-request-delete-stack
                         :shape "DeleteStack" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-stack))
      (common-lisp:list
       (common-lisp:cons "deleteStack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-result common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or stack-id common-lisp:null)
                         :accessor struct-shape-delete-project-result-stack-id
                         :shape "StackId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-project-result-project-arn :shape
                         "ProjectArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-project-result 'make-delete-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "stackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   common-lisp:nil))
(common-lisp:deftype delete-stack () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-user-profile-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-delete-user-profile-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-profile-request
                    'make-delete-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-profile-result common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-delete-user-profile-result-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-profile-result
                    'make-delete-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-describe-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-describe-project-result-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-describe-project-result-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-describe-project-result-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor
                         struct-shape-describe-project-result-description
                         :shape "ProjectDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-describe-project-result-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp
                         :initform common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-project-result-created-time-stamp
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or stack-id common-lisp:null)
                         :accessor
                         struct-shape-describe-project-result-stack-id :shape
                         "StackId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-template-id :initarg :project-template-id
                         :initform common-lisp:nil :type
                         (common-lisp:or project-template-id common-lisp:null)
                         :accessor
                         struct-shape-describe-project-result-project-template-id
                         :shape "ProjectTemplateId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or project-status common-lisp:null)
                         :accessor struct-shape-describe-project-result-status
                         :shape "ProjectStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-project-result 'make-describe-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "createdTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "stackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-template-id))
      (common-lisp:list
       (common-lisp:cons "projectTemplateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-profile-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-describe-user-profile-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-profile-request
                    'make-describe-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-profile-result common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-describe-user-profile-result-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-user-profile-result-display-name
                         :shape "UserProfileDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-describe-user-profile-result-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-describe-user-profile-result-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform
                         (common-lisp:error ":createdtimestamp is required")
                         :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-describe-user-profile-result-created-timestamp
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform
                         (common-lisp:error
                          ":lastmodifiedtimestamp is required")
                         :type
                         (common-lisp:or last-modified-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-user-profile-result-last-modified-timestamp
                         :shape "LastModifiedTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-profile-result
                    'make-describe-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-team-member-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-disassociate-team-member-request-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-disassociate-team-member-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-team-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-team-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-team-member-request
                    'make-disassociate-team-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-team-member-result common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-team-member-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-team-member-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-team-member-result
                    'make-disassociate-team-member-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-team-member-result))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass git-hub-code-destination common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor struct-shape-git-hub-code-destination-name
                         :shape "RepositoryName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-hub-code-destination-description
                         :shape "RepositoryDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or repository-type common-lisp:null)
                         :accessor struct-shape-git-hub-code-destination-type
                         :shape "RepositoryType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or repository-owner common-lisp:null)
                         :accessor struct-shape-git-hub-code-destination-owner
                         :shape "RepositoryOwner" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-repository :initarg :private-repository
                         :initform
                         (common-lisp:error ":privaterepository is required")
                         :type
                         (common-lisp:or repository-is-private
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-hub-code-destination-private-repository
                         :shape "RepositoryIsPrivate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issues-enabled :initarg :issues-enabled :initform
                         (common-lisp:error ":issuesenabled is required") :type
                         (common-lisp:or repository-enable-issues
                                         common-lisp:null)
                         :accessor
                         struct-shape-git-hub-code-destination-issues-enabled
                         :shape "RepositoryEnableIssues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (token :initarg :token :initform
                         (common-lisp:error ":token is required") :type
                         (common-lisp:or git-hub-personal-token
                                         common-lisp:null)
                         :accessor struct-shape-git-hub-code-destination-token
                         :shape "GitHubPersonalToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-git-hub-code-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'git-hub-code-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'git-hub-code-destination 'make-git-hub-code-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-code-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-code-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-repository))
      (common-lisp:list
       (common-lisp:cons "privateRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues-enabled))
      (common-lisp:list
       (common-lisp:cons "issuesEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-hub-code-destination))
   common-lisp:nil))
(common-lisp:deftype git-hub-personal-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-service-role-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-service-role-exception)))
(common-lisp:deftype last-modified-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-projects-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-projects-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-result common-lisp:nil
                       ((projects :initarg :projects :initform
                         (common-lisp:error ":projects is required") :type
                         (common-lisp:or projects-list common-lisp:null)
                         :accessor struct-shape-list-projects-result-projects
                         :shape "ProjectsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-projects-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-projects-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-projects-result 'make-list-projects-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-resources-request-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resources-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-resources-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resources-request 'make-list-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resources-result common-lisp:nil
                       ((resources :initarg :resources :initform
                         common-lisp:nil :type
                         (common-lisp:or resources-result common-lisp:null)
                         :accessor struct-shape-list-resources-result-resources
                         :shape "ResourcesResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-resources-result-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resources-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resources-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resources-result 'make-list-resources-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resources-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-tags-for-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-project-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-project-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-project-request
                    'make-list-tags-for-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-project-result common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-project-result-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-project-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-project-result
                    'make-list-tags-for-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-team-members-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-list-team-members-request-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-team-members-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-team-members-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-team-members-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-team-members-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-team-members-request
                    'make-list-team-members-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-team-members-result common-lisp:nil
                       ((team-members :initarg :team-members :initform
                         (common-lisp:error ":teammembers is required") :type
                         (common-lisp:or team-member-result common-lisp:null)
                         :accessor
                         struct-shape-list-team-members-result-team-members
                         :shape "TeamMemberResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-team-members-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-team-members-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-team-members-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-team-members-result 'make-list-team-members-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-members))
      (common-lisp:list
       (common-lisp:cons "teamMembers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-team-members-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-profiles-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-profiles-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-user-profiles-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-profiles-request
                    'make-list-user-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-user-profiles-result common-lisp:nil
                       ((user-profiles :initarg :user-profiles :initform
                         (common-lisp:error ":userprofiles is required") :type
                         (common-lisp:or user-profiles-list common-lisp:null)
                         :accessor
                         struct-shape-list-user-profiles-result-user-profiles
                         :shape "UserProfilesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-user-profiles-result-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-user-profiles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-user-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-user-profiles-result
                    'make-list-user-profiles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profiles))
      (common-lisp:list
       (common-lisp:cons "userProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition project-already-exists-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'project-already-exists-exception)))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition project-configuration-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'project-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition project-creation-failed-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'project-creation-failed-exception)))
(common-lisp:deftype project-description () 'common-lisp:string)
(common-lisp:deftype project-id () 'common-lisp:string)
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition project-not-found-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'project-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass project-status common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or state common-lisp:null) :accessor
                         struct-shape-project-status-state :shape "State"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or reason common-lisp:null)
                         :accessor struct-shape-project-status-reason :shape
                         "Reason" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-status 'make-project-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass project-summary common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         common-lisp:nil :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-project-summary-project-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-arn :initarg :project-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or project-arn common-lisp:null)
                         :accessor struct-shape-project-summary-project-arn
                         :shape "ProjectArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-project-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'project-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:deftype project-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype projects-list ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun make-projects-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:deftype remote-access-allowed () 'common-lisp:boolean)
(common-lisp:deftype repository-description () 'common-lisp:string)
(common-lisp:deftype repository-enable-issues () 'common-lisp:boolean)
(common-lisp:deftype repository-is-private () 'common-lisp:boolean)
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:deftype repository-owner () 'common-lisp:string)
(common-lisp:deftype repository-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-id :shape "ResourceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources-result ()
   '(trivial-types:proper-list resource))
 (common-lisp:defun make-resources-result
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-s3location-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-key :initarg :bucket-key :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-key common-lisp:null) :accessor
                         struct-shape-s3location-bucket-key :shape "BucketKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key))
      (common-lisp:list
       (common-lisp:cons "bucketKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-code () '(trivial-types:proper-list code))
 (common-lisp:defun make-source-code
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssh-public-key () 'common-lisp:string)
(common-lisp:deftype stack-id () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-tag-project-request-id :shape "ProjectId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-project-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-project-request 'make-tag-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-project-result common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-project-result-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-project-result 'make-tag-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-project-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass team-member common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-team-member-user-arn :shape "UserArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-role :initarg :project-role :initform
                         (common-lisp:error ":projectrole is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-team-member-project-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access-allowed :initarg :remote-access-allowed
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-allowed
                                         common-lisp:null)
                         :accessor
                         struct-shape-team-member-remote-access-allowed :shape
                         "RemoteAccessAllowed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-team-member
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'team-member
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'team-member 'make-team-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input team-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input team-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-role))
      (common-lisp:list
       (common-lisp:cons "projectRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-allowed))
      (common-lisp:list
       (common-lisp:cons "remoteAccessAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input team-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition team-member-already-associated-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'team-member-already-associated-exception)))
(common-lisp:progn
 (common-lisp:define-condition team-member-not-found-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'team-member-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype team-member-result ()
   '(trivial-types:proper-list team-member))
 (common-lisp:defun make-team-member-result
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list team-member))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-template-parameter-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype template-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass toolchain common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or toolchain-source common-lisp:null)
                         :accessor struct-shape-toolchain-source :shape
                         "ToolchainSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-toolchain-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-parameters :initarg :stack-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or template-parameter-map
                                         common-lisp:null)
                         :accessor struct-shape-toolchain-stack-parameters
                         :shape "TemplateParameterMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-toolchain
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'toolchain
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'toolchain 'make-toolchain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input toolchain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input toolchain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-parameters))
      (common-lisp:list
       (common-lisp:cons "stackParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input toolchain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass toolchain-source common-lisp:nil
                       ((s3 :initarg :s3 :initform
                         (common-lisp:error ":s3 is required") :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-toolchain-source-s3 :shape "S3Location"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-toolchain-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'toolchain-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'toolchain-source 'make-toolchain-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input toolchain-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input toolchain-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "s3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input toolchain-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-untag-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-project-request-tags :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-project-request 'make-untag-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-project-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-project-result 'make-untag-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-project-request-id :shape
                         "ProjectId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor struct-shape-update-project-request-name
                         :shape "ProjectName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or project-description common-lisp:null)
                         :accessor
                         struct-shape-update-project-request-description :shape
                         "ProjectDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-project-result common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-project-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-project-result 'make-update-project-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-team-member-request common-lisp:nil
                       ((project-id :initarg :project-id :initform
                         (common-lisp:error ":projectid is required") :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         struct-shape-update-team-member-request-project-id
                         :shape "ProjectId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-update-team-member-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (project-role :initarg :project-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-update-team-member-request-project-role
                         :shape "Role" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access-allowed :initarg :remote-access-allowed
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-allowed
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-team-member-request-remote-access-allowed
                         :shape "RemoteAccessAllowed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-team-member-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-team-member-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-team-member-request
                    'make-update-team-member-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-role))
      (common-lisp:list
       (common-lisp:cons "projectRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-allowed))
      (common-lisp:list
       (common-lisp:cons "remoteAccessAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-team-member-result common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or user-arn common-lisp:null)
                         :accessor
                         struct-shape-update-team-member-result-user-arn :shape
                         "UserArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (project-role :initarg :project-role :initform
                         common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-update-team-member-result-project-role
                         :shape "Role" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (remote-access-allowed :initarg :remote-access-allowed
                         :initform common-lisp:nil :type
                         (common-lisp:or remote-access-allowed
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-team-member-result-remote-access-allowed
                         :shape "RemoteAccessAllowed" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-team-member-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-team-member-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-team-member-result
                    'make-update-team-member-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-role))
      (common-lisp:list
       (common-lisp:cons "projectRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remote-access-allowed))
      (common-lisp:list
       (common-lisp:cons "remoteAccessAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-team-member-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-profile-request common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-request-display-name
                         :shape "UserProfileDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-request-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-request
                    'make-update-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-profile-result common-lisp:nil
                       ((user-arn :initarg :user-arn :initform
                         (common-lisp:error ":userarn is required") :type
                         (common-lisp:or user-arn common-lisp:null) :accessor
                         struct-shape-update-user-profile-result-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-result-display-name
                         :shape "UserProfileDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-update-user-profile-result-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-result-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-result-created-timestamp
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or last-modified-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-profile-result-last-modified-timestamp
                         :shape "LastModifiedTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-result
                    'make-update-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-result))
   common-lisp:nil))
(common-lisp:deftype user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition user-profile-already-exists-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-profile-already-exists-exception)))
(common-lisp:deftype user-profile-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition user-profile-not-found-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'user-profile-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass user-profile-summary common-lisp:nil
                       ((user-arn :initarg :user-arn :initform common-lisp:nil
                         :type (common-lisp:or user-arn common-lisp:null)
                         :accessor struct-shape-user-profile-summary-user-arn
                         :shape "UserArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profile-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-profile-summary-display-name :shape
                         "UserProfileDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-user-profile-summary-email-address :shape
                         "Email" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssh-public-key common-lisp:null)
                         :accessor
                         struct-shape-user-profile-summary-ssh-public-key
                         :shape "SshPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-profile-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-profile-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-profile-summary 'make-user-profile-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "sshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-profiles-list ()
   '(trivial-types:proper-list user-profile-summary))
 (common-lisp:defun make-user-profiles-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-profile-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codestar-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:progn
 (common-lisp:defun associate-team-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id client-request-token user-arn
                     project-role remote-access-allowed)
   (common-lisp:declare
    (common-lisp:ignorable project-id client-request-token user-arn
     project-role remote-access-allowed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-team-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateTeamMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-team-member))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name id description client-request-token
                     source-code toolchain tags)
   (common-lisp:declare
    (common-lisp:ignorable name id description client-request-token source-code
     toolchain tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn display-name email-address
                     ssh-public-key)
   (common-lisp:declare
    (common-lisp:ignorable user-arn display-name email-address ssh-public-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-profile))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id client-request-token delete-stack)
   (common-lisp:declare
    (common-lisp:ignorable id client-request-token delete-stack))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn)
   (common-lisp:declare (common-lisp:ignorable user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-profile))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun describe-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn)
   (common-lisp:declare (common-lisp:ignorable user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-profile))
(common-lisp:progn
 (common-lisp:defun disassociate-team-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id user-arn)
   (common-lisp:declare (common-lisp:ignorable project-id user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-team-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateTeamMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-team-member))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resources))
(common-lisp:progn
 (common-lisp:defun list-tags-for-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-project))
(common-lisp:progn
 (common-lisp:defun list-team-members
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-team-members-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTeamMembers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-team-members))
(common-lisp:progn
 (common-lisp:defun list-user-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-user-profiles))
(common-lisp:progn
 (common-lisp:defun tag-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id tags)
   (common-lisp:declare (common-lisp:ignorable id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-project))
(common-lisp:progn
 (common-lisp:defun untag-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id tags)
   (common-lisp:declare (common-lisp:ignorable id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-project))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name description)
   (common-lisp:declare (common-lisp:ignorable id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-team-member
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id user-arn project-role
                     remote-access-allowed)
   (common-lisp:declare
    (common-lisp:ignorable project-id user-arn project-role
     remote-access-allowed))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-team-member-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTeamMember"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-team-member))
(common-lisp:progn
 (common-lisp:defun update-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-arn display-name email-address
                     ssh-public-key)
   (common-lisp:declare
    (common-lisp:ignorable user-arn display-name email-address ssh-public-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codestar-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-profile))
