;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/appmesh/api
  (:use)
  (:nicknames #:aws/appmesh)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/appmesh/api)
(common-lisp:progn
 (common-lisp:define-condition appmesh-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'appmesh-error))
(common-lisp:progn
 (common-lisp:defclass appmesh-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "appmesh" :api-version
                        "2019-01-25" :host-prefix "appmesh" :signing-name
                        "appmesh" :global-host common-lisp:nil))
 (common-lisp:export 'appmesh-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:defclass access-log common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or file-access-log common-lisp:null)
                         :accessor struct-shape-access-log-file :shape
                         "FileAccessLog" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-log 'make-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-log))
   common-lisp:nil))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-cloud-map-instance-attribute common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or aws-cloud-map-instance-attribute-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-instance-attribute-key
                         :shape "AwsCloudMapInstanceAttributeKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or aws-cloud-map-instance-attribute-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-instance-attribute-value
                         :shape "AwsCloudMapInstanceAttributeValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-cloud-map-instance-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-map-instance-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-instance-attribute
                    'make-aws-cloud-map-instance-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-instance-attribute))
   common-lisp:nil))
(common-lisp:deftype aws-cloud-map-instance-attribute-key ()
  'common-lisp:string)
(common-lisp:deftype aws-cloud-map-instance-attribute-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-cloud-map-instance-attributes ()
   '(trivial-types:proper-list aws-cloud-map-instance-attribute))
 (common-lisp:defun make-aws-cloud-map-instance-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-cloud-map-instance-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-cloud-map-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-cloud-map-service-discovery common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-cloud-map-instance-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-service-discovery-attributes
                         :shape "AwsCloudMapInstanceAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-preference :initarg :ip-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-service-discovery-ip-preference
                         :shape "IpPreference" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (namespace-name :initarg :namespace-name :initform
                         (common-lisp:error ":namespacename is required") :type
                         (common-lisp:or aws-cloud-map-name common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-service-discovery-namespace-name
                         :shape "AwsCloudMapName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":servicename is required") :type
                         (common-lisp:or aws-cloud-map-name common-lisp:null)
                         :accessor
                         struct-shape-aws-cloud-map-service-discovery-service-name
                         :shape "AwsCloudMapName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-cloud-map-service-discovery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-cloud-map-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-cloud-map-service-discovery
                    'make-aws-cloud-map-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-cloud-map-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend common-lisp:nil
                       ((virtual-service :initarg :virtual-service :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-service-backend
                                         common-lisp:null)
                         :accessor struct-shape-backend-virtual-service :shape
                         "VirtualServiceBackend" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'backend 'make-backend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-defaults common-lisp:nil
                       ((client-policy :initarg :client-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or client-policy common-lisp:null)
                         :accessor struct-shape-backend-defaults-client-policy
                         :shape "ClientPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-defaults
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-defaults 'make-backend-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype backends () '(trivial-types:proper-list backend))
 (common-lisp:defun make-backends
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-certificate-authority-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass client-policy common-lisp:nil
                       ((tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or client-policy-tls common-lisp:null)
                         :accessor struct-shape-client-policy-tls :shape
                         "ClientPolicyTls" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'client-policy 'make-client-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-policy-tls common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or client-tls-certificate
                                         common-lisp:null)
                         :accessor struct-shape-client-policy-tls-certificate
                         :shape "ClientTlsCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enforce :initarg :enforce :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-client-policy-tls-enforce
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ports :initarg :ports :initform common-lisp:nil :type
                         (common-lisp:or port-set common-lisp:null) :accessor
                         struct-shape-client-policy-tls-ports :shape "PortSet"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation :initarg :validation :initform
                         (common-lisp:error ":validation is required") :type
                         (common-lisp:or tls-validation-context
                                         common-lisp:null)
                         :accessor struct-shape-client-policy-tls-validation
                         :shape "TlsValidationContext" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-policy-tls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-policy-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'client-policy-tls 'make-client-policy-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass client-tls-certificate common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or listener-tls-file-certificate
                                         common-lisp:null)
                         :accessor struct-shape-client-tls-certificate-file
                         :shape "ListenerTlsFileCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or listener-tls-sds-certificate
                                         common-lisp:null)
                         :accessor struct-shape-client-tls-certificate-sds
                         :shape "ListenerTlsSdsCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-client-tls-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'client-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'client-tls-certificate 'make-client-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-gateway-route-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-gateway-route-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-route-input-gateway-route-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-gateway-route-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor struct-shape-create-gateway-route-input-spec
                         :shape "GatewayRouteSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-gateway-route-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-route-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-input
                    'make-create-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :gateway-route :initform
                         (common-lisp:error ":gatewayroute is required") :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor
                         struct-shape-create-gateway-route-output-gateway-route
                         :shape "GatewayRouteData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-gateway-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-gateway-route-output
                    'make-create-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-mesh-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-mesh-input-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-mesh-input-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         struct-shape-create-mesh-input-spec :shape "MeshSpec"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-mesh-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mesh-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mesh-input 'make-create-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mesh-output common-lisp:nil
                       ((mesh :initarg :mesh :initform
                         (common-lisp:error ":mesh is required") :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         struct-shape-create-mesh-output-mesh :shape "MeshData"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mesh-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mesh-output 'make-create-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input create-mesh-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-route-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-route-input-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-route-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner")
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-create-route-input-route-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         struct-shape-create-route-input-spec :shape
                         "RouteSpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-route-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-route-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-route-input 'make-create-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-route-output common-lisp:nil
                       ((route :initarg :route :initform
                         (common-lisp:error ":route is required") :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         struct-shape-create-route-output-route :shape
                         "RouteData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-route-output 'make-create-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input create-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-virtual-gateway-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-virtual-gateway-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-gateway-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-virtual-gateway-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-gateway-input-spec :shape
                         "VirtualGatewaySpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-virtual-gateway-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-gateway-input-virtual-gateway-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-gateway-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-input
                    'make-create-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :virtual-gateway :initform
                         (common-lisp:error ":virtualgateway is required")
                         :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-gateway-output-virtual-gateway
                         :shape "VirtualGatewayData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-gateway-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-gateway-output
                    'make-create-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-gateway-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-virtual-node-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-virtual-node-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-node-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-virtual-node-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor struct-shape-create-virtual-node-input-spec
                         :shape "VirtualNodeSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-virtual-node-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-node-input-virtual-node-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-input
                    'make-create-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :virtual-node :initform
                         (common-lisp:error ":virtualnode is required") :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-node-output-virtual-node
                         :shape "VirtualNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-node-output
                    'make-create-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-node-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-virtual-router-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-virtual-router-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-router-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-virtual-router-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-router-input-spec :shape
                         "VirtualRouterSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-virtual-router-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-router-input-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-router-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-input
                    'make-create-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :virtual-router :initform
                         (common-lisp:error ":virtualrouter is required") :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-router-output-virtual-router
                         :shape "VirtualRouterData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-router-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-router-output
                    'make-create-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-router-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass create-virtual-service-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-virtual-service-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-service-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-virtual-service-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-service-input-spec :shape
                         "VirtualServiceSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-virtual-service-input-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-service-input-virtual-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-input
                    'make-create-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :virtual-service :initform
                         (common-lisp:error ":virtualservice is required")
                         :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         struct-shape-create-virtual-service-output-virtual-service
                         :shape "VirtualServiceData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-virtual-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-virtual-service-output
                    'make-create-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-service-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype default-gateway-route-rewrite () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-gateway-route-input common-lisp:nil
                       ((gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-gateway-route-input-gateway-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "gatewayRouteName")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-gateway-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-gateway-route-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-gateway-route-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-input
                    'make-delete-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :gateway-route :initform
                         (common-lisp:error ":gatewayroute is required") :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor
                         struct-shape-delete-gateway-route-output-gateway-route
                         :shape "GatewayRouteData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-gateway-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-route-output
                    'make-delete-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-mesh-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-mesh-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mesh-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-input 'make-delete-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mesh-output common-lisp:nil
                       ((mesh :initarg :mesh :initform
                         (common-lisp:error ":mesh is required") :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         struct-shape-delete-mesh-output-mesh :shape "MeshData"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mesh-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mesh-output 'make-delete-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input delete-mesh-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-route-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-route-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner")
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-delete-route-input-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "routeName")
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-route-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-route-input 'make-delete-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-route-output common-lisp:nil
                       ((route :initarg :route :initform
                         (common-lisp:error ":route is required") :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         struct-shape-delete-route-output-route :shape
                         "RouteData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-route-output 'make-delete-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input delete-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-gateway-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-gateway-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-virtual-gateway-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-gateway-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-gateway-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-input
                    'make-delete-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :virtual-gateway :initform
                         (common-lisp:error ":virtualgateway is required")
                         :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-gateway-output-virtual-gateway
                         :shape "VirtualGatewayData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-gateway-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-gateway-output
                    'make-delete-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-gateway-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-node-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-node-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-virtual-node-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-node-input-virtual-node-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualNodeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-input
                    'make-delete-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :virtual-node :initform
                         (common-lisp:error ":virtualnode is required") :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-node-output-virtual-node
                         :shape "VirtualNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-node-output
                    'make-delete-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-node-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-router-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-router-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-virtual-router-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-router-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-router-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-input
                    'make-delete-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :virtual-router :initform
                         (common-lisp:error ":virtualrouter is required") :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-router-output-virtual-router
                         :shape "VirtualRouterData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-router-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-router-output
                    'make-delete-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-router-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-service-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-service-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-virtual-service-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-service-input-virtual-service-name
                         :shape "ServiceName" :location "uri" :location-name
                         "virtualServiceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-input
                    'make-delete-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :virtual-service :initform
                         (common-lisp:error ":virtualservice is required")
                         :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         struct-shape-delete-virtual-service-output-virtual-service
                         :shape "VirtualServiceData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-virtual-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-service-output
                    'make-delete-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-service-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-route-input common-lisp:nil
                       ((gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-route-input-gateway-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "gatewayRouteName")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-gateway-route-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-route-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-input
                    'make-describe-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :gateway-route :initform
                         (common-lisp:error ":gatewayroute is required") :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor
                         struct-shape-describe-gateway-route-output-gateway-route
                         :shape "GatewayRouteData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-gateway-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-route-output
                    'make-describe-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-mesh-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-describe-mesh-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-mesh-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mesh-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-input 'make-describe-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-mesh-output common-lisp:nil
                       ((mesh :initarg :mesh :initform
                         (common-lisp:error ":mesh is required") :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         struct-shape-describe-mesh-output-mesh :shape
                         "MeshData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-mesh-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-mesh-output 'make-describe-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input describe-mesh-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-route-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-describe-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-route-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner")
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-describe-route-input-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "routeName")
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-route-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-route-input 'make-describe-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-route-output common-lisp:nil
                       ((route :initarg :route :initform
                         (common-lisp:error ":route is required") :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         struct-shape-describe-route-output-route :shape
                         "RouteData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-route-output 'make-describe-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-gateway-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-gateway-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-virtual-gateway-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-gateway-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-gateway-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-input
                    'make-describe-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :virtual-gateway :initform
                         (common-lisp:error ":virtualgateway is required")
                         :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-gateway-output-virtual-gateway
                         :shape "VirtualGatewayData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-gateway-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-gateway-output
                    'make-describe-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-gateway-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-node-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-node-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-virtual-node-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-node-input-virtual-node-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualNodeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-input
                    'make-describe-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :virtual-node :initform
                         (common-lisp:error ":virtualnode is required") :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-node-output-virtual-node
                         :shape "VirtualNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-node-output
                    'make-describe-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-node-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-router-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-router-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-virtual-router-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-router-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-router-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-input
                    'make-describe-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :virtual-router :initform
                         (common-lisp:error ":virtualrouter is required") :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-router-output-virtual-router
                         :shape "VirtualRouterData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-router-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-router-output
                    'make-describe-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-router-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-service-input common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-service-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-virtual-service-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-service-input-virtual-service-name
                         :shape "ServiceName" :location "uri" :location-name
                         "virtualServiceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-input
                    'make-describe-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :virtual-service :initform
                         (common-lisp:error ":virtualservice is required")
                         :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         struct-shape-describe-virtual-service-output-virtual-service
                         :shape "VirtualServiceData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-virtual-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-service-output
                    'make-describe-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-virtual-service-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype dns-response-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dns-service-discovery common-lisp:nil
                       ((hostname :initarg :hostname :initform
                         (common-lisp:error ":hostname is required") :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         struct-shape-dns-service-discovery-hostname :shape
                         "Hostname" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-preference :initarg :ip-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor
                         struct-shape-dns-service-discovery-ip-preference
                         :shape "IpPreference" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-type :initarg :response-type :initform
                         common-lisp:nil :type
                         (common-lisp:or dns-response-type common-lisp:null)
                         :accessor
                         struct-shape-dns-service-discovery-response-type
                         :shape "DnsResponseType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dns-service-discovery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dns-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dns-service-discovery 'make-dns-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-type))
      (common-lisp:list
       (common-lisp:cons "responseType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass duration common-lisp:nil
                       ((unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or duration-unit common-lisp:null)
                         :accessor struct-shape-duration-unit :shape
                         "DurationUnit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or duration-value common-lisp:null)
                         :accessor struct-shape-duration-value :shape
                         "DurationValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-duration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'duration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'duration 'make-duration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration))
   common-lisp:nil))
(common-lisp:deftype duration-unit () 'common-lisp:string)
(common-lisp:deftype duration-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass egress-filter common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or egress-filter-type common-lisp:null)
                         :accessor struct-shape-egress-filter-type :shape
                         "EgressFilterType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-egress-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'egress-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'egress-filter 'make-egress-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input egress-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input egress-filter))
   common-lisp:nil))
(common-lisp:deftype egress-filter-type () 'common-lisp:string)
(common-lisp:deftype exact-host-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-access-log common-lisp:nil
                       ((format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or logging-format common-lisp:null)
                         :accessor struct-shape-file-access-log-format :shape
                         "LoggingFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         struct-shape-file-access-log-path :shape "FilePath"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-file-access-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'file-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'file-access-log 'make-file-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-access-log))
   common-lisp:nil))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass gateway-route-data common-lisp:nil
                       ((gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-data-gateway-route-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-gateway-route-data-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-gateway-route-data-metadata
                         :shape "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor struct-shape-gateway-route-data-spec :shape
                         "GatewayRouteSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or gateway-route-status common-lisp:null)
                         :accessor struct-shape-gateway-route-data-status
                         :shape "GatewayRouteStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-data-virtual-gateway-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-data 'make-gateway-route-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-hostname-match common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or exact-host-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-hostname-match-exact :shape
                         "ExactHostName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suffix :initarg :suffix :initform common-lisp:nil
                         :type
                         (common-lisp:or suffix-hostname common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-hostname-match-suffix
                         :shape "SuffixHostname" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-hostname-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-hostname-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-match
                    'make-gateway-route-hostname-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-hostname-rewrite common-lisp:nil
                       ((default-target-hostname :initarg
                         :default-target-hostname :initform common-lisp:nil
                         :type
                         (common-lisp:or default-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-hostname-rewrite-default-target-hostname
                         :shape "DefaultGatewayRouteRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-hostname-rewrite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'gateway-route-hostname-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-hostname-rewrite
                    'make-gateway-route-hostname-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-target-hostname))
      (common-lisp:list
       (common-lisp:cons "defaultTargetHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-hostname-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gateway-route-list ()
   '(trivial-types:proper-list gateway-route-ref))
 (common-lisp:defun make-gateway-route-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype gateway-route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass gateway-route-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-ref-gateway-route-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-gateway-route-ref-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-gateway-route-ref-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-ref-virtual-gateway-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-ref 'make-gateway-route-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route-name))
      (common-lisp:list
       (common-lisp:cons "gatewayRouteName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-spec common-lisp:nil
                       ((grpc-route :initarg :grpc-route :initform
                         common-lisp:nil :type
                         (common-lisp:or grpc-gateway-route common-lisp:null)
                         :accessor struct-shape-gateway-route-spec-grpc-route
                         :shape "GrpcGatewayRoute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http2route :initarg :http2route :initform
                         common-lisp:nil :type
                         (common-lisp:or http-gateway-route common-lisp:null)
                         :accessor struct-shape-gateway-route-spec-http2route
                         :shape "HttpGatewayRoute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (http-route :initarg :http-route :initform
                         common-lisp:nil :type
                         (common-lisp:or http-gateway-route common-lisp:null)
                         :accessor struct-shape-gateway-route-spec-http-route
                         :shape "HttpGatewayRoute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-route-priority
                                         common-lisp:null)
                         :accessor struct-shape-gateway-route-spec-priority
                         :shape "GatewayRoutePriority" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-spec 'make-gateway-route-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or gateway-route-status-code
                                         common-lisp:null)
                         :accessor struct-shape-gateway-route-status-status
                         :shape "GatewayRouteStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-status 'make-gateway-route-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-status))
   common-lisp:nil))
(common-lisp:deftype gateway-route-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass gateway-route-target common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-gateway-route-target-port
                         :shape "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-service :initarg :virtual-service :initform
                         (common-lisp:error ":virtualservice is required")
                         :type
                         (common-lisp:or gateway-route-virtual-service
                                         common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-target-virtual-service
                         :shape "GatewayRouteVirtualService" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-route-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-target 'make-gateway-route-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-route-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-route-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gateway-route-virtual-service common-lisp:nil
                       ((virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-gateway-route-virtual-service-virtual-service-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gateway-route-virtual-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'gateway-route-virtual-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gateway-route-virtual-service
                    'make-gateway-route-virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-route-virtual-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or grpc-gateway-route-action
                                         common-lisp:null)
                         :accessor struct-shape-grpc-gateway-route-action
                         :shape "GrpcGatewayRouteAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (match :initarg :match :initform
                         (common-lisp:error ":match is required") :type
                         (common-lisp:or grpc-gateway-route-match
                                         common-lisp:null)
                         :accessor struct-shape-grpc-gateway-route-match :shape
                         "GrpcGatewayRouteMatch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-gateway-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route 'make-grpc-gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-action common-lisp:nil
                       ((rewrite :initarg :rewrite :initform common-lisp:nil
                         :type
                         (common-lisp:or grpc-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-action-rewrite :shape
                         "GrpcGatewayRouteRewrite" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or gateway-route-target common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-action-target :shape
                         "GatewayRouteTarget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-gateway-route-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-action
                    'make-grpc-gateway-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-match common-lisp:nil
                       ((hostname :initarg :hostname :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-route-hostname-match
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-match-hostname :shape
                         "GatewayRouteHostnameMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or grpc-gateway-route-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-match-metadata :shape
                         "GrpcGatewayRouteMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-grpc-gateway-route-match-port
                         :shape "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-match-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-gateway-route-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-match 'make-grpc-gateway-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-metadata common-lisp:nil
                       ((invert :initarg :invert :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-metadata-invert :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or grpc-metadata-match-method
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-metadata-match :shape
                         "GrpcMetadataMatchMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-metadata-name :shape
                         "HeaderName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-gateway-route-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-metadata
                    'make-grpc-gateway-route-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-gateway-route-metadata-list ()
   '(trivial-types:proper-list grpc-gateway-route-metadata))
 (common-lisp:defun make-grpc-gateway-route-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            grpc-gateway-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-gateway-route-rewrite common-lisp:nil
                       ((hostname :initarg :hostname :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-route-hostname-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-gateway-route-rewrite-hostname
                         :shape "GatewayRouteHostnameRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-gateway-route-rewrite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-gateway-route-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-gateway-route-rewrite
                    'make-grpc-gateway-route-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-metadata-match-method common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-metadata-match-method-exact :shape
                         "HeaderMatch" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-metadata-match-method-prefix :shape
                         "HeaderMatch" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor
                         struct-shape-grpc-metadata-match-method-range :shape
                         "MatchRange" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (regex :initarg :regex :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-metadata-match-method-regex :shape
                         "HeaderMatch" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (suffix :initarg :suffix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-metadata-match-method-suffix :shape
                         "HeaderMatch" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-metadata-match-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-metadata-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-metadata-match-method
                    'make-grpc-metadata-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-retry-policy common-lisp:nil
                       ((grpc-retry-events :initarg :grpc-retry-events
                         :initform common-lisp:nil :type
                         (common-lisp:or grpc-retry-policy-events
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-retry-policy-grpc-retry-events
                         :shape "GrpcRetryPolicyEvents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http-retry-events :initarg :http-retry-events
                         :initform common-lisp:nil :type
                         (common-lisp:or http-retry-policy-events
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-retry-policy-http-retry-events
                         :shape "HttpRetryPolicyEvents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         (common-lisp:error ":maxretries is required") :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor struct-shape-grpc-retry-policy-max-retries
                         :shape "MaxRetries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (per-retry-timeout :initarg :per-retry-timeout
                         :initform
                         (common-lisp:error ":perretrytimeout is required")
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         struct-shape-grpc-retry-policy-per-retry-timeout
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tcp-retry-events :initarg :tcp-retry-events :initform
                         common-lisp:nil :type
                         (common-lisp:or tcp-retry-policy-events
                                         common-lisp:null)
                         :accessor
                         struct-shape-grpc-retry-policy-tcp-retry-events :shape
                         "TcpRetryPolicyEvents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-retry-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-retry-policy 'make-grpc-retry-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-retry-events))
      (common-lisp:list
       (common-lisp:cons "grpcRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-retry-policy))
   common-lisp:nil))
(common-lisp:deftype grpc-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grpc-retry-policy-events ()
   '(trivial-types:proper-list grpc-retry-policy-event))
 (common-lisp:defun make-grpc-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-route common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or grpc-route-action common-lisp:null)
                         :accessor struct-shape-grpc-route-action :shape
                         "GrpcRouteAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match :initarg :match :initform
                         (common-lisp:error ":match is required") :type
                         (common-lisp:or grpc-route-match common-lisp:null)
                         :accessor struct-shape-grpc-route-match :shape
                         "GrpcRouteMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-policy :initarg :retry-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or grpc-retry-policy common-lisp:null)
                         :accessor struct-shape-grpc-route-retry-policy :shape
                         "GrpcRetryPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or grpc-timeout common-lisp:null)
                         :accessor struct-shape-grpc-route-timeout :shape
                         "GrpcTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grpc-route 'make-grpc-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-action common-lisp:nil
                       ((weighted-targets :initarg :weighted-targets :initform
                         (common-lisp:error ":weightedtargets is required")
                         :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-action-weighted-targets :shape
                         "WeightedTargets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-route-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-route-action 'make-grpc-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-match common-lisp:nil
                       ((metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or grpc-route-metadata-list
                                         common-lisp:null)
                         :accessor struct-shape-grpc-route-match-metadata
                         :shape "GrpcRouteMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (method-name :initarg :method-name :initform
                         common-lisp:nil :type
                         (common-lisp:or method-name common-lisp:null)
                         :accessor struct-shape-grpc-route-match-method-name
                         :shape "MethodName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-grpc-route-match-port :shape
                         "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-name :initarg :service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor struct-shape-grpc-route-match-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-route-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-route-match 'make-grpc-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method-name))
      (common-lisp:list
       (common-lisp:cons "methodName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-route-metadata common-lisp:nil
                       ((invert :initarg :invert :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-grpc-route-metadata-invert
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or grpc-route-metadata-match-method
                                         common-lisp:null)
                         :accessor struct-shape-grpc-route-metadata-match
                         :shape "GrpcRouteMetadataMatchMethod" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor struct-shape-grpc-route-metadata-name :shape
                         "HeaderName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-route-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-route-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata 'make-grpc-route-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-route-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grpc-route-metadata-list ()
   '(trivial-types:proper-list grpc-route-metadata))
 (common-lisp:defun make-grpc-route-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grpc-route-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grpc-route-metadata-match-method common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-metadata-match-method-exact
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-metadata-match-method-prefix
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-metadata-match-method-range
                         :shape "MatchRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex :initarg :regex :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-metadata-match-method-regex
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suffix :initarg :suffix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor
                         struct-shape-grpc-route-metadata-match-method-suffix
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-route-metadata-match-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'grpc-route-metadata-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grpc-route-metadata-match-method
                    'make-grpc-route-metadata-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grpc-route-metadata-match-method))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grpc-timeout common-lisp:nil
                       ((idle :initarg :idle :initform common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-grpc-timeout-idle :shape "Duration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (per-request :initarg :per-request :initform
                         common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-grpc-timeout-per-request :shape
                         "Duration" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grpc-timeout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grpc-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grpc-timeout 'make-grpc-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grpc-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grpc-timeout))
   common-lisp:nil))
(common-lisp:deftype header-match () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass header-match-method common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor struct-shape-header-match-method-exact
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor struct-shape-header-match-method-prefix
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or match-range common-lisp:null)
                         :accessor struct-shape-header-match-method-range
                         :shape "MatchRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex :initarg :regex :initform common-lisp:nil :type
                         (common-lisp:or header-match common-lisp:null)
                         :accessor struct-shape-header-match-method-regex
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (suffix :initarg :suffix :initform common-lisp:nil
                         :type (common-lisp:or header-match common-lisp:null)
                         :accessor struct-shape-header-match-method-suffix
                         :shape "HeaderMatch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-header-match-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'header-match-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'header-match-method 'make-header-match-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-match-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-match-method))
   common-lisp:nil))
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:deftype health-check-interval-millis () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass health-check-policy common-lisp:nil
                       ((healthy-threshold :initarg :healthy-threshold
                         :initform
                         (common-lisp:error ":healthythreshold is required")
                         :type
                         (common-lisp:or health-check-threshold
                                         common-lisp:null)
                         :accessor
                         struct-shape-health-check-policy-healthy-threshold
                         :shape "HealthCheckThreshold" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (interval-millis :initarg :interval-millis :initform
                         (common-lisp:error ":intervalmillis is required")
                         :type
                         (common-lisp:or health-check-interval-millis
                                         common-lisp:null)
                         :accessor
                         struct-shape-health-check-policy-interval-millis
                         :shape "HealthCheckIntervalMillis" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-health-check-policy-path :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-health-check-policy-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or port-protocol common-lisp:null)
                         :accessor struct-shape-health-check-policy-protocol
                         :shape "PortProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-millis :initarg :timeout-millis :initform
                         (common-lisp:error ":timeoutmillis is required") :type
                         (common-lisp:or health-check-timeout-millis
                                         common-lisp:null)
                         :accessor
                         struct-shape-health-check-policy-timeout-millis :shape
                         "HealthCheckTimeoutMillis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-threshold :initarg :unhealthy-threshold
                         :initform
                         (common-lisp:error ":unhealthythreshold is required")
                         :type
                         (common-lisp:or health-check-threshold
                                         common-lisp:null)
                         :accessor
                         struct-shape-health-check-policy-unhealthy-threshold
                         :shape "HealthCheckThreshold" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-health-check-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'health-check-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'health-check-policy 'make-health-check-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input health-check-policy))
   common-lisp:nil))
(common-lisp:deftype health-check-threshold () 'common-lisp:integer)
(common-lisp:deftype health-check-timeout-millis () 'common-lisp:integer)
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-gateway-route common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or http-gateway-route-action
                                         common-lisp:null)
                         :accessor struct-shape-http-gateway-route-action
                         :shape "HttpGatewayRouteAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (match :initarg :match :initform
                         (common-lisp:error ":match is required") :type
                         (common-lisp:or http-gateway-route-match
                                         common-lisp:null)
                         :accessor struct-shape-http-gateway-route-match :shape
                         "HttpGatewayRouteMatch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route 'make-http-gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-gateway-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-gateway-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-action common-lisp:nil
                       ((rewrite :initarg :rewrite :initform common-lisp:nil
                         :type
                         (common-lisp:or http-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-action-rewrite :shape
                         "HttpGatewayRouteRewrite" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or gateway-route-target common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-action-target :shape
                         "GatewayRouteTarget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-action
                    'make-http-gateway-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rewrite))
      (common-lisp:list
       (common-lisp:cons "rewrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-header common-lisp:nil
                       ((invert :initarg :invert :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-header-invert :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or header-match-method common-lisp:null)
                         :accessor struct-shape-http-gateway-route-header-match
                         :shape "HeaderMatchMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor struct-shape-http-gateway-route-header-name
                         :shape "HeaderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-header
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-header
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-header
                    'make-http-gateway-route-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-gateway-route-headers ()
   '(trivial-types:proper-list http-gateway-route-header))
 (common-lisp:defun make-http-gateway-route-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            http-gateway-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-match common-lisp:nil
                       ((headers :initarg :headers :initform common-lisp:nil
                         :type
                         (common-lisp:or http-gateway-route-headers
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-match-headers :shape
                         "HttpGatewayRouteHeaders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-route-hostname-match
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-match-hostname :shape
                         "GatewayRouteHostnameMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (method :initarg :method :initform common-lisp:nil
                         :type (common-lisp:or http-method common-lisp:null)
                         :accessor struct-shape-http-gateway-route-match-method
                         :shape "HttpMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or http-path-match common-lisp:null)
                         :accessor struct-shape-http-gateway-route-match-path
                         :shape "HttpPathMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-http-gateway-route-match-port
                         :shape "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-http-gateway-route-match-prefix
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-parameters :initarg :query-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or http-query-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-match-query-parameters
                         :shape "HttpQueryParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-match 'make-http-gateway-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-path-rewrite common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or http-path-exact common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-path-rewrite-exact
                         :shape "HttpPathExact" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-path-rewrite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-gateway-route-path-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-path-rewrite
                    'make-http-gateway-route-path-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-path-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-gateway-route-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-prefix-rewrite common-lisp:nil
                       ((default-prefix :initarg :default-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or default-gateway-route-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-prefix-rewrite-default-prefix
                         :shape "DefaultGatewayRouteRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or http-gateway-route-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-prefix-rewrite-value
                         :shape "HttpGatewayRoutePrefix" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-prefix-rewrite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'http-gateway-route-prefix-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-prefix-rewrite
                    'make-http-gateway-route-prefix-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-prefix))
      (common-lisp:list
       (common-lisp:cons "defaultPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-prefix-rewrite))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-gateway-route-rewrite common-lisp:nil
                       ((hostname :initarg :hostname :initform common-lisp:nil
                         :type
                         (common-lisp:or gateway-route-hostname-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-rewrite-hostname
                         :shape "GatewayRouteHostnameRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or http-gateway-route-path-rewrite
                                         common-lisp:null)
                         :accessor struct-shape-http-gateway-route-rewrite-path
                         :shape "HttpGatewayRoutePathRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type
                         (common-lisp:or http-gateway-route-prefix-rewrite
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-gateway-route-rewrite-prefix :shape
                         "HttpGatewayRoutePrefixRewrite" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-gateway-route-rewrite
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-gateway-route-rewrite
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-gateway-route-rewrite
                    'make-http-gateway-route-rewrite))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          http-gateway-route-rewrite))
   common-lisp:nil))
(common-lisp:deftype http-method () 'common-lisp:string)
(common-lisp:deftype http-path-exact () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-path-match common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or http-path-exact common-lisp:null)
                         :accessor struct-shape-http-path-match-exact :shape
                         "HttpPathExact" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex :initarg :regex :initform common-lisp:nil :type
                         (common-lisp:or http-path-regex common-lisp:null)
                         :accessor struct-shape-http-path-match-regex :shape
                         "HttpPathRegex" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-path-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-path-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-path-match 'make-http-path-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-path-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-path-match))
   common-lisp:nil))
(common-lisp:deftype http-path-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-query-parameter common-lisp:nil
                       ((match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or query-parameter-match
                                         common-lisp:null)
                         :accessor struct-shape-http-query-parameter-match
                         :shape "QueryParameterMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or query-parameter-name common-lisp:null)
                         :accessor struct-shape-http-query-parameter-name
                         :shape "QueryParameterName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-query-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-query-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-query-parameter 'make-http-query-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-query-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-query-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-query-parameters ()
   '(trivial-types:proper-list http-query-parameter))
 (common-lisp:defun make-http-query-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-query-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-retry-policy common-lisp:nil
                       ((http-retry-events :initarg :http-retry-events
                         :initform common-lisp:nil :type
                         (common-lisp:or http-retry-policy-events
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-retry-policy-http-retry-events
                         :shape "HttpRetryPolicyEvents" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         (common-lisp:error ":maxretries is required") :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor struct-shape-http-retry-policy-max-retries
                         :shape "MaxRetries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (per-retry-timeout :initarg :per-retry-timeout
                         :initform
                         (common-lisp:error ":perretrytimeout is required")
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         struct-shape-http-retry-policy-per-retry-timeout
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tcp-retry-events :initarg :tcp-retry-events :initform
                         common-lisp:nil :type
                         (common-lisp:or tcp-retry-policy-events
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-retry-policy-tcp-retry-events :shape
                         "TcpRetryPolicyEvents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-retry-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-retry-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-retry-policy 'make-http-retry-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-retry-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-retry-events))
      (common-lisp:list
       (common-lisp:cons "httpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "maxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-retry-timeout))
      (common-lisp:list
       (common-lisp:cons "perRetryTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-retry-events))
      (common-lisp:list
       (common-lisp:cons "tcpRetryEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-retry-policy))
   common-lisp:nil))
(common-lisp:deftype http-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype http-retry-policy-events ()
   '(trivial-types:proper-list http-retry-policy-event))
 (common-lisp:defun make-http-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-route common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or http-route-action common-lisp:null)
                         :accessor struct-shape-http-route-action :shape
                         "HttpRouteAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match :initarg :match :initform
                         (common-lisp:error ":match is required") :type
                         (common-lisp:or http-route-match common-lisp:null)
                         :accessor struct-shape-http-route-match :shape
                         "HttpRouteMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-policy :initarg :retry-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or http-retry-policy common-lisp:null)
                         :accessor struct-shape-http-route-retry-policy :shape
                         "HttpRetryPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or http-timeout common-lisp:null)
                         :accessor struct-shape-http-route-timeout :shape
                         "HttpTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-route 'make-http-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-policy))
      (common-lisp:list
       (common-lisp:cons "retryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-route-action common-lisp:nil
                       ((weighted-targets :initarg :weighted-targets :initform
                         (common-lisp:error ":weightedtargets is required")
                         :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor
                         struct-shape-http-route-action-weighted-targets :shape
                         "WeightedTargets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-route-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-route-action 'make-http-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass http-route-header common-lisp:nil
                       ((invert :initarg :invert :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-http-route-header-invert :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or header-match-method common-lisp:null)
                         :accessor struct-shape-http-route-header-match :shape
                         "HeaderMatchMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or header-name common-lisp:null)
                         :accessor struct-shape-http-route-header-name :shape
                         "HeaderName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-route-header
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-header
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-route-header 'make-http-route-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invert))
      (common-lisp:list
       (common-lisp:cons "invert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-header))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype http-route-headers ()
   '(trivial-types:proper-list http-route-header))
 (common-lisp:defun make-http-route-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list http-route-header))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass http-route-match common-lisp:nil
                       ((headers :initarg :headers :initform common-lisp:nil
                         :type
                         (common-lisp:or http-route-headers common-lisp:null)
                         :accessor struct-shape-http-route-match-headers :shape
                         "HttpRouteHeaders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (method :initarg :method :initform common-lisp:nil
                         :type (common-lisp:or http-method common-lisp:null)
                         :accessor struct-shape-http-route-match-method :shape
                         "HttpMethod" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or http-path-match common-lisp:null)
                         :accessor struct-shape-http-route-match-path :shape
                         "HttpPathMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-http-route-match-port :shape
                         "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-http-route-match-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-parameters :initarg :query-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or http-query-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-http-route-match-query-parameters :shape
                         "HttpQueryParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scheme :initarg :scheme :initform common-lisp:nil
                         :type (common-lisp:or http-scheme common-lisp:null)
                         :accessor struct-shape-http-route-match-scheme :shape
                         "HttpScheme" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-route-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'http-route-match 'make-http-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "queryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheme))
      (common-lisp:list
       (common-lisp:cons "scheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-route-match))
   common-lisp:nil))
(common-lisp:deftype http-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass http-timeout common-lisp:nil
                       ((idle :initarg :idle :initform common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-http-timeout-idle :shape "Duration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (per-request :initarg :per-request :initform
                         common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-http-timeout-per-request :shape
                         "Duration" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-http-timeout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'http-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'http-timeout 'make-http-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input http-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'per-request))
      (common-lisp:list
       (common-lisp:cons "perRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input http-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:deftype ip-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype json-format ()
   '(trivial-types:proper-list json-format-ref))
 (common-lisp:defun make-json-format
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list json-format-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass json-format-ref common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or json-key common-lisp:null) :accessor
                         struct-shape-json-format-ref-key :shape "JsonKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         struct-shape-json-format-ref-value :shape "JsonValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-json-format-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'json-format-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'json-format-ref 'make-json-format-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-format-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-format-ref))
   common-lisp:nil))
(common-lisp:deftype json-key () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-gateway-routes-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-gateway-routes-limit
                                         common-lisp:null)
                         :accessor struct-shape-list-gateway-routes-input-limit
                         :shape "ListGatewayRoutesLimit" :location
                         "querystring" :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-routes-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-gateway-routes-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-gateway-routes-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-routes-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-routes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-routes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-input
                    'make-list-gateway-routes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-gateway-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-gateway-routes-output common-lisp:nil
                       ((gateway-routes :initarg :gateway-routes :initform
                         (common-lisp:error ":gatewayroutes is required") :type
                         (common-lisp:or gateway-route-list common-lisp:null)
                         :accessor
                         struct-shape-list-gateway-routes-output-gateway-routes
                         :shape "GatewayRouteList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-gateway-routes-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-gateway-routes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-gateway-routes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-gateway-routes-output
                    'make-list-gateway-routes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-routes))
      (common-lisp:list
       (common-lisp:cons "gatewayRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateway-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-meshes-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-meshes-limit common-lisp:null)
                         :accessor struct-shape-list-meshes-input-limit :shape
                         "ListMeshesLimit" :location "querystring"
                         :location-name "limit")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-meshes-input-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-meshes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-meshes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-meshes-input 'make-list-meshes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-input))
   common-lisp:nil))
(common-lisp:deftype list-meshes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-meshes-output common-lisp:nil
                       ((meshes :initarg :meshes :initform
                         (common-lisp:error ":meshes is required") :type
                         (common-lisp:or mesh-list common-lisp:null) :accessor
                         struct-shape-list-meshes-output-meshes :shape
                         "MeshList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-meshes-output-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-meshes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-meshes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-meshes-output 'make-list-meshes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-meshes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'meshes))
      (common-lisp:list
       (common-lisp:cons "meshes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-meshes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-routes-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-routes-limit common-lisp:null)
                         :accessor struct-shape-list-routes-input-limit :shape
                         "ListRoutesLimit" :location "querystring"
                         :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-list-routes-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-routes-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-routes-input-next-token :shape
                         "String" :location "querystring" :location-name
                         "nextToken")
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-routes-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-routes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-routes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-routes-input 'make-list-routes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-input))
   common-lisp:nil))
(common-lisp:deftype list-routes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-routes-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-routes-output-next-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (routes :initarg :routes :initform
                         (common-lisp:error ":routes is required") :type
                         (common-lisp:or route-list common-lisp:null) :accessor
                         struct-shape-list-routes-output-routes :shape
                         "RouteList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-routes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-routes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-routes-output 'make-list-routes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-routes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routes))
      (common-lisp:list
       (common-lisp:cons "routes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-routes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or tags-limit common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-limit :shape
                         "TagsLimit" :location "querystring" :location-name
                         "limit")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken")
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "Arn" :location "querystring" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-output-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-gateways-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-virtual-gateways-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-gateways-input-limit :shape
                         "ListVirtualGatewaysLimit" :location "querystring"
                         :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-gateways-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-virtual-gateways-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-gateways-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-gateways-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-gateways-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-input
                    'make-list-virtual-gateways-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-gateways-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-gateways-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-gateways-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateways :initarg :virtual-gateways :initform
                         (common-lisp:error ":virtualgateways is required")
                         :type
                         (common-lisp:or virtual-gateway-list common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-gateways-output-virtual-gateways
                         :shape "VirtualGatewayList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-gateways-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-gateways-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-gateways-output
                    'make-list-virtual-gateways-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateways))
      (common-lisp:list
       (common-lisp:cons "virtualGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-gateways-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-nodes-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-virtual-nodes-limit
                                         common-lisp:null)
                         :accessor struct-shape-list-virtual-nodes-input-limit
                         :shape "ListVirtualNodesLimit" :location "querystring"
                         :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-nodes-input-mesh-name :shape
                         "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-virtual-nodes-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-nodes-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-nodes-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-nodes-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-input 'make-list-virtual-nodes-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-nodes-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-nodes-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-nodes-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-nodes :initarg :virtual-nodes :initform
                         (common-lisp:error ":virtualnodes is required") :type
                         (common-lisp:or virtual-node-list common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-nodes-output-virtual-nodes
                         :shape "VirtualNodeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-nodes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-nodes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-nodes-output
                    'make-list-virtual-nodes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-nodes))
      (common-lisp:list
       (common-lisp:cons "virtualNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-nodes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-routers-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-virtual-routers-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-routers-input-limit :shape
                         "ListVirtualRoutersLimit" :location "querystring"
                         :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-routers-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-virtual-routers-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-routers-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-routers-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-routers-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-input
                    'make-list-virtual-routers-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-routers-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-routers-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-routers-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-routers :initarg :virtual-routers :initform
                         (common-lisp:error ":virtualrouters is required")
                         :type
                         (common-lisp:or virtual-router-list common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-routers-output-virtual-routers
                         :shape "VirtualRouterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-routers-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-routers-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-routers-output
                    'make-list-virtual-routers-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-routers))
      (common-lisp:list
       (common-lisp:cons "virtualRouters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-routers-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-virtual-services-input common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or list-virtual-services-limit
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-services-input-limit :shape
                         "ListVirtualServicesLimit" :location "querystring"
                         :location-name "limit")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-services-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-virtual-services-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-services-input-next-token
                         :shape "String" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-services-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-services-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-input
                    'make-list-virtual-services-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-input))
   common-lisp:nil))
(common-lisp:deftype list-virtual-services-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-virtual-services-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-virtual-services-output-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-services :initarg :virtual-services :initform
                         (common-lisp:error ":virtualservices is required")
                         :type
                         (common-lisp:or virtual-service-list common-lisp:null)
                         :accessor
                         struct-shape-list-virtual-services-output-virtual-services
                         :shape "VirtualServiceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-virtual-services-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-virtual-services-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-virtual-services-output
                    'make-list-virtual-services-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-services))
      (common-lisp:list
       (common-lisp:cons "virtualServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener common-lisp:nil
                       ((connection-pool :initarg :connection-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-node-connection-pool
                                         common-lisp:null)
                         :accessor struct-shape-listener-connection-pool :shape
                         "VirtualNodeConnectionPool" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health-check :initarg :health-check :initform
                         common-lisp:nil :type
                         (common-lisp:or health-check-policy common-lisp:null)
                         :accessor struct-shape-listener-health-check :shape
                         "HealthCheckPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outlier-detection :initarg :outlier-detection
                         :initform common-lisp:nil :type
                         (common-lisp:or outlier-detection common-lisp:null)
                         :accessor struct-shape-listener-outlier-detection
                         :shape "OutlierDetection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-mapping :initarg :port-mapping :initform
                         (common-lisp:error ":portmapping is required") :type
                         (common-lisp:or port-mapping common-lisp:null)
                         :accessor struct-shape-listener-port-mapping :shape
                         "PortMapping" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type
                         (common-lisp:or listener-timeout common-lisp:null)
                         :accessor struct-shape-listener-timeout :shape
                         "ListenerTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or listener-tls common-lisp:null)
                         :accessor struct-shape-listener-tls :shape
                         "ListenerTls" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listener 'make-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outlier-detection))
      (common-lisp:list
       (common-lisp:cons "outlierDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener))
   common-lisp:nil))
(common-lisp:deftype listener-port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass listener-timeout common-lisp:nil
                       ((grpc :initarg :grpc :initform common-lisp:nil :type
                         (common-lisp:or grpc-timeout common-lisp:null)
                         :accessor struct-shape-listener-timeout-grpc :shape
                         "GrpcTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http :initarg :http :initform common-lisp:nil :type
                         (common-lisp:or http-timeout common-lisp:null)
                         :accessor struct-shape-listener-timeout-http :shape
                         "HttpTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http2 :initarg :http2 :initform common-lisp:nil :type
                         (common-lisp:or http-timeout common-lisp:null)
                         :accessor struct-shape-listener-timeout-http2 :shape
                         "HttpTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tcp :initarg :tcp :initform common-lisp:nil :type
                         (common-lisp:or tcp-timeout common-lisp:null)
                         :accessor struct-shape-listener-timeout-tcp :shape
                         "TcpTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-timeout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-timeout 'make-listener-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-timeout))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         (common-lisp:error ":certificate is required") :type
                         (common-lisp:or listener-tls-certificate
                                         common-lisp:null)
                         :accessor struct-shape-listener-tls-certificate :shape
                         "ListenerTlsCertificate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or listener-tls-mode common-lisp:null)
                         :accessor struct-shape-listener-tls-mode :shape
                         "ListenerTlsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         common-lisp:nil :type
                         (common-lisp:or listener-tls-validation-context
                                         common-lisp:null)
                         :accessor struct-shape-listener-tls-validation :shape
                         "ListenerTlsValidationContext" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'listener-tls 'make-listener-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-acm-certificate common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificatearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-listener-tls-acm-certificate-certificate-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-acm-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-acm-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-acm-certificate
                    'make-listener-tls-acm-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-certificate common-lisp:nil
                       ((acm :initarg :acm :initform common-lisp:nil :type
                         (common-lisp:or listener-tls-acm-certificate
                                         common-lisp:null)
                         :accessor struct-shape-listener-tls-certificate-acm
                         :shape "ListenerTlsAcmCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or listener-tls-file-certificate
                                         common-lisp:null)
                         :accessor struct-shape-listener-tls-certificate-file
                         :shape "ListenerTlsFileCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or listener-tls-sds-certificate
                                         common-lisp:null)
                         :accessor struct-shape-listener-tls-certificate-sds
                         :shape "ListenerTlsSdsCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-certificate 'make-listener-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-file-certificate common-lisp:nil
                       ((certificate-chain :initarg :certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required")
                         :type (common-lisp:or file-path common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-file-certificate-certificate-chain
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         (common-lisp:error ":privatekey is required") :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         struct-shape-listener-tls-file-certificate-private-key
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-file-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-file-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-file-certificate
                    'make-listener-tls-file-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass listener-tls-sds-certificate common-lisp:nil
                       ((secret-name :initarg :secret-name :initform
                         (common-lisp:error ":secretname is required") :type
                         (common-lisp:or sds-secret-name common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-sds-certificate-secret-name
                         :shape "SdsSecretName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-sds-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'listener-tls-sds-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-sds-certificate
                    'make-listener-tls-sds-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-validation-context common-lisp:nil
                       ((subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-validation-context-subject-alternative-names
                         :shape "SubjectAlternativeNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust :initarg :trust :initform
                         (common-lisp:error ":trust is required") :type
                         (common-lisp:or listener-tls-validation-context-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-validation-context-trust
                         :shape "ListenerTlsValidationContextTrust" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-validation-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context
                    'make-listener-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listener-tls-validation-context-trust common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or tls-validation-context-file-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-validation-context-trust-file
                         :shape "TlsValidationContextFileTrust" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or tls-validation-context-sds-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-listener-tls-validation-context-trust-sds
                         :shape "TlsValidationContextSdsTrust" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-listener-tls-validation-context-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'listener-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'listener-tls-validation-context-trust
                    'make-listener-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listeners () '(trivial-types:proper-list listener))
 (common-lisp:defun make-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass logging common-lisp:nil
                       ((access-log :initarg :access-log :initform
                         common-lisp:nil :type
                         (common-lisp:or access-log common-lisp:null) :accessor
                         struct-shape-logging-access-log :shape "AccessLog"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging 'make-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-format common-lisp:nil
                       ((json :initarg :json :initform common-lisp:nil :type
                         (common-lisp:or json-format common-lisp:null)
                         :accessor struct-shape-logging-format-json :shape
                         "JsonFormat" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or text-format common-lisp:null)
                         :accessor struct-shape-logging-format-text :shape
                         "TextFormat" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-format
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-format
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-format 'make-logging-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "json"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-format))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass match-range common-lisp:nil
                       ((end :initarg :end :initform
                         (common-lisp:error ":end is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-match-range-end :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-match-range-start :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-match-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'match-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'match-range 'make-match-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match-range))
   common-lisp:nil))
(common-lisp:deftype max-connections () 'common-lisp:integer)
(common-lisp:deftype max-pending-requests () 'common-lisp:integer)
(common-lisp:deftype max-requests () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mesh-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-mesh-data-mesh-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-mesh-data-metadata :shape
                         "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         struct-shape-mesh-data-spec :shape "MeshSpec"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or mesh-status common-lisp:null)
                         :accessor struct-shape-mesh-data-status :shape
                         "MeshStatus" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mesh-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mesh-data 'make-mesh-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mesh-list () '(trivial-types:proper-list mesh-ref))
 (common-lisp:defun make-mesh-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mesh-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mesh-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-mesh-ref-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mesh-ref-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mesh-ref-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-mesh-ref-mesh-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-mesh-ref-mesh-owner :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-mesh-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-mesh-ref-version :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mesh-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mesh-ref 'make-mesh-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-service-discovery common-lisp:nil
                       ((ip-preference :initarg :ip-preference :initform
                         common-lisp:nil :type
                         (common-lisp:or ip-preference common-lisp:null)
                         :accessor
                         struct-shape-mesh-service-discovery-ip-preference
                         :shape "IpPreference" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mesh-service-discovery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mesh-service-discovery 'make-mesh-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-preference))
      (common-lisp:list
       (common-lisp:cons "ipPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mesh-service-discovery))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-spec common-lisp:nil
                       ((egress-filter :initarg :egress-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or egress-filter common-lisp:null)
                         :accessor struct-shape-mesh-spec-egress-filter :shape
                         "EgressFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-discovery :initarg :service-discovery
                         :initform common-lisp:nil :type
                         (common-lisp:or mesh-service-discovery
                                         common-lisp:null)
                         :accessor struct-shape-mesh-spec-service-discovery
                         :shape "MeshServiceDiscovery" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mesh-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mesh-spec 'make-mesh-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-filter))
      (common-lisp:list
       (common-lisp:cons "egressFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mesh-status common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or mesh-status-code common-lisp:null)
                         :accessor struct-shape-mesh-status-status :shape
                         "MeshStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mesh-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mesh-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mesh-status 'make-mesh-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mesh-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mesh-status))
   common-lisp:nil))
(common-lisp:deftype mesh-status-code () 'common-lisp:string)
(common-lisp:deftype method-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass outlier-detection common-lisp:nil
                       ((base-ejection-duration :initarg
                         :base-ejection-duration :initform
                         (common-lisp:error
                          ":baseejectionduration is required")
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         struct-shape-outlier-detection-base-ejection-duration
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval :initarg :interval :initform
                         (common-lisp:error ":interval is required") :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-outlier-detection-interval :shape
                         "Duration" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-ejection-percent :initarg :max-ejection-percent
                         :initform
                         (common-lisp:error ":maxejectionpercent is required")
                         :type
                         (common-lisp:or outlier-detection-max-ejection-percent
                                         common-lisp:null)
                         :accessor
                         struct-shape-outlier-detection-max-ejection-percent
                         :shape "OutlierDetectionMaxEjectionPercent" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-server-errors :initarg :max-server-errors
                         :initform
                         (common-lisp:error ":maxservererrors is required")
                         :type
                         (common-lisp:or outlier-detection-max-server-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-outlier-detection-max-server-errors
                         :shape "OutlierDetectionMaxServerErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outlier-detection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outlier-detection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outlier-detection 'make-outlier-detection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outlier-detection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-ejection-duration))
      (common-lisp:list
       (common-lisp:cons "baseEjectionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-ejection-percent))
      (common-lisp:list
       (common-lisp:cons "maxEjectionPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-server-errors))
      (common-lisp:list
       (common-lisp:cons "maxServerErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outlier-detection))
   common-lisp:nil))
(common-lisp:deftype outlier-detection-max-ejection-percent ()
  'common-lisp:integer)
(common-lisp:deftype outlier-detection-max-server-errors ()
  'common-lisp:integer)
(common-lisp:deftype percent-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass port-mapping common-lisp:nil
                       ((port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor struct-shape-port-mapping-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or port-protocol common-lisp:null)
                         :accessor struct-shape-port-mapping-protocol :shape
                         "PortProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-port-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'port-mapping 'make-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-mapping))
   common-lisp:nil))
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype port-set () '(trivial-types:proper-list port-number))
 (common-lisp:defun make-port-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-number))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-parameter-match common-lisp:nil
                       ((exact :initarg :exact :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-query-parameter-match-exact :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-parameter-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-parameter-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-parameter-match 'make-query-parameter-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-parameter-match))
   common-lisp:nil))
(common-lisp:deftype query-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-metadata common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-resource-metadata-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-metadata-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-resource-metadata-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-resource-metadata-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-resource-metadata-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uid :initarg :uid :initform
                         (common-lisp:error ":uid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-metadata-uid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-resource-metadata-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-metadata 'make-resource-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-metadata))
   common-lisp:nil))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass route-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-data-mesh-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-route-data-metadata :shape
                         "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-data-route-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         struct-shape-route-data-spec :shape "RouteSpec"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or route-status common-lisp:null)
                         :accessor struct-shape-route-data-status :shape
                         "RouteStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-data-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'route-data 'make-route-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype route-list () '(trivial-types:proper-list route-ref))
 (common-lisp:defun make-route-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-ref))
   aws-sdk/generator/shape::members))
(common-lisp:deftype route-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass route-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-route-ref-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-route-ref-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-route-ref-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-ref-mesh-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-route-ref-mesh-owner :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-route-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-ref-route-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-route-ref-version :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-route-ref-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'route-ref 'make-route-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-name))
      (common-lisp:list
       (common-lisp:cons "routeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-spec common-lisp:nil
                       ((grpc-route :initarg :grpc-route :initform
                         common-lisp:nil :type
                         (common-lisp:or grpc-route common-lisp:null) :accessor
                         struct-shape-route-spec-grpc-route :shape "GrpcRoute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http2route :initarg :http2route :initform
                         common-lisp:nil :type
                         (common-lisp:or http-route common-lisp:null) :accessor
                         struct-shape-route-spec-http2route :shape "HttpRoute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http-route :initarg :http-route :initform
                         common-lisp:nil :type
                         (common-lisp:or http-route common-lisp:null) :accessor
                         struct-shape-route-spec-http-route :shape "HttpRoute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or route-priority common-lisp:null)
                         :accessor struct-shape-route-spec-priority :shape
                         "RoutePriority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tcp-route :initarg :tcp-route :initform
                         common-lisp:nil :type
                         (common-lisp:or tcp-route common-lisp:null) :accessor
                         struct-shape-route-spec-tcp-route :shape "TcpRoute"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'route-spec 'make-route-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc-route))
      (common-lisp:list
       (common-lisp:cons "grpcRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2route))
      (common-lisp:list
       (common-lisp:cons "http2Route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-route))
      (common-lisp:list
       (common-lisp:cons "httpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp-route))
      (common-lisp:list
       (common-lisp:cons "tcpRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or route-status-code common-lisp:null)
                         :accessor struct-shape-route-status-status :shape
                         "RouteStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'route-status 'make-route-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-status))
   common-lisp:nil))
(common-lisp:deftype route-status-code () 'common-lisp:string)
(common-lisp:deftype sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-discovery common-lisp:nil
                       ((aws-cloud-map :initarg :aws-cloud-map :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-cloud-map-service-discovery
                                         common-lisp:null)
                         :accessor struct-shape-service-discovery-aws-cloud-map
                         :shape "AwsCloudMapServiceDiscovery" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dns :initarg :dns :initform common-lisp:nil :type
                         (common-lisp:or dns-service-discovery
                                         common-lisp:null)
                         :accessor struct-shape-service-discovery-dns :shape
                         "DnsServiceDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-discovery
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-discovery
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-discovery 'make-service-discovery))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-discovery))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-cloud-map))
      (common-lisp:list
       (common-lisp:cons "awsCloudMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns))
      (common-lisp:list
       (common-lisp:cons "dns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-discovery))
   common-lisp:nil))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subject-alternative-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subject-alternative-name-list ()
   '(trivial-types:proper-list subject-alternative-name))
 (common-lisp:defun make-subject-alternative-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subject-alternative-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subject-alternative-name-matchers common-lisp:nil
                       ((exact :initarg :exact :initform
                         (common-lisp:error ":exact is required") :type
                         (common-lisp:or subject-alternative-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-subject-alternative-name-matchers-exact
                         :shape "SubjectAlternativeNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-alternative-name-matchers
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'subject-alternative-name-matchers
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-name-matchers
                    'make-subject-alternative-name-matchers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact))
      (common-lisp:list
       (common-lisp:cons "exact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-name-matchers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subject-alternative-names common-lisp:nil
                       ((match :initarg :match :initform
                         (common-lisp:error ":match is required") :type
                         (common-lisp:or subject-alternative-name-matchers
                                         common-lisp:null)
                         :accessor struct-shape-subject-alternative-names-match
                         :shape "SubjectAlternativeNameMatchers" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subject-alternative-names
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subject-alternative-names
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subject-alternative-names
                    'make-subject-alternative-names))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-alternative-names))
   common-lisp:nil))
(common-lisp:deftype suffix-hostname () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag-ref))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-ref common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-ref-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-ref-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag-ref 'make-tag-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-input-resource-arn :shape
                         "Arn" :location "querystring" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-input-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tags-limit () 'common-lisp:integer)
(common-lisp:deftype tcp-retry-policy-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tcp-retry-policy-events ()
   '(trivial-types:proper-list tcp-retry-policy-event))
 (common-lisp:defun make-tcp-retry-policy-events
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tcp-retry-policy-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tcp-route common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or tcp-route-action common-lisp:null)
                         :accessor struct-shape-tcp-route-action :shape
                         "TcpRouteAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match :initarg :match :initform common-lisp:nil :type
                         (common-lisp:or tcp-route-match common-lisp:null)
                         :accessor struct-shape-tcp-route-match :shape
                         "TcpRouteMatch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or tcp-timeout common-lisp:null)
                         :accessor struct-shape-tcp-route-timeout :shape
                         "TcpTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tcp-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tcp-route 'make-tcp-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match))
      (common-lisp:list
       (common-lisp:cons "match"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-route-action common-lisp:nil
                       ((weighted-targets :initarg :weighted-targets :initform
                         (common-lisp:error ":weightedtargets is required")
                         :type
                         (common-lisp:or weighted-targets common-lisp:null)
                         :accessor
                         struct-shape-tcp-route-action-weighted-targets :shape
                         "WeightedTargets" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tcp-route-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tcp-route-action 'make-tcp-route-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weighted-targets))
      (common-lisp:list
       (common-lisp:cons "weightedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-route-match common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-tcp-route-match-port :shape
                         "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tcp-route-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-route-match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tcp-route-match 'make-tcp-route-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-route-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-route-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tcp-timeout common-lisp:nil
                       ((idle :initarg :idle :initform common-lisp:nil :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         struct-shape-tcp-timeout-idle :shape "Duration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tcp-timeout
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tcp-timeout
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tcp-timeout 'make-tcp-timeout))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tcp-timeout))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle))
      (common-lisp:list
       (common-lisp:cons "idle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tcp-timeout))
   common-lisp:nil))
(common-lisp:deftype text-format () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tls-validation-context common-lisp:nil
                       ((subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-subject-alternative-names
                         :shape "SubjectAlternativeNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust :initarg :trust :initform
                         (common-lisp:error ":trust is required") :type
                         (common-lisp:or tls-validation-context-trust
                                         common-lisp:null)
                         :accessor struct-shape-tls-validation-context-trust
                         :shape "TlsValidationContextTrust" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-validation-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context 'make-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-acm-trust common-lisp:nil
                       ((certificate-authority-arns :initarg
                         :certificate-authority-arns :initform
                         (common-lisp:error
                          ":certificateauthorityarns is required")
                         :type
                         (common-lisp:or certificate-authority-arns
                                         common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-acm-trust-certificate-authority-arns
                         :shape "CertificateAuthorityArns" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-validation-context-acm-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-acm-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-acm-trust
                    'make-tls-validation-context-acm-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-file-trust common-lisp:nil
                       ((certificate-chain :initarg :certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required")
                         :type (common-lisp:or file-path common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-file-trust-certificate-chain
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-validation-context-file-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-file-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-file-trust
                    'make-tls-validation-context-file-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-sds-trust common-lisp:nil
                       ((secret-name :initarg :secret-name :initform
                         (common-lisp:error ":secretname is required") :type
                         (common-lisp:or sds-secret-name common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-sds-trust-secret-name
                         :shape "SdsSecretName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-validation-context-sds-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tls-validation-context-sds-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-sds-trust
                    'make-tls-validation-context-sds-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tls-validation-context-trust common-lisp:nil
                       ((acm :initarg :acm :initform common-lisp:nil :type
                         (common-lisp:or tls-validation-context-acm-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-trust-acm :shape
                         "TlsValidationContextAcmTrust" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or tls-validation-context-file-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-trust-file :shape
                         "TlsValidationContextFileTrust" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or tls-validation-context-sds-trust
                                         common-lisp:null)
                         :accessor
                         struct-shape-tls-validation-context-trust-sds :shape
                         "TlsValidationContextSdsTrust" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tls-validation-context-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tls-validation-context-trust
                    'make-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (appmesh-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "Arn" :location "querystring" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-route-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-gateway-route-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gateway-route-name :initarg :gateway-route-name
                         :initform
                         (common-lisp:error ":gatewayroutename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-route-input-gateway-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "gatewayRouteName")
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-gateway-route-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or gateway-route-spec common-lisp:null)
                         :accessor struct-shape-update-gateway-route-input-spec
                         :shape "GatewayRouteSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-route-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-input
                    'make-update-gateway-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-gateway-route-output common-lisp:nil
                       ((gateway-route :initarg :gateway-route :initform
                         (common-lisp:error ":gatewayroute is required") :type
                         (common-lisp:or gateway-route-data common-lisp:null)
                         :accessor
                         struct-shape-update-gateway-route-output-gateway-route
                         :shape "GatewayRouteData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-gateway-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-gateway-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-gateway-route-output
                    'make-update-gateway-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-route))
      (common-lisp:list
       (common-lisp:cons "gatewayRoute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'gateway-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-mesh-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-mesh-input-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-mesh-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (spec :initarg :spec :initform common-lisp:nil :type
                         (common-lisp:or mesh-spec common-lisp:null) :accessor
                         struct-shape-update-mesh-input-spec :shape "MeshSpec"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mesh-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-mesh-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mesh-input 'make-update-mesh-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mesh-output common-lisp:nil
                       ((mesh :initarg :mesh :initform
                         (common-lisp:error ":mesh is required") :type
                         (common-lisp:or mesh-data common-lisp:null) :accessor
                         struct-shape-update-mesh-output-mesh :shape "MeshData"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mesh-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-mesh-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mesh-output 'make-update-mesh-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh))
      (common-lisp:list
       (common-lisp:cons "mesh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'mesh))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input update-mesh-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-route-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-route-input-client-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-route-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-route-input-mesh-owner :shape
                         "AccountId" :location "querystring" :location-name
                         "meshOwner")
                        (route-name :initarg :route-name :initform
                         (common-lisp:error ":routename is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-update-route-input-route-name
                         :shape "ResourceName" :location "uri" :location-name
                         "routeName")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or route-spec common-lisp:null) :accessor
                         struct-shape-update-route-input-spec :shape
                         "RouteSpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-route-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-route-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-route-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-route-input 'make-update-route-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-route-output common-lisp:nil
                       ((route :initarg :route :initform
                         (common-lisp:error ":route is required") :type
                         (common-lisp:or route-data common-lisp:null) :accessor
                         struct-shape-update-route-output-route :shape
                         "RouteData" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-route-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-route-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-route-output 'make-update-route-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route))
      (common-lisp:list
       (common-lisp:cons "route"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input update-route-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-virtual-gateway-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-virtual-gateway-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-gateway-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-virtual-gateway-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-gateway-input-spec :shape
                         "VirtualGatewaySpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-gateway-input-virtual-gateway-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualGatewayName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-gateway-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-gateway-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-input
                    'make-update-virtual-gateway-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-gateway-output common-lisp:nil
                       ((virtual-gateway :initarg :virtual-gateway :initform
                         (common-lisp:error ":virtualgateway is required")
                         :type
                         (common-lisp:or virtual-gateway-data common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-gateway-output-virtual-gateway
                         :shape "VirtualGatewayData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-gateway-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-virtual-gateway-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-gateway-output
                    'make-update-virtual-gateway-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-gateway))
      (common-lisp:list
       (common-lisp:cons "virtualGateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-gateway-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-virtual-node-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-virtual-node-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-node-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-virtual-node-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor struct-shape-update-virtual-node-input-spec
                         :shape "VirtualNodeSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-node-input-virtual-node-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualNodeName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-node-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-node-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-input
                    'make-update-virtual-node-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-node-output common-lisp:nil
                       ((virtual-node :initarg :virtual-node :initform
                         (common-lisp:error ":virtualnode is required") :type
                         (common-lisp:or virtual-node-data common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-node-output-virtual-node
                         :shape "VirtualNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-node-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-node-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-node-output
                    'make-update-virtual-node-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-node-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-virtual-router-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-virtual-router-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-router-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-virtual-router-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-router-input-spec :shape
                         "VirtualRouterSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-router-input-virtual-router-name
                         :shape "ResourceName" :location "uri" :location-name
                         "virtualRouterName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-router-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-router-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-input
                    'make-update-virtual-router-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-router-output common-lisp:nil
                       ((virtual-router :initarg :virtual-router :initform
                         (common-lisp:error ":virtualrouter is required") :type
                         (common-lisp:or virtual-router-data common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-router-output-virtual-router
                         :shape "VirtualRouterData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-router-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-router-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-router-output
                    'make-update-virtual-router-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-router))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-router-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass update-virtual-service-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-virtual-service-input-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-service-input-mesh-name
                         :shape "ResourceName" :location "uri" :location-name
                         "meshName")
                        (mesh-owner :initarg :mesh-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-virtual-service-input-mesh-owner
                         :shape "AccountId" :location "querystring"
                         :location-name "meshOwner")
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-service-input-spec :shape
                         "VirtualServiceSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-service-input-virtual-service-name
                         :shape "ServiceName" :location "uri" :location-name
                         "virtualServiceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-service-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-virtual-service-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-input
                    'make-update-virtual-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-virtual-service-output common-lisp:nil
                       ((virtual-service :initarg :virtual-service :initform
                         (common-lisp:error ":virtualservice is required")
                         :type
                         (common-lisp:or virtual-service-data common-lisp:null)
                         :accessor
                         struct-shape-update-virtual-service-output-virtual-service
                         :shape "VirtualServiceData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-virtual-service-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-virtual-service-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-virtual-service-output
                    'make-update-virtual-service-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-service))
      (common-lisp:list
       (common-lisp:cons "virtualService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'virtual-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-virtual-service-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-access-log common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-file-access-log
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-access-log-file
                         :shape "VirtualGatewayFileAccessLog" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-access-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-access-log
                    'make-virtual-gateway-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-backend-defaults common-lisp:nil
                       ((client-policy :initarg :client-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-client-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-backend-defaults-client-policy
                         :shape "VirtualGatewayClientPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-backend-defaults
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-backend-defaults
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-backend-defaults
                    'make-virtual-gateway-backend-defaults))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-backend-defaults))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-certificate-authority-arns ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-virtual-gateway-certificate-authority-arns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-policy common-lisp:nil
                       ((tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-client-policy-tls
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-policy-tls :shape
                         "VirtualGatewayClientPolicyTls" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-client-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy
                    'make-virtual-gateway-client-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-policy-tls common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-client-tls-certificate
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-policy-tls-certificate
                         :shape "VirtualGatewayClientTlsCertificate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enforce :initarg :enforce :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-policy-tls-enforce
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ports :initarg :ports :initform common-lisp:nil :type
                         (common-lisp:or port-set common-lisp:null) :accessor
                         struct-shape-virtual-gateway-client-policy-tls-ports
                         :shape "PortSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         (common-lisp:error ":validation is required") :type
                         (common-lisp:or virtual-gateway-tls-validation-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-policy-tls-validation
                         :shape "VirtualGatewayTlsValidationContext" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-client-policy-tls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-policy-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-policy-tls
                    'make-virtual-gateway-client-policy-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce))
      (common-lisp:list
       (common-lisp:cons "enforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-policy-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-client-tls-certificate common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-file-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-tls-certificate-file
                         :shape "VirtualGatewayListenerTlsFileCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-sds-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-client-tls-certificate-sds
                         :shape "VirtualGatewayListenerTlsSdsCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-client-tls-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-client-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-client-tls-certificate
                    'make-virtual-gateway-client-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-client-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-connection-pool common-lisp:nil
                       ((grpc :initarg :grpc :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-grpc-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-connection-pool-grpc
                         :shape "VirtualGatewayGrpcConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http :initarg :http :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-http-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-connection-pool-http
                         :shape "VirtualGatewayHttpConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http2 :initarg :http2 :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-http2connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-connection-pool-http2
                         :shape "VirtualGatewayHttp2ConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-connection-pool
                    'make-virtual-gateway-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-gateway-data-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-virtual-gateway-data-metadata
                         :shape "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-gateway-spec common-lisp:null)
                         :accessor struct-shape-virtual-gateway-data-spec
                         :shape "VirtualGatewaySpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-gateway-status
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-data-status
                         :shape "VirtualGatewayStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-data-virtual-gateway-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-data 'make-virtual-gateway-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-file-access-log common-lisp:nil
                       ((format :initarg :format :initform common-lisp:nil
                         :type (common-lisp:or logging-format common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-file-access-log-format
                         :shape "LoggingFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         struct-shape-virtual-gateway-file-access-log-path
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-file-access-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-file-access-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-file-access-log
                    'make-virtual-gateway-file-access-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-file-access-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-grpc-connection-pool common-lisp:nil
                       ((max-requests :initarg :max-requests :initform
                         (common-lisp:error ":maxrequests is required") :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-grpc-connection-pool-max-requests
                         :shape "MaxRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-grpc-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-grpc-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-grpc-connection-pool
                    'make-virtual-gateway-grpc-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-interval-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-health-check-policy common-lisp:nil
                       ((healthy-threshold :initarg :healthy-threshold
                         :initform
                         (common-lisp:error ":healthythreshold is required")
                         :type
                         (common-lisp:or virtual-gateway-health-check-threshold
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-healthy-threshold
                         :shape "VirtualGatewayHealthCheckThreshold" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (interval-millis :initarg :interval-millis :initform
                         (common-lisp:error ":intervalmillis is required")
                         :type
                         (common-lisp:or
                          virtual-gateway-health-check-interval-millis
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-interval-millis
                         :shape "VirtualGatewayHealthCheckIntervalMillis"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-virtual-gateway-health-check-policy-path
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-port
                         :shape "PortNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or virtual-gateway-port-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-protocol
                         :shape "VirtualGatewayPortProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-millis :initarg :timeout-millis :initform
                         (common-lisp:error ":timeoutmillis is required") :type
                         (common-lisp:or
                          virtual-gateway-health-check-timeout-millis
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-timeout-millis
                         :shape "VirtualGatewayHealthCheckTimeoutMillis"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unhealthy-threshold :initarg :unhealthy-threshold
                         :initform
                         (common-lisp:error ":unhealthythreshold is required")
                         :type
                         (common-lisp:or virtual-gateway-health-check-threshold
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-health-check-policy-unhealthy-threshold
                         :shape "VirtualGatewayHealthCheckThreshold" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-health-check-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-health-check-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-health-check-policy
                    'make-virtual-gateway-health-check-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-millis))
      (common-lisp:list
       (common-lisp:cons "intervalMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-millis))
      (common-lisp:list
       (common-lisp:cons "timeoutMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-health-check-policy))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-health-check-threshold ()
  'common-lisp:integer)
(common-lisp:deftype virtual-gateway-health-check-timeout-millis ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-http2connection-pool common-lisp:nil
                       ((max-requests :initarg :max-requests :initform
                         (common-lisp:error ":maxrequests is required") :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-http2connection-pool-max-requests
                         :shape "MaxRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-http2connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-http2connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http2connection-pool
                    'make-virtual-gateway-http2connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-http-connection-pool common-lisp:nil
                       ((max-connections :initarg :max-connections :initform
                         (common-lisp:error ":maxconnections is required")
                         :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-http-connection-pool-max-connections
                         :shape "MaxConnections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-pending-requests :initarg :max-pending-requests
                         :initform common-lisp:nil :type
                         (common-lisp:or max-pending-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-http-connection-pool-max-pending-requests
                         :shape "MaxPendingRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-http-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-http-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-http-connection-pool
                    'make-virtual-gateway-http-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway-ref))
 (common-lisp:defun make-virtual-gateway-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener common-lisp:nil
                       ((connection-pool :initarg :connection-pool :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-connection-pool
                         :shape "VirtualGatewayConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (health-check :initarg :health-check :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-health-check-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-health-check
                         :shape "VirtualGatewayHealthCheckPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (port-mapping :initarg :port-mapping :initform
                         (common-lisp:error ":portmapping is required") :type
                         (common-lisp:or virtual-gateway-port-mapping
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-port-mapping
                         :shape "VirtualGatewayPortMapping" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tls :initarg :tls :initform common-lisp:nil :type
                         (common-lisp:or virtual-gateway-listener-tls
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-listener-tls
                         :shape "VirtualGatewayListenerTls" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener 'make-virtual-gateway-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-pool))
      (common-lisp:list
       (common-lisp:cons "connectionPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls))
      (common-lisp:list
       (common-lisp:cons "tls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         (common-lisp:error ":certificate is required") :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-certificate
                         :shape "VirtualGatewayListenerTlsCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mode :initarg :mode :initform
                         (common-lisp:error ":mode is required") :type
                         (common-lisp:or virtual-gateway-listener-tls-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-mode :shape
                         "VirtualGatewayListenerTlsMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validation :initarg :validation :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-validation-context
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-validation
                         :shape "VirtualGatewayListenerTlsValidationContext"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-listener-tls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls
                    'make-virtual-gateway-listener-tls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-acm-certificate
                       common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificatearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-virtual-gateway-listener-tls-acm-certificate-certificate-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-acm-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-acm-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-acm-certificate
                    'make-virtual-gateway-listener-tls-acm-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-acm-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-certificate common-lisp:nil
                       ((acm :initarg :acm :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-acm-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-certificate-acm
                         :shape "VirtualGatewayListenerTlsAcmCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-file-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-certificate-file
                         :shape "VirtualGatewayListenerTlsFileCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-sds-certificate
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-certificate-sds
                         :shape "VirtualGatewayListenerTlsSdsCertificate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-certificate
                    'make-virtual-gateway-listener-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-file-certificate
                       common-lisp:nil
                       ((certificate-chain :initarg :certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required")
                         :type (common-lisp:or file-path common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-file-certificate-certificate-chain
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         (common-lisp:error ":privatekey is required") :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         struct-shape-virtual-gateway-listener-tls-file-certificate-private-key
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-file-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-file-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-file-certificate
                    'make-virtual-gateway-listener-tls-file-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-file-certificate))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-listener-tls-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-sds-certificate
                       common-lisp:nil
                       ((secret-name :initarg :secret-name :initform
                         (common-lisp:error ":secretname is required") :type
                         (common-lisp:or virtual-gateway-sds-secret-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-sds-certificate-secret-name
                         :shape "VirtualGatewaySdsSecretName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-sds-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-sds-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-sds-certificate
                    'make-virtual-gateway-listener-tls-sds-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-sds-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-validation-context
                       common-lisp:nil
                       ((subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-validation-context-subject-alternative-names
                         :shape "SubjectAlternativeNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust :initarg :trust :initform
                         (common-lisp:error ":trust is required") :type
                         (common-lisp:or
                          virtual-gateway-listener-tls-validation-context-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-validation-context-trust
                         :shape
                         "VirtualGatewayListenerTlsValidationContextTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-validation-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context
                    'make-virtual-gateway-listener-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-listener-tls-validation-context-trust
                       common-lisp:nil
                       ((file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-file-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-validation-context-trust-file
                         :shape "VirtualGatewayTlsValidationContextFileTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-sds-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-listener-tls-validation-context-trust-sds
                         :shape "VirtualGatewayTlsValidationContextSdsTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-listener-tls-validation-context-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-listener-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-listener-tls-validation-context-trust
                    'make-virtual-gateway-listener-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-listener-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-listeners ()
   '(trivial-types:proper-list virtual-gateway-listener))
 (common-lisp:defun make-virtual-gateway-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            virtual-gateway-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-logging common-lisp:nil
                       ((access-log :initarg :access-log :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-access-log
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-logging-access-log :shape
                         "VirtualGatewayAccessLog" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-logging
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-logging
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-logging 'make-virtual-gateway-logging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log))
      (common-lisp:list
       (common-lisp:cons "accessLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-logging))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-port-mapping common-lisp:nil
                       ((port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-port-mapping-port :shape
                         "PortNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform
                         (common-lisp:error ":protocol is required") :type
                         (common-lisp:or virtual-gateway-port-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-port-mapping-protocol
                         :shape "VirtualGatewayPortProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-port-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-port-mapping
                    'make-virtual-gateway-port-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-port-mapping))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-port-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-last-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-gateway-ref-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-virtual-gateway-ref-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-gateway-name :initarg :virtual-gateway-name
                         :initform
                         (common-lisp:error ":virtualgatewayname is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-ref-virtual-gateway-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-ref 'make-virtual-gateway-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-gateway-name))
      (common-lisp:list
       (common-lisp:cons "virtualGatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-ref))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-sds-secret-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-spec common-lisp:nil
                       ((backend-defaults :initarg :backend-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-gateway-backend-defaults
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-spec-backend-defaults
                         :shape "VirtualGatewayBackendDefaults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (listeners :initarg :listeners :initform
                         (common-lisp:error ":listeners is required") :type
                         (common-lisp:or virtual-gateway-listeners
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-spec-listeners
                         :shape "VirtualGatewayListeners" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-gateway-logging
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-spec-logging
                         :shape "VirtualGatewayLogging" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-spec 'make-virtual-gateway-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-gateway-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-gateway-status-code
                                         common-lisp:null)
                         :accessor struct-shape-virtual-gateway-status-status
                         :shape "VirtualGatewayStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-gateway-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-status 'make-virtual-gateway-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-status))
   common-lisp:nil))
(common-lisp:deftype virtual-gateway-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context common-lisp:nil
                       ((subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or subject-alternative-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-subject-alternative-names
                         :shape "SubjectAlternativeNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust :initarg :trust :initform
                         (common-lisp:error ":trust is required") :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-trust
                         :shape "VirtualGatewayTlsValidationContextTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-tls-validation-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context
                    'make-virtual-gateway-tls-validation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust))
      (common-lisp:list
       (common-lisp:cons "trust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-acm-trust
                       common-lisp:nil
                       ((certificate-authority-arns :initarg
                         :certificate-authority-arns :initform
                         (common-lisp:error
                          ":certificateauthorityarns is required")
                         :type
                         (common-lisp:or
                          virtual-gateway-certificate-authority-arns
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-acm-trust-certificate-authority-arns
                         :shape "VirtualGatewayCertificateAuthorityArns"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-acm-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-acm-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-acm-trust
                    'make-virtual-gateway-tls-validation-context-acm-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arns))
      (common-lisp:list
       (common-lisp:cons "certificateAuthorityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-acm-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-file-trust
                       common-lisp:nil
                       ((certificate-chain :initarg :certificate-chain
                         :initform
                         (common-lisp:error ":certificatechain is required")
                         :type (common-lisp:or file-path common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-file-trust-certificate-chain
                         :shape "FilePath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-file-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-file-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-file-trust
                    'make-virtual-gateway-tls-validation-context-file-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "certificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-file-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-sds-trust
                       common-lisp:nil
                       ((secret-name :initarg :secret-name :initform
                         (common-lisp:error ":secretname is required") :type
                         (common-lisp:or virtual-gateway-sds-secret-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-sds-trust-secret-name
                         :shape "VirtualGatewaySdsSecretName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-sds-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-sds-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-sds-trust
                    'make-virtual-gateway-tls-validation-context-sds-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-name))
      (common-lisp:list
       (common-lisp:cons "secretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-sds-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-gateway-tls-validation-context-trust
                       common-lisp:nil
                       ((acm :initarg :acm :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-acm-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-trust-acm
                         :shape "VirtualGatewayTlsValidationContextAcmTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-file-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-trust-file
                         :shape "VirtualGatewayTlsValidationContextFileTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sds :initarg :sds :initform common-lisp:nil :type
                         (common-lisp:or
                          virtual-gateway-tls-validation-context-sds-trust
                          common-lisp:null)
                         :accessor
                         struct-shape-virtual-gateway-tls-validation-context-trust-sds
                         :shape "VirtualGatewayTlsValidationContextSdsTrust"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-gateway-tls-validation-context-trust
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-gateway-tls-validation-context-trust
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-gateway-tls-validation-context-trust
                    'make-virtual-gateway-tls-validation-context-trust))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acm))
      (common-lisp:list
       (common-lisp:cons "acm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sds))
      (common-lisp:list
       (common-lisp:cons "sds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-gateway-tls-validation-context-trust))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-connection-pool common-lisp:nil
                       ((grpc :initarg :grpc :initform common-lisp:nil :type
                         (common-lisp:or virtual-node-grpc-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-connection-pool-grpc :shape
                         "VirtualNodeGrpcConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http :initarg :http :initform common-lisp:nil :type
                         (common-lisp:or virtual-node-http-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-connection-pool-http :shape
                         "VirtualNodeHttpConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (http2 :initarg :http2 :initform common-lisp:nil :type
                         (common-lisp:or virtual-node-http2connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-connection-pool-http2 :shape
                         "VirtualNodeHttp2ConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tcp :initarg :tcp :initform common-lisp:nil :type
                         (common-lisp:or virtual-node-tcp-connection-pool
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-connection-pool-tcp :shape
                         "VirtualNodeTcpConnectionPool" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-connection-pool
                    'make-virtual-node-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grpc))
      (common-lisp:list
       (common-lisp:cons "grpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http))
      (common-lisp:list
       (common-lisp:cons "http"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http2))
      (common-lisp:list
       (common-lisp:cons "http2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tcp))
      (common-lisp:list
       (common-lisp:cons "tcp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-node-data-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-virtual-node-data-metadata
                         :shape "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-node-spec common-lisp:null)
                         :accessor struct-shape-virtual-node-data-spec :shape
                         "VirtualNodeSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-node-status common-lisp:null)
                         :accessor struct-shape-virtual-node-data-status :shape
                         "VirtualNodeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-data-virtual-node-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-data 'make-virtual-node-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-grpc-connection-pool common-lisp:nil
                       ((max-requests :initarg :max-requests :initform
                         (common-lisp:error ":maxrequests is required") :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-grpc-connection-pool-max-requests
                         :shape "MaxRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-grpc-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-grpc-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-grpc-connection-pool
                    'make-virtual-node-grpc-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-grpc-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-http2connection-pool common-lisp:nil
                       ((max-requests :initarg :max-requests :initform
                         (common-lisp:error ":maxrequests is required") :type
                         (common-lisp:or max-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-http2connection-pool-max-requests
                         :shape "MaxRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-http2connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-http2connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http2connection-pool
                    'make-virtual-node-http2connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-requests))
      (common-lisp:list
       (common-lisp:cons "maxRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http2connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-http-connection-pool common-lisp:nil
                       ((max-connections :initarg :max-connections :initform
                         (common-lisp:error ":maxconnections is required")
                         :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-http-connection-pool-max-connections
                         :shape "MaxConnections" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-pending-requests :initarg :max-pending-requests
                         :initform common-lisp:nil :type
                         (common-lisp:or max-pending-requests common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-http-connection-pool-max-pending-requests
                         :shape "MaxPendingRequests" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-http-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-http-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-http-connection-pool
                    'make-virtual-node-http-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-pending-requests))
      (common-lisp:list
       (common-lisp:cons "maxPendingRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-http-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-node-list ()
   '(trivial-types:proper-list virtual-node-ref))
 (common-lisp:defun make-virtual-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-node-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-node-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-node-ref-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-virtual-node-ref-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-ref-virtual-node-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-ref 'make-virtual-node-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-service-provider common-lisp:nil
                       ((virtual-node-name :initarg :virtual-node-name
                         :initform
                         (common-lisp:error ":virtualnodename is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-service-provider-virtual-node-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-service-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-service-provider
                    'make-virtual-node-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node-name))
      (common-lisp:list
       (common-lisp:cons "virtualNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-spec common-lisp:nil
                       ((backend-defaults :initarg :backend-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-defaults common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-spec-backend-defaults :shape
                         "BackendDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (backends :initarg :backends :initform common-lisp:nil
                         :type (common-lisp:or backends common-lisp:null)
                         :accessor struct-shape-virtual-node-spec-backends
                         :shape "Backends" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or listeners common-lisp:null) :accessor
                         struct-shape-virtual-node-spec-listeners :shape
                         "Listeners" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logging :initarg :logging :initform common-lisp:nil
                         :type (common-lisp:or logging common-lisp:null)
                         :accessor struct-shape-virtual-node-spec-logging
                         :shape "Logging" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-discovery :initarg :service-discovery
                         :initform common-lisp:nil :type
                         (common-lisp:or service-discovery common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-spec-service-discovery
                         :shape "ServiceDiscovery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-spec 'make-virtual-node-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backend-defaults))
      (common-lisp:list
       (common-lisp:cons "backendDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backends))
      (common-lisp:list
       (common-lisp:cons "backends"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging))
      (common-lisp:list
       (common-lisp:cons "logging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-discovery))
      (common-lisp:list
       (common-lisp:cons "serviceDiscovery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-node-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-node-status-code
                                         common-lisp:null)
                         :accessor struct-shape-virtual-node-status-status
                         :shape "VirtualNodeStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-node-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-status 'make-virtual-node-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-node-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-node-status))
   common-lisp:nil))
(common-lisp:deftype virtual-node-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-node-tcp-connection-pool common-lisp:nil
                       ((max-connections :initarg :max-connections :initform
                         (common-lisp:error ":maxconnections is required")
                         :type
                         (common-lisp:or max-connections common-lisp:null)
                         :accessor
                         struct-shape-virtual-node-tcp-connection-pool-max-connections
                         :shape "MaxConnections" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-node-tcp-connection-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-node-tcp-connection-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-node-tcp-connection-pool
                    'make-virtual-node-tcp-connection-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-connections))
      (common-lisp:list
       (common-lisp:cons "maxConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-node-tcp-connection-pool))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-router-data-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-virtual-router-data-metadata
                         :shape "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-router-spec common-lisp:null)
                         :accessor struct-shape-virtual-router-data-spec :shape
                         "VirtualRouterSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-router-status
                                         common-lisp:null)
                         :accessor struct-shape-virtual-router-data-status
                         :shape "VirtualRouterStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-router-data-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-data 'make-virtual-router-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-list ()
   '(trivial-types:proper-list virtual-router-ref))
 (common-lisp:defun make-virtual-router-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-router-listener common-lisp:nil
                       ((port-mapping :initarg :port-mapping :initform
                         (common-lisp:error ":portmapping is required") :type
                         (common-lisp:or port-mapping common-lisp:null)
                         :accessor
                         struct-shape-virtual-router-listener-port-mapping
                         :shape "PortMapping" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-listener
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-listener
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-listener 'make-virtual-router-listener))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-mapping))
      (common-lisp:list
       (common-lisp:cons "portMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-listener))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-router-listeners ()
   '(trivial-types:proper-list virtual-router-listener))
 (common-lisp:defun make-virtual-router-listeners
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-router-listener))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-router-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-last-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-router-ref-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-virtual-router-ref-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-router-ref-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-ref 'make-virtual-router-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-service-provider common-lisp:nil
                       ((virtual-router-name :initarg :virtual-router-name
                         :initform
                         (common-lisp:error ":virtualroutername is required")
                         :type (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-router-service-provider-virtual-router-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-service-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'virtual-router-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-service-provider
                    'make-virtual-router-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router-name))
      (common-lisp:list
       (common-lisp:cons "virtualRouterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-spec common-lisp:nil
                       ((listeners :initarg :listeners :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-router-listeners
                                         common-lisp:null)
                         :accessor struct-shape-virtual-router-spec-listeners
                         :shape "VirtualRouterListeners" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-spec 'make-virtual-router-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listeners))
      (common-lisp:list
       (common-lisp:cons "listeners"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-router-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-router-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-router-status-code
                                         common-lisp:null)
                         :accessor struct-shape-virtual-router-status-status
                         :shape "VirtualRouterStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-router-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-router-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-router-status 'make-virtual-router-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-router-status))
   common-lisp:nil))
(common-lisp:deftype virtual-router-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass virtual-service-backend common-lisp:nil
                       ((client-policy :initarg :client-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or client-policy common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-backend-client-policy
                         :shape "ClientPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-backend-virtual-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-backend
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-backend
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-backend 'make-virtual-service-backend))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-policy))
      (common-lisp:list
       (common-lisp:cons "clientPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-backend))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-data common-lisp:nil
                       ((mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-service-data-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or resource-metadata common-lisp:null)
                         :accessor struct-shape-virtual-service-data-metadata
                         :shape "ResourceMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spec :initarg :spec :initform
                         (common-lisp:error ":spec is required") :type
                         (common-lisp:or virtual-service-spec common-lisp:null)
                         :accessor struct-shape-virtual-service-data-spec
                         :shape "VirtualServiceSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-service-status
                                         common-lisp:null)
                         :accessor struct-shape-virtual-service-data-status
                         :shape "VirtualServiceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-data-virtual-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-data 'make-virtual-service-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype virtual-service-list ()
   '(trivial-types:proper-list virtual-service-ref))
 (common-lisp:defun make-virtual-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-service-ref))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass virtual-service-provider common-lisp:nil
                       ((virtual-node :initarg :virtual-node :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-node-service-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-provider-virtual-node
                         :shape "VirtualNodeServiceProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (virtual-router :initarg :virtual-router :initform
                         common-lisp:nil :type
                         (common-lisp:or virtual-router-service-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-provider-virtual-router
                         :shape "VirtualRouterServiceProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-provider 'make-virtual-service-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-router))
      (common-lisp:list
       (common-lisp:cons "virtualRouter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-ref common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         (common-lisp:error ":lastupdatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-last-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-name :initarg :mesh-name :initform
                         (common-lisp:error ":meshname is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-virtual-service-ref-mesh-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mesh-owner :initarg :mesh-owner :initform
                         (common-lisp:error ":meshowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-mesh-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         (common-lisp:error ":resourceowner is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-resource-owner :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform
                         (common-lisp:error ":version is required") :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-virtual-service-ref-version :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-service-name :initarg :virtual-service-name
                         :initform
                         (common-lisp:error ":virtualservicename is required")
                         :type (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-virtual-service-ref-virtual-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-ref
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-ref 'make-virtual-service-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-name))
      (common-lisp:list
       (common-lisp:cons "meshName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mesh-owner))
      (common-lisp:list
       (common-lisp:cons "meshOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "resourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-service-name))
      (common-lisp:list
       (common-lisp:cons "virtualServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-spec common-lisp:nil
                       ((provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or virtual-service-provider
                                         common-lisp:null)
                         :accessor struct-shape-virtual-service-spec-provider
                         :shape "VirtualServiceProvider" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-spec
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-spec
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-spec 'make-virtual-service-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-service-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass virtual-service-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or virtual-service-status-code
                                         common-lisp:null)
                         :accessor struct-shape-virtual-service-status-status
                         :shape "VirtualServiceStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-virtual-service-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'virtual-service-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'virtual-service-status 'make-virtual-service-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          virtual-service-status))
   common-lisp:nil))
(common-lisp:deftype virtual-service-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass weighted-target common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or listener-port common-lisp:null)
                         :accessor struct-shape-weighted-target-port :shape
                         "ListenerPort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtual-node :initarg :virtual-node :initform
                         (common-lisp:error ":virtualnode is required") :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-weighted-target-virtual-node
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight :initarg :weight :initform
                         (common-lisp:error ":weight is required") :type
                         (common-lisp:or percent-int common-lisp:null)
                         :accessor struct-shape-weighted-target-weight :shape
                         "PercentInt" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-weighted-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'weighted-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'weighted-target 'make-weighted-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input weighted-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-node))
      (common-lisp:list
       (common-lisp:cons "virtualNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input weighted-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype weighted-targets ()
   '(trivial-types:proper-list weighted-target))
 (common-lisp:defun make-weighted-targets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list weighted-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec tags virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "CreateGatewayRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-gateway-route))
(common-lisp:progn
 (common-lisp:defun create-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name spec tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v20190125/meshes"
                                                        "CreateMesh"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-mesh))
(common-lisp:progn
 (common-lisp:defun create-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     tags virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "CreateRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-route))
(common-lisp:progn
 (common-lisp:defun create-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualGateway"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun create-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualNode"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-virtual-node))
(common-lisp:progn
 (common-lisp:defun create-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualRouter"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-virtual-router))
(common-lisp:progn
 (common-lisp:defun create-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     tags virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec tags
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "CreateVirtualService"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-virtual-service))
(common-lisp:progn
 (common-lisp:defun delete-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DeleteGatewayRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-gateway-route))
(common-lisp:progn
 (common-lisp:defun delete-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name)
   (common-lisp:declare (common-lisp:ignorable mesh-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DeleteMesh"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mesh))
(common-lisp:progn
 (common-lisp:defun delete-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DeleteRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-route))
(common-lisp:progn
 (common-lisp:defun delete-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DeleteVirtualGateway"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun delete-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DeleteVirtualNode"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-virtual-node))
(common-lisp:progn
 (common-lisp:defun delete-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DeleteVirtualRouter"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-virtual-router))
(common-lisp:progn
 (common-lisp:defun delete-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DeleteVirtualService"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-virtual-service))
(common-lisp:progn
 (common-lisp:defun describe-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-route-name mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable gateway-route-name mesh-name mesh-owner
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "DescribeGatewayRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-gateway-route))
(common-lisp:progn
 (common-lisp:defun describe-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner)
   (common-lisp:declare (common-lisp:ignorable mesh-name mesh-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "DescribeMesh"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-mesh))
(common-lisp:progn
 (common-lisp:defun describe-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner route-name
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner route-name
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "DescribeRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-route))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "DescribeVirtualGateway"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun describe-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "DescribeVirtualNode"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-virtual-node))
(common-lisp:progn
 (common-lisp:defun describe-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "DescribeVirtualRouter"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-virtual-router))
(common-lisp:progn
 (common-lisp:defun describe-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mesh-name mesh-owner
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable mesh-name mesh-owner virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "DescribeVirtualService"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-virtual-service))
(common-lisp:progn
 (common-lisp:defun list-gateway-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateway-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "ListGatewayRoutes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-gateway-routes))
(common-lisp:progn
 (common-lisp:defun list-meshes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-meshes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v20190125/meshes"
                                                        "ListMeshes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-meshes))
(common-lisp:progn
 (common-lisp:defun list-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-routes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "ListRoutes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-routes))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token resource-arn)
   (common-lisp:declare (common-lisp:ignorable limit next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v20190125/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-virtual-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-gateways-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualGateways"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun list-virtual-nodes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-nodes-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualNodes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-virtual-nodes))
(common-lisp:progn
 (common-lisp:defun list-virtual-routers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-routers-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualRouters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-virtual-routers))
(common-lisp:progn
 (common-lisp:defun list-virtual-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit mesh-name mesh-owner next-token)
   (common-lisp:declare
    (common-lisp:ignorable limit mesh-name mesh-owner next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "ListVirtualServices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-virtual-services))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/v20190125/tag"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v20190125/untag"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-gateway-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token gateway-route-name mesh-name
                     mesh-owner spec virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token gateway-route-name mesh-name mesh-owner
     spec virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateway/~A/gatewayRoutes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-route-name))))
                                                        "UpdateGatewayRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-gateway-route))
(common-lisp:progn
 (common-lisp:defun update-mesh
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name spec)
   (common-lisp:declare (common-lisp:ignorable client-token mesh-name spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mesh-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))))
                                                        "UpdateMesh"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-mesh))
(common-lisp:progn
 (common-lisp:defun update-route
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner
                     route-name spec virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner route-name spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-route-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouter/~A/routes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-name))))
                                                        "UpdateRoute"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-route))
(common-lisp:progn
 (common-lisp:defun update-virtual-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-gateway-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-gateway-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualGateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-gateway-name))))
                                                        "UpdateVirtualGateway"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-virtual-gateway))
(common-lisp:progn
 (common-lisp:defun update-virtual-node
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-node-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-node-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-node-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualNodes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-node-name))))
                                                        "UpdateVirtualNode"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-virtual-node))
(common-lisp:progn
 (common-lisp:defun update-virtual-router
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-router-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-router-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-router-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualRouters/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-router-name))))
                                                        "UpdateVirtualRouter"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-virtual-router))
(common-lisp:progn
 (common-lisp:defun update-virtual-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token mesh-name mesh-owner spec
                     virtual-service-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token mesh-name mesh-owner spec
     virtual-service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-virtual-service-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'appmesh-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v20190125/meshes/~A/virtualServices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mesh-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'virtual-service-name))))
                                                        "UpdateVirtualService"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-virtual-service))
