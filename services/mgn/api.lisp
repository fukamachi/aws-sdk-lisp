;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mgn/api
  (:use)
  (:nicknames #:aws/mgn)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mgn/api)
(common-lisp:progn
 (common-lisp:define-condition mgn-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mgn-error))
(common-lisp:progn
 (common-lisp:defclass mgn-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "mgn" :api-version
                        "2020-02-26" :host-prefix "mgn" :signing-name "mgn"
                        :global-host common-lisp:nil))
 (common-lisp:export 'mgn-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UninitializedAccountException" . uninitialized-account-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype action-category () 'common-lisp:string)
(common-lisp:deftype action-description () 'common-lisp:string)
(common-lisp:deftype action-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-ids () '(trivial-types:proper-list action-id))
 (common-lisp:defun make-action-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application common-lisp:nil
                       ((application-aggregated-status :initarg
                         :application-aggregated-status :initform
                         common-lisp:nil :type
                         (common-lisp:or application-aggregated-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-application-aggregated-status
                         :shape "ApplicationAggregatedStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-application-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-application-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-application-creation-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor struct-shape-application-description :shape
                         "ApplicationDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-application-is-archived :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date-time :initarg
                         :last-modified-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-last-modified-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-application-name :shape
                         "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-application-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wave-id :initarg :wave-id :initform common-lisp:nil
                         :type (common-lisp:or wave-id common-lisp:null)
                         :accessor struct-shape-application-wave-id :shape
                         "WaveID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'application
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'application 'make-application))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "applicationAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-date-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass application-aggregated-status common-lisp:nil
                       ((health-status :initarg :health-status :initform
                         common-lisp:nil :type
                         (common-lisp:or application-health-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-aggregated-status-health-status
                         :shape "ApplicationHealthStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-date-time :initarg :last-update-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-aggregated-status-last-update-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (progress-status :initarg :progress-status :initform
                         common-lisp:nil :type
                         (common-lisp:or application-progress-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-application-aggregated-status-progress-status
                         :shape "ApplicationProgressStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-source-servers :initarg :total-source-servers
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-application-aggregated-status-total-source-servers
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-application-aggregated-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'application-aggregated-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'application-aggregated-status
                    'make-application-aggregated-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-aggregated-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-aggregated-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-status))
      (common-lisp:list
       (common-lisp:cons "progressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-source-servers))
      (common-lisp:list
       (common-lisp:cons "totalSourceServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-aggregated-status))
   common-lisp:nil))
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:deftype application-health-status () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-ids ()
   '(trivial-types:proper-list application-id))
 (common-lisp:defun make-application-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype application-ids-filter ()
   '(trivial-types:proper-list application-id))
 (common-lisp:defun make-application-ids-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:deftype application-progress-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications-list ()
   '(trivial-types:proper-list application))
 (common-lisp:defun make-applications-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass archive-application-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-archive-application-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-archive-application-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-application-request
                    'make-archive-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-wave-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-archive-wave-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-archive-wave-request-wave-id :shape
                         "WaveID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-wave-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-wave-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-wave-request 'make-archive-wave-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-wave-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-wave-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-wave-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-applications-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-associate-applications-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-ids :initarg :application-ids :initform
                         (common-lisp:error ":applicationids is required")
                         :type
                         (common-lisp:or application-ids common-lisp:null)
                         :accessor
                         struct-shape-associate-applications-request-application-ids
                         :shape "ApplicationIDs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-associate-applications-request-wave-id
                         :shape "WaveID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-applications-request
                    'make-associate-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-ids))
      (common-lisp:list
       (common-lisp:cons "applicationIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-applications-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-applications-response
                    'make-associate-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-source-servers-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-associate-source-servers-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-associate-source-servers-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform
                         (common-lisp:error ":sourceserverids is required")
                         :type
                         (common-lisp:or
                          associate-source-servers-request-source-server-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-associate-source-servers-request-source-server-ids
                         :shape "AssociateSourceServersRequestSourceServerIDs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-source-servers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-source-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-source-servers-request
                    'make-associate-source-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associate-source-servers-request-source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-associate-source-servers-request-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-source-servers-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-source-servers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-source-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-source-servers-response
                    'make-associate-source-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-source-servers-response))
   common-lisp:nil))
(common-lisp:deftype bandwidth-throttling () 'common-lisp:integer)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boot-mode () 'common-lisp:string)
(common-lisp:deftype bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cpu common-lisp:nil
                       ((cores :initarg :cores :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor struct-shape-cpu-cores :shape
                         "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-name :initarg :model-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-cpu-model-name :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cpu (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cpu
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cpu 'make-cpu))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cpu))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cores))
      (common-lisp:list
       (common-lisp:cons "cores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "modelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cpu))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-server-life-cycle-state-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-change-server-life-cycle-state-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (life-cycle :initarg :life-cycle :initform
                         (common-lisp:error ":lifecycle is required") :type
                         (common-lisp:or
                          change-server-life-cycle-state-source-server-lifecycle
                          common-lisp:null)
                         :accessor
                         struct-shape-change-server-life-cycle-state-request-life-cycle
                         :shape
                         "ChangeServerLifeCycleStateSourceServerLifecycle"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-change-server-life-cycle-state-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-server-life-cycle-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-server-life-cycle-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-server-life-cycle-state-request
                    'make-change-server-life-cycle-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle))
      (common-lisp:list
       (common-lisp:cons "lifeCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-server-life-cycle-state-source-server-lifecycle
                       common-lisp:nil
                       ((state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or
                          change-server-life-cycle-state-source-server-lifecycle-state
                          common-lisp:null)
                         :accessor
                         struct-shape-change-server-life-cycle-state-source-server-lifecycle-state
                         :shape
                         "ChangeServerLifeCycleStateSourceServerLifecycleState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-server-life-cycle-state-source-server-lifecycle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-server-life-cycle-state-source-server-lifecycle
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-server-life-cycle-state-source-server-lifecycle
                    'make-change-server-life-cycle-state-source-server-lifecycle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-source-server-lifecycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-source-server-lifecycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-server-life-cycle-state-source-server-lifecycle))
   common-lisp:nil))
(common-lisp:deftype change-server-life-cycle-state-source-server-lifecycle-state
                     ()
  'common-lisp:string)
(common-lisp:deftype client-idempotency-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       conflict-exception-code)
      (errors :initarg :errors :initform common-lisp:nil :reader
       conflict-exception-errors)
      (message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-code
                    'conflict-exception-errors 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype conflict-exception-errors ()
   '(trivial-types:proper-list error-details))
 (common-lisp:defun make-conflict-exception-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connector common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-connector-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-id :initarg :connector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor struct-shape-connector-connector-id :shape
                         "ConnectorID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or connector-name common-lisp:null)
                         :accessor struct-shape-connector-name :shape
                         "ConnectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-command-config :initarg :ssm-command-config
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-ssm-command-config
                                         common-lisp:null)
                         :accessor struct-shape-connector-ssm-command-config
                         :shape "ConnectorSsmCommandConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssm-instance-id :initarg :ssm-instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-instance-id common-lisp:null)
                         :accessor struct-shape-connector-ssm-instance-id
                         :shape "SsmInstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-connector-tags :shape "TagsMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connector 'make-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-command-config))
      (common-lisp:list
       (common-lisp:cons "ssmCommandConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-instance-id))
      (common-lisp:list
       (common-lisp:cons "ssmInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector))
   common-lisp:nil))
(common-lisp:deftype connector-arn () 'common-lisp:string)
(common-lisp:deftype connector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-ids-filter ()
   '(trivial-types:proper-list connector-id))
 (common-lisp:defun make-connector-ids-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connector-ssm-command-config common-lisp:nil
                       ((cloud-watch-log-group-name :initarg
                         :cloud-watch-log-group-name :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-log-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-ssm-command-config-cloud-watch-log-group-name
                         :shape "CloudWatchLogGroupName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-watch-output-enabled :initarg
                         :cloud-watch-output-enabled :initform
                         (common-lisp:error
                          ":cloudwatchoutputenabled is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-connector-ssm-command-config-cloud-watch-output-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :initform common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-connector-ssm-command-config-output-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-enabled :initarg :s3output-enabled :initform
                         (common-lisp:error ":s3outputenabled is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-connector-ssm-command-config-s3output-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-ssm-command-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-ssm-command-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-ssm-command-config
                    'make-connector-ssm-command-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-ssm-command-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-ssm-command-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-enabled))
      (common-lisp:list
       (common-lisp:cons "cloudWatchOutputEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "outputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-enabled))
      (common-lisp:list
       (common-lisp:cons "s3OutputEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-ssm-command-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connectors-list ()
   '(trivial-types:proper-list connector))
 (common-lisp:defun make-connectors-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype cpus () '(trivial-types:proper-list cpu))
 (common-lisp:defun make-cpus
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cpu))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-application-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-description
                         :shape "ApplicationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-create-application-request-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-application-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connector-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or connector-name common-lisp:null)
                         :accessor struct-shape-create-connector-request-name
                         :shape "ConnectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-command-config :initarg :ssm-command-config
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-ssm-command-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-ssm-command-config
                         :shape "ConnectorSsmCommandConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssm-instance-id :initarg :ssm-instance-id :initform
                         (common-lisp:error ":ssminstanceid is required") :type
                         (common-lisp:or ssm-instance-id common-lisp:null)
                         :accessor
                         struct-shape-create-connector-request-ssm-instance-id
                         :shape "SsmInstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-connector-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-command-config))
      (common-lisp:list
       (common-lisp:cons "ssmCommandConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-instance-id))
      (common-lisp:list
       (common-lisp:cons "ssmInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-launch-configuration-template-request
                       common-lisp:nil
                       ((associate-public-ip-address :initarg
                         :associate-public-ip-address :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-associate-public-ip-address
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boot-mode :initarg :boot-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boot-mode common-lisp:null) :accessor
                         struct-shape-create-launch-configuration-template-request-boot-mode
                         :shape "BootMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-private-ip :initarg :copy-private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-launch-configuration-template-request-copy-private-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-launch-configuration-template-request-copy-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-map-auto-tagging :initarg
                         :enable-map-auto-tagging :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-enable-map-auto-tagging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (large-volume-conf :initarg :large-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-large-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-disposition :initarg :launch-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-disposition common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-launch-disposition
                         :shape "LaunchDisposition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (licensing :initarg :licensing :initform
                         common-lisp:nil :type
                         (common-lisp:or licensing common-lisp:null) :accessor
                         struct-shape-create-launch-configuration-template-request-licensing
                         :shape "Licensing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-auto-tagging-mpe-id :initarg
                         :map-auto-tagging-mpe-id :initform common-lisp:nil
                         :type (common-lisp:or tag-value common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-map-auto-tagging-mpe-id
                         :shape "TagValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions :initarg :post-launch-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or post-launch-actions common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-post-launch-actions
                         :shape "PostLaunchActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (small-volume-conf :initarg :small-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-small-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (small-volume-max-size :initarg :small-volume-max-size
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-small-volume-max-size
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-launch-configuration-template-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-instance-type-right-sizing-method :initarg
                         :target-instance-type-right-sizing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-instance-type-right-sizing-method
                          common-lisp:null)
                         :accessor
                         struct-shape-create-launch-configuration-template-request-target-instance-type-right-sizing-method
                         :shape "TargetInstanceTypeRightSizingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-launch-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-launch-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-launch-configuration-template-request
                    'make-create-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "associatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boot-mode))
      (common-lisp:list
       (common-lisp:cons "bootMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-map-auto-tagging))
      (common-lisp:list
       (common-lisp:cons "enableMapAutoTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'large-volume-conf))
      (common-lisp:list
       (common-lisp:cons "largeVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-auto-tagging-mpe-id))
      (common-lisp:list
       (common-lisp:cons "mapAutoTaggingMpeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-actions))
      (common-lisp:list
       (common-lisp:cons "postLaunchActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-volume-conf))
      (common-lisp:list
       (common-lisp:cons "smallVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-volume-max-size))
      (common-lisp:list
       (common-lisp:cons "smallVolumeMaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-configuration-template-request
                       common-lisp:nil
                       ((associate-default-security-group :initarg
                         :associate-default-security-group :initform
                         (common-lisp:error
                          ":associatedefaultsecuritygroup is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-associate-default-security-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth-throttling :initarg :bandwidth-throttling
                         :initform
                         (common-lisp:error ":bandwidththrottling is required")
                         :type
                         (common-lisp:or bandwidth-throttling common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-bandwidth-throttling
                         :shape "BandwidthThrottling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-public-ip :initarg :create-public-ip :initform
                         (common-lisp:error ":createpublicip is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-create-public-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-plane-routing :initarg :data-plane-routing
                         :initform
                         (common-lisp:error ":dataplanerouting is required")
                         :type
                         (common-lisp:or
                          replication-configuration-data-plane-routing
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-data-plane-routing
                         :shape "ReplicationConfigurationDataPlaneRouting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-large-staging-disk-type :initarg
                         :default-large-staging-disk-type :initform
                         (common-lisp:error
                          ":defaultlargestagingdisktype is required")
                         :type
                         (common-lisp:or
                          replication-configuration-default-large-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-default-large-staging-disk-type
                         :shape
                         "ReplicationConfigurationDefaultLargeStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption :initarg :ebs-encryption :initform
                         (common-lisp:error ":ebsencryption is required") :type
                         (common-lisp:or
                          replication-configuration-ebs-encryption
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-ebs-encryption
                         :shape "ReplicationConfigurationEbsEncryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption-key-arn :initarg
                         :ebs-encryption-key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-replication-configuration-template-request-ebs-encryption-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-server-instance-type :initarg
                         :replication-server-instance-type :initform
                         (common-lisp:error
                          ":replicationserverinstancetype is required")
                         :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-replication-server-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-servers-security-groups-ids :initarg
                         :replication-servers-security-groups-ids :initform
                         (common-lisp:error
                          ":replicationserverssecuritygroupsids is required")
                         :type
                         (common-lisp:or
                          replication-servers-security-groups-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-replication-servers-security-groups-ids
                         :shape "ReplicationServersSecurityGroupsIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (staging-area-subnet-id :initarg
                         :staging-area-subnet-id :initform
                         (common-lisp:error ":stagingareasubnetid is required")
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-staging-area-subnet-id
                         :shape "SubnetID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-tags :initarg :staging-area-tags
                         :initform
                         (common-lisp:error ":stagingareatags is required")
                         :type (common-lisp:or tags-map common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-staging-area-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-replication-configuration-template-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-dedicated-replication-server :initarg
                         :use-dedicated-replication-server :initform
                         (common-lisp:error
                          ":usededicatedreplicationserver is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-replication-configuration-template-request-use-dedicated-replication-server
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-fips-endpoint :initarg :use-fips-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-replication-configuration-template-request-use-fips-endpoint
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-configuration-template-request
                    'make-create-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-fips-endpoint))
      (common-lisp:list
       (common-lisp:cons "useFipsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wave-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-wave-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or wave-description common-lisp:null)
                         :accessor struct-shape-create-wave-request-description
                         :shape "WaveDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or wave-name common-lisp:null) :accessor
                         struct-shape-create-wave-request-name :shape
                         "WaveName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-wave-request-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-wave-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-wave-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-wave-request 'make-create-wave-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-wave-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-wave-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-wave-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-replication-error common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or data-replication-error-string
                                         common-lisp:null)
                         :accessor struct-shape-data-replication-error-error
                         :shape "DataReplicationErrorString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (raw-error :initarg :raw-error :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor
                         struct-shape-data-replication-error-raw-error :shape
                         "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-replication-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-replication-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-replication-error 'make-data-replication-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-error))
   common-lisp:nil))
(common-lisp:deftype data-replication-error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-replication-info common-lisp:nil
                       ((data-replication-error :initarg
                         :data-replication-error :initform common-lisp:nil
                         :type
                         (common-lisp:or data-replication-error
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-data-replication-error
                         :shape "DataReplicationError" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-replication-initiation :initarg
                         :data-replication-initiation :initform common-lisp:nil
                         :type
                         (common-lisp:or data-replication-initiation
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-data-replication-initiation
                         :shape "DataReplicationInitiation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-replication-state :initarg
                         :data-replication-state :initform common-lisp:nil
                         :type
                         (common-lisp:or data-replication-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-data-replication-state
                         :shape "DataReplicationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (eta-date-time :initarg :eta-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-eta-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lag-duration :initarg :lag-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601duration-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-lag-duration :shape
                         "ISO8601DurationString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-snapshot-date-time :initarg
                         :last-snapshot-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-last-snapshot-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replicated-disks :initarg :replicated-disks :initform
                         common-lisp:nil :type
                         (common-lisp:or data-replication-info-replicated-disks
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disks
                         :shape "DataReplicationInfoReplicatedDisks" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-replication-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-replication-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-replication-info 'make-data-replication-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-error))
      (common-lisp:list
       (common-lisp:cons "dataReplicationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-initiation))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-state))
      (common-lisp:list
       (common-lisp:cons "dataReplicationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eta-date-time))
      (common-lisp:list
       (common-lisp:cons "etaDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lag-duration))
      (common-lisp:list
       (common-lisp:cons "lagDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-snapshot-date-time))
      (common-lisp:list
       (common-lisp:cons "lastSnapshotDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-replication-info-replicated-disk common-lisp:nil
                       ((backlogged-storage-bytes :initarg
                         :backlogged-storage-bytes :initform common-lisp:nil
                         :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disk-backlogged-storage-bytes
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disk-device-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicated-storage-bytes :initarg
                         :replicated-storage-bytes :initform common-lisp:nil
                         :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disk-replicated-storage-bytes
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rescanned-storage-bytes :initarg
                         :rescanned-storage-bytes :initform common-lisp:nil
                         :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disk-rescanned-storage-bytes
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-storage-bytes :initarg :total-storage-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-data-replication-info-replicated-disk-total-storage-bytes
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-replication-info-replicated-disk
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-replication-info-replicated-disk
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-replication-info-replicated-disk
                    'make-data-replication-info-replicated-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backlogged-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "backloggedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicated-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "replicatedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rescanned-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "rescannedStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-storage-bytes))
      (common-lisp:list
       (common-lisp:cons "totalStorageBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-info-replicated-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-replication-info-replicated-disks ()
   '(trivial-types:proper-list data-replication-info-replicated-disk))
 (common-lisp:defun make-data-replication-info-replicated-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-replication-info-replicated-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-replication-initiation common-lisp:nil
                       ((next-attempt-date-time :initarg
                         :next-attempt-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-initiation-next-attempt-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-date-time :initarg :start-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-initiation-start-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (steps :initarg :steps :initform common-lisp:nil :type
                         (common-lisp:or data-replication-initiation-steps
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-initiation-steps :shape
                         "DataReplicationInitiationSteps" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-replication-initiation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-replication-initiation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-replication-initiation
                    'make-data-replication-initiation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-attempt-date-time))
      (common-lisp:list
       (common-lisp:cons "nextAttemptDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-replication-initiation-step common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or data-replication-initiation-step-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-replication-initiation-step-name
                         :shape "DataReplicationInitiationStepName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-replication-initiation-step-status
                          common-lisp:null)
                         :accessor
                         struct-shape-data-replication-initiation-step-status
                         :shape "DataReplicationInitiationStepStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-replication-initiation-step
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-replication-initiation-step
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-replication-initiation-step
                    'make-data-replication-initiation-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-replication-initiation-step))
   common-lisp:nil))
(common-lisp:deftype data-replication-initiation-step-name ()
  'common-lisp:string)
(common-lisp:deftype data-replication-initiation-step-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-replication-initiation-steps ()
   '(trivial-types:proper-list data-replication-initiation-step))
 (common-lisp:defun make-data-replication-initiation-steps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-replication-initiation-step))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-replication-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-application-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-delete-application-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connector-request common-lisp:nil
                       ((connector-id :initarg :connector-id :initform
                         (common-lisp:error ":connectorid is required") :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connector-request-connector-id
                         :shape "ConnectorID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-job-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-delete-job-request-job-id :shape "JobID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-response 'make-delete-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-configuration-template-request
                       common-lisp:nil
                       ((launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-launch-configuration-template-request-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-configuration-template-request
                    'make-delete-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-launch-configuration-template-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-launch-configuration-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-launch-configuration-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-launch-configuration-template-response
                    'make-delete-launch-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-launch-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-configuration-template-request
                       common-lisp:nil
                       ((replication-configuration-template-id :initarg
                         :replication-configuration-template-id :initform
                         (common-lisp:error
                          ":replicationconfigurationtemplateid is required")
                         :type
                         (common-lisp:or replication-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-configuration-template-request-replication-configuration-template-id
                         :shape "ReplicationConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-configuration-template-request
                    'make-delete-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-configuration-template-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-configuration-template-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-configuration-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-configuration-template-response
                    'make-delete-replication-configuration-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-configuration-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-source-server-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-source-server-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-delete-source-server-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-source-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-source-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-source-server-request
                    'make-delete-source-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-source-server-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-source-server-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-source-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-source-server-response
                    'make-delete-source-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-source-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vcenter-client-request common-lisp:nil
                       ((vcenter-client-id :initarg :vcenter-client-id
                         :initform
                         (common-lisp:error ":vcenterclientid is required")
                         :type
                         (common-lisp:or vcenter-client-id common-lisp:null)
                         :accessor
                         struct-shape-delete-vcenter-client-request-vcenter-client-id
                         :shape "VcenterClientID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vcenter-client-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vcenter-client-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vcenter-client-request
                    'make-delete-vcenter-client-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vcenter-client-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vcenter-client-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcenter-client-id))
      (common-lisp:list
       (common-lisp:cons "vcenterClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vcenter-client-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wave-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-wave-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-delete-wave-request-wave-id :shape
                         "WaveID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-wave-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-wave-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-wave-request 'make-delete-wave-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-wave-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-wave-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-wave-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wave-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-wave-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-wave-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-wave-response 'make-delete-wave-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-wave-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-wave-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-wave-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-log-items-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-job-log-items-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-job-log-items-request-job-id
                         :shape "JobID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-job-log-items-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-job-log-items-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-log-items-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-log-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-log-items-request
                    'make-describe-job-log-items-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-job-log-items-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or job-logs common-lisp:null) :accessor
                         struct-shape-describe-job-log-items-response-items
                         :shape "JobLogs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-job-log-items-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-job-log-items-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-job-log-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-job-log-items-response
                    'make-describe-job-log-items-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-job-log-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-jobs-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-jobs-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-jobs-request-filters
                                         common-lisp:null)
                         :accessor struct-shape-describe-jobs-request-filters
                         :shape "DescribeJobsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-request-max-results :shape
                         "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-request 'make-describe-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-jobs-request-filters common-lisp:nil
                       ((from-date :initarg :from-date :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-request-filters-from-date
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-ids :initarg :job-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-jobs-request-filters-job-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-request-filters-job-ids
                         :shape "DescribeJobsRequestFiltersJobIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (to-date :initarg :to-date :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-request-filters-to-date
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-jobs-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-jobs-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-request-filters
                    'make-describe-jobs-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-date))
      (common-lisp:list
       (common-lisp:cons "fromDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-ids))
      (common-lisp:list
       (common-lisp:cons "jobIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-date))
      (common-lisp:list
       (common-lisp:cons "toDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-jobs-request-filters-job-ids ()
   '(trivial-types:proper-list job-id))
 (common-lisp:defun make-describe-jobs-request-filters-job-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-jobs-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or jobs-list common-lisp:null) :accessor
                         struct-shape-describe-jobs-response-items :shape
                         "JobsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-jobs-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-jobs-response 'make-describe-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-launch-configuration-templates-request
                       common-lisp:nil
                       ((launch-configuration-template-ids :initarg
                         :launch-configuration-template-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-configuration-template-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-launch-configuration-templates-request-launch-configuration-template-ids
                         :shape "LaunchConfigurationTemplateIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-launch-configuration-templates-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-launch-configuration-templates-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-launch-configuration-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-launch-configuration-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-launch-configuration-templates-request
                    'make-describe-launch-configuration-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-ids))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-launch-configuration-templates-response
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or launch-configuration-templates
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-launch-configuration-templates-response-items
                         :shape "LaunchConfigurationTemplates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-launch-configuration-templates-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-launch-configuration-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-launch-configuration-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-launch-configuration-templates-response
                    'make-describe-launch-configuration-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-launch-configuration-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configuration-templates-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configuration-templates-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configuration-templates-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-configuration-template-ids :initarg
                         :replication-configuration-template-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-configuration-template-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configuration-templates-request-replication-configuration-template-ids
                         :shape "ReplicationConfigurationTemplateIDs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-configuration-templates-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configuration-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configuration-templates-request
                    'make-describe-replication-configuration-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-ids))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configuration-templates-response
                       common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or replication-configuration-templates
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configuration-templates-response-items
                         :shape "ReplicationConfigurationTemplates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configuration-templates-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-configuration-templates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configuration-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configuration-templates-response
                    'make-describe-replication-configuration-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configuration-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-source-servers-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-describe-source-servers-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          describe-source-servers-request-filters
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-filters
                         :shape "DescribeSourceServersRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-source-servers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-source-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-request
                    'make-describe-source-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-source-servers-request-application-ids ()
   '(trivial-types:proper-list application-id))
 (common-lisp:defun make-describe-source-servers-request-application-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-source-servers-request-filters common-lisp:nil
                       ((application-ids :initarg :application-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          describe-source-servers-request-application-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-filters-application-ids
                         :shape "DescribeSourceServersRequestApplicationIDs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-describe-source-servers-request-filters-is-archived
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (life-cycle-states :initarg :life-cycle-states
                         :initform common-lisp:nil :type
                         (common-lisp:or life-cycle-states common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-filters-life-cycle-states
                         :shape "LifeCycleStates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-types :initarg :replication-types
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-types common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-filters-replication-types
                         :shape "ReplicationTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          describe-source-servers-request-filters-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-request-filters-source-server-ids
                         :shape "DescribeSourceServersRequestFiltersIDs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-source-servers-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-source-servers-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-request-filters
                    'make-describe-source-servers-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-ids))
      (common-lisp:list
       (common-lisp:cons "applicationIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle-states))
      (common-lisp:list
       (common-lisp:cons "lifeCycleStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-types))
      (common-lisp:list
       (common-lisp:cons "replicationTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-source-servers-request-filters-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-describe-source-servers-request-filters-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-source-servers-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or source-servers-list common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-response-items
                         :shape "SourceServersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-source-servers-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-source-servers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-source-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-source-servers-response
                    'make-describe-source-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-source-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vcenter-clients-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-describe-vcenter-clients-request-max-results
                         :shape "MaxResultsType" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-vcenter-clients-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vcenter-clients-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vcenter-clients-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vcenter-clients-request
                    'make-describe-vcenter-clients-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vcenter-clients-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or vcenter-client-list common-lisp:null)
                         :accessor
                         struct-shape-describe-vcenter-clients-response-items
                         :shape "VcenterClientList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-describe-vcenter-clients-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vcenter-clients-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vcenter-clients-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vcenter-clients-response
                    'make-describe-vcenter-clients-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vcenter-clients-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-applications-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-disassociate-applications-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-ids :initarg :application-ids :initform
                         (common-lisp:error ":applicationids is required")
                         :type
                         (common-lisp:or application-ids common-lisp:null)
                         :accessor
                         struct-shape-disassociate-applications-request-application-ids
                         :shape "ApplicationIDs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-disassociate-applications-request-wave-id
                         :shape "WaveID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-applications-request
                    'make-disassociate-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-ids))
      (common-lisp:list
       (common-lisp:cons "applicationIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-applications-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-applications-response
                    'make-disassociate-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-source-servers-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-disassociate-source-servers-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-source-servers-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform
                         (common-lisp:error ":sourceserverids is required")
                         :type
                         (common-lisp:or
                          disassociate-source-servers-request-source-server-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-disassociate-source-servers-request-source-server-ids
                         :shape
                         "DisassociateSourceServersRequestSourceServerIDs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-source-servers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-source-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-source-servers-request
                    'make-disassociate-source-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disassociate-source-servers-request-source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-disassociate-source-servers-request-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass disassociate-source-servers-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-source-servers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-source-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-source-servers-response
                    'make-disassociate-source-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-source-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disconnect-from-service-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-disconnect-from-service-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-disconnect-from-service-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disconnect-from-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disconnect-from-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disconnect-from-service-request
                    'make-disconnect-from-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-from-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-from-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-from-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disk common-lisp:nil
                       ((bytes :initarg :bytes :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor struct-shape-disk-bytes :shape
                         "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-disk-device-name :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disk (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disk
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'disk 'make-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes))
      (common-lisp:list
       (common-lisp:cons "bytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disks () '(trivial-types:proper-list disk))
 (common-lisp:defun make-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-version () 'common-lisp:string)
(common-lisp:deftype ec2instance-id () 'common-lisp:string)
(common-lisp:deftype ec2instance-type () 'common-lisp:string)
(common-lisp:deftype ec2launch-configuration-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-error-details-code :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-error-details-message :shape
                         "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-error-details-resource-id
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-error-details-resource-type
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-error-data common-lisp:nil
                       ((raw-error :initarg :raw-error :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-export-error-data-raw-error
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-error-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-error-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-error-data 'make-export-error-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-error-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-error-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-error-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-errors ()
   '(trivial-types:proper-list export-task-error))
 (common-lisp:defun make-export-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-id () 'common-lisp:string)
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-task common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-export-task-creation-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-export-task-end-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or export-id common-lisp:null) :accessor
                         struct-shape-export-task-export-id :shape "ExportID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress-percentage :initarg :progress-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-export-task-progress-percentage :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-export-task-s3bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-owner :initarg :s3bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-export-task-s3bucket-owner :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-export-task-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or export-status common-lisp:null)
                         :accessor struct-shape-export-task-status :shape
                         "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or export-task-summary common-lisp:null)
                         :accessor struct-shape-export-task-summary :shape
                         "ExportTaskSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-task 'make-export-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "progressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-owner))
      (common-lisp:list
       (common-lisp:cons "s3BucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-task-error common-lisp:nil
                       ((error-data :initarg :error-data :initform
                         common-lisp:nil :type
                         (common-lisp:or export-error-data common-lisp:null)
                         :accessor struct-shape-export-task-error-error-data
                         :shape "ExportErrorData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-date-time :initarg :error-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-task-error-error-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-task-error 'make-export-task-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-data))
      (common-lisp:list
       (common-lisp:cons "errorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-date-time))
      (common-lisp:list
       (common-lisp:cons "errorDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-task-summary common-lisp:nil
                       ((applications-count :initarg :applications-count
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-export-task-summary-applications-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (servers-count :initarg :servers-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-export-task-summary-servers-count :shape
                         "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (waves-count :initarg :waves-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor struct-shape-export-task-summary-waves-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-task-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-task-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-task-summary 'make-export-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications-count))
      (common-lisp:list
       (common-lisp:cons "applicationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers-count))
      (common-lisp:list
       (common-lisp:cons "serversCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waves-count))
      (common-lisp:list
       (common-lisp:cons "wavesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype exports-list () '(trivial-types:proper-list export-task))
 (common-lisp:defun make-exports-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finalize-cutover-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-finalize-cutover-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-finalize-cutover-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finalize-cutover-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finalize-cutover-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'finalize-cutover-request 'make-finalize-cutover-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finalize-cutover-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finalize-cutover-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finalize-cutover-request))
   common-lisp:nil))
(common-lisp:deftype first-boot () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass get-launch-configuration-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-launch-configuration-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-get-launch-configuration-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-launch-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-launch-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-launch-configuration-request
                    'make-get-launch-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-configuration-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-replication-configuration-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-get-replication-configuration-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-replication-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-replication-configuration-request
                    'make-get-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ips-list () '(trivial-types:proper-list bounded-string))
 (common-lisp:defun make-ips-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601datetime-string () 'common-lisp:string)
(common-lisp:deftype iso8601duration-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identification-hints common-lisp:nil
                       ((aws-instance-id :initarg :aws-instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-identification-hints-aws-instance-id
                         :shape "EC2InstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fqdn :initarg :fqdn :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-identification-hints-fqdn
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-identification-hints-hostname
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vm-path :initarg :vm-path :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-identification-hints-vm-path
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vm-ware-uuid :initarg :vm-ware-uuid :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-identification-hints-vm-ware-uuid :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identification-hints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identification-hints
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identification-hints 'make-identification-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identification-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identification-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-instance-id))
      (common-lisp:list
       (common-lisp:cons "awsInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fqdn))
      (common-lisp:list
       (common-lisp:cons "fqdn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-path))
      (common-lisp:list
       (common-lisp:cons "vmPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vm-ware-uuid))
      (common-lisp:list
       (common-lisp:cons "vmWareUuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identification-hints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-error-data common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-import-error-data-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-import-error-data-application-id :shape
                         "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2launch-template-id :initarg :ec2launch-template-id
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-import-error-data-ec2launch-template-id
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raw-error :initarg :raw-error :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-import-error-data-raw-error
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (row-number :initarg :row-number :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor struct-shape-import-error-data-row-number
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-import-error-data-source-server-id :shape
                         "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wave-id :initarg :wave-id :initform common-lisp:nil
                         :type (common-lisp:or wave-id common-lisp:null)
                         :accessor struct-shape-import-error-data-wave-id
                         :shape "WaveID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-error-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-error-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-error-data 'make-import-error-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-error-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-error-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2launch-template-id))
      (common-lisp:list
       (common-lisp:cons "ec2LaunchTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-number))
      (common-lisp:list
       (common-lisp:cons "rowNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-error-data))
   common-lisp:nil))
(common-lisp:deftype import-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-errors ()
   '(trivial-types:proper-list import-task-error))
 (common-lisp:defun make-import-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-ids-filter ()
   '(trivial-types:proper-list import-id))
 (common-lisp:defun make-import-ids-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-list () '(trivial-types:proper-list import-task))
 (common-lisp:defun make-import-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-task common-lisp:nil
                       ((creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-import-task-creation-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-import-task-end-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (import-id :initarg :import-id :initform
                         common-lisp:nil :type
                         (common-lisp:or import-id common-lisp:null) :accessor
                         struct-shape-import-task-import-id :shape "ImportID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress-percentage :initarg :progress-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-import-task-progress-percentage :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-source :initarg :s3bucket-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-source common-lisp:null)
                         :accessor struct-shape-import-task-s3bucket-source
                         :shape "S3BucketSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or import-status common-lisp:null)
                         :accessor struct-shape-import-task-status :shape
                         "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or import-task-summary common-lisp:null)
                         :accessor struct-shape-import-task-summary :shape
                         "ImportTaskSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-task 'make-import-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percentage))
      (common-lisp:list
       (common-lisp:cons "progressPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-source))
      (common-lisp:list
       (common-lisp:cons "s3BucketSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-error common-lisp:nil
                       ((error-data :initarg :error-data :initform
                         common-lisp:nil :type
                         (common-lisp:or import-error-data common-lisp:null)
                         :accessor struct-shape-import-task-error-error-data
                         :shape "ImportErrorData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-date-time :initarg :error-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-task-error-error-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or import-error-type common-lisp:null)
                         :accessor struct-shape-import-task-error-error-type
                         :shape "ImportErrorType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-error 'make-import-task-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-data))
      (common-lisp:list
       (common-lisp:cons "errorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-date-time))
      (common-lisp:list
       (common-lisp:cons "errorDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "errorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-summary common-lisp:nil
                       ((applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or import-task-summary-applications
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-applications :shape
                         "ImportTaskSummaryApplications" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (servers :initarg :servers :initform common-lisp:nil
                         :type
                         (common-lisp:or import-task-summary-servers
                                         common-lisp:null)
                         :accessor struct-shape-import-task-summary-servers
                         :shape "ImportTaskSummaryServers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (waves :initarg :waves :initform common-lisp:nil :type
                         (common-lisp:or import-task-summary-waves
                                         common-lisp:null)
                         :accessor struct-shape-import-task-summary-waves
                         :shape "ImportTaskSummaryWaves" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-summary 'make-import-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waves))
      (common-lisp:list
       (common-lisp:cons "waves"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-summary-applications common-lisp:nil
                       ((created-count :initarg :created-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-applications-created-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-count :initarg :modified-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-applications-modified-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-summary-applications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-task-summary-applications
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-summary-applications
                    'make-import-task-summary-applications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-applications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-applications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-count))
      (common-lisp:list
       (common-lisp:cons "createdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-count))
      (common-lisp:list
       (common-lisp:cons "modifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-applications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-summary-servers common-lisp:nil
                       ((created-count :initarg :created-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-servers-created-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-count :initarg :modified-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-servers-modified-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-summary-servers
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task-summary-servers
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-summary-servers
                    'make-import-task-summary-servers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-servers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-servers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-count))
      (common-lisp:list
       (common-lisp:cons "createdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-count))
      (common-lisp:list
       (common-lisp:cons "modifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-servers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-summary-waves common-lisp:nil
                       ((created-count :initarg :created-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-waves-created-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (modified-count :initarg :modified-count :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-summary-waves-modified-count
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-summary-waves
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task-summary-waves
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-summary-waves
                    'make-import-task-summary-waves))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-waves))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-waves))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-count))
      (common-lisp:list
       (common-lisp:cons "createdCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-count))
      (common-lisp:list
       (common-lisp:cons "modifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-task-summary-waves))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initialize-service-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initialize-service-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initialize-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initialize-service-request
                    'make-initialize-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass initialize-service-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initialize-service-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initialize-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'initialize-service-response
                    'make-initialize-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          initialize-service-response))
   common-lisp:nil))
(common-lisp:deftype initiated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (mgn-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype iops () 'common-lisp:integer)
(common-lisp:deftype jmes-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-job-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-job-creation-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-date-time :initarg :end-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-job-end-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initiated-by :initarg :initiated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or initiated-by common-lisp:null)
                         :accessor struct-shape-job-initiated-by :shape
                         "InitiatedBy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-job-job-id :shape "JobID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (participating-servers :initarg :participating-servers
                         :initform common-lisp:nil :type
                         (common-lisp:or participating-servers
                                         common-lisp:null)
                         :accessor struct-shape-job-participating-servers
                         :shape "ParticipatingServers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or job-status common-lisp:null)
                         :accessor struct-shape-job-status :shape "JobStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-job-tags :shape "TagsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or job-type common-lisp:null) :accessor
                         struct-shape-job-type :shape "JobType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-by))
      (common-lisp:list
       (common-lisp:cons "initiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participating-servers))
      (common-lisp:list
       (common-lisp:cons "participatingServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-log common-lisp:nil
                       ((event :initarg :event :initform common-lisp:nil :type
                         (common-lisp:or job-log-event common-lisp:null)
                         :accessor struct-shape-job-log-event :shape
                         "JobLogEvent" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-data :initarg :event-data :initform
                         common-lisp:nil :type
                         (common-lisp:or job-log-event-data common-lisp:null)
                         :accessor struct-shape-job-log-event-data :shape
                         "JobLogEventData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-date-time :initarg :log-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-job-log-log-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-log 'make-job-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data))
      (common-lisp:list
       (common-lisp:cons "eventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-date-time))
      (common-lisp:list
       (common-lisp:cons "logDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-log))
   common-lisp:nil))
(common-lisp:deftype job-log-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-log-event-data common-lisp:nil
                       ((conversion-server-id :initarg :conversion-server-id
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-job-log-event-data-conversion-server-id
                         :shape "EC2InstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raw-error :initarg :raw-error :initform
                         common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-job-log-event-data-raw-error
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-job-log-event-data-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-instance-id :initarg :target-instance-id
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-job-log-event-data-target-instance-id
                         :shape "EC2InstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-log-event-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-log-event-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-log-event-data 'make-job-log-event-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-log-event-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-log-event-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversion-server-id))
      (common-lisp:list
       (common-lisp:cons "conversionServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-error))
      (common-lisp:list
       (common-lisp:cons "rawError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-instance-id))
      (common-lisp:list
       (common-lisp:cons "targetInstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-log-event-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-logs () '(trivial-types:proper-list job-log))
 (common-lisp:defun make-job-logs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-log))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-post-launch-actions-launch-status common-lisp:nil
                       ((execution-id :initarg :execution-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-job-post-launch-actions-launch-status-execution-id
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-status :initarg :execution-status :initform
                         common-lisp:nil :type
                         (common-lisp:or post-launch-action-execution-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-post-launch-actions-launch-status-execution-status
                         :shape "PostLaunchActionExecutionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-job-post-launch-actions-launch-status-failure-reason
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-document :initarg :ssm-document :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document common-lisp:null)
                         :accessor
                         struct-shape-job-post-launch-actions-launch-status-ssm-document
                         :shape "SsmDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-document-type :initarg :ssm-document-type
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-type common-lisp:null)
                         :accessor
                         struct-shape-job-post-launch-actions-launch-status-ssm-document-type
                         :shape "SsmDocumentType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-post-launch-actions-launch-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'job-post-launch-actions-launch-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-post-launch-actions-launch-status
                    'make-job-post-launch-actions-launch-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-post-launch-actions-launch-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-post-launch-actions-launch-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "executionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "executionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-document))
      (common-lisp:list
       (common-lisp:cons "ssmDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-document-type))
      (common-lisp:list
       (common-lisp:cons "ssmDocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-post-launch-actions-launch-status))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype jobs-list () '(trivial-types:proper-list job))
 (common-lisp:defun make-jobs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype large-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-configuration common-lisp:nil
                       ((boot-mode :initarg :boot-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boot-mode common-lisp:null) :accessor
                         struct-shape-launch-configuration-boot-mode :shape
                         "BootMode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (copy-private-ip :initarg :copy-private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-launch-configuration-copy-private-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-launch-configuration-copy-tags :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2launch-template-id :initarg :ec2launch-template-id
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-ec2launch-template-id
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-map-auto-tagging :initarg
                         :enable-map-auto-tagging :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-enable-map-auto-tagging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-disposition :initarg :launch-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-disposition common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-launch-disposition
                         :shape "LaunchDisposition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (licensing :initarg :licensing :initform
                         common-lisp:nil :type
                         (common-lisp:or licensing common-lisp:null) :accessor
                         struct-shape-launch-configuration-licensing :shape
                         "Licensing" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (map-auto-tagging-mpe-id :initarg
                         :map-auto-tagging-mpe-id :initform common-lisp:nil
                         :type (common-lisp:or tag-value common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-map-auto-tagging-mpe-id
                         :shape "TagValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or small-bounded-string common-lisp:null)
                         :accessor struct-shape-launch-configuration-name
                         :shape "SmallBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions :initarg :post-launch-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or post-launch-actions common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-post-launch-actions
                         :shape "PostLaunchActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-instance-type-right-sizing-method :initarg
                         :target-instance-type-right-sizing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-instance-type-right-sizing-method
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-target-instance-type-right-sizing-method
                         :shape "TargetInstanceTypeRightSizingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'launch-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-configuration 'make-launch-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boot-mode))
      (common-lisp:list
       (common-lisp:cons "bootMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2launch-template-id))
      (common-lisp:list
       (common-lisp:cons "ec2LaunchTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-map-auto-tagging))
      (common-lisp:list
       (common-lisp:cons "enableMapAutoTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-auto-tagging-mpe-id))
      (common-lisp:list
       (common-lisp:cons "mapAutoTaggingMpeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-actions))
      (common-lisp:list
       (common-lisp:cons "postLaunchActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launch-configuration-template common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associate-public-ip-address :initarg
                         :associate-public-ip-address :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-associate-public-ip-address
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boot-mode :initarg :boot-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boot-mode common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-boot-mode
                         :shape "BootMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-private-ip :initarg :copy-private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-copy-private-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-copy-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2launch-template-id :initarg :ec2launch-template-id
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-ec2launch-template-id
                         :shape "EC2LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-map-auto-tagging :initarg
                         :enable-map-auto-tagging :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-enable-map-auto-tagging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (large-volume-conf :initarg :large-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-large-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-disposition :initarg :launch-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-disposition common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-launch-disposition
                         :shape "LaunchDisposition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (licensing :initarg :licensing :initform
                         common-lisp:nil :type
                         (common-lisp:or licensing common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-licensing
                         :shape "Licensing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-auto-tagging-mpe-id :initarg
                         :map-auto-tagging-mpe-id :initform common-lisp:nil
                         :type (common-lisp:or tag-value common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-map-auto-tagging-mpe-id
                         :shape "TagValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions :initarg :post-launch-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or post-launch-actions common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-post-launch-actions
                         :shape "PostLaunchActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (small-volume-conf :initarg :small-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-small-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (small-volume-max-size :initarg :small-volume-max-size
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-small-volume-max-size
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-launch-configuration-template-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-instance-type-right-sizing-method :initarg
                         :target-instance-type-right-sizing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-instance-type-right-sizing-method
                          common-lisp:null)
                         :accessor
                         struct-shape-launch-configuration-template-target-instance-type-right-sizing-method
                         :shape "TargetInstanceTypeRightSizingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-configuration-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'launch-configuration-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-configuration-template
                    'make-launch-configuration-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "associatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boot-mode))
      (common-lisp:list
       (common-lisp:cons "bootMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2launch-template-id))
      (common-lisp:list
       (common-lisp:cons "ec2LaunchTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-map-auto-tagging))
      (common-lisp:list
       (common-lisp:cons "enableMapAutoTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'large-volume-conf))
      (common-lisp:list
       (common-lisp:cons "largeVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-auto-tagging-mpe-id))
      (common-lisp:list
       (common-lisp:cons "mapAutoTaggingMpeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-actions))
      (common-lisp:list
       (common-lisp:cons "postLaunchActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-volume-conf))
      (common-lisp:list
       (common-lisp:cons "smallVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-volume-max-size))
      (common-lisp:list
       (common-lisp:cons "smallVolumeMaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-configuration-template))
   common-lisp:nil))
(common-lisp:deftype launch-configuration-template-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype launch-configuration-template-ids ()
   '(trivial-types:proper-list launch-configuration-template-id))
 (common-lisp:defun make-launch-configuration-template-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-configuration-template-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype launch-configuration-templates ()
   '(trivial-types:proper-list launch-configuration-template))
 (common-lisp:defun make-launch-configuration-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            launch-configuration-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype launch-disposition () 'common-lisp:string)
(common-lisp:deftype launch-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass launch-template-disk-conf common-lisp:nil
                       ((iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or iops common-lisp:null) :accessor
                         struct-shape-launch-template-disk-conf-iops :shape
                         "Iops" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or throughput common-lisp:null) :accessor
                         struct-shape-launch-template-disk-conf-throughput
                         :shape "Throughput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor
                         struct-shape-launch-template-disk-conf-volume-type
                         :shape "VolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launch-template-disk-conf
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'launch-template-disk-conf
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launch-template-disk-conf
                    'make-launch-template-disk-conf))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-disk-conf))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-disk-conf))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "volumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          launch-template-disk-conf))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass launched-instance common-lisp:nil
                       ((ec2instance-id :initarg :ec2instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-launched-instance-ec2instance-id :shape
                         "EC2InstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-boot :initarg :first-boot :initform
                         common-lisp:nil :type
                         (common-lisp:or first-boot common-lisp:null) :accessor
                         struct-shape-launched-instance-first-boot :shape
                         "FirstBoot" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor struct-shape-launched-instance-job-id :shape
                         "JobID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-launched-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'launched-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'launched-instance 'make-launched-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launched-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launched-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-boot))
      (common-lisp:list
       (common-lisp:cons "firstBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launched-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass licensing common-lisp:nil
                       ((os-byol :initarg :os-byol :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-licensing-os-byol :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-licensing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'licensing
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'licensing 'make-licensing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input licensing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input licensing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-byol))
      (common-lisp:list
       (common-lisp:cons "osByol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input licensing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle common-lisp:nil
                       ((added-to-service-date-time :initarg
                         :added-to-service-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-added-to-service-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elapsed-replication-duration :initarg
                         :elapsed-replication-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601duration-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-elapsed-replication-duration
                         :shape "ISO8601DurationString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (first-byte-date-time :initarg :first-byte-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-life-cycle-first-byte-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-cutover :initarg :last-cutover :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-cutover
                                         common-lisp:null)
                         :accessor struct-shape-life-cycle-last-cutover :shape
                         "LifeCycleLastCutover" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-seen-by-service-date-time :initarg
                         :last-seen-by-service-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-seen-by-service-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-test :initarg :last-test :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-test common-lisp:null)
                         :accessor struct-shape-life-cycle-last-test :shape
                         "LifeCycleLastTest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or life-cycle-state common-lisp:null)
                         :accessor struct-shape-life-cycle-state :shape
                         "LifeCycleState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'life-cycle
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'life-cycle 'make-life-cycle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input life-cycle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input life-cycle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'added-to-service-date-time))
      (common-lisp:list
       (common-lisp:cons "addedToServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-replication-duration))
      (common-lisp:list
       (common-lisp:cons "elapsedReplicationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-byte-date-time))
      (common-lisp:list
       (common-lisp:cons "firstByteDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-cutover))
      (common-lisp:list
       (common-lisp:cons "lastCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-seen-by-service-date-time))
      (common-lisp:list
       (common-lisp:cons "lastSeenByServiceDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-test))
      (common-lisp:list
       (common-lisp:cons "lastTest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input life-cycle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-cutover common-lisp:nil
                       ((finalized :initarg :finalized :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-cutover-finalized
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-finalized :shape
                         "LifeCycleLastCutoverFinalized" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initiated :initarg :initiated :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-cutover-initiated
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-initiated :shape
                         "LifeCycleLastCutoverInitiated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reverted :initarg :reverted :initform common-lisp:nil
                         :type
                         (common-lisp:or life-cycle-last-cutover-reverted
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-reverted :shape
                         "LifeCycleLastCutoverReverted" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-cutover
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'life-cycle-last-cutover
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-cutover 'make-life-cycle-last-cutover))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverted))
      (common-lisp:list
       (common-lisp:cons "reverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-cutover-finalized common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-finalized-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-cutover-finalized
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-cutover-finalized
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-cutover-finalized
                    'make-life-cycle-last-cutover-finalized))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-finalized))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-finalized))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-finalized))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-cutover-initiated common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-initiated-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-initiated-job-id
                         :shape "JobID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-cutover-initiated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-cutover-initiated
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-cutover-initiated
                    'make-life-cycle-last-cutover-initiated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-initiated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-initiated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-initiated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-cutover-reverted common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-cutover-reverted-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-cutover-reverted
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-cutover-reverted
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-cutover-reverted
                    'make-life-cycle-last-cutover-reverted))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-reverted))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-reverted))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-cutover-reverted))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-test common-lisp:nil
                       ((finalized :initarg :finalized :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-test-finalized
                                         common-lisp:null)
                         :accessor struct-shape-life-cycle-last-test-finalized
                         :shape "LifeCycleLastTestFinalized" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (initiated :initarg :initiated :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle-last-test-initiated
                                         common-lisp:null)
                         :accessor struct-shape-life-cycle-last-test-initiated
                         :shape "LifeCycleLastTestInitiated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reverted :initarg :reverted :initform common-lisp:nil
                         :type
                         (common-lisp:or life-cycle-last-test-reverted
                                         common-lisp:null)
                         :accessor struct-shape-life-cycle-last-test-reverted
                         :shape "LifeCycleLastTestReverted" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-test
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'life-cycle-last-test
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-test 'make-life-cycle-last-test))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input life-cycle-last-test))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input life-cycle-last-test))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finalized))
      (common-lisp:list
       (common-lisp:cons "finalized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverted))
      (common-lisp:list
       (common-lisp:cons "reverted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input life-cycle-last-test))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-test-finalized common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-test-finalized-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-test-finalized
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-test-finalized
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-test-finalized
                    'make-life-cycle-last-test-finalized))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-finalized))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-finalized))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-finalized))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-test-initiated common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-test-initiated-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-test-initiated-job-id
                         :shape "JobID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-test-initiated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-test-initiated
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-test-initiated
                    'make-life-cycle-last-test-initiated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-initiated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-initiated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-initiated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass life-cycle-last-test-reverted common-lisp:nil
                       ((api-call-date-time :initarg :api-call-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-life-cycle-last-test-reverted-api-call-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-life-cycle-last-test-reverted
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'life-cycle-last-test-reverted
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'life-cycle-last-test-reverted
                    'make-life-cycle-last-test-reverted))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-reverted))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-reverted))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-call-date-time))
      (common-lisp:list
       (common-lisp:cons "apiCallDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          life-cycle-last-test-reverted))
   common-lisp:nil))
(common-lisp:deftype life-cycle-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype life-cycle-states ()
   '(trivial-types:proper-list life-cycle-state))
 (common-lisp:defun make-life-cycle-states
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list life-cycle-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-applications-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-applications-request-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-filters :shape
                         "ListApplicationsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-request-filters common-lisp:nil
                       ((application-ids :initarg :application-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or application-ids-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-filters-application-ids
                         :shape "ApplicationIDsFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-applications-request-filters-is-archived
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wave-ids :initarg :wave-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or wave-ids-filter common-lisp:null)
                         :accessor
                         struct-shape-list-applications-request-filters-wave-ids
                         :shape "WaveIDsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-applications-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-request-filters
                    'make-list-applications-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-ids))
      (common-lisp:list
       (common-lisp:cons "applicationIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-ids))
      (common-lisp:list
       (common-lisp:cons "waveIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or applications-list common-lisp:null)
                         :accessor
                         struct-shape-list-applications-response-items :shape
                         "ApplicationsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-applications-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-connectors-request-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-connectors-request-filters
                         :shape "ListConnectorsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-request-filters common-lisp:nil
                       ((connector-ids :initarg :connector-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-ids-filter common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-request-filters-connector-ids
                         :shape "ConnectorIDsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connectors-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-connectors-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request-filters
                    'make-list-connectors-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-ids))
      (common-lisp:list
       (common-lisp:cons "connectorIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or connectors-list common-lisp:null)
                         :accessor struct-shape-list-connectors-response-items
                         :shape "ConnectorsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-connectors-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-export-errors-request common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or export-id common-lisp:null) :accessor
                         struct-shape-list-export-errors-request-export-id
                         :shape "ExportID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-export-errors-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-export-errors-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-export-errors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-export-errors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-export-errors-request
                    'make-list-export-errors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-export-errors-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or export-errors common-lisp:null)
                         :accessor
                         struct-shape-list-export-errors-response-items :shape
                         "ExportErrors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-export-errors-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-export-errors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-export-errors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-export-errors-response
                    'make-list-export-errors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-export-errors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-exports-request-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-exports-request-filters
                         :shape "ListExportsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-exports-request-max-results :shape
                         "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-exports-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-exports-request 'make-list-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-request-filters common-lisp:nil
                       ((export-ids :initarg :export-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-exports-request-filters-export-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-list-exports-request-filters-export-ids
                         :shape "ListExportsRequestFiltersExportIDs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-exports-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-exports-request-filters
                    'make-list-exports-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-exports-request-filters-export-ids ()
   '(trivial-types:proper-list export-id))
 (common-lisp:defun make-list-exports-request-filters-export-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-exports-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or exports-list common-lisp:null)
                         :accessor struct-shape-list-exports-response-items
                         :shape "ExportsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-exports-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-exports-response 'make-list-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-import-errors-request common-lisp:nil
                       ((import-id :initarg :import-id :initform
                         (common-lisp:error ":importid is required") :type
                         (common-lisp:or import-id common-lisp:null) :accessor
                         struct-shape-list-import-errors-request-import-id
                         :shape "ImportID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-import-errors-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-import-errors-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-import-errors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-import-errors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-import-errors-request
                    'make-list-import-errors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "importID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-import-errors-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or import-errors common-lisp:null)
                         :accessor
                         struct-shape-list-import-errors-response-items :shape
                         "ImportErrors" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-import-errors-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-import-errors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-import-errors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-import-errors-response
                    'make-list-import-errors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-errors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-imports-request-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-imports-request-filters
                         :shape "ListImportsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-imports-request-max-results :shape
                         "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-imports-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-imports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-imports-request 'make-list-imports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-request-filters common-lisp:nil
                       ((import-ids :initarg :import-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or import-ids-filter common-lisp:null)
                         :accessor
                         struct-shape-list-imports-request-filters-import-ids
                         :shape "ImportIDsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-imports-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-imports-request-filters
                    'make-list-imports-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-ids))
      (common-lisp:list
       (common-lisp:cons "importIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or import-list common-lisp:null)
                         :accessor struct-shape-list-imports-response-items
                         :shape "ImportList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-imports-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-imports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-imports-response 'make-list-imports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-accounts-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-managed-accounts-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-managed-accounts-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-managed-accounts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-managed-accounts-request
                    'make-list-managed-accounts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-managed-accounts-response common-lisp:nil
                       ((items :initarg :items :initform
                         (common-lisp:error ":items is required") :type
                         (common-lisp:or managed-accounts common-lisp:null)
                         :accessor
                         struct-shape-list-managed-accounts-response-items
                         :shape "ManagedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-managed-accounts-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-managed-accounts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-managed-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-managed-accounts-response
                    'make-list-managed-accounts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-server-actions-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-source-server-actions-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or source-server-actions-request-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-request-filters
                         :shape "SourceServerActionsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-source-server-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-server-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-source-server-actions-request
                    'make-list-source-server-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-source-server-actions-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or source-server-action-documents
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-response-items
                         :shape "SourceServerActionDocuments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-source-server-actions-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-source-server-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-source-server-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-source-server-actions-response
                    'make-list-source-server-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-source-server-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ARN" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-actions-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or template-actions-request-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-request-filters
                         :shape "TemplateActionsRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-request-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-actions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-actions-request
                    'make-list-template-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-template-actions-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or template-action-documents
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-response-items
                         :shape "TemplateActionDocuments" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-template-actions-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-template-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-template-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-template-actions-response
                    'make-list-template-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-waves-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-waves-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or list-waves-request-filters
                                         common-lisp:null)
                         :accessor struct-shape-list-waves-request-filters
                         :shape "ListWavesRequestFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-type common-lisp:null)
                         :accessor struct-shape-list-waves-request-max-results
                         :shape "MaxResultsType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-waves-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-waves-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-waves-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-waves-request 'make-list-waves-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-waves-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-waves-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-waves-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-waves-request-filters common-lisp:nil
                       ((is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-waves-request-filters-is-archived
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wave-ids :initarg :wave-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or wave-ids-filter common-lisp:null)
                         :accessor
                         struct-shape-list-waves-request-filters-wave-ids
                         :shape "WaveIDsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-waves-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-waves-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-waves-request-filters
                    'make-list-waves-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-waves-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-waves-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-ids))
      (common-lisp:list
       (common-lisp:cons "waveIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-waves-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-waves-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or waves-list common-lisp:null) :accessor
                         struct-shape-list-waves-response-items :shape
                         "WavesList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-waves-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-waves-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-waves-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-waves-response 'make-list-waves-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-waves-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-waves-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-waves-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass managed-account common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-managed-account-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-managed-account
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'managed-account
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'managed-account 'make-managed-account))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-accounts ()
   '(trivial-types:proper-list managed-account))
 (common-lisp:defun make-managed-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mark-as-archived-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-mark-as-archived-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-mark-as-archived-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mark-as-archived-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mark-as-archived-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mark-as-archived-request 'make-mark-as-archived-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mark-as-archived-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mark-as-archived-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mark-as-archived-request))
   common-lisp:nil))
(common-lisp:deftype max-results-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((ips :initarg :ips :initform common-lisp:nil :type
                         (common-lisp:or ips-list common-lisp:null) :accessor
                         struct-shape-network-interface-ips :shape "IPsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-primary :initarg :is-primary :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-network-interface-is-primary :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-network-interface-mac-address
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-interface
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ips))
      (common-lisp:list
       (common-lisp:cons "ips"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-primary))
      (common-lisp:list
       (common-lisp:cons "isPrimary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interfaces
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass os common-lisp:nil
                       ((full-string :initarg :full-string :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-os-full-string :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-os (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'os
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'os 'make-os))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input os))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input os))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-string))
      (common-lisp:list
       (common-lisp:cons "fullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input os))
   common-lisp:nil))
(common-lisp:deftype operating-system-string () 'common-lisp:string)
(common-lisp:deftype order-type () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass participating-server common-lisp:nil
                       ((launch-status :initarg :launch-status :initform
                         common-lisp:nil :type
                         (common-lisp:or launch-status common-lisp:null)
                         :accessor
                         struct-shape-participating-server-launch-status :shape
                         "LaunchStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launched-ec2instance-id :initarg
                         :launched-ec2instance-id :initform common-lisp:nil
                         :type (common-lisp:or ec2instance-id common-lisp:null)
                         :accessor
                         struct-shape-participating-server-launched-ec2instance-id
                         :shape "EC2InstanceID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions-status :initarg
                         :post-launch-actions-status :initform common-lisp:nil
                         :type
                         (common-lisp:or post-launch-actions-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-participating-server-post-launch-actions-status
                         :shape "PostLaunchActionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-participating-server-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-participating-server
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'participating-server
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'participating-server 'make-participating-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input participating-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input participating-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-status))
      (common-lisp:list
       (common-lisp:cons "launchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launched-ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "launchedEc2InstanceID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-launch-actions-status))
      (common-lisp:list
       (common-lisp:cons "postLaunchActionsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input participating-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype participating-servers ()
   '(trivial-types:proper-list participating-server))
 (common-lisp:defun make-participating-servers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list participating-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pause-replication-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-pause-replication-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-pause-replication-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pause-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pause-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pause-replication-request
                    'make-pause-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-replication-request))
   common-lisp:nil))
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:deftype post-launch-action-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-launch-actions common-lisp:nil
                       ((cloud-watch-log-group-name :initarg
                         :cloud-watch-log-group-name :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-log-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-cloud-watch-log-group-name
                         :shape "CloudWatchLogGroupName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deployment :initarg :deployment :initform
                         common-lisp:nil :type
                         (common-lisp:or post-launch-actions-deployment-type
                                         common-lisp:null)
                         :accessor struct-shape-post-launch-actions-deployment
                         :shape "PostLaunchActionsDeploymentType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3log-bucket :initarg :s3log-bucket :initform
                         common-lisp:nil :type
                         (common-lisp:or s3log-bucket-name common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-s3log-bucket :shape
                         "S3LogBucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3output-key-prefix :initarg :s3output-key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-s3output-key-prefix
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-documents :initarg :ssm-documents :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-documents common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-ssm-documents :shape
                         "SsmDocuments" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-launch-actions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-launch-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-launch-actions 'make-post-launch-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input post-launch-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input post-launch-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "cloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3log-bucket))
      (common-lisp:list
       (common-lisp:cons "s3LogBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3OutputKeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-documents))
      (common-lisp:list
       (common-lisp:cons "ssmDocuments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input post-launch-actions))
   common-lisp:nil))
(common-lisp:deftype post-launch-actions-deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype post-launch-actions-launch-status-list ()
   '(trivial-types:proper-list job-post-launch-actions-launch-status))
 (common-lisp:defun make-post-launch-actions-launch-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            job-post-launch-actions-launch-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass post-launch-actions-status common-lisp:nil
                       ((post-launch-actions-launch-status-list :initarg
                         :post-launch-actions-launch-status-list :initform
                         common-lisp:nil :type
                         (common-lisp:or post-launch-actions-launch-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-status-post-launch-actions-launch-status-list
                         :shape "PostLaunchActionsLaunchStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssm-agent-discovery-datetime :initarg
                         :ssm-agent-discovery-datetime :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-post-launch-actions-status-ssm-agent-discovery-datetime
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-launch-actions-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-launch-actions-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-launch-actions-status
                    'make-post-launch-actions-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-launch-actions-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-launch-actions-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-launch-actions-launch-status-list))
      (common-lisp:list
       (common-lisp:cons "postLaunchActionsLaunchStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssm-agent-discovery-datetime))
      (common-lisp:list
       (common-lisp:cons "ssmAgentDiscoveryDatetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-launch-actions-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-source-server-action-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-source-server-action-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-put-source-server-action-request-action-id
                         :shape "ActionID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-description
                         :shape "ActionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-identifier :initarg :document-identifier
                         :initform
                         (common-lisp:error ":documentidentifier is required")
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-document-identifier
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-document-version
                         :shape "DocumentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-parameters :initarg :external-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-external-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-external-parameters
                         :shape "SsmDocumentExternalParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (must-succeed-for-cutover :initarg
                         :must-succeed-for-cutover :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-must-succeed-for-cutover
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-put-source-server-action-request-order
                         :shape "OrderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-parameters
                         :shape "SsmDocumentParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or strictly-positive-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-source-server-action-request-timeout-seconds
                         :shape "StrictlyPositiveInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-source-server-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-source-server-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-source-server-action-request
                    'make-put-source-server-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-source-server-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-source-server-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-identifier))
      (common-lisp:list
       (common-lisp:cons "documentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "documentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-parameters))
      (common-lisp:list
       (common-lisp:cons "externalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-succeed-for-cutover))
      (common-lisp:list
       (common-lisp:cons "mustSucceedForCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-source-server-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-template-action-request common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-put-template-action-request-action-id
                         :shape "ActionID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-action-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-active :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-description
                         :shape "ActionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-identifier :initarg :document-identifier
                         :initform
                         (common-lisp:error ":documentidentifier is required")
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-document-identifier
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-document-version
                         :shape "DocumentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-parameters :initarg :external-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-external-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-external-parameters
                         :shape "SsmDocumentExternalParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (must-succeed-for-cutover :initarg
                         :must-succeed-for-cutover :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-must-succeed-for-cutover
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-system :initarg :operating-system :initform
                         common-lisp:nil :type
                         (common-lisp:or operating-system-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-operating-system
                         :shape "OperatingSystemString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform
                         (common-lisp:error ":order is required") :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-put-template-action-request-order :shape
                         "OrderType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-parameters
                         :shape "SsmDocumentParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or strictly-positive-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-template-action-request-timeout-seconds
                         :shape "StrictlyPositiveInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-template-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-template-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-template-action-request
                    'make-put-template-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-template-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-template-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-identifier))
      (common-lisp:list
       (common-lisp:cons "documentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "documentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-parameters))
      (common-lisp:list
       (common-lisp:cons "externalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-succeed-for-cutover))
      (common-lisp:list
       (common-lisp:cons "mustSucceedForCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "operatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-template-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-server-action-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-remove-source-server-action-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-remove-source-server-action-request-action-id
                         :shape "ActionID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-remove-source-server-action-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-source-server-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-server-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-source-server-action-request
                    'make-remove-source-server-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-source-server-action-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-source-server-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-source-server-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-source-server-action-response
                    'make-remove-source-server-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-source-server-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-template-action-request common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         (common-lisp:error ":actionid is required") :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-remove-template-action-request-action-id
                         :shape "ActionID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-template-action-request-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-template-action-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-template-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-template-action-request
                    'make-remove-template-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-template-action-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-template-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-template-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-template-action-response
                    'make-remove-template-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-template-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-configuration common-lisp:nil
                       ((associate-default-security-group :initarg
                         :associate-default-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-associate-default-security-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth-throttling :initarg :bandwidth-throttling
                         :initform common-lisp:nil :type
                         (common-lisp:or bandwidth-throttling common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-bandwidth-throttling
                         :shape "BandwidthThrottling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-public-ip :initarg :create-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-create-public-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-plane-routing :initarg :data-plane-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-data-plane-routing
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-data-plane-routing
                         :shape "ReplicationConfigurationDataPlaneRouting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-large-staging-disk-type :initarg
                         :default-large-staging-disk-type :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-default-large-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-default-large-staging-disk-type
                         :shape
                         "ReplicationConfigurationDefaultLargeStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption :initarg :ebs-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-ebs-encryption
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-ebs-encryption
                         :shape "ReplicationConfigurationEbsEncryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption-key-arn :initarg
                         :ebs-encryption-key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-configuration-ebs-encryption-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or small-bounded-string common-lisp:null)
                         :accessor struct-shape-replication-configuration-name
                         :shape "SmallBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicated-disks :initarg :replicated-disks :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-replicated-disks
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replicated-disks
                         :shape "ReplicationConfigurationReplicatedDisks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-server-instance-type :initarg
                         :replication-server-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replication-server-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-servers-security-groups-ids :initarg
                         :replication-servers-security-groups-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-servers-security-groups-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replication-servers-security-groups-ids
                         :shape "ReplicationServersSecurityGroupsIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-subnet-id :initarg
                         :staging-area-subnet-id :initform common-lisp:nil
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-staging-area-subnet-id
                         :shape "SubnetID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-tags :initarg :staging-area-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-replication-configuration-staging-area-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-dedicated-replication-server :initarg
                         :use-dedicated-replication-server :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-use-dedicated-replication-server
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-fips-endpoint :initarg :use-fips-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-use-fips-endpoint
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-fips-endpoint))
      (common-lisp:list
       (common-lisp:cons "useFipsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-data-plane-routing ()
  'common-lisp:string)
(common-lisp:deftype replication-configuration-default-large-staging-disk-type
                     ()
  'common-lisp:string)
(common-lisp:deftype replication-configuration-ebs-encryption ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-configuration-replicated-disk
                       common-lisp:nil
                       ((device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replicated-disk-device-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replicated-disk-iops
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-boot-disk :initarg :is-boot-disk :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-replicated-disk-is-boot-disk
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-disk-type :initarg :staging-disk-type
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-replicated-disk-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replicated-disk-staging-disk-type
                         :shape
                         "ReplicationConfigurationReplicatedDiskStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-replicated-disk-throughput
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-configuration-replicated-disk
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-configuration-replicated-disk
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-configuration-replicated-disk
                    'make-replication-configuration-replicated-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-boot-disk))
      (common-lisp:list
       (common-lisp:cons "isBootDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "stagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-replicated-disk))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-replicated-disk-staging-disk-type
                     ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-configuration-replicated-disks ()
   '(trivial-types:proper-list replication-configuration-replicated-disk))
 (common-lisp:defun make-replication-configuration-replicated-disks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-replicated-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-configuration-template common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associate-default-security-group :initarg
                         :associate-default-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-associate-default-security-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth-throttling :initarg :bandwidth-throttling
                         :initform common-lisp:nil :type
                         (common-lisp:or bandwidth-throttling common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-bandwidth-throttling
                         :shape "BandwidthThrottling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-public-ip :initarg :create-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-create-public-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-plane-routing :initarg :data-plane-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-data-plane-routing
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-data-plane-routing
                         :shape "ReplicationConfigurationDataPlaneRouting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-large-staging-disk-type :initarg
                         :default-large-staging-disk-type :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-default-large-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-default-large-staging-disk-type
                         :shape
                         "ReplicationConfigurationDefaultLargeStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption :initarg :ebs-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-ebs-encryption
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-ebs-encryption
                         :shape "ReplicationConfigurationEbsEncryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption-key-arn :initarg
                         :ebs-encryption-key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-ebs-encryption-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-configuration-template-id :initarg
                         :replication-configuration-template-id :initform
                         (common-lisp:error
                          ":replicationconfigurationtemplateid is required")
                         :type
                         (common-lisp:or replication-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-replication-configuration-template-id
                         :shape "ReplicationConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-server-instance-type :initarg
                         :replication-server-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-replication-server-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-servers-security-groups-ids :initarg
                         :replication-servers-security-groups-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-servers-security-groups-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-replication-servers-security-groups-ids
                         :shape "ReplicationServersSecurityGroupsIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (staging-area-subnet-id :initarg
                         :staging-area-subnet-id :initform common-lisp:nil
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         struct-shape-replication-configuration-template-staging-area-subnet-id
                         :shape "SubnetID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-tags :initarg :staging-area-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-staging-area-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-dedicated-replication-server :initarg
                         :use-dedicated-replication-server :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-use-dedicated-replication-server
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-fips-endpoint :initarg :use-fips-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-configuration-template-use-fips-endpoint
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-configuration-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-configuration-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-configuration-template
                    'make-replication-configuration-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-fips-endpoint))
      (common-lisp:list
       (common-lisp:cons "useFipsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration-template))
   common-lisp:nil))
(common-lisp:deftype replication-configuration-template-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-configuration-template-ids ()
   '(trivial-types:proper-list replication-configuration-template-id))
 (common-lisp:defun make-replication-configuration-template-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-template-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-configuration-templates ()
   '(trivial-types:proper-list replication-configuration-template))
 (common-lisp:defun make-replication-configuration-templates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-configuration-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-servers-security-groups-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-replication-servers-security-groups-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-types ()
   '(trivial-types:proper-list replication-type))
 (common-lisp:defun make-replication-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-code
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass resume-replication-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-resume-replication-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-resume-replication-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-replication-request
                    'make-resume-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retry-data-replication-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-retry-data-replication-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-retry-data-replication-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retry-data-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'retry-data-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retry-data-replication-request
                    'make-retry-data-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-data-replication-request))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-source common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3bucket-source-s3bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-owner :initarg :s3bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-s3bucket-source-s3bucket-owner :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key :initarg :s3key :initform
                         (common-lisp:error ":s3key is required") :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-s3bucket-source-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3bucket-source 'make-s3bucket-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-owner))
      (common-lisp:list
       (common-lisp:cons "s3BucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-source))
   common-lisp:nil))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3log-bucket-name () 'common-lisp:string)
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (quota-value :initarg :quota-value :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-value)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-code
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-quota-value
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype small-bounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-properties common-lisp:nil
                       ((cpus :initarg :cpus :initform common-lisp:nil :type
                         (common-lisp:or cpus common-lisp:null) :accessor
                         struct-shape-source-properties-cpus :shape "Cpus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disks :initarg :disks :initform common-lisp:nil :type
                         (common-lisp:or disks common-lisp:null) :accessor
                         struct-shape-source-properties-disks :shape "Disks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identification-hints :initarg :identification-hints
                         :initform common-lisp:nil :type
                         (common-lisp:or identification-hints common-lisp:null)
                         :accessor
                         struct-shape-source-properties-identification-hints
                         :shape "IdentificationHints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-date-time :initarg
                         :last-updated-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-properties-last-updated-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-interfaces :initarg :network-interfaces
                         :initform common-lisp:nil :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor
                         struct-shape-source-properties-network-interfaces
                         :shape "NetworkInterfaces" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (os :initarg :os :initform common-lisp:nil :type
                         (common-lisp:or os common-lisp:null) :accessor
                         struct-shape-source-properties-os :shape "OS"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-bytes :initarg :ram-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor struct-shape-source-properties-ram-bytes
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-instance-type :initarg
                         :recommended-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-source-properties-recommended-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-properties 'make-source-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpus))
      (common-lisp:list
       (common-lisp:cons "cpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identification-hints))
      (common-lisp:list
       (common-lisp:cons "identificationHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-bytes))
      (common-lisp:list
       (common-lisp:cons "ramBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-instance-type))
      (common-lisp:list
       (common-lisp:cons "recommendedInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-server common-lisp:nil
                       ((application-id :initarg :application-id :initform
                         common-lisp:nil :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor struct-shape-source-server-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-source-server-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-action :initarg :connector-action :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-connector-action
                                         common-lisp:null)
                         :accessor struct-shape-source-server-connector-action
                         :shape "SourceServerConnectorAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-replication-info :initarg :data-replication-info
                         :initform common-lisp:nil :type
                         (common-lisp:or data-replication-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-server-data-replication-info
                         :shape "DataReplicationInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fqdn-for-action-framework :initarg
                         :fqdn-for-action-framework :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-source-server-fqdn-for-action-framework
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-source-server-is-archived :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (launched-instance :initarg :launched-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or launched-instance common-lisp:null)
                         :accessor struct-shape-source-server-launched-instance
                         :shape "LaunchedInstance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (life-cycle :initarg :life-cycle :initform
                         common-lisp:nil :type
                         (common-lisp:or life-cycle common-lisp:null) :accessor
                         struct-shape-source-server-life-cycle :shape
                         "LifeCycle" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-type common-lisp:null)
                         :accessor struct-shape-source-server-replication-type
                         :shape "ReplicationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-properties :initarg :source-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or source-properties common-lisp:null)
                         :accessor struct-shape-source-server-source-properties
                         :shape "SourceProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor struct-shape-source-server-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-source-server-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-provided-id :initarg :user-provided-id :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-source-server-user-provided-id
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vcenter-client-id :initarg :vcenter-client-id
                         :initform common-lisp:nil :type
                         (common-lisp:or vcenter-client-id common-lisp:null)
                         :accessor struct-shape-source-server-vcenter-client-id
                         :shape "VcenterClientID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-server
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-server
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-server 'make-source-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-action))
      (common-lisp:list
       (common-lisp:cons "connectorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-replication-info))
      (common-lisp:list
       (common-lisp:cons "dataReplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fqdn-for-action-framework))
      (common-lisp:list
       (common-lisp:cons "fqdnForActionFramework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launched-instance))
      (common-lisp:list
       (common-lisp:cons "launchedInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle))
      (common-lisp:list
       (common-lisp:cons "lifeCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "replicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-properties))
      (common-lisp:list
       (common-lisp:cons "sourceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-provided-id))
      (common-lisp:list
       (common-lisp:cons "userProvidedID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcenter-client-id))
      (common-lisp:list
       (common-lisp:cons "vcenterClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-server-action-document common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-source-server-action-document-action-id
                         :shape "ActionID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-action-name
                         :shape "ActionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-category
                         :shape "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-description
                         :shape "ActionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-identifier :initarg :document-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-document-identifier
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-document-version
                         :shape "DocumentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-parameters :initarg :external-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-external-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-external-parameters
                         :shape "SsmDocumentExternalParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (must-succeed-for-cutover :initarg
                         :must-succeed-for-cutover :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-must-succeed-for-cutover
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-source-server-action-document-order
                         :shape "OrderType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-parameters
                         :shape "SsmDocumentParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or strictly-positive-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-server-action-document-timeout-seconds
                         :shape "StrictlyPositiveInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-server-action-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'source-server-action-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-server-action-document
                    'make-source-server-action-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-server-action-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-server-action-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-identifier))
      (common-lisp:list
       (common-lisp:cons "documentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "documentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-parameters))
      (common-lisp:list
       (common-lisp:cons "externalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-succeed-for-cutover))
      (common-lisp:list
       (common-lisp:cons "mustSucceedForCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-server-action-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-server-action-documents ()
   '(trivial-types:proper-list source-server-action-document))
 (common-lisp:defun make-source-server-action-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            source-server-action-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-server-actions-request-filters common-lisp:nil
                       ((action-ids :initarg :action-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or action-ids common-lisp:null) :accessor
                         struct-shape-source-server-actions-request-filters-action-ids
                         :shape "ActionIDs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-server-actions-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'source-server-actions-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-server-actions-request-filters
                    'make-source-server-actions-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-server-actions-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-server-actions-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-ids))
      (common-lisp:list
       (common-lisp:cons "actionIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-server-actions-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-server-connector-action common-lisp:nil
                       ((connector-arn :initarg :connector-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connector-arn common-lisp:null)
                         :accessor
                         struct-shape-source-server-connector-action-connector-arn
                         :shape "ConnectorArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credentials-secret-arn :initarg
                         :credentials-secret-arn :initform common-lisp:nil
                         :type (common-lisp:or secret-arn common-lisp:null)
                         :accessor
                         struct-shape-source-server-connector-action-credentials-secret-arn
                         :shape "SecretArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-server-connector-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'source-server-connector-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-server-connector-action
                    'make-source-server-connector-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-server-connector-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-server-connector-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "connectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-secret-arn))
      (common-lisp:list
       (common-lisp:cons "credentialsSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-server-connector-action))
   common-lisp:nil))
(common-lisp:deftype source-server-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype source-servers-list ()
   '(trivial-types:proper-list source-server))
 (common-lisp:defun make-source-servers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ssm-document common-lisp:nil
                       ((action-name :initarg :action-name :initform
                         (common-lisp:error ":actionname is required") :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-ssm-document-action-name :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-parameters :initarg :external-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-external-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-ssm-document-external-parameters :shape
                         "SsmDocumentExternalParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (must-succeed-for-cutover :initarg
                         :must-succeed-for-cutover :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-ssm-document-must-succeed-for-cutover
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document-parameters
                                         common-lisp:null)
                         :accessor struct-shape-ssm-document-parameters :shape
                         "SsmDocumentParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-document-name :initarg :ssm-document-name
                         :initform
                         (common-lisp:error ":ssmdocumentname is required")
                         :type
                         (common-lisp:or ssm-document-name common-lisp:null)
                         :accessor struct-shape-ssm-document-ssm-document-name
                         :shape "SsmDocumentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or strictly-positive-integer
                                         common-lisp:null)
                         :accessor struct-shape-ssm-document-timeout-seconds
                         :shape "StrictlyPositiveInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssm-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssm-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssm-document 'make-ssm-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssm-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssm-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-parameters))
      (common-lisp:list
       (common-lisp:cons "externalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-succeed-for-cutover))
      (common-lisp:list
       (common-lisp:cons "mustSucceedForCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-document-name))
      (common-lisp:list
       (common-lisp:cons "ssmDocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssm-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ssm-document-external-parameters ()
   'common-lisp:hash-table)
 (common-lisp:defun make-ssm-document-external-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype ssm-document-name () 'common-lisp:string)
(common-lisp:deftype ssm-document-parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-document-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-ssm-document-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype ssm-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-documents ()
   '(trivial-types:proper-list ssm-document))
 (common-lisp:defun make-ssm-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssm-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ssm-external-parameter common-lisp:nil
                       ((dynamic-path :initarg :dynamic-path :initform
                         common-lisp:nil :type
                         (common-lisp:or jmes-path-string common-lisp:null)
                         :accessor
                         struct-shape-ssm-external-parameter-dynamic-path
                         :shape "JmesPathString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssm-external-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssm-external-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ssm-external-parameter 'make-ssm-external-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ssm-external-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ssm-external-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-path))
      (common-lisp:list
       (common-lisp:cons "dynamicPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ssm-external-parameter))
   common-lisp:nil))
(common-lisp:deftype ssm-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssm-parameter-store-parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         (common-lisp:error ":parametername is required") :type
                         (common-lisp:or ssm-parameter-store-parameter-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-ssm-parameter-store-parameter-parameter-name
                         :shape "SsmParameterStoreParameterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameter-type :initarg :parameter-type :initform
                         (common-lisp:error ":parametertype is required") :type
                         (common-lisp:or ssm-parameter-store-parameter-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-ssm-parameter-store-parameter-parameter-type
                         :shape "SsmParameterStoreParameterType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssm-parameter-store-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ssm-parameter-store-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ssm-parameter-store-parameter
                    'make-ssm-parameter-store-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ssm-parameter-store-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ssm-parameter-store-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "parameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "parameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ssm-parameter-store-parameter))
   common-lisp:nil))
(common-lisp:deftype ssm-parameter-store-parameter-name () 'common-lisp:string)
(common-lisp:deftype ssm-parameter-store-parameter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-parameter-store-parameters ()
   '(trivial-types:proper-list ssm-parameter-store-parameter))
 (common-lisp:defun make-ssm-parameter-store-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ssm-parameter-store-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-cutover-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-start-cutover-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform
                         (common-lisp:error ":sourceserverids is required")
                         :type
                         (common-lisp:or
                          start-cutover-request-source-server-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-start-cutover-request-source-server-ids
                         :shape "StartCutoverRequestSourceServerIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-start-cutover-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-cutover-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-cutover-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-cutover-request 'make-start-cutover-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-cutover-request-source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-start-cutover-request-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-cutover-response common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-start-cutover-response-job :shape "Job"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-cutover-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-cutover-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-cutover-response 'make-start-cutover-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-cutover-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-request common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-start-export-request-s3bucket
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-owner :initarg :s3bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-start-export-request-s3bucket-owner
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform
                         (common-lisp:error ":s3key is required") :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-start-export-request-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-request 'make-start-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-owner))
      (common-lisp:list
       (common-lisp:cons "s3BucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "s3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-response common-lisp:nil
                       ((export-task :initarg :export-task :initform
                         common-lisp:nil :type
                         (common-lisp:or export-task common-lisp:null)
                         :accessor
                         struct-shape-start-export-response-export-task :shape
                         "ExportTask" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-response 'make-start-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-task))
      (common-lisp:list
       (common-lisp:cons "exportTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-idempotency-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-import-request-client-token :shape
                         "ClientIdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-source :initarg :s3bucket-source :initform
                         (common-lisp:error ":s3bucketsource is required")
                         :type
                         (common-lisp:or s3bucket-source common-lisp:null)
                         :accessor
                         struct-shape-start-import-request-s3bucket-source
                         :shape "S3BucketSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-request 'make-start-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-source))
      (common-lisp:list
       (common-lisp:cons "s3BucketSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-response common-lisp:nil
                       ((import-task :initarg :import-task :initform
                         common-lisp:nil :type
                         (common-lisp:or import-task common-lisp:null)
                         :accessor
                         struct-shape-start-import-response-import-task :shape
                         "ImportTask" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-response 'make-start-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task))
      (common-lisp:list
       (common-lisp:cons "importTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-start-replication-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-start-replication-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-request
                    'make-start-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-test-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-start-test-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform
                         (common-lisp:error ":sourceserverids is required")
                         :type
                         (common-lisp:or start-test-request-source-server-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-test-request-source-server-ids
                         :shape "StartTestRequestSourceServerIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-start-test-request-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-test-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-request 'make-start-test-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-test-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-test-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-test-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-test-request-source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-start-test-request-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-test-response common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-start-test-response-job :shape "Job"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-test-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-test-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-test-response 'make-start-test-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-test-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-test-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-test-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-replication-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-stop-replication-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-stop-replication-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-replication-request 'make-stop-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-request))
   common-lisp:nil))
(common-lisp:deftype strictly-positive-integer () 'common-lisp:integer)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ARN" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-instance-type-right-sizing-method ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-action-document common-lisp:nil
                       ((action-id :initarg :action-id :initform
                         common-lisp:nil :type
                         (common-lisp:or action-id common-lisp:null) :accessor
                         struct-shape-template-action-document-action-id :shape
                         "ActionID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-name :initarg :action-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-action-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active :initarg :active :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-template-action-document-active
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or action-category common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-category :shape
                         "ActionCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or action-description common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-description
                         :shape "ActionDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-identifier :initarg :document-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-document-identifier
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-document-version
                         :shape "DocumentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-parameters :initarg :external-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or ssm-document-external-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-external-parameters
                         :shape "SsmDocumentExternalParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (must-succeed-for-cutover :initarg
                         :must-succeed-for-cutover :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-must-succeed-for-cutover
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-system :initarg :operating-system :initform
                         common-lisp:nil :type
                         (common-lisp:or operating-system-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-operating-system
                         :shape "OperatingSystemString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-template-action-document-order :shape
                         "OrderType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-document-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-parameters
                         :shape "SsmDocumentParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or strictly-positive-integer
                                         common-lisp:null)
                         :accessor
                         struct-shape-template-action-document-timeout-seconds
                         :shape "StrictlyPositiveInteger" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-action-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-action-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-action-document 'make-template-action-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-action-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-action-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "actionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "actionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-identifier))
      (common-lisp:list
       (common-lisp:cons "documentIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "documentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-parameters))
      (common-lisp:list
       (common-lisp:cons "externalParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'must-succeed-for-cutover))
      (common-lisp:list
       (common-lisp:cons "mustSucceedForCutover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "operatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-action-document))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-action-documents ()
   '(trivial-types:proper-list template-action-document))
 (common-lisp:defun make-template-action-documents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            template-action-document))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass template-actions-request-filters common-lisp:nil
                       ((action-ids :initarg :action-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or action-ids common-lisp:null) :accessor
                         struct-shape-template-actions-request-filters-action-ids
                         :shape "ActionIDs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-actions-request-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'template-actions-request-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-actions-request-filters
                    'make-template-actions-request-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-actions-request-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-actions-request-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-ids))
      (common-lisp:list
       (common-lisp:cons "actionIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-actions-request-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-target-instances-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-terminate-target-instances-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-ids :initarg :source-server-ids
                         :initform
                         (common-lisp:error ":sourceserverids is required")
                         :type
                         (common-lisp:or
                          terminate-target-instances-request-source-server-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-terminate-target-instances-request-source-server-ids
                         :shape
                         "TerminateTargetInstancesRequestSourceServerIDs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-terminate-target-instances-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-target-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-target-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-target-instances-request
                    'make-terminate-target-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-ids))
      (common-lisp:list
       (common-lisp:cons "sourceServerIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype terminate-target-instances-request-source-server-ids ()
   '(trivial-types:proper-list source-server-id))
 (common-lisp:defun make-terminate-target-instances-request-source-server-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-server-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass terminate-target-instances-response common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-terminate-target-instances-response-job
                         :shape "Job" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-terminate-target-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'terminate-target-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'terminate-target-instances-response
                    'make-terminate-target-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-target-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (mgn-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype throughput () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass unarchive-application-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-unarchive-application-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-unarchive-application-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unarchive-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unarchive-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unarchive-application-request
                    'make-unarchive-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unarchive-wave-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-unarchive-wave-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-unarchive-wave-request-wave-id :shape
                         "WaveID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unarchive-wave-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unarchive-wave-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unarchive-wave-request 'make-unarchive-wave-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-wave-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-wave-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unarchive-wave-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition uninitialized-account-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       uninitialized-account-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       uninitialized-account-exception-message)))
 (common-lisp:export
  (common-lisp:list 'uninitialized-account-exception
                    'uninitialized-account-exception-code
                    'uninitialized-account-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ARN" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-application-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-id :initarg :application-id :initform
                         (common-lisp:error ":applicationid is required") :type
                         (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-application-id
                         :shape "ApplicationID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-description
                         :shape "ApplicationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-update-application-request-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-id))
      (common-lisp:list
       (common-lisp:cons "applicationID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connector-request common-lisp:nil
                       ((connector-id :initarg :connector-id :initform
                         (common-lisp:error ":connectorid is required") :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor
                         struct-shape-update-connector-request-connector-id
                         :shape "ConnectorID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or connector-name common-lisp:null)
                         :accessor struct-shape-update-connector-request-name
                         :shape "ConnectorName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssm-command-config :initarg :ssm-command-config
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-ssm-command-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-connector-request-ssm-command-config
                         :shape "ConnectorSsmCommandConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connector-request 'make-update-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-command-config))
      (common-lisp:list
       (common-lisp:cons "ssmCommandConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-configuration-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boot-mode :initarg :boot-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boot-mode common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-request-boot-mode
                         :shape "BootMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-private-ip :initarg :copy-private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-request-copy-private-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-request-copy-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-map-auto-tagging :initarg
                         :enable-map-auto-tagging :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-enable-map-auto-tagging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-disposition :initarg :launch-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-disposition common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-launch-disposition
                         :shape "LaunchDisposition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (licensing :initarg :licensing :initform
                         common-lisp:nil :type
                         (common-lisp:or licensing common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-request-licensing
                         :shape "Licensing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-auto-tagging-mpe-id :initarg
                         :map-auto-tagging-mpe-id :initform common-lisp:nil
                         :type (common-lisp:or tag-value common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-map-auto-tagging-mpe-id
                         :shape "TagValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or small-bounded-string common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-name
                         :shape "SmallBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions :initarg :post-launch-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or post-launch-actions common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-post-launch-actions
                         :shape "PostLaunchActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-instance-type-right-sizing-method :initarg
                         :target-instance-type-right-sizing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-instance-type-right-sizing-method
                          common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-request-target-instance-type-right-sizing-method
                         :shape "TargetInstanceTypeRightSizingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-configuration-request
                    'make-update-launch-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boot-mode))
      (common-lisp:list
       (common-lisp:cons "bootMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-map-auto-tagging))
      (common-lisp:list
       (common-lisp:cons "enableMapAutoTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-auto-tagging-mpe-id))
      (common-lisp:list
       (common-lisp:cons "mapAutoTaggingMpeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-actions))
      (common-lisp:list
       (common-lisp:cons "postLaunchActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-launch-configuration-template-request
                       common-lisp:nil
                       ((associate-public-ip-address :initarg
                         :associate-public-ip-address :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-associate-public-ip-address
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boot-mode :initarg :boot-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boot-mode common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-template-request-boot-mode
                         :shape "BootMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-private-ip :initarg :copy-private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-template-request-copy-private-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-template-request-copy-tags
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-map-auto-tagging :initarg
                         :enable-map-auto-tagging :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-enable-map-auto-tagging
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (large-volume-conf :initarg :large-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-large-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-configuration-template-id :initarg
                         :launch-configuration-template-id :initform
                         (common-lisp:error
                          ":launchconfigurationtemplateid is required")
                         :type
                         (common-lisp:or launch-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-launch-configuration-template-id
                         :shape "LaunchConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (launch-disposition :initarg :launch-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-disposition common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-launch-disposition
                         :shape "LaunchDisposition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (licensing :initarg :licensing :initform
                         common-lisp:nil :type
                         (common-lisp:or licensing common-lisp:null) :accessor
                         struct-shape-update-launch-configuration-template-request-licensing
                         :shape "Licensing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-auto-tagging-mpe-id :initarg
                         :map-auto-tagging-mpe-id :initform common-lisp:nil
                         :type (common-lisp:or tag-value common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-map-auto-tagging-mpe-id
                         :shape "TagValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-launch-actions :initarg :post-launch-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or post-launch-actions common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-post-launch-actions
                         :shape "PostLaunchActions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (small-volume-conf :initarg :small-volume-conf
                         :initform common-lisp:nil :type
                         (common-lisp:or launch-template-disk-conf
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-small-volume-conf
                         :shape "LaunchTemplateDiskConf" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (small-volume-max-size :initarg :small-volume-max-size
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-small-volume-max-size
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-instance-type-right-sizing-method :initarg
                         :target-instance-type-right-sizing-method :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          target-instance-type-right-sizing-method
                          common-lisp:null)
                         :accessor
                         struct-shape-update-launch-configuration-template-request-target-instance-type-right-sizing-method
                         :shape "TargetInstanceTypeRightSizingMethod" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-launch-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-launch-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-launch-configuration-template-request
                    'make-update-launch-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "associatePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boot-mode))
      (common-lisp:list
       (common-lisp:cons "bootMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-private-ip))
      (common-lisp:list
       (common-lisp:cons "copyPrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "copyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-map-auto-tagging))
      (common-lisp:list
       (common-lisp:cons "enableMapAutoTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'large-volume-conf))
      (common-lisp:list
       (common-lisp:cons "largeVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'launch-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "launchConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-disposition))
      (common-lisp:list
       (common-lisp:cons "launchDisposition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licensing))
      (common-lisp:list
       (common-lisp:cons "licensing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-auto-tagging-mpe-id))
      (common-lisp:list
       (common-lisp:cons "mapAutoTaggingMpeID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-launch-actions))
      (common-lisp:list
       (common-lisp:cons "postLaunchActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'small-volume-conf))
      (common-lisp:list
       (common-lisp:cons "smallVolumeConf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'small-volume-max-size))
      (common-lisp:list
       (common-lisp:cons "smallVolumeMaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-instance-type-right-sizing-method))
      (common-lisp:list
       (common-lisp:cons "targetInstanceTypeRightSizingMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-launch-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-configuration-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (associate-default-security-group :initarg
                         :associate-default-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-associate-default-security-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth-throttling :initarg :bandwidth-throttling
                         :initform common-lisp:nil :type
                         (common-lisp:or bandwidth-throttling common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-bandwidth-throttling
                         :shape "BandwidthThrottling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-public-ip :initarg :create-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-create-public-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-plane-routing :initarg :data-plane-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-data-plane-routing
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-data-plane-routing
                         :shape "ReplicationConfigurationDataPlaneRouting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-large-staging-disk-type :initarg
                         :default-large-staging-disk-type :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-default-large-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-default-large-staging-disk-type
                         :shape
                         "ReplicationConfigurationDefaultLargeStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption :initarg :ebs-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-ebs-encryption
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-ebs-encryption
                         :shape "ReplicationConfigurationEbsEncryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption-key-arn :initarg
                         :ebs-encryption-key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-ebs-encryption-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or small-bounded-string common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-name
                         :shape "SmallBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicated-disks :initarg :replicated-disks :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-replicated-disks
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-replicated-disks
                         :shape "ReplicationConfigurationReplicatedDisks"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-server-instance-type :initarg
                         :replication-server-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-replication-server-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-servers-security-groups-ids :initarg
                         :replication-servers-security-groups-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-servers-security-groups-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-replication-servers-security-groups-ids
                         :shape "ReplicationServersSecurityGroupsIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-subnet-id :initarg
                         :staging-area-subnet-id :initform common-lisp:nil
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-request-staging-area-subnet-id
                         :shape "SubnetID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-tags :initarg :staging-area-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-staging-area-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-dedicated-replication-server :initarg
                         :use-dedicated-replication-server :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-use-dedicated-replication-server
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-fips-endpoint :initarg :use-fips-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-request-use-fips-endpoint
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-configuration-request
                    'make-update-replication-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replicated-disks))
      (common-lisp:list
       (common-lisp:cons "replicatedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-fips-endpoint))
      (common-lisp:list
       (common-lisp:cons "useFipsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-configuration-template-request
                       common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (associate-default-security-group :initarg
                         :associate-default-security-group :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-associate-default-security-group
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth-throttling :initarg :bandwidth-throttling
                         :initform common-lisp:nil :type
                         (common-lisp:or bandwidth-throttling common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-bandwidth-throttling
                         :shape "BandwidthThrottling" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-public-ip :initarg :create-public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-create-public-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-plane-routing :initarg :data-plane-routing
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-data-plane-routing
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-data-plane-routing
                         :shape "ReplicationConfigurationDataPlaneRouting"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-large-staging-disk-type :initarg
                         :default-large-staging-disk-type :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-default-large-staging-disk-type
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-default-large-staging-disk-type
                         :shape
                         "ReplicationConfigurationDefaultLargeStagingDiskType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption :initarg :ebs-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-configuration-ebs-encryption
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-ebs-encryption
                         :shape "ReplicationConfigurationEbsEncryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-encryption-key-arn :initarg
                         :ebs-encryption-key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-ebs-encryption-key-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-configuration-template-id :initarg
                         :replication-configuration-template-id :initform
                         (common-lisp:error
                          ":replicationconfigurationtemplateid is required")
                         :type
                         (common-lisp:or replication-configuration-template-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-replication-configuration-template-id
                         :shape "ReplicationConfigurationTemplateID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-server-instance-type :initarg
                         :replication-server-instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-type common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-replication-server-instance-type
                         :shape "EC2InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-servers-security-groups-ids :initarg
                         :replication-servers-security-groups-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-servers-security-groups-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-replication-servers-security-groups-ids
                         :shape "ReplicationServersSecurityGroupsIDs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (staging-area-subnet-id :initarg
                         :staging-area-subnet-id :initform common-lisp:nil
                         :type (common-lisp:or subnet-id common-lisp:null)
                         :accessor
                         struct-shape-update-replication-configuration-template-request-staging-area-subnet-id
                         :shape "SubnetID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-area-tags :initarg :staging-area-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-staging-area-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-dedicated-replication-server :initarg
                         :use-dedicated-replication-server :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-use-dedicated-replication-server
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-fips-endpoint :initarg :use-fips-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-replication-configuration-template-request-use-fips-endpoint
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-configuration-template-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-configuration-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-configuration-template-request
                    'make-update-replication-configuration-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'associate-default-security-group))
      (common-lisp:list
       (common-lisp:cons "associateDefaultSecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-throttling))
      (common-lisp:list
       (common-lisp:cons "bandwidthThrottling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-public-ip))
      (common-lisp:list
       (common-lisp:cons "createPublicIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-plane-routing))
      (common-lisp:list
       (common-lisp:cons "dataPlaneRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-large-staging-disk-type))
      (common-lisp:list
       (common-lisp:cons "defaultLargeStagingDiskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-encryption))
      (common-lisp:list
       (common-lisp:cons "ebsEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebs-encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "ebsEncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration-template-id))
      (common-lisp:list
       (common-lisp:cons "replicationConfigurationTemplateID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-server-instance-type))
      (common-lisp:list
       (common-lisp:cons "replicationServerInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-servers-security-groups-ids))
      (common-lisp:list
       (common-lisp:cons "replicationServersSecurityGroupsIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'staging-area-subnet-id))
      (common-lisp:list
       (common-lisp:cons "stagingAreaSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-area-tags))
      (common-lisp:list
       (common-lisp:cons "stagingAreaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-dedicated-replication-server))
      (common-lisp:list
       (common-lisp:cons "useDedicatedReplicationServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-fips-endpoint))
      (common-lisp:list
       (common-lisp:cons "useFipsEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-configuration-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-server-replication-type-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-source-server-replication-type-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         (common-lisp:error ":replicationtype is required")
                         :type
                         (common-lisp:or replication-type common-lisp:null)
                         :accessor
                         struct-shape-update-source-server-replication-type-request-replication-type
                         :shape "ReplicationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-update-source-server-replication-type-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-server-replication-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-source-server-replication-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-server-replication-type-request
                    'make-update-source-server-replication-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-replication-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-replication-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "replicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-replication-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-server-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-source-server-request-account-id
                         :shape "AccountID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-action :initarg :connector-action :initform
                         common-lisp:nil :type
                         (common-lisp:or source-server-connector-action
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-source-server-request-connector-action
                         :shape "SourceServerConnectorAction" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or source-server-id common-lisp:null)
                         :accessor
                         struct-shape-update-source-server-request-source-server-id
                         :shape "SourceServerID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-server-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-source-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-server-request
                    'make-update-source-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-action))
      (common-lisp:list
       (common-lisp:cons "connectorAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wave-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-update-wave-request-account-id :shape
                         "AccountID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or wave-description common-lisp:null)
                         :accessor struct-shape-update-wave-request-description
                         :shape "WaveDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or wave-name common-lisp:null) :accessor
                         struct-shape-update-wave-request-name :shape
                         "WaveName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (wave-id :initarg :wave-id :initform
                         (common-lisp:error ":waveid is required") :type
                         (common-lisp:or wave-id common-lisp:null) :accessor
                         struct-shape-update-wave-request-wave-id :shape
                         "WaveID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-wave-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-wave-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-wave-request 'make-update-wave-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-wave-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-wave-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-wave-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (mgn-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       validation-exception-code)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-code
                    'validation-exception-field-list
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or large-bounded-string common-lisp:null)
                         :accessor struct-shape-validation-exception-field-name
                         :shape "LargeBoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vcenter-client common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-vcenter-client-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (datacenter-name :initarg :datacenter-name :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-vcenter-client-datacenter-name
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-vcenter-client-hostname :shape
                         "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-seen-datetime :initarg :last-seen-datetime
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-vcenter-client-last-seen-datetime :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-server-tags :initarg :source-server-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-vcenter-client-source-server-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-vcenter-client-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vcenter-client-id :initarg :vcenter-client-id
                         :initform common-lisp:nil :type
                         (common-lisp:or vcenter-client-id common-lisp:null)
                         :accessor
                         struct-shape-vcenter-client-vcenter-client-id :shape
                         "VcenterClientID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vcenter-uuid :initarg :vcenter-uuid :initform
                         common-lisp:nil :type
                         (common-lisp:or bounded-string common-lisp:null)
                         :accessor struct-shape-vcenter-client-vcenter-uuid
                         :shape "BoundedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vcenter-client
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vcenter-client
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vcenter-client 'make-vcenter-client))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vcenter-client))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vcenter-client))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datacenter-name))
      (common-lisp:list
       (common-lisp:cons "datacenterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-seen-datetime))
      (common-lisp:list
       (common-lisp:cons "lastSeenDatetime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-tags))
      (common-lisp:list
       (common-lisp:cons "sourceServerTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcenter-client-id))
      (common-lisp:list
       (common-lisp:cons "vcenterClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vcenter-uuid))
      (common-lisp:list
       (common-lisp:cons "vcenterUUID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vcenter-client))
   common-lisp:nil))
(common-lisp:deftype vcenter-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vcenter-client-list ()
   '(trivial-types:proper-list vcenter-client))
 (common-lisp:defun make-vcenter-client-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vcenter-client))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wave common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-wave-arn :shape "ARN" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-wave-creation-date-time :shape
                         "ISO8601DatetimeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or wave-description common-lisp:null)
                         :accessor struct-shape-wave-description :shape
                         "WaveDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-archived :initarg :is-archived :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-wave-is-archived :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date-time :initarg
                         :last-modified-date-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor struct-shape-wave-last-modified-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or wave-name common-lisp:null) :accessor
                         struct-shape-wave-name :shape "WaveName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-wave-tags :shape "TagsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wave-aggregated-status :initarg
                         :wave-aggregated-status :initform common-lisp:nil
                         :type
                         (common-lisp:or wave-aggregated-status
                                         common-lisp:null)
                         :accessor struct-shape-wave-wave-aggregated-status
                         :shape "WaveAggregatedStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wave-id :initarg :wave-id :initform common-lisp:nil
                         :type (common-lisp:or wave-id common-lisp:null)
                         :accessor struct-shape-wave-wave-id :shape "WaveID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-wave (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'wave
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'wave 'make-wave))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wave))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wave))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-archived))
      (common-lisp:list
       (common-lisp:cons "isArchived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-date-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wave-aggregated-status))
      (common-lisp:list
       (common-lisp:cons "waveAggregatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wave-id))
      (common-lisp:list
       (common-lisp:cons "waveID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wave))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wave-aggregated-status common-lisp:nil
                       ((health-status :initarg :health-status :initform
                         common-lisp:nil :type
                         (common-lisp:or wave-health-status common-lisp:null)
                         :accessor
                         struct-shape-wave-aggregated-status-health-status
                         :shape "WaveHealthStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-date-time :initarg :last-update-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-wave-aggregated-status-last-update-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (progress-status :initarg :progress-status :initform
                         common-lisp:nil :type
                         (common-lisp:or wave-progress-status common-lisp:null)
                         :accessor
                         struct-shape-wave-aggregated-status-progress-status
                         :shape "WaveProgressStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-started-date-time :initarg
                         :replication-started-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601datetime-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-wave-aggregated-status-replication-started-date-time
                         :shape "ISO8601DatetimeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (total-applications :initarg :total-applications
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-wave-aggregated-status-total-applications
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-wave-aggregated-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'wave-aggregated-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'wave-aggregated-status 'make-wave-aggregated-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wave-aggregated-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wave-aggregated-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-date-time))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-status))
      (common-lisp:list
       (common-lisp:cons "progressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-started-date-time))
      (common-lisp:list
       (common-lisp:cons "replicationStartedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-applications))
      (common-lisp:list
       (common-lisp:cons "totalApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wave-aggregated-status))
   common-lisp:nil))
(common-lisp:deftype wave-description () 'common-lisp:string)
(common-lisp:deftype wave-health-status () 'common-lisp:string)
(common-lisp:deftype wave-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype wave-ids-filter () '(trivial-types:proper-list wave-id))
 (common-lisp:defun make-wave-ids-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wave-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wave-name () 'common-lisp:string)
(common-lisp:deftype wave-progress-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype waves-list () '(trivial-types:proper-list wave))
 (common-lisp:defun make-waves-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wave))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun archive-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id)
   (common-lisp:declare (common-lisp:ignorable account-id application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-archive-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ArchiveApplication"
                                                        "ArchiveApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'archive-application))
(common-lisp:progn
 (common-lisp:defun archive-wave
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id wave-id)
   (common-lisp:declare (common-lisp:ignorable account-id wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-archive-wave-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ArchiveWave"
                                                        "ArchiveWave"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'archive-wave))
(common-lisp:progn
 (common-lisp:defun associate-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-ids wave-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id application-ids wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/AssociateApplications"
                                                        "AssociateApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-applications))
(common-lisp:progn
 (common-lisp:defun associate-source-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id
                     source-server-ids)
   (common-lisp:declare
    (common-lisp:ignorable account-id application-id source-server-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-source-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/AssociateSourceServers"
                                                        "AssociateSourceServers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-source-servers))
(common-lisp:progn
 (common-lisp:defun change-server-life-cycle-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id life-cycle source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id life-cycle source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-change-server-life-cycle-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ChangeServerLifeCycleState"
                                                        "ChangeServerLifeCycleState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'change-server-life-cycle-state))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id description name tags)
   (common-lisp:declare
    (common-lisp:ignorable account-id description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateApplication"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name ssm-command-config ssm-instance-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name ssm-command-config ssm-instance-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateConnector"
                                                        "CreateConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key associate-public-ip-address boot-mode
                     copy-private-ip copy-tags enable-map-auto-tagging
                     large-volume-conf launch-disposition licensing
                     map-auto-tagging-mpe-id post-launch-actions
                     small-volume-conf small-volume-max-size tags
                     target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable associate-public-ip-address boot-mode
     copy-private-ip copy-tags enable-map-auto-tagging large-volume-conf
     launch-disposition licensing map-auto-tagging-mpe-id post-launch-actions
     small-volume-conf small-volume-max-size tags
     target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateLaunchConfigurationTemplate"
                                                        "CreateLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key associate-default-security-group
                     bandwidth-throttling create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn replication-server-instance-type
                     replication-servers-security-groups-ids
                     staging-area-subnet-id staging-area-tags tags
                     use-dedicated-replication-server use-fips-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable associate-default-security-group
     bandwidth-throttling create-public-ip data-plane-routing
     default-large-staging-disk-type ebs-encryption ebs-encryption-key-arn
     replication-server-instance-type replication-servers-security-groups-ids
     staging-area-subnet-id staging-area-tags tags
     use-dedicated-replication-server use-fips-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CreateReplicationConfigurationTemplate"
                                                        "CreateReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-configuration-template))
(common-lisp:progn
 (common-lisp:defun create-wave
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id description name tags)
   (common-lisp:declare
    (common-lisp:ignorable account-id description name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-wave-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/CreateWave"
                                                        "CreateWave"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-wave))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id)
   (common-lisp:declare (common-lisp:ignorable account-id application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteApplication"
                                                        "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteConnector"
                                                        "DeleteConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id)
   (common-lisp:declare (common-lisp:ignorable account-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DeleteJob"
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-template-id)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteLaunchConfigurationTemplate"
                                                        "DeleteLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-configuration-template-id)
   (common-lisp:declare
    (common-lisp:ignorable replication-configuration-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteReplicationConfigurationTemplate"
                                                        "DeleteReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-configuration-template))
(common-lisp:progn
 (common-lisp:defun delete-source-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-source-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteSourceServer"
                                                        "DeleteSourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-source-server))
(common-lisp:progn
 (common-lisp:defun delete-vcenter-client
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vcenter-client-id)
   (common-lisp:declare (common-lisp:ignorable vcenter-client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vcenter-client-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DeleteVcenterClient"
                                                        "DeleteVcenterClient"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vcenter-client))
(common-lisp:progn
 (common-lisp:defun delete-wave
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id wave-id)
   (common-lisp:declare (common-lisp:ignorable account-id wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-wave-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DeleteWave"
                                                        "DeleteWave"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-wave))
(common-lisp:progn
 (common-lisp:defun describe-job-log-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id job-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id job-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-job-log-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeJobLogItems"
                                                        "DescribeJobLogItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-job-log-items))
(common-lisp:progn
 (common-lisp:defun describe-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/DescribeJobs"
                                                        "DescribeJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-jobs))
(common-lisp:progn
 (common-lisp:defun describe-launch-configuration-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key launch-configuration-template-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable launch-configuration-template-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-launch-configuration-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeLaunchConfigurationTemplates"
                                                        "DescribeLaunchConfigurationTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-launch-configuration-templates))
(common-lisp:progn
 (common-lisp:defun describe-replication-configuration-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     replication-configuration-template-ids)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token
     replication-configuration-template-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-configuration-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeReplicationConfigurationTemplates"
                                                        "DescribeReplicationConfigurationTemplates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-configuration-templates))
(common-lisp:progn
 (common-lisp:defun describe-source-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-source-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DescribeSourceServers"
                                                        "DescribeSourceServers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-source-servers))
(common-lisp:progn
 (common-lisp:defun describe-vcenter-clients
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vcenter-clients-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/DescribeVcenterClients"
                                                        "DescribeVcenterClients"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-vcenter-clients))
(common-lisp:progn
 (common-lisp:defun disassociate-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-ids wave-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id application-ids wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-applications-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DisassociateApplications"
                                                        "DisassociateApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-applications))
(common-lisp:progn
 (common-lisp:defun disassociate-source-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id
                     source-server-ids)
   (common-lisp:declare
    (common-lisp:ignorable account-id application-id source-server-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-source-servers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DisassociateSourceServers"
                                                        "DisassociateSourceServers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-source-servers))
(common-lisp:progn
 (common-lisp:defun disconnect-from-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disconnect-from-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/DisconnectFromService"
                                                        "DisconnectFromService"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disconnect-from-service))
(common-lisp:progn
 (common-lisp:defun finalize-cutover
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-finalize-cutover-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/FinalizeCutover"
                                                        "FinalizeCutover"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'finalize-cutover))
(common-lisp:progn
 (common-lisp:defun get-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-launch-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetLaunchConfiguration"
                                                        "GetLaunchConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-launch-configuration))
(common-lisp:progn
 (common-lisp:defun get-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/GetReplicationConfiguration"
                                                        "GetReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-replication-configuration))
(common-lisp:progn
 (common-lisp:defun initialize-service ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'mgn-request :method "POST" :path
                                "/InitializeService" :operation
                                "InitializeService"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'initialize-service))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListApplications"
                                                        "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListConnectors"
                                                        "ListConnectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-export-errors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-export-errors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListExportErrors"
                                                        "ListExportErrors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-export-errors))
(common-lisp:progn
 (common-lisp:defun list-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListExports"
                                                        "ListExports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-exports))
(common-lisp:progn
 (common-lisp:defun list-import-errors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable import-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-errors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListImportErrors"
                                                        "ListImportErrors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-import-errors))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListImports"
                                                        "ListImports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-managed-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-managed-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListManagedAccounts"
                                                        "ListManagedAccounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-managed-accounts))
(common-lisp:progn
 (common-lisp:defun list-source-server-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filters max-results next-token
                     source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id filters max-results next-token
     source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-source-server-actions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListSourceServerActions"
                                                        "ListSourceServerActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-source-server-actions))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters launch-configuration-template-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters launch-configuration-template-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-template-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ListTemplateActions"
                                                        "ListTemplateActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-template-actions))
(common-lisp:progn
 (common-lisp:defun list-waves
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-waves-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ListWaves"
                                                        "ListWaves"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-waves))
(common-lisp:progn
 (common-lisp:defun mark-as-archived
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-mark-as-archived-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/MarkAsArchived"
                                                        "MarkAsArchived"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'mark-as-archived))
(common-lisp:progn
 (common-lisp:defun pause-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-pause-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PauseReplication"
                                                        "PauseReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'pause-replication))
(common-lisp:progn
 (common-lisp:defun put-source-server-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id action-id action-name active
                     category description document-identifier document-version
                     external-parameters must-succeed-for-cutover order
                     parameters source-server-id timeout-seconds)
   (common-lisp:declare
    (common-lisp:ignorable account-id action-id action-name active category
     description document-identifier document-version external-parameters
     must-succeed-for-cutover order parameters source-server-id
     timeout-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-source-server-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutSourceServerAction"
                                                        "PutSourceServerAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-source-server-action))
(common-lisp:progn
 (common-lisp:defun put-template-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-id action-name active category
                     description document-identifier document-version
                     external-parameters launch-configuration-template-id
                     must-succeed-for-cutover operating-system order parameters
                     timeout-seconds)
   (common-lisp:declare
    (common-lisp:ignorable action-id action-name active category description
     document-identifier document-version external-parameters
     launch-configuration-template-id must-succeed-for-cutover operating-system
     order parameters timeout-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-template-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/PutTemplateAction"
                                                        "PutTemplateAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-template-action))
(common-lisp:progn
 (common-lisp:defun remove-source-server-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id action-id source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id action-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-source-server-action-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RemoveSourceServerAction"
                                                        "RemoveSourceServerAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-source-server-action))
(common-lisp:progn
 (common-lisp:defun remove-template-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-id
                     launch-configuration-template-id)
   (common-lisp:declare
    (common-lisp:ignorable action-id launch-configuration-template-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-template-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RemoveTemplateAction"
                                                        "RemoveTemplateAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-template-action))
(common-lisp:progn
 (common-lisp:defun resume-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/ResumeReplication"
                                                        "ResumeReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resume-replication))
(common-lisp:progn
 (common-lisp:defun retry-data-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-data-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RetryDataReplication"
                                                        "RetryDataReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'retry-data-replication))
(common-lisp:progn
 (common-lisp:defun start-cutover
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable account-id source-server-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-cutover-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StartCutover"
                                                        "StartCutover"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-cutover))
(common-lisp:progn
 (common-lisp:defun start-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key s3bucket s3bucket-owner s3key)
   (common-lisp:declare (common-lisp:ignorable s3bucket s3bucket-owner s3key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StartExport"
                                                        "StartExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-export))
(common-lisp:progn
 (common-lisp:defun start-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token s3bucket-source)
   (common-lisp:declare (common-lisp:ignorable client-token s3bucket-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StartImport"
                                                        "StartImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-import))
(common-lisp:progn
 (common-lisp:defun start-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StartReplication"
                                                        "StartReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-replication))
(common-lisp:progn
 (common-lisp:defun start-test
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable account-id source-server-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-test-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/StartTest"
                                                        "StartTest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-test))
(common-lisp:progn
 (common-lisp:defun stop-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-id)
   (common-lisp:declare (common-lisp:ignorable account-id source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/StopReplication"
                                                        "StopReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-replication))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun terminate-target-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id source-server-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable account-id source-server-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-terminate-target-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/TerminateTargetInstances"
                                                        "TerminateTargetInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'terminate-target-instances))
(common-lisp:progn
 (common-lisp:defun unarchive-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id)
   (common-lisp:declare (common-lisp:ignorable account-id application-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unarchive-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UnarchiveApplication"
                                                        "UnarchiveApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unarchive-application))
(common-lisp:progn
 (common-lisp:defun unarchive-wave
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id wave-id)
   (common-lisp:declare (common-lisp:ignorable account-id wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unarchive-wave-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/UnarchiveWave"
                                                        "UnarchiveWave"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unarchive-wave))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id application-id description
                     name)
   (common-lisp:declare
    (common-lisp:ignorable account-id application-id description name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateApplication"
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id name ssm-command-config)
   (common-lisp:declare
    (common-lisp:ignorable connector-id name ssm-command-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateConnector"
                                                        "UpdateConnector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-connector))
(common-lisp:progn
 (common-lisp:defun update-launch-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id boot-mode copy-private-ip
                     copy-tags enable-map-auto-tagging launch-disposition
                     licensing map-auto-tagging-mpe-id name post-launch-actions
                     source-server-id target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable account-id boot-mode copy-private-ip copy-tags
     enable-map-auto-tagging launch-disposition licensing
     map-auto-tagging-mpe-id name post-launch-actions source-server-id
     target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateLaunchConfiguration"
                                                        "UpdateLaunchConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-launch-configuration))
(common-lisp:progn
 (common-lisp:defun update-launch-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key associate-public-ip-address boot-mode
                     copy-private-ip copy-tags enable-map-auto-tagging
                     large-volume-conf launch-configuration-template-id
                     launch-disposition licensing map-auto-tagging-mpe-id
                     post-launch-actions small-volume-conf
                     small-volume-max-size
                     target-instance-type-right-sizing-method)
   (common-lisp:declare
    (common-lisp:ignorable associate-public-ip-address boot-mode
     copy-private-ip copy-tags enable-map-auto-tagging large-volume-conf
     launch-configuration-template-id launch-disposition licensing
     map-auto-tagging-mpe-id post-launch-actions small-volume-conf
     small-volume-max-size target-instance-type-right-sizing-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-launch-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateLaunchConfigurationTemplate"
                                                        "UpdateLaunchConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-launch-configuration-template))
(common-lisp:progn
 (common-lisp:defun update-replication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id
                     associate-default-security-group bandwidth-throttling
                     create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn name replicated-disks
                     replication-server-instance-type
                     replication-servers-security-groups-ids source-server-id
                     staging-area-subnet-id staging-area-tags
                     use-dedicated-replication-server use-fips-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable account-id associate-default-security-group
     bandwidth-throttling create-public-ip data-plane-routing
     default-large-staging-disk-type ebs-encryption ebs-encryption-key-arn name
     replicated-disks replication-server-instance-type
     replication-servers-security-groups-ids source-server-id
     staging-area-subnet-id staging-area-tags use-dedicated-replication-server
     use-fips-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-replication-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateReplicationConfiguration"
                                                        "UpdateReplicationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-replication-configuration))
(common-lisp:progn
 (common-lisp:defun update-replication-configuration-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn associate-default-security-group
                     bandwidth-throttling create-public-ip data-plane-routing
                     default-large-staging-disk-type ebs-encryption
                     ebs-encryption-key-arn
                     replication-configuration-template-id
                     replication-server-instance-type
                     replication-servers-security-groups-ids
                     staging-area-subnet-id staging-area-tags
                     use-dedicated-replication-server use-fips-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable arn associate-default-security-group
     bandwidth-throttling create-public-ip data-plane-routing
     default-large-staging-disk-type ebs-encryption ebs-encryption-key-arn
     replication-configuration-template-id replication-server-instance-type
     replication-servers-security-groups-ids staging-area-subnet-id
     staging-area-tags use-dedicated-replication-server use-fips-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-replication-configuration-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateReplicationConfigurationTemplate"
                                                        "UpdateReplicationConfigurationTemplate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-replication-configuration-template))
(common-lisp:progn
 (common-lisp:defun update-source-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id connector-action
                     source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id connector-action source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-source-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateSourceServer"
                                                        "UpdateSourceServer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-source-server))
(common-lisp:progn
 (common-lisp:defun update-source-server-replication-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id replication-type
                     source-server-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id replication-type source-server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-source-server-replication-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/UpdateSourceServerReplicationType"
                                                        "UpdateSourceServerReplicationType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-source-server-replication-type))
(common-lisp:progn
 (common-lisp:defun update-wave
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id description name wave-id)
   (common-lisp:declare
    (common-lisp:ignorable account-id description name wave-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-wave-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mgn-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/UpdateWave"
                                                        "UpdateWave"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-wave))
