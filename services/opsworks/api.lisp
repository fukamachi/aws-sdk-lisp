;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/opsworks/api (:use)
                             (:nicknames #:aws/opsworks)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/opsworks/api)
(common-lisp:progn
 (common-lisp:define-condition opsworks-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'opsworks-error))
(common-lisp:progn
 (common-lisp:defclass opsworks-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "opsworks" :api-version
                        "2013-02-18" :host-prefix "opsworks" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "OpsWorks_20130218" :json-version
                        "1.1"))
 (common-lisp:export 'opsworks-request))
(common-lisp:defvar *error-map*
  '(("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass agent-version common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-agent-version-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-version-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'agent-version 'make-agent-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-versions ()
   '(trivial-types:proper-list agent-version))
 (common-lisp:defun make-agent-versions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass app common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-app-app-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-app-stack-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortname :initarg :shortname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-app-shortname :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-app-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-app-description :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor struct-shape-app-data-sources :shape
                         "DataSources" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         struct-shape-app-type :shape "AppType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (app-source :initarg :app-source :initform
                         common-lisp:nil :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-app-app-source :shape "Source" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domains :initarg :domains :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-app-domains :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-ssl :initarg :enable-ssl :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-app-enable-ssl :shape "Boolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ssl-configuration :initarg :ssl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ssl-configuration common-lisp:null)
                         :accessor struct-shape-app-ssl-configuration :shape
                         "SslConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or app-attributes common-lisp:null)
                         :accessor struct-shape-app-attributes :shape
                         "AppAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-app-created-at :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-app-environment :shape
                         "EnvironmentVariables" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-app (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'app
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'app 'make-app))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortname))
      (common-lisp:list
       (common-lisp:cons "Shortname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-source))
      (common-lisp:list
       (common-lisp:cons "AppSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ssl))
      (common-lisp:list
       (common-lisp:cons "EnableSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-configuration))
      (common-lisp:list
       (common-lisp:cons "SslConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-app-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype app-attributes-keys () 'common-lisp:string)
(common-lisp:deftype app-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype apps () '(trivial-types:proper-list app))
 (common-lisp:defun make-apps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app))
   aws-sdk/generator/shape::members))
(common-lisp:deftype architecture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assign-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-assign-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         (common-lisp:error ":layer-ids is required") :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-assign-instance-request-layer-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assign-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assign-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assign-instance-request 'make-assign-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assign-volume-request common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         (common-lisp:error ":volume-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-assign-volume-request-volume-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-assign-volume-request-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-assign-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'assign-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'assign-volume-request 'make-assign-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assign-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assign-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assign-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-elastic-ip-request common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         (common-lisp:error ":elastic-ip is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-elastic-ip-request-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-associate-elastic-ip-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-elastic-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-elastic-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-elastic-ip-request
                    'make-associate-elastic-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-elastic-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-elastic-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-elastic-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attach-elastic-load-balancer-request common-lisp:nil
                       ((elastic-load-balancer-name :initarg
                         :elastic-load-balancer-name :initform
                         (common-lisp:error
                          ":elastic-load-balancer-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-attach-elastic-load-balancer-request-elastic-load-balancer-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attach-elastic-load-balancer-request-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attach-elastic-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'attach-elastic-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attach-elastic-load-balancer-request
                    'make-attach-elastic-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-elastic-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-elastic-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "ElasticLoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-elastic-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-thresholds common-lisp:nil
                       ((instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (thresholds-wait-time :initarg :thresholds-wait-time
                         :initform common-lisp:nil :type
                         (common-lisp:or minute common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-thresholds-wait-time
                         :shape "Minute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ignore-metrics-time :initarg :ignore-metrics-time
                         :initform common-lisp:nil :type
                         (common-lisp:or minute common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-ignore-metrics-time
                         :shape "Minute" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu-threshold :initarg :cpu-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-cpu-threshold
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (memory-threshold :initarg :memory-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-memory-threshold
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-threshold :initarg :load-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-auto-scaling-thresholds-load-threshold
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alarms :initarg :alarms :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-auto-scaling-thresholds-alarms
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-scaling-thresholds
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-thresholds
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-thresholds 'make-auto-scaling-thresholds))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-thresholds))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-thresholds))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'thresholds-wait-time))
      (common-lisp:list
       (common-lisp:cons "ThresholdsWaitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-metrics-time))
      (common-lisp:list
       (common-lisp:cons "IgnoreMetricsTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-threshold))
      (common-lisp:list
       (common-lisp:cons "CpuThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-threshold))
      (common-lisp:list
       (common-lisp:cons "MemoryThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-threshold))
      (common-lisp:list
       (common-lisp:cons "LoadThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-thresholds))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass block-device-mapping common-lisp:nil
                       ((device-name :initarg :device-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-block-device-mapping-device-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (no-device :initarg :no-device :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-block-device-mapping-no-device :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtual-name :initarg :virtual-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-block-device-mapping-virtual-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs :initarg :ebs :initform common-lisp:nil :type
                         (common-lisp:or ebs-block-device common-lisp:null)
                         :accessor struct-shape-block-device-mapping-ebs :shape
                         "EbsBlockDevice" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-block-device-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'block-device-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'block-device-mapping 'make-block-device-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block-device-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-device))
      (common-lisp:list
       (common-lisp:cons "NoDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-name))
      (common-lisp:list
       (common-lisp:cons "VirtualName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs))
      (common-lisp:list
       (common-lisp:cons "Ebs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block-device-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype block-device-mappings ()
   '(trivial-types:proper-list block-device-mapping))
 (common-lisp:defun make-block-device-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block-device-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass chef-configuration common-lisp:nil
                       ((manage-berkshelf :initarg :manage-berkshelf :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-chef-configuration-manage-berkshelf
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (berkshelf-version :initarg :berkshelf-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-chef-configuration-berkshelf-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-chef-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'chef-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'chef-configuration 'make-chef-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chef-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chef-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manage-berkshelf))
      (common-lisp:list
       (common-lisp:cons "ManageBerkshelf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'berkshelf-version))
      (common-lisp:list
       (common-lisp:cons "BerkshelfVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chef-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-stack-request common-lisp:nil
                       ((source-stack-id :initarg :source-stack-id :initform
                         (common-lisp:error ":source-stack-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-source-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-clone-stack-request-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-clone-stack-request-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-attributes common-lisp:null)
                         :accessor struct-shape-clone-stack-request-attributes
                         :shape "StackAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         (common-lisp:error ":service-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-service-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-instance-profile-arn :initarg
                         :default-instance-profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-default-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-os :initarg :default-os :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-default-os :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname-theme :initarg :hostname-theme :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-hostname-theme :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-availability-zone :initarg
                         :default-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-default-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-subnet-id :initarg :default-subnet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-default-subnet-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-custom-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (chef-configuration :initarg :chef-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or chef-configuration common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-chef-configuration
                         :shape "ChefConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-custom-cookbooks :initarg :use-custom-cookbooks
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-clone-stack-request-use-custom-cookbooks
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-opsworks-security-groups :initarg
                         :use-opsworks-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-clone-stack-request-use-opsworks-security-groups
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-cookbooks-source :initarg
                         :custom-cookbooks-source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-custom-cookbooks-source
                         :shape "Source" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-ssh-key-name :initarg :default-ssh-key-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-default-ssh-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clone-permissions :initarg :clone-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-clone-stack-request-clone-permissions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clone-app-ids :initarg :clone-app-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-clone-stack-request-clone-app-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-root-device-type :initarg
                         :default-root-device-type :initform common-lisp:nil
                         :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor
                         struct-shape-clone-stack-request-default-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-clone-stack-request-agent-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-stack-request 'make-clone-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clone-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clone-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-stack-id))
      (common-lisp:list
       (common-lisp:cons "SourceStackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-os))
      (common-lisp:list
       (common-lisp:cons "DefaultOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-theme))
      (common-lisp:list
       (common-lisp:cons "HostnameTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-availability-zone))
      (common-lisp:list
       (common-lisp:cons "DefaultAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-subnet-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chef-configuration))
      (common-lisp:list
       (common-lisp:cons "ChefConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-custom-cookbooks))
      (common-lisp:list
       (common-lisp:cons "UseCustomCookbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-opsworks-security-groups))
      (common-lisp:list
       (common-lisp:cons "UseOpsworksSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-cookbooks-source))
      (common-lisp:list
       (common-lisp:cons "CustomCookbooksSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "DefaultSshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-permissions))
      (common-lisp:list
       (common-lisp:cons "ClonePermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clone-app-ids))
      (common-lisp:list
       (common-lisp:cons "CloneAppIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-root-device-type))
      (common-lisp:list
       (common-lisp:cons "DefaultRootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clone-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-stack-result common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-clone-stack-result-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-stack-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-stack-result 'make-clone-stack-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clone-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clone-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clone-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-configuration-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-streams :initarg :log-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-log-streams
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-configuration-log-streams
                         :shape "CloudWatchLogsLogStreams" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cloud-watch-logs-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-configuration
                    'make-cloud-watch-logs-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-streams))
      (common-lisp:list
       (common-lisp:cons "LogStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-configuration))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-logs-encoding () 'common-lisp:string)
(common-lisp:deftype cloud-watch-logs-initial-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-log-stream common-lisp:nil
                       ((log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-log-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datetime-format :initarg :datetime-format :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-datetime-format
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-zone :initarg :time-zone :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-time-zone
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-log-stream-time-zone
                         :shape "CloudWatchLogsTimeZone" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (file :initarg :file :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-file :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (file-fingerprint-lines :initarg
                         :file-fingerprint-lines :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-log-stream-file-fingerprint-lines
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-line-start-pattern :initarg
                         :multi-line-start-pattern :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-log-stream-multi-line-start-pattern
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initial-position :initarg :initial-position :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-initial-position
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-log-stream-initial-position
                         :shape "CloudWatchLogsInitialPosition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encoding :initarg :encoding :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-logs-encoding
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-logs-log-stream-encoding
                         :shape "CloudWatchLogsEncoding" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (buffer-duration :initarg :buffer-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-buffer-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-count :initarg :batch-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-batch-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-size :initarg :batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-cloud-watch-logs-log-stream-batch-size
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-logs-log-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs-log-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-log-stream
                    'make-cloud-watch-logs-log-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datetime-format))
      (common-lisp:list
       (common-lisp:cons "DatetimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-zone))
      (common-lisp:list
       (common-lisp:cons "TimeZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "File"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-fingerprint-lines))
      (common-lisp:list
       (common-lisp:cons "FileFingerprintLines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-line-start-pattern))
      (common-lisp:list
       (common-lisp:cons "MultiLineStartPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-position))
      (common-lisp:list
       (common-lisp:cons "InitialPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "Encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-duration))
      (common-lisp:list
       (common-lisp:cons "BufferDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-count))
      (common-lisp:list
       (common-lisp:cons "BatchCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-watch-logs-log-streams ()
   '(trivial-types:proper-list cloud-watch-logs-log-stream))
 (common-lisp:defun make-cloud-watch-logs-log-streams
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-watch-logs-log-stream))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-watch-logs-time-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass command common-lisp:nil
                       ((command-id :initarg :command-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-command-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-deployment-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-command-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (acknowledged-at :initarg :acknowledged-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-command-acknowledged-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-command-completed-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-command-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exit-code :initarg :exit-code :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-command-exit-code :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-url :initarg :log-url :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-command-log-url :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-command-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-command
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'command
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'command 'make-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acknowledged-at))
      (common-lisp:list
       (common-lisp:cons "AcknowledgedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "CompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-code))
      (common-lisp:list
       (common-lisp:cons "ExitCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-url))
      (common-lisp:list
       (common-lisp:cons "LogUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype commands () '(trivial-types:proper-list command))
 (common-lisp:defun make-commands
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-app-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-app-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortname :initarg :shortname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-app-request-shortname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-app-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-app-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor struct-shape-create-app-request-data-sources
                         :shape "DataSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         struct-shape-create-app-request-type :shape "AppType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-source :initarg :app-source :initform
                         common-lisp:nil :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-create-app-request-app-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domains :initarg :domains :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-create-app-request-domains
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-ssl :initarg :enable-ssl :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-app-request-enable-ssl :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-configuration :initarg :ssl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ssl-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-app-request-ssl-configuration
                         :shape "SslConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or app-attributes common-lisp:null)
                         :accessor struct-shape-create-app-request-attributes
                         :shape "AppAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-create-app-request-environment
                         :shape "EnvironmentVariables" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-app-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortname))
      (common-lisp:list
       (common-lisp:cons "Shortname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-source))
      (common-lisp:list
       (common-lisp:cons "AppSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ssl))
      (common-lisp:list
       (common-lisp:cons "EnableSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-configuration))
      (common-lisp:list
       (common-lisp:cons "SslConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-result common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-app-result-app-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-app-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-app-result 'make-create-app-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-deployment-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-request-app-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-ids :initarg :instance-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-create-deployment-request-instance-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-create-deployment-request-layer-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform
                         (common-lisp:error ":command is required") :type
                         (common-lisp:or deployment-command common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-request-command :shape
                         "DeploymentCommand" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-deployment-request-comment :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-deployment-request-custom-json
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-deployment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-deployment-request
                    'make-create-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-deployment-result common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-deployment-result-deployment-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-deployment-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-deployment-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-deployment-result 'make-create-deployment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-deployment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         (common-lisp:error ":layer-ids is required") :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-create-instance-request-layer-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-type :initarg :auto-scaling-type
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-type common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-auto-scaling-type
                         :shape "AutoScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-hostname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (os :initarg :os :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-os :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ami-id :initarg :ami-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-instance-request-ami-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-key-name :initarg :ssh-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-ssh-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (virtualization-type :initarg :virtualization-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-virtualization-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-subnet-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-architecture
                         :shape "Architecture" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-device-type :initarg :root-device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (block-device-mappings :initarg :block-device-mappings
                         :initform common-lisp:nil :type
                         (common-lisp:or block-device-mappings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-block-device-mappings
                         :shape "BlockDeviceMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-instance-request-install-updates-on-boot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-instance-request-ebs-optimized
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-request-agent-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenancy :initarg :tenancy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-instance-request-tenancy
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-request 'make-create-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-type))
      (common-lisp:list
       (common-lisp:cons "AutoScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "SshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-type))
      (common-lisp:list
       (common-lisp:cons "RootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-result common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-result-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-result 'make-create-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-layer-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-layer-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or layer-type common-lisp:null) :accessor
                         struct-shape-create-layer-request-type :shape
                         "LayerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-layer-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortname :initarg :shortname :initform
                         (common-lisp:error ":shortname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-layer-request-shortname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-attributes common-lisp:null)
                         :accessor struct-shape-create-layer-request-attributes
                         :shape "LayerAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :cloud-watch-logs-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-cloud-watch-logs-configuration
                         :shape "CloudWatchLogsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-instance-profile-arn :initarg
                         :custom-instance-profile-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-custom-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-layer-request-custom-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-security-group-ids :initarg
                         :custom-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-custom-security-group-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (packages :initarg :packages :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-create-layer-request-packages
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-volume-configurations
                         :shape "VolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-auto-healing :initarg :enable-auto-healing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-layer-request-enable-auto-healing
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-assign-elastic-ips :initarg
                         :auto-assign-elastic-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-auto-assign-elastic-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-assign-public-ips :initarg
                         :auto-assign-public-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-auto-assign-public-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-recipes :initarg :custom-recipes :initform
                         common-lisp:nil :type
                         (common-lisp:or recipes common-lisp:null) :accessor
                         struct-shape-create-layer-request-custom-recipes
                         :shape "Recipes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-install-updates-on-boot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-ebs-optimized-instances :initarg
                         :use-ebs-optimized-instances :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-use-ebs-optimized-instances
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-event-configuration :initarg
                         :lifecycle-event-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-event-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-layer-request-lifecycle-event-configuration
                         :shape "LifecycleEventConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-layer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-layer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-layer-request 'make-create-layer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-layer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-layer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortname))
      (common-lisp:list
       (common-lisp:cons "Shortname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "CustomInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "Packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "VolumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-healing))
      (common-lisp:list
       (common-lisp:cons "EnableAutoHealing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-elastic-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignElasticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-public-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignPublicIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-recipes))
      (common-lisp:list
       (common-lisp:cons "CustomRecipes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-ebs-optimized-instances))
      (common-lisp:list
       (common-lisp:cons "UseEbsOptimizedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleEventConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-layer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-layer-result common-lisp:nil
                       ((layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-layer-result-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-layer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-layer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-layer-result 'make-create-layer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-layer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-layer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-layer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-stack-request-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-attributes common-lisp:null)
                         :accessor struct-shape-create-stack-request-attributes
                         :shape "StackAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         (common-lisp:error ":service-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-service-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-instance-profile-arn :initarg
                         :default-instance-profile-arn :initform
                         (common-lisp:error
                          ":default-instance-profile-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-default-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-os :initarg :default-os :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-default-os :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname-theme :initarg :hostname-theme :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-hostname-theme
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-availability-zone :initarg
                         :default-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-default-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-subnet-id :initarg :default-subnet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-default-subnet-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-custom-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (chef-configuration :initarg :chef-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or chef-configuration common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-chef-configuration
                         :shape "ChefConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-custom-cookbooks :initarg :use-custom-cookbooks
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-stack-request-use-custom-cookbooks
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-opsworks-security-groups :initarg
                         :use-opsworks-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-stack-request-use-opsworks-security-groups
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-cookbooks-source :initarg
                         :custom-cookbooks-source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-custom-cookbooks-source
                         :shape "Source" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-ssh-key-name :initarg :default-ssh-key-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-default-ssh-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-root-device-type :initarg
                         :default-root-device-type :initform common-lisp:nil
                         :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor
                         struct-shape-create-stack-request-default-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-stack-request-agent-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stack-request 'make-create-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-os))
      (common-lisp:list
       (common-lisp:cons "DefaultOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-theme))
      (common-lisp:list
       (common-lisp:cons "HostnameTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-availability-zone))
      (common-lisp:list
       (common-lisp:cons "DefaultAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-subnet-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chef-configuration))
      (common-lisp:list
       (common-lisp:cons "ChefConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-custom-cookbooks))
      (common-lisp:list
       (common-lisp:cons "UseCustomCookbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-opsworks-security-groups))
      (common-lisp:list
       (common-lisp:cons "UseOpsworksSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-cookbooks-source))
      (common-lisp:list
       (common-lisp:cons "CustomCookbooksSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "DefaultSshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-root-device-type))
      (common-lisp:list
       (common-lisp:cons "DefaultRootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-result common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-create-stack-result-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-stack-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-stack-result 'make-create-stack-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-request common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         (common-lisp:error ":iam-user-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-username :initarg :ssh-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-ssh-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-ssh-public-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-self-management :initarg :allow-self-management
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-user-profile-request-allow-self-management
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-request
                    'make-create-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-username))
      (common-lisp:list
       (common-lisp:cons "SshUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "SshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-self-management))
      (common-lisp:list
       (common-lisp:cons "AllowSelfManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-profile-result common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-user-profile-result-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-result
                    'make-create-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype daily-auto-scaling-schedule () 'common-lisp:hash-table)
 (common-lisp:defun make-daily-auto-scaling-schedule
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-source-database-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-sources () '(trivial-types:proper-list data-source))
 (common-lisp:defun make-data-sources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-app-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-app-request-app-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-app-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-elastic-ip :initarg :delete-elastic-ip
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-instance-request-delete-elastic-ip
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-volumes :initarg :delete-volumes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-instance-request-delete-volumes
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-request 'make-delete-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-elastic-ip))
      (common-lisp:list
       (common-lisp:cons "DeleteElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-volumes))
      (common-lisp:list
       (common-lisp:cons "DeleteVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-layer-request common-lisp:nil
                       ((layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-layer-request-layer-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-layer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-layer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-layer-request 'make-delete-layer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-layer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-layer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-layer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-stack-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stack-request 'make-delete-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-profile-request common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         (common-lisp:error ":iam-user-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-user-profile-request-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-profile-request
                    'make-delete-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-deployment-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-deployment-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-deployment-app-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-deployment-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-at :initarg :completed-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-deployment-completed-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-deployment-duration :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-iam-user-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-deployment-comment :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type
                         (common-lisp:or deployment-command common-lisp:null)
                         :accessor struct-shape-deployment-command :shape
                         "DeploymentCommand" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-deployment-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deployment-custom-json :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-ids :initarg :instance-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-deployment-instance-ids :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deployment 'make-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "CompletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deployment-command common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or deployment-command-name
                                         common-lisp:null)
                         :accessor struct-shape-deployment-command-name :shape
                         "DeploymentCommandName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (args :initarg :args :initform common-lisp:nil :type
                         (common-lisp:or deployment-command-args
                                         common-lisp:null)
                         :accessor struct-shape-deployment-command-args :shape
                         "DeploymentCommandArgs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deployment-command
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-command
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deployment-command 'make-deployment-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-command-args () 'common-lisp:hash-table)
 (common-lisp:defun make-deployment-command-args
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype deployment-command-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype deployments () '(trivial-types:proper-list deployment))
 (common-lisp:defun make-deployments
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass deregister-ecs-cluster-request common-lisp:nil
                       ((ecs-cluster-arn :initarg :ecs-cluster-arn :initform
                         (common-lisp:error ":ecs-cluster-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deregister-ecs-cluster-request-ecs-cluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-ecs-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-ecs-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-ecs-cluster-request
                    'make-deregister-ecs-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-ecs-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-ecs-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-ecs-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-elastic-ip-request common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         (common-lisp:error ":elastic-ip is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-elastic-ip-request-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-elastic-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-elastic-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-elastic-ip-request
                    'make-deregister-elastic-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-elastic-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-elastic-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-elastic-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-instance-request
                    'make-deregister-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-rds-db-instance-request common-lisp:nil
                       ((rds-db-instance-arn :initarg :rds-db-instance-arn
                         :initform
                         (common-lisp:error ":rds-db-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-deregister-rds-db-instance-request-rds-db-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-rds-db-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-rds-db-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-rds-db-instance-request
                    'make-deregister-rds-db-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-rds-db-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-rds-db-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-instance-arn))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-rds-db-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-volume-request common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         (common-lisp:error ":volume-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deregister-volume-request-volume-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-volume-request
                    'make-deregister-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agent-versions-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-agent-versions-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-agent-versions-request-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agent-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-agent-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agent-versions-request
                    'make-describe-agent-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agent-versions-result common-lisp:nil
                       ((agent-versions :initarg :agent-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-versions common-lisp:null)
                         :accessor
                         struct-shape-describe-agent-versions-result-agent-versions
                         :shape "AgentVersions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agent-versions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-agent-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agent-versions-result
                    'make-describe-agent-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-versions))
      (common-lisp:list
       (common-lisp:cons "AgentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agent-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-apps-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-apps-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-ids :initarg :app-ids :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-describe-apps-request-app-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-apps-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-apps-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-apps-request 'make-describe-apps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-apps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-ids))
      (common-lisp:list
       (common-lisp:cons "AppIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-apps-result common-lisp:nil
                       ((apps :initarg :apps :initform common-lisp:nil :type
                         (common-lisp:or apps common-lisp:null) :accessor
                         struct-shape-describe-apps-result-apps :shape "Apps"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-apps-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-apps-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-apps-result 'make-describe-apps-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-apps-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-apps-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps))
      (common-lisp:list
       (common-lisp:cons "Apps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-apps-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-commands-request common-lisp:nil
                       ((deployment-id :initarg :deployment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-commands-request-deployment-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-commands-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command-ids :initarg :command-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-commands-request-command-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-commands-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-commands-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-commands-request
                    'make-describe-commands-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "DeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-ids))
      (common-lisp:list
       (common-lisp:cons "CommandIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-commands-result common-lisp:nil
                       ((commands :initarg :commands :initform common-lisp:nil
                         :type (common-lisp:or commands common-lisp:null)
                         :accessor
                         struct-shape-describe-commands-result-commands :shape
                         "Commands" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-commands-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-commands-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-commands-result 'make-describe-commands-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commands))
      (common-lisp:list
       (common-lisp:cons "Commands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-commands-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deployments-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-deployments-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-deployments-request-app-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-ids :initarg :deployment-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-deployments-request-deployment-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-deployments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-deployments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-deployments-request
                    'make-describe-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-ids))
      (common-lisp:list
       (common-lisp:cons "DeploymentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-deployments-result common-lisp:nil
                       ((deployments :initarg :deployments :initform
                         common-lisp:nil :type
                         (common-lisp:or deployments common-lisp:null)
                         :accessor
                         struct-shape-describe-deployments-result-deployments
                         :shape "Deployments" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-deployments-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-deployments-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-deployments-result
                    'make-describe-deployments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "Deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-deployments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ecs-clusters-request common-lisp:nil
                       ((ecs-cluster-arns :initarg :ecs-cluster-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-ecs-clusters-request-ecs-cluster-arns
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-ecs-clusters-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-ecs-clusters-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-ecs-clusters-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-ecs-clusters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-ecs-clusters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-ecs-clusters-request
                    'make-describe-ecs-clusters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arns))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ecs-clusters-result common-lisp:nil
                       ((ecs-clusters :initarg :ecs-clusters :initform
                         common-lisp:nil :type
                         (common-lisp:or ecs-clusters common-lisp:null)
                         :accessor
                         struct-shape-describe-ecs-clusters-result-ecs-clusters
                         :shape "EcsClusters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-ecs-clusters-result-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-ecs-clusters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ecs-clusters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-ecs-clusters-result
                    'make-describe-ecs-clusters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-clusters))
      (common-lisp:list
       (common-lisp:cons "EcsClusters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ecs-clusters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elastic-ips-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-elastic-ips-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-elastic-ips-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ips :initarg :ips :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-elastic-ips-request-ips :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elastic-ips-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-elastic-ips-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-ips-request
                    'make-describe-elastic-ips-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ips))
      (common-lisp:list
       (common-lisp:cons "Ips"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elastic-ips-result common-lisp:nil
                       ((elastic-ips :initarg :elastic-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or elastic-ips common-lisp:null)
                         :accessor
                         struct-shape-describe-elastic-ips-result-elastic-ips
                         :shape "ElasticIps" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elastic-ips-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-elastic-ips-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-ips-result
                    'make-describe-elastic-ips-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ips))
      (common-lisp:list
       (common-lisp:cons "ElasticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-ips-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elastic-load-balancers-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-elastic-load-balancers-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-elastic-load-balancers-request-layer-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elastic-load-balancers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elastic-load-balancers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-load-balancers-request
                    'make-describe-elastic-load-balancers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elastic-load-balancers-result common-lisp:nil
                       ((elastic-load-balancers :initarg
                         :elastic-load-balancers :initform common-lisp:nil
                         :type
                         (common-lisp:or elastic-load-balancers
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elastic-load-balancers-result-elastic-load-balancers
                         :shape "ElasticLoadBalancers" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elastic-load-balancers-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elastic-load-balancers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elastic-load-balancers-result
                    'make-describe-elastic-load-balancers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-load-balancers))
      (common-lisp:list
       (common-lisp:cons "ElasticLoadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elastic-load-balancers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-instances-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-instances-request-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-ids :initarg :instance-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-instances-request-instance-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-instances-request
                    'make-describe-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instances-result common-lisp:nil
                       ((instances :initarg :instances :initform
                         common-lisp:nil :type
                         (common-lisp:or instances common-lisp:null) :accessor
                         struct-shape-describe-instances-result-instances
                         :shape "Instances" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-instances-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-instances-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-instances-result
                    'make-describe-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-layers-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-layers-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-layers-request-layer-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-layers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-layers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-layers-request 'make-describe-layers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-layers-result common-lisp:nil
                       ((layers :initarg :layers :initform common-lisp:nil
                         :type (common-lisp:or layers common-lisp:null)
                         :accessor struct-shape-describe-layers-result-layers
                         :shape "Layers" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-layers-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-layers-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-layers-result 'make-describe-layers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers))
      (common-lisp:list
       (common-lisp:cons "Layers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-layers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-based-auto-scaling-request common-lisp:nil
                       ((layer-ids :initarg :layer-ids :initform
                         (common-lisp:error ":layer-ids is required") :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-load-based-auto-scaling-request-layer-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-based-auto-scaling-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-based-auto-scaling-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-based-auto-scaling-request
                    'make-describe-load-based-auto-scaling-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-load-based-auto-scaling-result common-lisp:nil
                       ((load-based-auto-scaling-configurations :initarg
                         :load-based-auto-scaling-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or load-based-auto-scaling-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-load-based-auto-scaling-result-load-based-auto-scaling-configurations
                         :shape "LoadBasedAutoScalingConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-load-based-auto-scaling-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-load-based-auto-scaling-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-load-based-auto-scaling-result
                    'make-describe-load-based-auto-scaling-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'load-based-auto-scaling-configurations))
      (common-lisp:list
       (common-lisp:cons "LoadBasedAutoScalingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-load-based-auto-scaling-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-my-user-profile-result common-lisp:nil
                       ((user-profile :initarg :user-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or self-user-profile common-lisp:null)
                         :accessor
                         struct-shape-describe-my-user-profile-result-user-profile
                         :shape "SelfUserProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-my-user-profile-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-my-user-profile-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-my-user-profile-result
                    'make-describe-my-user-profile-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-my-user-profile-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-my-user-profile-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile))
      (common-lisp:list
       (common-lisp:cons "UserProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-my-user-profile-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-operating-systems-response common-lisp:nil
                       ((operating-systems :initarg :operating-systems
                         :initform common-lisp:nil :type
                         (common-lisp:or operating-systems common-lisp:null)
                         :accessor
                         struct-shape-describe-operating-systems-response-operating-systems
                         :shape "OperatingSystems" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-operating-systems-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-operating-systems-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-operating-systems-response
                    'make-describe-operating-systems-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-operating-systems-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-operating-systems-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-systems))
      (common-lisp:list
       (common-lisp:cons "OperatingSystems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-operating-systems-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-permissions-request common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-permissions-request-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-permissions-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-permissions-request
                    'make-describe-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-permissions-result common-lisp:nil
                       ((permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions common-lisp:null)
                         :accessor
                         struct-shape-describe-permissions-result-permissions
                         :shape "Permissions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-permissions-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-permissions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-permissions-result
                    'make-describe-permissions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-permissions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-raid-arrays-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-raid-arrays-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-raid-arrays-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (raid-array-ids :initarg :raid-array-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-raid-arrays-request-raid-array-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-raid-arrays-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-raid-arrays-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-raid-arrays-request
                    'make-describe-raid-arrays-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-array-ids))
      (common-lisp:list
       (common-lisp:cons "RaidArrayIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-raid-arrays-result common-lisp:nil
                       ((raid-arrays :initarg :raid-arrays :initform
                         common-lisp:nil :type
                         (common-lisp:or raid-arrays common-lisp:null)
                         :accessor
                         struct-shape-describe-raid-arrays-result-raid-arrays
                         :shape "RaidArrays" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-raid-arrays-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-raid-arrays-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-raid-arrays-result
                    'make-describe-raid-arrays-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-arrays))
      (common-lisp:list
       (common-lisp:cons "RaidArrays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-raid-arrays-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rds-db-instances-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-rds-db-instances-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-db-instance-arns :initarg :rds-db-instance-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-rds-db-instances-request-rds-db-instance-arns
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rds-db-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rds-db-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rds-db-instances-request
                    'make-describe-rds-db-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-db-instance-arns))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rds-db-instances-result common-lisp:nil
                       ((rds-db-instances :initarg :rds-db-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-instances common-lisp:null)
                         :accessor
                         struct-shape-describe-rds-db-instances-result-rds-db-instances
                         :shape "RdsDbInstances" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rds-db-instances-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rds-db-instances-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rds-db-instances-result
                    'make-describe-rds-db-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-instances))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rds-db-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-errors-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-service-errors-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-service-errors-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-error-ids :initarg :service-error-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-service-errors-request-service-error-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-service-errors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-errors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-service-errors-request
                    'make-describe-service-errors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-error-ids))
      (common-lisp:list
       (common-lisp:cons "ServiceErrorIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-errors-result common-lisp:nil
                       ((service-errors :initarg :service-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or service-errors common-lisp:null)
                         :accessor
                         struct-shape-describe-service-errors-result-service-errors
                         :shape "ServiceErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-service-errors-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-service-errors-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-service-errors-result
                    'make-describe-service-errors-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-errors))
      (common-lisp:list
       (common-lisp:cons "ServiceErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-errors-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-provisioning-parameters-request
                       common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-stack-provisioning-parameters-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stack-provisioning-parameters-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-provisioning-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stack-provisioning-parameters-request
                    'make-describe-stack-provisioning-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-provisioning-parameters-result
                       common-lisp:nil
                       ((agent-installer-url :initarg :agent-installer-url
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-stack-provisioning-parameters-result-agent-installer-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         struct-shape-describe-stack-provisioning-parameters-result-parameters
                         :shape "Parameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stack-provisioning-parameters-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-provisioning-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stack-provisioning-parameters-result
                    'make-describe-stack-provisioning-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-installer-url))
      (common-lisp:list
       (common-lisp:cons "AgentInstallerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-provisioning-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-summary-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-stack-summary-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stack-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stack-summary-request
                    'make-describe-stack-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-summary-result common-lisp:nil
                       ((stack-summary :initarg :stack-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-summary common-lisp:null)
                         :accessor
                         struct-shape-describe-stack-summary-result-stack-summary
                         :shape "StackSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stack-summary-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-summary-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stack-summary-result
                    'make-describe-stack-summary-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-summary))
      (common-lisp:list
       (common-lisp:cons "StackSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-summary-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-request common-lisp:nil
                       ((stack-ids :initarg :stack-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-stacks-request-stack-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stacks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-request 'make-describe-stacks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-ids))
      (common-lisp:list
       (common-lisp:cons "StackIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-result common-lisp:nil
                       ((stacks :initarg :stacks :initform common-lisp:nil
                         :type (common-lisp:or stacks common-lisp:null)
                         :accessor struct-shape-describe-stacks-result-stacks
                         :shape "Stacks" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-stacks-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-result 'make-describe-stacks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stacks))
      (common-lisp:list
       (common-lisp:cons "Stacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-time-based-auto-scaling-request common-lisp:nil
                       ((instance-ids :initarg :instance-ids :initform
                         (common-lisp:error ":instance-ids is required") :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-time-based-auto-scaling-request-instance-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-time-based-auto-scaling-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-time-based-auto-scaling-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-time-based-auto-scaling-request
                    'make-describe-time-based-auto-scaling-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-time-based-auto-scaling-result common-lisp:nil
                       ((time-based-auto-scaling-configurations :initarg
                         :time-based-auto-scaling-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or time-based-auto-scaling-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-time-based-auto-scaling-result-time-based-auto-scaling-configurations
                         :shape "TimeBasedAutoScalingConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-time-based-auto-scaling-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-time-based-auto-scaling-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-time-based-auto-scaling-result
                    'make-describe-time-based-auto-scaling-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-based-auto-scaling-configurations))
      (common-lisp:list
       (common-lisp:cons "TimeBasedAutoScalingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-based-auto-scaling-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-profiles-request common-lisp:nil
                       ((iam-user-arns :initarg :iam-user-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-user-profiles-request-iam-user-arns
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-profiles-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-profiles-request
                    'make-describe-user-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arns))
      (common-lisp:list
       (common-lisp:cons "IamUserArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-profiles-result common-lisp:nil
                       ((user-profiles :initarg :user-profiles :initform
                         common-lisp:nil :type
                         (common-lisp:or user-profiles common-lisp:null)
                         :accessor
                         struct-shape-describe-user-profiles-result-user-profiles
                         :shape "UserProfiles" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-user-profiles-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-user-profiles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-user-profiles-result
                    'make-describe-user-profiles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profiles))
      (common-lisp:list
       (common-lisp:cons "UserProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profiles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-volumes-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-volumes-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-volumes-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (raid-array-id :initarg :raid-array-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-volumes-request-raid-array-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-ids :initarg :volume-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-describe-volumes-request-volume-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-volumes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-volumes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-request 'make-describe-volumes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-array-id))
      (common-lisp:list
       (common-lisp:cons "RaidArrayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-ids))
      (common-lisp:list
       (common-lisp:cons "VolumeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-volumes-result common-lisp:nil
                       ((volumes :initarg :volumes :initform common-lisp:nil
                         :type (common-lisp:or volumes common-lisp:null)
                         :accessor struct-shape-describe-volumes-result-volumes
                         :shape "Volumes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-volumes-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-volumes-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-volumes-result 'make-describe-volumes-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volumes))
      (common-lisp:list
       (common-lisp:cons "Volumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-volumes-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detach-elastic-load-balancer-request common-lisp:nil
                       ((elastic-load-balancer-name :initarg
                         :elastic-load-balancer-name :initform
                         (common-lisp:error
                          ":elastic-load-balancer-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-detach-elastic-load-balancer-request-elastic-load-balancer-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detach-elastic-load-balancer-request-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detach-elastic-load-balancer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'detach-elastic-load-balancer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detach-elastic-load-balancer-request
                    'make-detach-elastic-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-elastic-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-elastic-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "ElasticLoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-elastic-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-elastic-ip-request common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         (common-lisp:error ":elastic-ip is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-disassociate-elastic-ip-request-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-elastic-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-elastic-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-elastic-ip-request
                    'make-disassociate-elastic-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-elastic-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-elastic-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-elastic-ip-request))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass ebs-block-device common-lisp:nil
                       ((snapshot-id :initarg :snapshot-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ebs-block-device-snapshot-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ebs-block-device-iops :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-size :initarg :volume-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-ebs-block-device-volume-size :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor struct-shape-ebs-block-device-volume-type
                         :shape "VolumeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-on-termination :initarg :delete-on-termination
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-ebs-block-device-delete-on-termination
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-block-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-block-device
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-block-device 'make-ebs-block-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-block-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-on-termination))
      (common-lisp:list
       (common-lisp:cons "DeleteOnTermination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-block-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-cluster common-lisp:nil
                       ((ecs-cluster-arn :initarg :ecs-cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-cluster-ecs-cluster-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ecs-cluster-name :initarg :ecs-cluster-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ecs-cluster-ecs-cluster-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ecs-cluster-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-at :initarg :registered-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-ecs-cluster-registered-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-cluster
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-cluster
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ecs-cluster 'make-ecs-cluster))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-cluster))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-cluster))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-name))
      (common-lisp:list
       (common-lisp:cons "EcsClusterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "RegisteredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-cluster))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ecs-clusters () '(trivial-types:proper-list ecs-cluster))
 (common-lisp:defun make-ecs-clusters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ecs-cluster))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass elastic-ip common-lisp:nil
                       ((ip :initarg :ip :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elastic-ip-ip :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elastic-ip-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain :initarg :domain :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-ip-domain :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-ip-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elastic-ip-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elastic-ip
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elastic-ip
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'elastic-ip 'make-elastic-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elastic-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elastic-ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elastic-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elastic-ips () '(trivial-types:proper-list elastic-ip))
 (common-lisp:defun make-elastic-ips
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elastic-ip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass elastic-load-balancer common-lisp:nil
                       ((elastic-load-balancer-name :initarg
                         :elastic-load-balancer-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-elastic-load-balancer-elastic-load-balancer-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-load-balancer-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-load-balancer-dns-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-load-balancer-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-load-balancer-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-elastic-load-balancer-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-elastic-load-balancer-availability-zones
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-elastic-load-balancer-subnet-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2instance-ids :initarg :ec2instance-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-elastic-load-balancer-ec2instance-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elastic-load-balancer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elastic-load-balancer
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elastic-load-balancer 'make-elastic-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elastic-load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elastic-load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elastic-load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "ElasticLoadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-ids))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elastic-load-balancer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elastic-load-balancers ()
   '(trivial-types:proper-list elastic-load-balancer))
 (common-lisp:defun make-elastic-load-balancers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list elastic-load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass environment-variable common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-variable-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-environment-variable-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secure :initarg :secure :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-environment-variable-secure
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-environment-variable
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'environment-variable
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'environment-variable 'make-environment-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input environment-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input environment-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secure))
      (common-lisp:list
       (common-lisp:cons "Secure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input environment-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-variables ()
   '(trivial-types:proper-list environment-variable))
 (common-lisp:defun make-environment-variables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-variable))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-hostname-suggestion-request common-lisp:nil
                       ((layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-hostname-suggestion-request-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-hostname-suggestion-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-hostname-suggestion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-hostname-suggestion-request
                    'make-get-hostname-suggestion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-hostname-suggestion-result common-lisp:nil
                       ((layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-hostname-suggestion-result-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-hostname-suggestion-result-hostname
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-hostname-suggestion-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-hostname-suggestion-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-hostname-suggestion-result
                    'make-get-hostname-suggestion-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-hostname-suggestion-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-access-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-grant-access-request-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-for-in-minutes :initarg :valid-for-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or valid-for-in-minutes common-lisp:null)
                         :accessor
                         struct-shape-grant-access-request-valid-for-in-minutes
                         :shape "ValidForInMinutes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-access-request 'make-grant-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-for-in-minutes))
      (common-lisp:list
       (common-lisp:cons "ValidForInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-access-result common-lisp:nil
                       ((temporary-credential :initarg :temporary-credential
                         :initform common-lisp:nil :type
                         (common-lisp:or temporary-credential common-lisp:null)
                         :accessor
                         struct-shape-grant-access-result-temporary-credential
                         :shape "TemporaryCredential" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-access-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-access-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-access-result 'make-grant-access-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-access-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-access-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporary-credential))
      (common-lisp:list
       (common-lisp:cons "TemporaryCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-access-result))
   common-lisp:nil))
(common-lisp:deftype hour () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance common-lisp:nil
                       ((agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-agent-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ami-id :initarg :ami-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-ami-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor struct-shape-instance-architecture :shape
                         "Architecture" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-scaling-type :initarg :auto-scaling-type
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-type common-lisp:null)
                         :accessor struct-shape-instance-auto-scaling-type
                         :shape "AutoScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (block-device-mappings :initarg :block-device-mappings
                         :initform common-lisp:nil :type
                         (common-lisp:or block-device-mappings
                                         common-lisp:null)
                         :accessor struct-shape-instance-block-device-mappings
                         :shape "BlockDeviceMappings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-instance-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-instance-ebs-optimized :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2instance-id :initarg :ec2instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-ec2instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ecs-cluster-arn :initarg :ecs-cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-ecs-cluster-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ecs-container-instance-arn :initarg
                         :ecs-container-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-ecs-container-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-elastic-ip :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-hostname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (infrastructure-class :initarg :infrastructure-class
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-infrastructure-class :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-instance-install-updates-on-boot :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-arn :initarg :instance-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-instance-profile-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-instance-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-service-error-id :initarg :last-service-error-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-last-service-error-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-instance-layer-ids :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (os :initarg :os :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-os :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-platform :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-dns :initarg :private-dns :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-private-dns :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-ip :initarg :private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-private-ip :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-dns :initarg :public-dns :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-public-dns :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-ip :initarg :public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-public-ip :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-by :initarg :registered-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-registered-by :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reported-agent-version :initarg
                         :reported-agent-version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-reported-agent-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reported-os :initarg :reported-os :initform
                         common-lisp:nil :type
                         (common-lisp:or reported-os common-lisp:null)
                         :accessor struct-shape-instance-reported-os :shape
                         "ReportedOs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (root-device-type :initarg :root-device-type :initform
                         common-lisp:nil :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor struct-shape-instance-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (root-device-volume-id :initarg :root-device-volume-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-root-device-volume-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-instance-security-group-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-host-dsa-key-fingerprint :initarg
                         :ssh-host-dsa-key-fingerprint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-ssh-host-dsa-key-fingerprint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-host-rsa-key-fingerprint :initarg
                         :ssh-host-rsa-key-fingerprint :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-ssh-host-rsa-key-fingerprint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-key-name :initarg :ssh-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-ssh-key-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-subnet-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tenancy :initarg :tenancy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-tenancy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (virtualization-type :initarg :virtualization-type
                         :initform common-lisp:nil :type
                         (common-lisp:or virtualization-type common-lisp:null)
                         :accessor struct-shape-instance-virtualization-type
                         :shape "VirtualizationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-type))
      (common-lisp:list
       (common-lisp:cons "AutoScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-device-mappings))
      (common-lisp:list
       (common-lisp:cons "BlockDeviceMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance-id))
      (common-lisp:list
       (common-lisp:cons "Ec2InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecs-container-instance-arn))
      (common-lisp:list
       (common-lisp:cons "EcsContainerInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-class))
      (common-lisp:list
       (common-lisp:cons "InfrastructureClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-service-error-id))
      (common-lisp:list
       (common-lisp:cons "LastServiceErrorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns))
      (common-lisp:list
       (common-lisp:cons "PrivateDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip))
      (common-lisp:list
       (common-lisp:cons "PrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns))
      (common-lisp:list
       (common-lisp:cons "PublicDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-by))
      (common-lisp:list
       (common-lisp:cons "RegisteredBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reported-agent-version))
      (common-lisp:list
       (common-lisp:cons "ReportedAgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reported-os))
      (common-lisp:list
       (common-lisp:cons "ReportedOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-device-type))
      (common-lisp:list
       (common-lisp:cons "RootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'root-device-volume-id))
      (common-lisp:list
       (common-lisp:cons "RootDeviceVolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssh-host-dsa-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "SshHostDsaKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssh-host-rsa-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "SshHostRsaKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "SshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "Tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtualization-type))
      (common-lisp:list
       (common-lisp:cons "VirtualizationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-identity common-lisp:nil
                       ((document :initarg :document :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-instance-identity-document
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature :initarg :signature :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-identity-signature :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-identity 'make-instance-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instances () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instances-count common-lisp:nil
                       ((assigning :initarg :assigning :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-assigning :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (booting :initarg :booting :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-instances-count-booting :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-lost :initarg :connection-lost :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-connection-lost :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deregistering :initarg :deregistering :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-deregistering :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (online :initarg :online :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-instances-count-online :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending :initarg :pending :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-instances-count-pending :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rebooting :initarg :rebooting :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-rebooting :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered :initarg :registered :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-registered :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registering :initarg :registering :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-registering :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requested :initarg :requested :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-requested :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (running-setup :initarg :running-setup :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-running-setup :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (setup-failed :initarg :setup-failed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-setup-failed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shutting-down :initarg :shutting-down :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-shutting-down :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-failed :initarg :start-failed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-start-failed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-failed :initarg :stop-failed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-stop-failed :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopped :initarg :stopped :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-instances-count-stopped :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stopping :initarg :stopping :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-instances-count-stopping :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (terminated :initarg :terminated :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-terminated :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (terminating :initarg :terminating :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-terminating :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unassigning :initarg :unassigning :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-instances-count-unassigning :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instances-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instances-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instances-count 'make-instances-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instances-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instances-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assigning))
      (common-lisp:list
       (common-lisp:cons "Assigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'booting))
      (common-lisp:list
       (common-lisp:cons "Booting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-lost))
      (common-lisp:list
       (common-lisp:cons "ConnectionLost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deregistering))
      (common-lisp:list
       (common-lisp:cons "Deregistering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online))
      (common-lisp:list
       (common-lisp:cons "Online"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rebooting))
      (common-lisp:list
       (common-lisp:cons "Rebooting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered))
      (common-lisp:list
       (common-lisp:cons "Registered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registering))
      (common-lisp:list
       (common-lisp:cons "Registering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested))
      (common-lisp:list
       (common-lisp:cons "Requested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-setup))
      (common-lisp:list
       (common-lisp:cons "RunningSetup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-failed))
      (common-lisp:list
       (common-lisp:cons "SetupFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutting-down))
      (common-lisp:list
       (common-lisp:cons "ShuttingDown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-failed))
      (common-lisp:list
       (common-lisp:cons "StartFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-failed))
      (common-lisp:list
       (common-lisp:cons "StopFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "Stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping))
      (common-lisp:list
       (common-lisp:cons "Stopping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminated))
      (common-lisp:list
       (common-lisp:cons "Terminated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminating))
      (common-lisp:list
       (common-lisp:cons "Terminating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unassigning))
      (common-lisp:list
       (common-lisp:cons "Unassigning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instances-count))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass layer common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-layer-stack-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-layer-layer-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or layer-type common-lisp:null) :accessor
                         struct-shape-layer-type :shape "LayerType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shortname :initarg :shortname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-shortname :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-attributes common-lisp:null)
                         :accessor struct-shape-layer-attributes :shape
                         "LayerAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :cloud-watch-logs-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-layer-cloud-watch-logs-configuration
                         :shape "CloudWatchLogsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-instance-profile-arn :initarg
                         :custom-instance-profile-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-layer-custom-instance-profile-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-layer-custom-json :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-security-group-ids :initarg
                         :custom-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-layer-custom-security-group-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-security-group-names :initarg
                         :default-security-group-names :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-layer-default-security-group-names :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (packages :initarg :packages :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-layer-packages :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configurations
                                         common-lisp:null)
                         :accessor struct-shape-layer-volume-configurations
                         :shape "VolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-auto-healing :initarg :enable-auto-healing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-layer-enable-auto-healing :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-assign-elastic-ips :initarg
                         :auto-assign-elastic-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-layer-auto-assign-elastic-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-assign-public-ips :initarg
                         :auto-assign-public-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-layer-auto-assign-public-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-recipes :initarg :default-recipes :initform
                         common-lisp:nil :type
                         (common-lisp:or recipes common-lisp:null) :accessor
                         struct-shape-layer-default-recipes :shape "Recipes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-recipes :initarg :custom-recipes :initform
                         common-lisp:nil :type
                         (common-lisp:or recipes common-lisp:null) :accessor
                         struct-shape-layer-custom-recipes :shape "Recipes"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-layer-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-layer-install-updates-on-boot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-ebs-optimized-instances :initarg
                         :use-ebs-optimized-instances :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-layer-use-ebs-optimized-instances :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lifecycle-event-configuration :initarg
                         :lifecycle-event-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-event-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-layer-lifecycle-event-configuration
                         :shape "LifecycleEventConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-layer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'layer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'layer 'make-layer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input layer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortname))
      (common-lisp:list
       (common-lisp:cons "Shortname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "CustomInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-security-group-names))
      (common-lisp:list
       (common-lisp:cons "DefaultSecurityGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "Packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "VolumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-healing))
      (common-lisp:list
       (common-lisp:cons "EnableAutoHealing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-elastic-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignElasticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-public-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignPublicIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-recipes))
      (common-lisp:list
       (common-lisp:cons "DefaultRecipes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-recipes))
      (common-lisp:list
       (common-lisp:cons "CustomRecipes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-ebs-optimized-instances))
      (common-lisp:list
       (common-lisp:cons "UseEbsOptimizedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleEventConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input layer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype layer-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-layer-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype layer-attributes-keys () 'common-lisp:string)
(common-lisp:deftype layer-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype layers () '(trivial-types:proper-list layer))
 (common-lisp:defun make-layers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list layer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lifecycle-event-configuration common-lisp:nil
                       ((shutdown :initarg :shutdown :initform common-lisp:nil
                         :type
                         (common-lisp:or shutdown-event-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-event-configuration-shutdown
                         :shape "ShutdownEventConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-event-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lifecycle-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-event-configuration
                    'make-lifecycle-event-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown))
      (common-lisp:list
       (common-lisp:cons "Shutdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-list-tags-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-tags-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-result common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-result-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-result-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-result 'make-list-tags-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass load-based-auto-scaling-configuration common-lisp:nil
                       ((layer-id :initarg :layer-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-load-based-auto-scaling-configuration-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable :initarg :enable :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-load-based-auto-scaling-configuration-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (up-scaling :initarg :up-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-thresholds
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-based-auto-scaling-configuration-up-scaling
                         :shape "AutoScalingThresholds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (down-scaling :initarg :down-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-thresholds
                                         common-lisp:null)
                         :accessor
                         struct-shape-load-based-auto-scaling-configuration-down-scaling
                         :shape "AutoScalingThresholds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-load-based-auto-scaling-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'load-based-auto-scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'load-based-auto-scaling-configuration
                    'make-load-based-auto-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-based-auto-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-based-auto-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'up-scaling))
      (common-lisp:list
       (common-lisp:cons "UpScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'down-scaling))
      (common-lisp:list
       (common-lisp:cons "DownScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-based-auto-scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-based-auto-scaling-configurations ()
   '(trivial-types:proper-list load-based-auto-scaling-configuration))
 (common-lisp:defun make-load-based-auto-scaling-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-based-auto-scaling-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype minute () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass operating-system common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-managers :initarg
                         :configuration-managers :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          operating-system-configuration-managers
                          common-lisp:null)
                         :accessor
                         struct-shape-operating-system-configuration-managers
                         :shape "OperatingSystemConfigurationManagers"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reported-name :initarg :reported-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-reported-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reported-version :initarg :reported-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-reported-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported :initarg :supported :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-operating-system-supported :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-operating-system
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'operating-system
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'operating-system 'make-operating-system))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operating-system))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operating-system))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-managers))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManagers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reported-name))
      (common-lisp:list
       (common-lisp:cons "ReportedName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reported-version))
      (common-lisp:list
       (common-lisp:cons "ReportedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported))
      (common-lisp:list
       (common-lisp:cons "Supported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operating-system))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass operating-system-configuration-manager common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-operating-system-configuration-manager-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-operating-system-configuration-manager-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-operating-system-configuration-manager
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'operating-system-configuration-manager
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'operating-system-configuration-manager
                    'make-operating-system-configuration-manager))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          operating-system-configuration-manager))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          operating-system-configuration-manager))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          operating-system-configuration-manager))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operating-system-configuration-managers ()
   '(trivial-types:proper-list operating-system-configuration-manager))
 (common-lisp:defun make-operating-system-configuration-managers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            operating-system-configuration-manager))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype operating-systems ()
   '(trivial-types:proper-list operating-system))
 (common-lisp:defun make-operating-systems
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operating-system))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass permission common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-permission-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-permission-iam-user-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-ssh :initarg :allow-ssh :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-permission-allow-ssh :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-sudo :initarg :allow-sudo :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-permission-allow-sudo :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (level :initarg :level :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-permission-level :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-ssh))
      (common-lisp:list
       (common-lisp:cons "AllowSsh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-sudo))
      (common-lisp:list
       (common-lisp:cons "AllowSudo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permissions () '(trivial-types:proper-list permission))
 (common-lisp:defun make-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass raid-array common-lisp:nil
                       ((raid-array-id :initarg :raid-array-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-raid-array-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (raid-level :initarg :raid-level :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-raid-array-raid-level :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-disks :initarg :number-of-disks :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-raid-array-number-of-disks :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-raid-array-size :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-raid-array-device :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mount-point :initarg :mount-point :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-mount-point :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-raid-array-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-raid-array-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-raid-array-volume-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-raid-array-iops :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-raid-array
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'raid-array
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'raid-array 'make-raid-array))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raid-array))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raid-array))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-array-id))
      (common-lisp:list
       (common-lisp:cons "RaidArrayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-level))
      (common-lisp:list
       (common-lisp:cons "RaidLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-disks))
      (common-lisp:list
       (common-lisp:cons "NumberOfDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "MountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raid-array))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype raid-arrays () '(trivial-types:proper-list raid-array))
 (common-lisp:defun make-raid-arrays
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list raid-array))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rds-db-instance common-lisp:nil
                       ((rds-db-instance-arn :initarg :rds-db-instance-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-instance-rds-db-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-instance-identifier :initarg
                         :db-instance-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-db-instance-db-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-user :initarg :db-user :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-db-user :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (db-password :initarg :db-password :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-db-instance-db-password :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-rds-db-instance-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (missing-on-rds :initarg :missing-on-rds :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-rds-db-instance-missing-on-rds :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-db-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rds-db-instance 'make-rds-db-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-db-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-db-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-instance-arn))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "DbInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-on-rds))
      (common-lisp:list
       (common-lisp:cons "MissingOnRds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-db-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-instances ()
   '(trivial-types:proper-list rds-db-instance))
 (common-lisp:defun make-rds-db-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rds-db-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reboot-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reboot-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-instance-request 'make-reboot-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recipes common-lisp:nil
                       ((setup :initarg :setup :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-recipes-setup :shape "Strings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configure :initarg :configure :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-recipes-configure :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deploy :initarg :deploy :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-recipes-deploy :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (undeploy :initarg :undeploy :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-recipes-undeploy :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shutdown :initarg :shutdown :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-recipes-shutdown :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recipes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recipes
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recipes 'make-recipes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recipes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recipes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup))
      (common-lisp:list
       (common-lisp:cons "Setup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configure))
      (common-lisp:list
       (common-lisp:cons "Configure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deploy))
      (common-lisp:list
       (common-lisp:cons "Deploy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'undeploy))
      (common-lisp:list
       (common-lisp:cons "Undeploy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown))
      (common-lisp:list
       (common-lisp:cons "Shutdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recipes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-ecs-cluster-request common-lisp:nil
                       ((ecs-cluster-arn :initarg :ecs-cluster-arn :initform
                         (common-lisp:error ":ecs-cluster-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-ecs-cluster-request-ecs-cluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-ecs-cluster-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-ecs-cluster-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-ecs-cluster-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-ecs-cluster-request
                    'make-register-ecs-cluster-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-ecs-cluster-result common-lisp:nil
                       ((ecs-cluster-arn :initarg :ecs-cluster-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-ecs-cluster-result-ecs-cluster-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-ecs-cluster-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-ecs-cluster-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-ecs-cluster-result
                    'make-register-ecs-cluster-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-cluster-arn))
      (common-lisp:list
       (common-lisp:cons "EcsClusterArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-ecs-cluster-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-elastic-ip-request common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         (common-lisp:error ":elastic-ip is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-elastic-ip-request-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-elastic-ip-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-elastic-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-elastic-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-elastic-ip-request
                    'make-register-elastic-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-elastic-ip-result common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-elastic-ip-result-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-elastic-ip-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-elastic-ip-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-elastic-ip-result
                    'make-register-elastic-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-elastic-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-instance-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-instance-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-instance-request-hostname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (public-ip :initarg :public-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-instance-request-public-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-ip :initarg :private-ip :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-instance-request-private-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rsa-public-key :initarg :rsa-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-instance-request-rsa-public-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rsa-public-key-fingerprint :initarg
                         :rsa-public-key-fingerprint :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-instance-request-rsa-public-key-fingerprint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-identity :initarg :instance-identity
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-identity common-lisp:null)
                         :accessor
                         struct-shape-register-instance-request-instance-identity
                         :shape "InstanceIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-instance-request
                    'make-register-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "PublicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip))
      (common-lisp:list
       (common-lisp:cons "PrivateIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rsa-public-key))
      (common-lisp:list
       (common-lisp:cons "RsaPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rsa-public-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "RsaPublicKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-identity))
      (common-lisp:list
       (common-lisp:cons "InstanceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-instance-result common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-instance-result-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-instance-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-instance-result 'make-register-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-rds-db-instance-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-rds-db-instance-request-stack-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-db-instance-arn :initarg :rds-db-instance-arn
                         :initform
                         (common-lisp:error ":rds-db-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-register-rds-db-instance-request-rds-db-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-user :initarg :db-user :initform
                         (common-lisp:error ":db-user is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-rds-db-instance-request-db-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-password :initarg :db-password :initform
                         (common-lisp:error ":db-password is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-rds-db-instance-request-db-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-rds-db-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-rds-db-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-rds-db-instance-request
                    'make-register-rds-db-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-rds-db-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-rds-db-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-instance-arn))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-rds-db-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-volume-request common-lisp:nil
                       ((ec2volume-id :initarg :ec2volume-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-volume-request-ec2volume-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-volume-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-volume-request 'make-register-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2volume-id))
      (common-lisp:list
       (common-lisp:cons "Ec2VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-volume-result common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-register-volume-result-volume-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-volume-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'register-volume-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-volume-result 'make-register-volume-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-volume-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reported-os common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-reported-os-family :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reported-os-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-reported-os-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reported-os
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reported-os
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reported-os 'make-reported-os))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reported-os))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reported-os))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reported-os))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (opsworks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype root-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass self-user-profile common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-self-user-profile-iam-user-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-self-user-profile-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-username :initarg :ssh-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-self-user-profile-ssh-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-self-user-profile-ssh-public-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-self-user-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'self-user-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'self-user-profile 'make-self-user-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input self-user-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input self-user-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-username))
      (common-lisp:list
       (common-lisp:cons "SshUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "SshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input self-user-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass service-error common-lisp:nil
                       ((service-error-id :initarg :service-error-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-error-service-error-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-error-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-error-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-error-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-service-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-service-error-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'service-error 'make-service-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-error-id))
      (common-lisp:list
       (common-lisp:cons "ServiceErrorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-errors ()
   '(trivial-types:proper-list service-error))
 (common-lisp:defun make-service-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-load-based-auto-scaling-request common-lisp:nil
                       ((layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-set-load-based-auto-scaling-request-layer-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable :initarg :enable :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-set-load-based-auto-scaling-request-enable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (up-scaling :initarg :up-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-thresholds
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-load-based-auto-scaling-request-up-scaling
                         :shape "AutoScalingThresholds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (down-scaling :initarg :down-scaling :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-scaling-thresholds
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-load-based-auto-scaling-request-down-scaling
                         :shape "AutoScalingThresholds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-load-based-auto-scaling-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-load-based-auto-scaling-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-load-based-auto-scaling-request
                    'make-set-load-based-auto-scaling-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-load-based-auto-scaling-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-load-based-auto-scaling-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable))
      (common-lisp:list
       (common-lisp:cons "Enable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'up-scaling))
      (common-lisp:list
       (common-lisp:cons "UpScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'down-scaling))
      (common-lisp:list
       (common-lisp:cons "DownScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-load-based-auto-scaling-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-permission-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-set-permission-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iam-user-arn :initarg :iam-user-arn :initform
                         (common-lisp:error ":iam-user-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-set-permission-request-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-ssh :initarg :allow-ssh :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-set-permission-request-allow-ssh :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-sudo :initarg :allow-sudo :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-set-permission-request-allow-sudo :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (level :initarg :level :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-set-permission-request-level :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'set-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-permission-request 'make-set-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-ssh))
      (common-lisp:list
       (common-lisp:cons "AllowSsh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-sudo))
      (common-lisp:list
       (common-lisp:cons "AllowSudo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-time-based-auto-scaling-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-set-time-based-auto-scaling-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-schedule :initarg :auto-scaling-schedule
                         :initform common-lisp:nil :type
                         (common-lisp:or weekly-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-time-based-auto-scaling-request-auto-scaling-schedule
                         :shape "WeeklyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-time-based-auto-scaling-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-time-based-auto-scaling-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-time-based-auto-scaling-request
                    'make-set-time-based-auto-scaling-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-time-based-auto-scaling-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-time-based-auto-scaling-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-schedule))
      (common-lisp:list
       (common-lisp:cons "AutoScalingSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-time-based-auto-scaling-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass shutdown-event-configuration common-lisp:nil
                       ((execution-timeout :initarg :execution-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-shutdown-event-configuration-execution-timeout
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delay-until-elb-connections-drained :initarg
                         :delay-until-elb-connections-drained :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-shutdown-event-configuration-delay-until-elb-connections-drained
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shutdown-event-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shutdown-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'shutdown-event-configuration
                    'make-shutdown-event-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shutdown-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shutdown-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-timeout))
      (common-lisp:list
       (common-lisp:cons "ExecutionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delay-until-elb-connections-drained))
      (common-lisp:list
       (common-lisp:cons "DelayUntilElbConnectionsDrained"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shutdown-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-source-type :shape "SourceType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-source-url :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-username :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-password :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-key :initarg :ssh-key :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-ssh-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision :initarg :revision :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-source-revision :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key))
      (common-lisp:list
       (common-lisp:cons "SshKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssl-configuration common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         (common-lisp:error ":certificate is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ssl-configuration-certificate :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (private-key :initarg :private-key :initform
                         (common-lisp:error ":private-key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ssl-configuration-private-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (chain :initarg :chain :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ssl-configuration-chain :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssl-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssl-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ssl-configuration 'make-ssl-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssl-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssl-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chain))
      (common-lisp:list
       (common-lisp:cons "Chain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssl-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stack-stack-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-arn :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stack-region :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stack-vpc-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-attributes common-lisp:null)
                         :accessor struct-shape-stack-attributes :shape
                         "StackAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-service-role-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-instance-profile-arn :initarg
                         :default-instance-profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-default-instance-profile-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-os :initarg :default-os :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-default-os :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname-theme :initarg :hostname-theme :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-hostname-theme :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-availability-zone :initarg
                         :default-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stack-default-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-subnet-id :initarg :default-subnet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-default-subnet-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-custom-json :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor struct-shape-stack-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (chef-configuration :initarg :chef-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or chef-configuration common-lisp:null)
                         :accessor struct-shape-stack-chef-configuration :shape
                         "ChefConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-custom-cookbooks :initarg :use-custom-cookbooks
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-stack-use-custom-cookbooks :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-opsworks-security-groups :initarg
                         :use-opsworks-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-stack-use-opsworks-security-groups :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-cookbooks-source :initarg
                         :custom-cookbooks-source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor struct-shape-stack-custom-cookbooks-source
                         :shape "Source" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-ssh-key-name :initarg :default-ssh-key-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-default-ssh-key-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-stack-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-root-device-type :initarg
                         :default-root-device-type :initform common-lisp:nil
                         :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor struct-shape-stack-default-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-agent-version :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stack
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stack
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stack 'make-stack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-os))
      (common-lisp:list
       (common-lisp:cons "DefaultOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-theme))
      (common-lisp:list
       (common-lisp:cons "HostnameTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-availability-zone))
      (common-lisp:list
       (common-lisp:cons "DefaultAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-subnet-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chef-configuration))
      (common-lisp:list
       (common-lisp:cons "ChefConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-custom-cookbooks))
      (common-lisp:list
       (common-lisp:cons "UseCustomCookbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-opsworks-security-groups))
      (common-lisp:list
       (common-lisp:cons "UseOpsworksSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-cookbooks-source))
      (common-lisp:list
       (common-lisp:cons "CustomCookbooksSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "DefaultSshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-root-device-type))
      (common-lisp:list
       (common-lisp:cons "DefaultRootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-stack-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype stack-attributes-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-configuration-manager common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-configuration-manager-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stack-configuration-manager-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stack-configuration-manager
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stack-configuration-manager
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stack-configuration-manager
                    'make-stack-configuration-manager))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-configuration-manager))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-configuration-manager))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-configuration-manager))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-summary common-lisp:nil
                       ((stack-id :initarg :stack-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-stack-summary-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-summary-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stack-summary-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (layers-count :initarg :layers-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-stack-summary-layers-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (apps-count :initarg :apps-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-stack-summary-apps-count :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instances-count :initarg :instances-count :initform
                         common-lisp:nil :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor struct-shape-stack-summary-instances-count
                         :shape "InstancesCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stack-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stack-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stack-summary 'make-stack-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layers-count))
      (common-lisp:list
       (common-lisp:cons "LayersCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps-count))
      (common-lisp:list
       (common-lisp:cons "AppsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances-count))
      (common-lisp:list
       (common-lisp:cons "InstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stacks () '(trivial-types:proper-list stack))
 (common-lisp:defun make-stacks
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-instance-request-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-instance-request 'make-start-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-stack-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-stack-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-stack-request 'make-start-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-instance-request-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-stop-instance-request-force :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-instance-request 'make-stop-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-stack-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-stop-stack-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-stack-request 'make-stop-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-stack-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype strings () '(trivial-types:proper-list string))
 (common-lisp:defun make-strings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype switch () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass temporary-credential common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-temporary-credential-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-temporary-credential-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (valid-for-in-minutes :initarg :valid-for-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-temporary-credential-valid-for-in-minutes
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-temporary-credential-instance-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-temporary-credential
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'temporary-credential
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'temporary-credential 'make-temporary-credential))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input temporary-credential))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input temporary-credential))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'valid-for-in-minutes))
      (common-lisp:list
       (common-lisp:cons "ValidForInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input temporary-credential))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-based-auto-scaling-configuration common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-time-based-auto-scaling-configuration-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-schedule :initarg :auto-scaling-schedule
                         :initform common-lisp:nil :type
                         (common-lisp:or weekly-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-time-based-auto-scaling-configuration-auto-scaling-schedule
                         :shape "WeeklyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-based-auto-scaling-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'time-based-auto-scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'time-based-auto-scaling-configuration
                    'make-time-based-auto-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-based-auto-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-based-auto-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-schedule))
      (common-lisp:list
       (common-lisp:cons "AutoScalingSchedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-based-auto-scaling-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype time-based-auto-scaling-configurations ()
   '(trivial-types:proper-list time-based-auto-scaling-configuration))
 (common-lisp:defun make-time-based-auto-scaling-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            time-based-auto-scaling-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unassign-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unassign-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unassign-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unassign-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unassign-instance-request
                    'make-unassign-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unassign-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unassign-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unassign-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unassign-volume-request common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         (common-lisp:error ":volume-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unassign-volume-request-volume-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unassign-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unassign-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unassign-volume-request 'make-unassign-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unassign-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unassign-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unassign-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-app-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-app-request-app-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-app-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-app-request-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-sources :initarg :data-sources :initform
                         common-lisp:nil :type
                         (common-lisp:or data-sources common-lisp:null)
                         :accessor struct-shape-update-app-request-data-sources
                         :shape "DataSources" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or app-type common-lisp:null) :accessor
                         struct-shape-update-app-request-type :shape "AppType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (app-source :initarg :app-source :initform
                         common-lisp:nil :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-update-app-request-app-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domains :initarg :domains :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-update-app-request-domains
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-ssl :initarg :enable-ssl :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-app-request-enable-ssl :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-configuration :initarg :ssl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ssl-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-app-request-ssl-configuration
                         :shape "SslConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or app-attributes common-lisp:null)
                         :accessor struct-shape-update-app-request-attributes
                         :shape "AppAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (environment :initarg :environment :initform
                         common-lisp:nil :type
                         (common-lisp:or environment-variables
                                         common-lisp:null)
                         :accessor struct-shape-update-app-request-environment
                         :shape "EnvironmentVariables" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-app-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-app-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-app-request 'make-update-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-sources))
      (common-lisp:list
       (common-lisp:cons "DataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-source))
      (common-lisp:list
       (common-lisp:cons "AppSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ssl))
      (common-lisp:list
       (common-lisp:cons "EnableSsl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-configuration))
      (common-lisp:list
       (common-lisp:cons "SslConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-elastic-ip-request common-lisp:nil
                       ((elastic-ip :initarg :elastic-ip :initform
                         (common-lisp:error ":elastic-ip is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-elastic-ip-request-elastic-ip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-elastic-ip-request-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-elastic-ip-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-elastic-ip-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-elastic-ip-request
                    'make-update-elastic-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-elastic-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-elastic-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elastic-ip))
      (common-lisp:list
       (common-lisp:cons "ElasticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-elastic-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :initform
                         (common-lisp:error ":instance-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-instance-request-instance-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (layer-ids :initarg :layer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-update-instance-request-layer-ids :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-instance-request-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-scaling-type :initarg :auto-scaling-type
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-scaling-type common-lisp:null)
                         :accessor
                         struct-shape-update-instance-request-auto-scaling-type
                         :shape "AutoScalingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hostname :initarg :hostname :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-instance-request-hostname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (os :initarg :os :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-instance-request-os :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ami-id :initarg :ami-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-update-instance-request-ami-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-key-name :initarg :ssh-key-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-instance-request-ssh-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or architecture common-lisp:null)
                         :accessor
                         struct-shape-update-instance-request-architecture
                         :shape "Architecture" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-instance-request-install-updates-on-boot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-optimized :initarg :ebs-optimized :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-instance-request-ebs-optimized
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-instance-request-agent-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-instance-request 'make-update-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-ids))
      (common-lisp:list
       (common-lisp:cons "LayerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-type))
      (common-lisp:list
       (common-lisp:cons "AutoScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "Hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "AmiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "SshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "Architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-optimized))
      (common-lisp:list
       (common-lisp:cons "EbsOptimized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-layer-request common-lisp:nil
                       ((layer-id :initarg :layer-id :initform
                         (common-lisp:error ":layer-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-layer-request-layer-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-layer-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (shortname :initarg :shortname :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-layer-request-shortname :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or layer-attributes common-lisp:null)
                         :accessor struct-shape-update-layer-request-attributes
                         :shape "LayerAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-logs-configuration :initarg
                         :cloud-watch-logs-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-cloud-watch-logs-configuration
                         :shape "CloudWatchLogsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-instance-profile-arn :initarg
                         :custom-instance-profile-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-custom-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-layer-request-custom-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-security-group-ids :initarg
                         :custom-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-custom-security-group-ids
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (packages :initarg :packages :initform common-lisp:nil
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor struct-shape-update-layer-request-packages
                         :shape "Strings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (volume-configurations :initarg :volume-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or volume-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-volume-configurations
                         :shape "VolumeConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enable-auto-healing :initarg :enable-auto-healing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-layer-request-enable-auto-healing
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-assign-elastic-ips :initarg
                         :auto-assign-elastic-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-auto-assign-elastic-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-assign-public-ips :initarg
                         :auto-assign-public-ips :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-auto-assign-public-ips
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-recipes :initarg :custom-recipes :initform
                         common-lisp:nil :type
                         (common-lisp:or recipes common-lisp:null) :accessor
                         struct-shape-update-layer-request-custom-recipes
                         :shape "Recipes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (install-updates-on-boot :initarg
                         :install-updates-on-boot :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-install-updates-on-boot
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-ebs-optimized-instances :initarg
                         :use-ebs-optimized-instances :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-use-ebs-optimized-instances
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lifecycle-event-configuration :initarg
                         :lifecycle-event-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-event-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-layer-request-lifecycle-event-configuration
                         :shape "LifecycleEventConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-layer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-layer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-layer-request 'make-update-layer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-layer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-layer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer-id))
      (common-lisp:list
       (common-lisp:cons "LayerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shortname))
      (common-lisp:list
       (common-lisp:cons "Shortname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "CustomInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "CustomSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "Packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'volume-configurations))
      (common-lisp:list
       (common-lisp:cons "VolumeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-auto-healing))
      (common-lisp:list
       (common-lisp:cons "EnableAutoHealing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-elastic-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignElasticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-assign-public-ips))
      (common-lisp:list
       (common-lisp:cons "AutoAssignPublicIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-recipes))
      (common-lisp:list
       (common-lisp:cons "CustomRecipes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-updates-on-boot))
      (common-lisp:list
       (common-lisp:cons "InstallUpdatesOnBoot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-ebs-optimized-instances))
      (common-lisp:list
       (common-lisp:cons "UseEbsOptimizedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-event-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleEventConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-layer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-my-user-profile-request common-lisp:nil
                       ((ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-my-user-profile-request-ssh-public-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-my-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-my-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-my-user-profile-request
                    'make-update-my-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-my-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-my-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "SshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-my-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rds-db-instance-request common-lisp:nil
                       ((rds-db-instance-arn :initarg :rds-db-instance-arn
                         :initform
                         (common-lisp:error ":rds-db-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-rds-db-instance-request-rds-db-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-user :initarg :db-user :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-rds-db-instance-request-db-user
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (db-password :initarg :db-password :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-rds-db-instance-request-db-password
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-rds-db-instance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-rds-db-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-rds-db-instance-request
                    'make-update-rds-db-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rds-db-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rds-db-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-instance-arn))
      (common-lisp:list
       (common-lisp:cons "RdsDbInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "DbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rds-db-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-request common-lisp:nil
                       ((stack-id :initarg :stack-id :initform
                         (common-lisp:error ":stack-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-stack-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or stack-attributes common-lisp:null)
                         :accessor struct-shape-update-stack-request-attributes
                         :shape "StackAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-service-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-instance-profile-arn :initarg
                         :default-instance-profile-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-default-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-os :initarg :default-os :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-default-os :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (hostname-theme :initarg :hostname-theme :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-hostname-theme
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-availability-zone :initarg
                         :default-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-stack-request-default-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-subnet-id :initarg :default-subnet-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-default-subnet-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-json :initarg :custom-json :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-custom-json :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-manager :initarg :configuration-manager
                         :initform common-lisp:nil :type
                         (common-lisp:or stack-configuration-manager
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-stack-request-configuration-manager
                         :shape "StackConfigurationManager" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (chef-configuration :initarg :chef-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or chef-configuration common-lisp:null)
                         :accessor
                         struct-shape-update-stack-request-chef-configuration
                         :shape "ChefConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-custom-cookbooks :initarg :use-custom-cookbooks
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-stack-request-use-custom-cookbooks
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-cookbooks-source :initarg
                         :custom-cookbooks-source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-update-stack-request-custom-cookbooks-source
                         :shape "Source" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-ssh-key-name :initarg :default-ssh-key-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-default-ssh-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-root-device-type :initarg
                         :default-root-device-type :initform common-lisp:nil
                         :type
                         (common-lisp:or root-device-type common-lisp:null)
                         :accessor
                         struct-shape-update-stack-request-default-root-device-type
                         :shape "RootDeviceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-opsworks-security-groups :initarg
                         :use-opsworks-security-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-stack-request-use-opsworks-security-groups
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (agent-version :initarg :agent-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-stack-request-agent-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-stack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-stack-request 'make-update-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-os))
      (common-lisp:list
       (common-lisp:cons "DefaultOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname-theme))
      (common-lisp:list
       (common-lisp:cons "HostnameTheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-availability-zone))
      (common-lisp:list
       (common-lisp:cons "DefaultAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-subnet-id))
      (common-lisp:list
       (common-lisp:cons "DefaultSubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-json))
      (common-lisp:list
       (common-lisp:cons "CustomJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-manager))
      (common-lisp:list
       (common-lisp:cons "ConfigurationManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chef-configuration))
      (common-lisp:list
       (common-lisp:cons "ChefConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-custom-cookbooks))
      (common-lisp:list
       (common-lisp:cons "UseCustomCookbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-cookbooks-source))
      (common-lisp:list
       (common-lisp:cons "CustomCookbooksSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "DefaultSshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-root-device-type))
      (common-lisp:list
       (common-lisp:cons "DefaultRootDeviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-opsworks-security-groups))
      (common-lisp:list
       (common-lisp:cons "UseOpsworksSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-profile-request common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         (common-lisp:error ":iam-user-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-iam-user-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-username :initarg :ssh-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-ssh-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-ssh-public-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-self-management :initarg :allow-self-management
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-update-user-profile-request-allow-self-management
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-request
                    'make-update-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-username))
      (common-lisp:list
       (common-lisp:cons "SshUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "SshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-self-management))
      (common-lisp:list
       (common-lisp:cons "AllowSelfManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-volume-request common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         (common-lisp:error ":volume-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-volume-request-volume-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-volume-request-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mount-point :initarg :mount-point :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-volume-request-mount-point :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-volume-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-volume-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-volume-request 'make-update-volume-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "MountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-volume-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-profile common-lisp:nil
                       ((iam-user-arn :initarg :iam-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-profile-iam-user-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-profile-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-username :initarg :ssh-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-profile-ssh-username :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssh-public-key :initarg :ssh-public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-user-profile-ssh-public-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allow-self-management :initarg :allow-self-management
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-user-profile-allow-self-management :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-profile 'make-user-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user-arn))
      (common-lisp:list
       (common-lisp:cons "IamUserArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-username))
      (common-lisp:list
       (common-lisp:cons "SshUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key))
      (common-lisp:list
       (common-lisp:cons "SshPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-self-management))
      (common-lisp:list
       (common-lisp:cons "AllowSelfManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-profiles ()
   '(trivial-types:proper-list user-profile))
 (common-lisp:defun make-user-profiles
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype valid-for-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (opsworks-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype virtualization-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass volume common-lisp:nil
                       ((volume-id :initarg :volume-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-volume-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2volume-id :initarg :ec2volume-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-ec2volume-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (raid-array-id :initarg :raid-array-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-raid-array-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-volume-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-size :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-volume-device :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mount-point :initarg :mount-point :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-mount-point :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-volume-region :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-availability-zone :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-volume-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-iops :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-volume-encrypted :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'volume 'make-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-id))
      (common-lisp:list
       (common-lisp:cons "VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2volume-id))
      (common-lisp:list
       (common-lisp:cons "Ec2VolumeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-array-id))
      (common-lisp:list
       (common-lisp:cons "RaidArrayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "MountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass volume-configuration common-lisp:nil
                       ((mount-point :initarg :mount-point :initform
                         (common-lisp:error ":mount-point is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-configuration-mount-point :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (raid-level :initarg :raid-level :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-configuration-raid-level :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-disks :initarg :number-of-disks :initform
                         (common-lisp:error ":number-of-disks is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-volume-configuration-number-of-disks
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform
                         (common-lisp:error ":size is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-configuration-size :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-volume-configuration-volume-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-volume-configuration-iops :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-volume-configuration-encrypted :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'volume-configuration 'make-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-point))
      (common-lisp:list
       (common-lisp:cons "MountPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raid-level))
      (common-lisp:list
       (common-lisp:cons "RaidLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-disks))
      (common-lisp:list
       (common-lisp:cons "NumberOfDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype volume-configurations ()
   '(trivial-types:proper-list volume-configuration))
 (common-lisp:defun make-volume-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype volumes () '(trivial-types:proper-list volume))
 (common-lisp:defun make-volumes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass weekly-auto-scaling-schedule common-lisp:nil
                       ((monday :initarg :monday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-monday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tuesday :initarg :tuesday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-tuesday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (wednesday :initarg :wednesday :initform
                         common-lisp:nil :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-wednesday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (thursday :initarg :thursday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-thursday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (friday :initarg :friday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-friday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saturday :initarg :saturday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-saturday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sunday :initarg :sunday :initform common-lisp:nil
                         :type
                         (common-lisp:or daily-auto-scaling-schedule
                                         common-lisp:null)
                         :accessor
                         struct-shape-weekly-auto-scaling-schedule-sunday
                         :shape "DailyAutoScalingSchedule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-weekly-auto-scaling-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'weekly-auto-scaling-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'weekly-auto-scaling-schedule
                    'make-weekly-auto-scaling-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          weekly-auto-scaling-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          weekly-auto-scaling-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monday))
      (common-lisp:list
       (common-lisp:cons "Monday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuesday))
      (common-lisp:list
       (common-lisp:cons "Tuesday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wednesday))
      (common-lisp:list
       (common-lisp:cons "Wednesday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thursday))
      (common-lisp:list
       (common-lisp:cons "Thursday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'friday))
      (common-lisp:list
       (common-lisp:cons "Friday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saturday))
      (common-lisp:list
       (common-lisp:cons "Saturday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sunday))
      (common-lisp:list
       (common-lisp:cons "Sunday"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          weekly-auto-scaling-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun assign-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id layer-ids)
   (common-lisp:declare (common-lisp:ignorable instance-id layer-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assign-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssignInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'assign-instance))
(common-lisp:progn
 (common-lisp:defun assign-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-id instance-id)
   (common-lisp:declare (common-lisp:ignorable volume-id instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-assign-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssignVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'assign-volume))
(common-lisp:progn
 (common-lisp:defun associate-elastic-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-ip instance-id)
   (common-lisp:declare (common-lisp:ignorable elastic-ip instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-elastic-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateElasticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-elastic-ip))
(common-lisp:progn
 (common-lisp:defun attach-elastic-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-load-balancer-name layer-id)
   (common-lisp:declare
    (common-lisp:ignorable elastic-load-balancer-name layer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-elastic-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachElasticLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'attach-elastic-load-balancer))
(common-lisp:progn
 (common-lisp:defun clone-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-stack-id name region vpc-id
                     attributes service-role-arn default-instance-profile-arn
                     default-os hostname-theme default-availability-zone
                     default-subnet-id custom-json configuration-manager
                     chef-configuration use-custom-cookbooks
                     use-opsworks-security-groups custom-cookbooks-source
                     default-ssh-key-name clone-permissions clone-app-ids
                     default-root-device-type agent-version)
   (common-lisp:declare
    (common-lisp:ignorable source-stack-id name region vpc-id attributes
     service-role-arn default-instance-profile-arn default-os hostname-theme
     default-availability-zone default-subnet-id custom-json
     configuration-manager chef-configuration use-custom-cookbooks
     use-opsworks-security-groups custom-cookbooks-source default-ssh-key-name
     clone-permissions clone-app-ids default-root-device-type agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-clone-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CloneStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'clone-stack))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id shortname name description
                     data-sources type app-source domains enable-ssl
                     ssl-configuration attributes environment)
   (common-lisp:declare
    (common-lisp:ignorable stack-id shortname name description data-sources
     type app-source domains enable-ssl ssl-configuration attributes
     environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateApp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id app-id instance-ids layer-ids
                     command comment custom-json)
   (common-lisp:declare
    (common-lisp:ignorable stack-id app-id instance-ids layer-ids command
     comment custom-json))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDeployment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-deployment))
(common-lisp:progn
 (common-lisp:defun create-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id layer-ids instance-type
                     auto-scaling-type hostname os ami-id ssh-key-name
                     availability-zone virtualization-type subnet-id
                     architecture root-device-type block-device-mappings
                     install-updates-on-boot ebs-optimized agent-version
                     tenancy)
   (common-lisp:declare
    (common-lisp:ignorable stack-id layer-ids instance-type auto-scaling-type
     hostname os ami-id ssh-key-name availability-zone virtualization-type
     subnet-id architecture root-device-type block-device-mappings
     install-updates-on-boot ebs-optimized agent-version tenancy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instance))
(common-lisp:progn
 (common-lisp:defun create-layer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id type name shortname attributes
                     cloud-watch-logs-configuration custom-instance-profile-arn
                     custom-json custom-security-group-ids packages
                     volume-configurations enable-auto-healing
                     auto-assign-elastic-ips auto-assign-public-ips
                     custom-recipes install-updates-on-boot
                     use-ebs-optimized-instances lifecycle-event-configuration)
   (common-lisp:declare
    (common-lisp:ignorable stack-id type name shortname attributes
     cloud-watch-logs-configuration custom-instance-profile-arn custom-json
     custom-security-group-ids packages volume-configurations
     enable-auto-healing auto-assign-elastic-ips auto-assign-public-ips
     custom-recipes install-updates-on-boot use-ebs-optimized-instances
     lifecycle-event-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-layer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLayer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-layer))
(common-lisp:progn
 (common-lisp:defun create-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name region vpc-id attributes
                     service-role-arn default-instance-profile-arn default-os
                     hostname-theme default-availability-zone default-subnet-id
                     custom-json configuration-manager chef-configuration
                     use-custom-cookbooks use-opsworks-security-groups
                     custom-cookbooks-source default-ssh-key-name
                     default-root-device-type agent-version)
   (common-lisp:declare
    (common-lisp:ignorable name region vpc-id attributes service-role-arn
     default-instance-profile-arn default-os hostname-theme
     default-availability-zone default-subnet-id custom-json
     configuration-manager chef-configuration use-custom-cookbooks
     use-opsworks-security-groups custom-cookbooks-source default-ssh-key-name
     default-root-device-type agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-stack))
(common-lisp:progn
 (common-lisp:defun create-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-user-arn ssh-username ssh-public-key
                     allow-self-management)
   (common-lisp:declare
    (common-lisp:ignorable iam-user-arn ssh-username ssh-public-key
     allow-self-management))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-profile))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteApp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id delete-elastic-ip
                     delete-volumes)
   (common-lisp:declare
    (common-lisp:ignorable instance-id delete-elastic-ip delete-volumes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance))
(common-lisp:progn
 (common-lisp:defun delete-layer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-id)
   (common-lisp:declare (common-lisp:ignorable layer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-layer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLayer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-layer))
(common-lisp:progn
 (common-lisp:defun delete-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id)
   (common-lisp:declare (common-lisp:ignorable stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-stack))
(common-lisp:progn
 (common-lisp:defun delete-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-user-arn)
   (common-lisp:declare (common-lisp:ignorable iam-user-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-profile))
(common-lisp:progn
 (common-lisp:defun deregister-ecs-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecs-cluster-arn)
   (common-lisp:declare (common-lisp:ignorable ecs-cluster-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-ecs-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterEcsCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-ecs-cluster))
(common-lisp:progn
 (common-lisp:defun deregister-elastic-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-ip)
   (common-lisp:declare (common-lisp:ignorable elastic-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-elastic-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterElasticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-elastic-ip))
(common-lisp:progn
 (common-lisp:defun deregister-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-instance))
(common-lisp:progn
 (common-lisp:defun deregister-rds-db-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rds-db-instance-arn)
   (common-lisp:declare (common-lisp:ignorable rds-db-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-rds-db-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterRdsDbInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-rds-db-instance))
(common-lisp:progn
 (common-lisp:defun deregister-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-id)
   (common-lisp:declare (common-lisp:ignorable volume-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-volume))
(common-lisp:progn
 (common-lisp:defun describe-agent-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id configuration-manager)
   (common-lisp:declare (common-lisp:ignorable stack-id configuration-manager))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agent-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAgentVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-agent-versions))
(common-lisp:progn
 (common-lisp:defun describe-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id app-ids)
   (common-lisp:declare (common-lisp:ignorable stack-id app-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeApps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-apps))
(common-lisp:progn
 (common-lisp:defun describe-commands
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deployment-id instance-id command-ids)
   (common-lisp:declare
    (common-lisp:ignorable deployment-id instance-id command-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-commands-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCommands"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-commands))
(common-lisp:progn
 (common-lisp:defun describe-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id app-id deployment-ids)
   (common-lisp:declare (common-lisp:ignorable stack-id app-id deployment-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-deployments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeployments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-deployments))
(common-lisp:progn
 (common-lisp:defun describe-ecs-clusters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecs-cluster-arns stack-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable ecs-cluster-arns stack-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ecs-clusters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEcsClusters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-ecs-clusters))
(common-lisp:progn
 (common-lisp:defun describe-elastic-ips
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id stack-id ips)
   (common-lisp:declare (common-lisp:ignorable instance-id stack-id ips))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-elastic-ips-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeElasticIps"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elastic-ips))
(common-lisp:progn
 (common-lisp:defun describe-elastic-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id layer-ids)
   (common-lisp:declare (common-lisp:ignorable stack-id layer-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elastic-load-balancers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeElasticLoadBalancers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elastic-load-balancers))
(common-lisp:progn
 (common-lisp:defun describe-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id layer-id instance-ids)
   (common-lisp:declare (common-lisp:ignorable stack-id layer-id instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-instances))
(common-lisp:progn
 (common-lisp:defun describe-layers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id layer-ids)
   (common-lisp:declare (common-lisp:ignorable stack-id layer-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-layers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLayers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-layers))
(common-lisp:progn
 (common-lisp:defun describe-load-based-auto-scaling
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-ids)
   (common-lisp:declare (common-lisp:ignorable layer-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-load-based-auto-scaling-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLoadBasedAutoScaling"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-load-based-auto-scaling))
(common-lisp:progn
 (common-lisp:defun describe-my-user-profile ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'opsworks-request :method "POST" :path "/"
                                :operation "DescribeMyUserProfile"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-my-user-profile))
(common-lisp:progn
 (common-lisp:defun describe-operating-systems ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'opsworks-request :method "POST" :path "/"
                                :operation "DescribeOperatingSystems"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-operating-systems))
(common-lisp:progn
 (common-lisp:defun describe-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-user-arn stack-id)
   (common-lisp:declare (common-lisp:ignorable iam-user-arn stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-permissions))
(common-lisp:progn
 (common-lisp:defun describe-raid-arrays
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id stack-id raid-array-ids)
   (common-lisp:declare
    (common-lisp:ignorable instance-id stack-id raid-array-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-raid-arrays-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRaidArrays"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-raid-arrays))
(common-lisp:progn
 (common-lisp:defun describe-rds-db-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id rds-db-instance-arns)
   (common-lisp:declare (common-lisp:ignorable stack-id rds-db-instance-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-rds-db-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRdsDbInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-rds-db-instances))
(common-lisp:progn
 (common-lisp:defun describe-service-errors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id instance-id service-error-ids)
   (common-lisp:declare
    (common-lisp:ignorable stack-id instance-id service-error-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-errors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServiceErrors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-service-errors))
(common-lisp:progn
 (common-lisp:defun describe-stack-provisioning-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id)
   (common-lisp:declare (common-lisp:ignorable stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stack-provisioning-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackProvisioningParameters"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stack-provisioning-parameters))
(common-lisp:progn
 (common-lisp:defun describe-stack-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id)
   (common-lisp:declare (common-lisp:ignorable stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-summary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStackSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stack-summary))
(common-lisp:progn
 (common-lisp:defun describe-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-ids)
   (common-lisp:declare (common-lisp:ignorable stack-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stacks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStacks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-stacks))
(common-lisp:progn
 (common-lisp:defun describe-time-based-auto-scaling
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids)
   (common-lisp:declare (common-lisp:ignorable instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-time-based-auto-scaling-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTimeBasedAutoScaling"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-time-based-auto-scaling))
(common-lisp:progn
 (common-lisp:defun describe-user-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-user-arns)
   (common-lisp:declare (common-lisp:ignorable iam-user-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-user-profiles))
(common-lisp:progn
 (common-lisp:defun describe-volumes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id stack-id raid-array-id
                     volume-ids)
   (common-lisp:declare
    (common-lisp:ignorable instance-id stack-id raid-array-id volume-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-volumes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVolumes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-volumes))
(common-lisp:progn
 (common-lisp:defun detach-elastic-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-load-balancer-name layer-id)
   (common-lisp:declare
    (common-lisp:ignorable elastic-load-balancer-name layer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-elastic-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachElasticLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detach-elastic-load-balancer))
(common-lisp:progn
 (common-lisp:defun disassociate-elastic-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-ip)
   (common-lisp:declare (common-lisp:ignorable elastic-ip))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-elastic-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateElasticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-elastic-ip))
(common-lisp:progn
 (common-lisp:defun get-hostname-suggestion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-id)
   (common-lisp:declare (common-lisp:ignorable layer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-hostname-suggestion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetHostnameSuggestion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-hostname-suggestion))
(common-lisp:progn
 (common-lisp:defun grant-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id valid-for-in-minutes)
   (common-lisp:declare
    (common-lisp:ignorable instance-id valid-for-in-minutes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-grant-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GrantAccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'grant-access))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun reboot-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-instance))
(common-lisp:progn
 (common-lisp:defun register-ecs-cluster
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ecs-cluster-arn stack-id)
   (common-lisp:declare (common-lisp:ignorable ecs-cluster-arn stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-ecs-cluster-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterEcsCluster"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-ecs-cluster))
(common-lisp:progn
 (common-lisp:defun register-elastic-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-ip stack-id)
   (common-lisp:declare (common-lisp:ignorable elastic-ip stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-elastic-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterElasticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-elastic-ip))
(common-lisp:progn
 (common-lisp:defun register-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id hostname public-ip private-ip
                     rsa-public-key rsa-public-key-fingerprint
                     instance-identity)
   (common-lisp:declare
    (common-lisp:ignorable stack-id hostname public-ip private-ip
     rsa-public-key rsa-public-key-fingerprint instance-identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-instance))
(common-lisp:progn
 (common-lisp:defun register-rds-db-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id rds-db-instance-arn db-user
                     db-password)
   (common-lisp:declare
    (common-lisp:ignorable stack-id rds-db-instance-arn db-user db-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-rds-db-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterRdsDbInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-rds-db-instance))
(common-lisp:progn
 (common-lisp:defun register-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ec2volume-id stack-id)
   (common-lisp:declare (common-lisp:ignorable ec2volume-id stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-volume))
(common-lisp:progn
 (common-lisp:defun set-load-based-auto-scaling
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-id enable up-scaling down-scaling)
   (common-lisp:declare
    (common-lisp:ignorable layer-id enable up-scaling down-scaling))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-load-based-auto-scaling-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetLoadBasedAutoScaling"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-load-based-auto-scaling))
(common-lisp:progn
 (common-lisp:defun set-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id iam-user-arn allow-ssh
                     allow-sudo level)
   (common-lisp:declare
    (common-lisp:ignorable stack-id iam-user-arn allow-ssh allow-sudo level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetPermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-permission))
(common-lisp:progn
 (common-lisp:defun set-time-based-auto-scaling
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id auto-scaling-schedule)
   (common-lisp:declare
    (common-lisp:ignorable instance-id auto-scaling-schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-time-based-auto-scaling-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetTimeBasedAutoScaling"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-time-based-auto-scaling))
(common-lisp:progn
 (common-lisp:defun start-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-instance))
(common-lisp:progn
 (common-lisp:defun start-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id)
   (common-lisp:declare (common-lisp:ignorable stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-stack))
(common-lisp:progn
 (common-lisp:defun stop-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id force)
   (common-lisp:declare (common-lisp:ignorable instance-id force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-instance))
(common-lisp:progn
 (common-lisp:defun stop-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id)
   (common-lisp:declare (common-lisp:ignorable stack-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-stack))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun unassign-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unassign-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnassignInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unassign-instance))
(common-lisp:progn
 (common-lisp:defun unassign-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-id)
   (common-lisp:declare (common-lisp:ignorable volume-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unassign-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnassignVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unassign-volume))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id name description data-sources type
                     app-source domains enable-ssl ssl-configuration attributes
                     environment)
   (common-lisp:declare
    (common-lisp:ignorable app-id name description data-sources type app-source
     domains enable-ssl ssl-configuration attributes environment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateApp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-app))
(common-lisp:progn
 (common-lisp:defun update-elastic-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elastic-ip name)
   (common-lisp:declare (common-lisp:ignorable elastic-ip name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-elastic-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateElasticIp"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-elastic-ip))
(common-lisp:progn
 (common-lisp:defun update-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id layer-ids instance-type
                     auto-scaling-type hostname os ami-id ssh-key-name
                     architecture install-updates-on-boot ebs-optimized
                     agent-version)
   (common-lisp:declare
    (common-lisp:ignorable instance-id layer-ids instance-type
     auto-scaling-type hostname os ami-id ssh-key-name architecture
     install-updates-on-boot ebs-optimized agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-instance))
(common-lisp:progn
 (common-lisp:defun update-layer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key layer-id name shortname attributes
                     cloud-watch-logs-configuration custom-instance-profile-arn
                     custom-json custom-security-group-ids packages
                     volume-configurations enable-auto-healing
                     auto-assign-elastic-ips auto-assign-public-ips
                     custom-recipes install-updates-on-boot
                     use-ebs-optimized-instances lifecycle-event-configuration)
   (common-lisp:declare
    (common-lisp:ignorable layer-id name shortname attributes
     cloud-watch-logs-configuration custom-instance-profile-arn custom-json
     custom-security-group-ids packages volume-configurations
     enable-auto-healing auto-assign-elastic-ips auto-assign-public-ips
     custom-recipes install-updates-on-boot use-ebs-optimized-instances
     lifecycle-event-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-layer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLayer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-layer))
(common-lisp:progn
 (common-lisp:defun update-my-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ssh-public-key)
   (common-lisp:declare (common-lisp:ignorable ssh-public-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-my-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMyUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-my-user-profile))
(common-lisp:progn
 (common-lisp:defun update-rds-db-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rds-db-instance-arn db-user db-password)
   (common-lisp:declare
    (common-lisp:ignorable rds-db-instance-arn db-user db-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rds-db-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRdsDbInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-rds-db-instance))
(common-lisp:progn
 (common-lisp:defun update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-id name attributes service-role-arn
                     default-instance-profile-arn default-os hostname-theme
                     default-availability-zone default-subnet-id custom-json
                     configuration-manager chef-configuration
                     use-custom-cookbooks custom-cookbooks-source
                     default-ssh-key-name default-root-device-type
                     use-opsworks-security-groups agent-version)
   (common-lisp:declare
    (common-lisp:ignorable stack-id name attributes service-role-arn
     default-instance-profile-arn default-os hostname-theme
     default-availability-zone default-subnet-id custom-json
     configuration-manager chef-configuration use-custom-cookbooks
     custom-cookbooks-source default-ssh-key-name default-root-device-type
     use-opsworks-security-groups agent-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateStack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-stack))
(common-lisp:progn
 (common-lisp:defun update-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key iam-user-arn ssh-username ssh-public-key
                     allow-self-management)
   (common-lisp:declare
    (common-lisp:ignorable iam-user-arn ssh-username ssh-public-key
     allow-self-management))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-profile))
(common-lisp:progn
 (common-lisp:defun update-volume
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-id name mount-point)
   (common-lisp:declare (common-lisp:ignorable volume-id name mount-point))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-volume-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opsworks-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVolume"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-volume))
