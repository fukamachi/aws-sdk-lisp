;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/connectcampaigns/api (:use)
                             (:nicknames #:aws/connectcampaigns)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/connectcampaigns/api)
(common-lisp:progn
 (common-lisp:define-condition connectcampaigns-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'connectcampaigns-error))
(common-lisp:progn
 (common-lisp:defclass connectcampaigns-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "connectcampaigns"
                        :api-version "2021-01-30" :host-prefix
                        "connect-campaigns" :signing-name "connect-campaigns"
                        :global-host common-lisp:nil))
 (common-lisp:export 'connectcampaigns-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidCampaignStateException" . invalid-campaign-state-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader access-denied-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-x-amz-error-type)))
(common-lisp:progn
 (common-lisp:defclass agentless-dialer-config common-lisp:nil
                       ((dialing-capacity :initarg :dialing-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or dialing-capacity common-lisp:null)
                         :accessor
                         struct-shape-agentless-dialer-config-dialing-capacity
                         :shape "DialingCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agentless-dialer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agentless-dialer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agentless-dialer-config 'make-agentless-dialer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agentless-dialer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agentless-dialer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialing-capacity))
      (common-lisp:list
       (common-lisp:cons "dialingCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agentless-dialer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass answer-machine-detection-config common-lisp:nil
                       ((enable-answer-machine-detection :initarg
                         :enable-answer-machine-detection :initform
                         (common-lisp:error
                          ":enableanswermachinedetection is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-answer-machine-detection-config-enable-answer-machine-detection
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-answer-machine-detection-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'answer-machine-detection-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'answer-machine-detection-config
                    'make-answer-machine-detection-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-answer-machine-detection))
      (common-lisp:list
       (common-lisp:cons "enableAnswerMachineDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          answer-machine-detection-config))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun make-attributes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype bandwidth-allocation () 'common-lisp:double-float)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass campaign common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-campaign-id :shape "CampaignId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or campaign-arn common-lisp:null)
                         :accessor struct-shape-campaign-arn :shape
                         "CampaignArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or campaign-name common-lisp:null)
                         :accessor struct-shape-campaign-name :shape
                         "CampaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor struct-shape-campaign-connect-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialer-config :initarg :dialer-config :initform
                         (common-lisp:error ":dialerconfig is required") :type
                         (common-lisp:or dialer-config common-lisp:null)
                         :accessor struct-shape-campaign-dialer-config :shape
                         "DialerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outbound-call-config :initarg :outbound-call-config
                         :initform
                         (common-lisp:error ":outboundcallconfig is required")
                         :type
                         (common-lisp:or outbound-call-config common-lisp:null)
                         :accessor struct-shape-campaign-outbound-call-config
                         :shape "OutboundCallConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-campaign-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-campaign
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'campaign
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'campaign 'make-campaign))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-instance-id))
      (common-lisp:list
       (common-lisp:cons "connectInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialer-config))
      (common-lisp:list
       (common-lisp:cons "dialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-call-config))
      (common-lisp:list
       (common-lisp:cons "outboundCallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign))
   common-lisp:nil))
(common-lisp:deftype campaign-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass campaign-filters common-lisp:nil
                       ((instance-id-filter :initarg :instance-id-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-id-filter common-lisp:null)
                         :accessor
                         struct-shape-campaign-filters-instance-id-filter
                         :shape "InstanceIdFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-campaign-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'campaign-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'campaign-filters 'make-campaign-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id-filter))
      (common-lisp:list
       (common-lisp:cons "instanceIdFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-filters))
   common-lisp:nil))
(common-lisp:deftype campaign-id () 'common-lisp:string)
(common-lisp:deftype campaign-name () 'common-lisp:string)
(common-lisp:deftype campaign-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass campaign-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-campaign-summary-id :shape
                         "CampaignId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or campaign-arn common-lisp:null)
                         :accessor struct-shape-campaign-summary-arn :shape
                         "CampaignArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or campaign-name common-lisp:null)
                         :accessor struct-shape-campaign-summary-name :shape
                         "CampaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-campaign-summary-connect-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-campaign-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'campaign-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'campaign-summary 'make-campaign-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input campaign-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-instance-id))
      (common-lisp:list
       (common-lisp:cons "connectInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input campaign-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype campaign-summary-list ()
   '(trivial-types:proper-list campaign-summary))
 (common-lisp:defun make-campaign-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list campaign-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader conflict-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-x-amz-error-type)))
(common-lisp:deftype contact-flow-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-campaign-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or campaign-name common-lisp:null)
                         :accessor struct-shape-create-campaign-request-name
                         :shape "CampaignName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-connect-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialer-config :initarg :dialer-config :initform
                         (common-lisp:error ":dialerconfig is required") :type
                         (common-lisp:or dialer-config common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-dialer-config
                         :shape "DialerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outbound-call-config :initarg :outbound-call-config
                         :initform
                         (common-lisp:error ":outboundcallconfig is required")
                         :type
                         (common-lisp:or outbound-call-config common-lisp:null)
                         :accessor
                         struct-shape-create-campaign-request-outbound-call-config
                         :shape "OutboundCallConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-campaign-request-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-campaign-request 'make-create-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-instance-id))
      (common-lisp:list
       (common-lisp:cons "connectInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialer-config))
      (common-lisp:list
       (common-lisp:cons "dialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outbound-call-config))
      (common-lisp:list
       (common-lisp:cons "outboundCallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-campaign-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-create-campaign-response-id
                         :shape "CampaignId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or campaign-arn common-lisp:null)
                         :accessor struct-shape-create-campaign-response-arn
                         :shape "CampaignArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-campaign-response-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-campaign-response 'make-create-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-campaign-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-delete-campaign-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-campaign-request 'make-delete-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connect-instance-config-request common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connect-instance-config-request-connect-instance-id
                         :shape "InstanceId" :location "uri" :location-name
                         "connectInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connect-instance-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-connect-instance-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connect-instance-config-request
                    'make-delete-connect-instance-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-instance-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-instance-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-instance-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-onboarding-job-request common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-onboarding-job-request-connect-instance-id
                         :shape "InstanceId" :location "uri" :location-name
                         "connectInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-onboarding-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-onboarding-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-onboarding-job-request
                    'make-delete-instance-onboarding-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-onboarding-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-onboarding-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-onboarding-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-describe-campaign-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-campaign-request
                    'make-describe-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-campaign-response common-lisp:nil
                       ((campaign :initarg :campaign :initform common-lisp:nil
                         :type (common-lisp:or campaign common-lisp:null)
                         :accessor
                         struct-shape-describe-campaign-response-campaign
                         :shape "Campaign" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-campaign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-campaign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-campaign-response
                    'make-describe-campaign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign))
      (common-lisp:list
       (common-lisp:cons "campaign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-campaign-response))
   common-lisp:nil))
(common-lisp:deftype destination-phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dial-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-dial-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         (common-lisp:error ":phonenumber is required") :type
                         (common-lisp:or destination-phone-number
                                         common-lisp:null)
                         :accessor struct-shape-dial-request-phone-number
                         :shape "DestinationPhoneNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expiration-time :initarg :expiration-time :initform
                         (common-lisp:error ":expirationtime is required")
                         :type (common-lisp:or time-stamp common-lisp:null)
                         :accessor struct-shape-dial-request-expiration-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         (common-lisp:error ":attributes is required") :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         struct-shape-dial-request-attributes :shape
                         "Attributes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dial-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dial-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dial-request 'make-dial-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dial-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dial-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "phoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "expirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dial-request))
   common-lisp:nil))
(common-lisp:deftype dial-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dial-request-list ()
   '(trivial-types:proper-list dial-request))
 (common-lisp:defun make-dial-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dial-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dialer-config common-lisp:nil
                       ((progressive-dialer-config :initarg
                         :progressive-dialer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or progressive-dialer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-dialer-config-progressive-dialer-config
                         :shape "ProgressiveDialerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (predictive-dialer-config :initarg
                         :predictive-dialer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or predictive-dialer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-dialer-config-predictive-dialer-config
                         :shape "PredictiveDialerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (agentless-dialer-config :initarg
                         :agentless-dialer-config :initform common-lisp:nil
                         :type
                         (common-lisp:or agentless-dialer-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-dialer-config-agentless-dialer-config
                         :shape "AgentlessDialerConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dialer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dialer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dialer-config 'make-dialer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progressive-dialer-config))
      (common-lisp:list
       (common-lisp:cons "progressiveDialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-dialer-config))
      (common-lisp:list
       (common-lisp:cons "predictiveDialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agentless-dialer-config))
      (common-lisp:list
       (common-lisp:cons "agentlessDialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialer-config))
   common-lisp:nil))
(common-lisp:deftype dialing-capacity () 'common-lisp:double-float)
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass encryption-config common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or enabled common-lisp:null) :accessor
                         struct-shape-encryption-config-enabled :shape
                         "Enabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-type :initarg :encryption-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor
                         struct-shape-encryption-config-encryption-type :shape
                         "EncryptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-arn :initarg :key-arn :initform common-lisp:nil
                         :type (common-lisp:or encryption-key common-lisp:null)
                         :accessor struct-shape-encryption-config-key-arn
                         :shape "EncryptionKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-config 'make-encryption-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "keyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-config))
   common-lisp:nil))
(common-lisp:deftype encryption-key () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failed-campaign-state-response common-lisp:nil
                       ((campaign-id :initarg :campaign-id :initform
                         common-lisp:nil :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor
                         struct-shape-failed-campaign-state-response-campaign-id
                         :shape "CampaignId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or get-campaign-state-batch-failure-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-failed-campaign-state-response-failure-code
                         :shape "GetCampaignStateBatchFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-campaign-state-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-campaign-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-campaign-state-response
                    'make-failed-campaign-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-campaign-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-campaign-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "campaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-campaign-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-campaign-state-response-list ()
   '(trivial-types:proper-list failed-campaign-state-response))
 (common-lisp:defun make-failed-campaign-state-response-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-campaign-state-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-failed-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or dial-request-id common-lisp:null)
                         :accessor struct-shape-failed-request-id :shape
                         "DialRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-code common-lisp:null)
                         :accessor struct-shape-failed-request-failure-code
                         :shape "FailureCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failed-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'failed-request 'make-failed-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-request-list ()
   '(trivial-types:proper-list failed-request))
 (common-lisp:defun make-failed-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failure-code () 'common-lisp:string)
(common-lisp:deftype get-campaign-state-batch-failure-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-campaign-state-batch-request common-lisp:nil
                       ((campaign-ids :initarg :campaign-ids :initform
                         (common-lisp:error ":campaignids is required") :type
                         (common-lisp:or
                          get-campaign-state-batch-request-campaign-ids-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-state-batch-request-campaign-ids
                         :shape "GetCampaignStateBatchRequestCampaignIdsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-state-batch-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-campaign-state-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-state-batch-request
                    'make-get-campaign-state-batch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-ids))
      (common-lisp:list
       (common-lisp:cons "campaignIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-campaign-state-batch-request-campaign-ids-list ()
   '(trivial-types:proper-list campaign-id))
 (common-lisp:defun make-get-campaign-state-batch-request-campaign-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list campaign-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-campaign-state-batch-response common-lisp:nil
                       ((successful-requests :initarg :successful-requests
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          successful-campaign-state-response-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-state-batch-response-successful-requests
                         :shape "SuccessfulCampaignStateResponseList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failed-requests :initarg :failed-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-campaign-state-response-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-state-batch-response-failed-requests
                         :shape "FailedCampaignStateResponseList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-state-batch-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-campaign-state-batch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-state-batch-response
                    'make-get-campaign-state-batch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-requests))
      (common-lisp:list
       (common-lisp:cons "successfulRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "failedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-batch-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-campaign-state-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-get-campaign-state-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-state-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-state-request
                    'make-get-campaign-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-campaign-state-response common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or campaign-state common-lisp:null)
                         :accessor
                         struct-shape-get-campaign-state-response-state :shape
                         "CampaignState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-campaign-state-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-campaign-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-campaign-state-response
                    'make-get-campaign-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-campaign-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-instance-config-request common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-connect-instance-config-request-connect-instance-id
                         :shape "InstanceId" :location "uri" :location-name
                         "connectInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-instance-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-instance-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-instance-config-request
                    'make-get-connect-instance-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-instance-config-response common-lisp:nil
                       ((connect-instance-config :initarg
                         :connect-instance-config :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-config common-lisp:null)
                         :accessor
                         struct-shape-get-connect-instance-config-response-connect-instance-config
                         :shape "InstanceConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-instance-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-instance-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-instance-config-response
                    'make-get-connect-instance-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-instance-config))
      (common-lisp:list
       (common-lisp:cons "connectInstanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-instance-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-onboarding-job-status-request
                       common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-get-instance-onboarding-job-status-request-connect-instance-id
                         :shape "InstanceId" :location "uri" :location-name
                         "connectInstanceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-onboarding-job-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-onboarding-job-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-onboarding-job-status-request
                    'make-get-instance-onboarding-job-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-instance-onboarding-job-status-response
                       common-lisp:nil
                       ((connect-instance-onboarding-job-status :initarg
                         :connect-instance-onboarding-job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-onboarding-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-instance-onboarding-job-status-response-connect-instance-onboarding-job-status
                         :shape "InstanceOnboardingJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-instance-onboarding-job-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-instance-onboarding-job-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-instance-onboarding-job-status-response
                    'make-get-instance-onboarding-job-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-instance-onboarding-job-status))
      (common-lisp:list
       (common-lisp:cons "connectInstanceOnboardingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-onboarding-job-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-config common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-instance-config-connect-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-linked-role-arn :initarg
                         :service-linked-role-arn :initform
                         (common-lisp:error
                          ":servicelinkedrolearn is required")
                         :type
                         (common-lisp:or service-linked-role-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-config-service-linked-role-arn
                         :shape "ServiceLinkedRoleArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-config :initarg :encryption-config
                         :initform
                         (common-lisp:error ":encryptionconfig is required")
                         :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-instance-config-encryption-config :shape
                         "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-config 'make-instance-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-instance-id))
      (common-lisp:list
       (common-lisp:cons "connectInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-linked-role-arn))
      (common-lisp:list
       (common-lisp:cons "serviceLinkedRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-config))
   common-lisp:nil))
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-id-filter common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor struct-shape-instance-id-filter-value :shape
                         "InstanceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operator :initarg :operator :initform
                         (common-lisp:error ":operator is required") :type
                         (common-lisp:or instance-id-filter-operator
                                         common-lisp:null)
                         :accessor struct-shape-instance-id-filter-operator
                         :shape "InstanceIdFilterOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-id-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-id-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-id-filter 'make-instance-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-id-filter))
   common-lisp:nil))
(common-lisp:deftype instance-id-filter-operator () 'common-lisp:string)
(common-lisp:deftype instance-onboarding-job-failure-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-onboarding-job-status common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-instance-onboarding-job-status-connect-instance-id
                         :shape "InstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or instance-onboarding-job-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-onboarding-job-status-status
                         :shape "InstanceOnboardingJobStatusCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failure-code :initarg :failure-code :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-onboarding-job-failure-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-onboarding-job-status-failure-code
                         :shape "InstanceOnboardingJobFailureCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-onboarding-job-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-onboarding-job-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-onboarding-job-status
                    'make-instance-onboarding-job-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-onboarding-job-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-onboarding-job-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-instance-id))
      (common-lisp:list
       (common-lisp:cons "connectInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-onboarding-job-status))
   common-lisp:nil))
(common-lisp:deftype instance-onboarding-job-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader internal-server-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-x-amz-error-type)))
(common-lisp:progn
 (common-lisp:define-condition invalid-campaign-state-exception
     (connectcampaigns-error)
     ((state :initarg :state :initform common-lisp:nil :reader
       invalid-campaign-state-exception-state)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-campaign-state-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader invalid-campaign-state-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'invalid-campaign-state-exception
                    'invalid-campaign-state-exception-state
                    'invalid-campaign-state-exception-message
                    'invalid-campaign-state-exception-x-amz-error-type)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader invalid-state-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message
                    'invalid-state-exception-x-amz-error-type)))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-request-max-results :shape
                         "MaxResults" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-campaigns-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or campaign-filters common-lisp:null)
                         :accessor struct-shape-list-campaigns-request-filters
                         :shape "CampaignFilters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-campaigns-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-request 'make-list-campaigns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-campaigns-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-campaigns-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (campaign-summary-list :initarg :campaign-summary-list
                         :initform common-lisp:nil :type
                         (common-lisp:or campaign-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-campaigns-response-campaign-summary-list
                         :shape "CampaignSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-campaigns-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-campaigns-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-campaigns-response 'make-list-campaigns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'campaign-summary-list))
      (common-lisp:list
       (common-lisp:cons "campaignSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-campaigns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-arn :shape
                         "Arn" :location "uri" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass outbound-call-config common-lisp:nil
                       ((connect-contact-flow-id :initarg
                         :connect-contact-flow-id :initform
                         (common-lisp:error
                          ":connectcontactflowid is required")
                         :type
                         (common-lisp:or contact-flow-id common-lisp:null)
                         :accessor
                         struct-shape-outbound-call-config-connect-contact-flow-id
                         :shape "ContactFlowId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-source-phone-number :initarg
                         :connect-source-phone-number :initform common-lisp:nil
                         :type
                         (common-lisp:or source-phone-number common-lisp:null)
                         :accessor
                         struct-shape-outbound-call-config-connect-source-phone-number
                         :shape "SourcePhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-queue-id :initarg :connect-queue-id :initform
                         common-lisp:nil :type
                         (common-lisp:or queue-id common-lisp:null) :accessor
                         struct-shape-outbound-call-config-connect-queue-id
                         :shape "QueueId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-machine-detection-config :initarg
                         :answer-machine-detection-config :initform
                         common-lisp:nil :type
                         (common-lisp:or answer-machine-detection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-outbound-call-config-answer-machine-detection-config
                         :shape "AnswerMachineDetectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outbound-call-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outbound-call-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outbound-call-config 'make-outbound-call-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outbound-call-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outbound-call-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "connectContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-source-phone-number))
      (common-lisp:list
       (common-lisp:cons "connectSourcePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-queue-id))
      (common-lisp:list
       (common-lisp:cons "connectQueueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'answer-machine-detection-config))
      (common-lisp:list
       (common-lisp:cons "answerMachineDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outbound-call-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pause-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-pause-campaign-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pause-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pause-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pause-campaign-request 'make-pause-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predictive-dialer-config common-lisp:nil
                       ((bandwidth-allocation :initarg :bandwidth-allocation
                         :initform
                         (common-lisp:error ":bandwidthallocation is required")
                         :type
                         (common-lisp:or bandwidth-allocation common-lisp:null)
                         :accessor
                         struct-shape-predictive-dialer-config-bandwidth-allocation
                         :shape "BandwidthAllocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialing-capacity :initarg :dialing-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or dialing-capacity common-lisp:null)
                         :accessor
                         struct-shape-predictive-dialer-config-dialing-capacity
                         :shape "DialingCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predictive-dialer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predictive-dialer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'predictive-dialer-config 'make-predictive-dialer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predictive-dialer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predictive-dialer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-allocation))
      (common-lisp:list
       (common-lisp:cons "bandwidthAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialing-capacity))
      (common-lisp:list
       (common-lisp:cons "dialingCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predictive-dialer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass progressive-dialer-config common-lisp:nil
                       ((bandwidth-allocation :initarg :bandwidth-allocation
                         :initform
                         (common-lisp:error ":bandwidthallocation is required")
                         :type
                         (common-lisp:or bandwidth-allocation common-lisp:null)
                         :accessor
                         struct-shape-progressive-dialer-config-bandwidth-allocation
                         :shape "BandwidthAllocation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialing-capacity :initarg :dialing-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or dialing-capacity common-lisp:null)
                         :accessor
                         struct-shape-progressive-dialer-config-dialing-capacity
                         :shape "DialingCapacity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-progressive-dialer-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'progressive-dialer-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'progressive-dialer-config
                    'make-progressive-dialer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          progressive-dialer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          progressive-dialer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-allocation))
      (common-lisp:list
       (common-lisp:cons "bandwidthAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialing-capacity))
      (common-lisp:list
       (common-lisp:cons "dialingCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          progressive-dialer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-dial-request-batch-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor
                         struct-shape-put-dial-request-batch-request-id :shape
                         "CampaignId" :location "uri" :location-name "id")
                        (dial-requests :initarg :dial-requests :initform
                         (common-lisp:error ":dialrequests is required") :type
                         (common-lisp:or dial-request-list common-lisp:null)
                         :accessor
                         struct-shape-put-dial-request-batch-request-dial-requests
                         :shape "DialRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-dial-request-batch-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-dial-request-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-dial-request-batch-request
                    'make-put-dial-request-batch-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dial-requests))
      (common-lisp:list
       (common-lisp:cons "dialRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-dial-request-batch-response common-lisp:nil
                       ((successful-requests :initarg :successful-requests
                         :initform common-lisp:nil :type
                         (common-lisp:or successful-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-dial-request-batch-response-successful-requests
                         :shape "SuccessfulRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failed-requests :initarg :failed-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-request-list common-lisp:null)
                         :accessor
                         struct-shape-put-dial-request-batch-response-failed-requests
                         :shape "FailedRequestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-dial-request-batch-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-dial-request-batch-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-dial-request-batch-response
                    'make-put-dial-request-batch-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-requests))
      (common-lisp:list
       (common-lisp:cons "successfulRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-requests))
      (common-lisp:list
       (common-lisp:cons "failedRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-dial-request-batch-response))
   common-lisp:nil))
(common-lisp:deftype queue-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader resource-not-found-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-x-amz-error-type)))
(common-lisp:progn
 (common-lisp:defclass resume-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-resume-campaign-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-campaign-request 'make-resume-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-campaign-request))
   common-lisp:nil))
(common-lisp:deftype service-linked-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader service-quota-exceeded-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-x-amz-error-type)))
(common-lisp:deftype source-phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-start-campaign-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-campaign-request 'make-start-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-campaign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-instance-onboarding-job-request common-lisp:nil
                       ((connect-instance-id :initarg :connect-instance-id
                         :initform
                         (common-lisp:error ":connectinstanceid is required")
                         :type (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         struct-shape-start-instance-onboarding-job-request-connect-instance-id
                         :shape "InstanceId" :location "uri" :location-name
                         "connectInstanceId")
                        (encryption-config :initarg :encryption-config
                         :initform
                         (common-lisp:error ":encryptionconfig is required")
                         :type
                         (common-lisp:or encryption-config common-lisp:null)
                         :accessor
                         struct-shape-start-instance-onboarding-job-request-encryption-config
                         :shape "EncryptionConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-instance-onboarding-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-instance-onboarding-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-instance-onboarding-job-request
                    'make-start-instance-onboarding-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-config))
      (common-lisp:list
       (common-lisp:cons "encryptionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-instance-onboarding-job-response common-lisp:nil
                       ((connect-instance-onboarding-job-status :initarg
                         :connect-instance-onboarding-job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-onboarding-job-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-instance-onboarding-job-response-connect-instance-onboarding-job-status
                         :shape "InstanceOnboardingJobStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-instance-onboarding-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-instance-onboarding-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-instance-onboarding-job-response
                    'make-start-instance-onboarding-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-instance-onboarding-job-status))
      (common-lisp:list
       (common-lisp:cons "connectInstanceOnboardingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-onboarding-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-campaign-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-stop-campaign-request-id :shape
                         "CampaignId" :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-campaign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-campaign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-campaign-request 'make-stop-campaign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-campaign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-campaign-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass successful-campaign-state-response common-lisp:nil
                       ((campaign-id :initarg :campaign-id :initform
                         common-lisp:nil :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor
                         struct-shape-successful-campaign-state-response-campaign-id
                         :shape "CampaignId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or campaign-state common-lisp:null)
                         :accessor
                         struct-shape-successful-campaign-state-response-state
                         :shape "CampaignState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-successful-campaign-state-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'successful-campaign-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'successful-campaign-state-response
                    'make-successful-campaign-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          successful-campaign-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          successful-campaign-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'campaign-id))
      (common-lisp:list
       (common-lisp:cons "campaignId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          successful-campaign-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype successful-campaign-state-response-list ()
   '(trivial-types:proper-list successful-campaign-state-response))
 (common-lisp:defun make-successful-campaign-state-response-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            successful-campaign-state-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass successful-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor struct-shape-successful-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or dial-request-id common-lisp:null)
                         :accessor struct-shape-successful-request-id :shape
                         "DialRequestId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-successful-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'successful-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'successful-request 'make-successful-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input successful-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input successful-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input successful-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype successful-request-list ()
   '(trivial-types:proper-list successful-request))
 (common-lisp:defun make-successful-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list successful-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-arn :shape "Arn"
                         :location "uri" :location-name "arn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader throttling-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-x-amz-error-type)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-arn :shape "Arn"
                         :location "uri" :location-name "arn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-campaign-dialer-config-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-dialer-config-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id")
                        (dialer-config :initarg :dialer-config :initform
                         (common-lisp:error ":dialerconfig is required") :type
                         (common-lisp:or dialer-config common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-dialer-config-request-dialer-config
                         :shape "DialerConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-campaign-dialer-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-campaign-dialer-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-campaign-dialer-config-request
                    'make-update-campaign-dialer-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-dialer-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-dialer-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialer-config))
      (common-lisp:list
       (common-lisp:cons "dialerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-dialer-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-campaign-name-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor struct-shape-update-campaign-name-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id")
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or campaign-name common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-name-request-name :shape
                         "CampaignName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-campaign-name-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-campaign-name-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-campaign-name-request
                    'make-update-campaign-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-campaign-outbound-call-config-request
                       common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or campaign-id common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-outbound-call-config-request-id
                         :shape "CampaignId" :location "uri" :location-name
                         "id")
                        (connect-contact-flow-id :initarg
                         :connect-contact-flow-id :initform common-lisp:nil
                         :type
                         (common-lisp:or contact-flow-id common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-outbound-call-config-request-connect-contact-flow-id
                         :shape "ContactFlowId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-source-phone-number :initarg
                         :connect-source-phone-number :initform common-lisp:nil
                         :type
                         (common-lisp:or source-phone-number common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-outbound-call-config-request-connect-source-phone-number
                         :shape "SourcePhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (answer-machine-detection-config :initarg
                         :answer-machine-detection-config :initform
                         common-lisp:nil :type
                         (common-lisp:or answer-machine-detection-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-campaign-outbound-call-config-request-answer-machine-detection-config
                         :shape "AnswerMachineDetectionConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-campaign-outbound-call-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-campaign-outbound-call-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-campaign-outbound-call-config-request
                    'make-update-campaign-outbound-call-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-outbound-call-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-outbound-call-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-contact-flow-id))
      (common-lisp:list
       (common-lisp:cons "connectContactFlowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-source-phone-number))
      (common-lisp:list
       (common-lisp:cons "connectSourcePhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'answer-machine-detection-config))
      (common-lisp:list
       (common-lisp:cons "answerMachineDetectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-campaign-outbound-call-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (connectcampaigns-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (x-amz-error-type :initarg :x-amz-error-type :initform common-lisp:nil
       :reader validation-exception-x-amz-error-type)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-x-amz-error-type)))
(common-lisp:deftype xamazon-error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name connect-instance-id dialer-config
                     outbound-call-config tags)
   (common-lisp:declare
    (common-lisp:ignorable name connect-instance-id dialer-config
     outbound-call-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "PUT"
        "/campaigns" "CreateCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-campaign))
(common-lisp:progn
 (common-lisp:defun delete-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DeleteCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-campaign))
(common-lisp:progn
 (common-lisp:defun delete-connect-instance-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-instance-id)
   (common-lisp:declare (common-lisp:ignorable connect-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-connect-instance-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connect-instance/~A/config"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connect-instance-id))))
        "DeleteConnectInstanceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connect-instance-config))
(common-lisp:progn
 (common-lisp:defun delete-instance-onboarding-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-instance-id)
   (common-lisp:declare (common-lisp:ignorable connect-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-instance-onboarding-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connect-instance/~A/onboarding"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connect-instance-id))))
        "DeleteInstanceOnboardingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance-onboarding-job))
(common-lisp:progn
 (common-lisp:defun describe-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "DescribeCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-campaign))
(common-lisp:progn
 (common-lisp:defun get-campaign-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/state"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "GetCampaignState"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-campaign-state))
(common-lisp:progn
 (common-lisp:defun get-campaign-state-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key campaign-ids)
   (common-lisp:declare (common-lisp:ignorable campaign-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-campaign-state-batch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        "/campaigns-state" "GetCampaignStateBatch"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-campaign-state-batch))
(common-lisp:progn
 (common-lisp:defun get-connect-instance-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-instance-id)
   (common-lisp:declare (common-lisp:ignorable connect-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-connect-instance-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connect-instance/~A/config"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connect-instance-id))))
        "GetConnectInstanceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connect-instance-config))
(common-lisp:progn
 (common-lisp:defun get-instance-onboarding-job-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-instance-id)
   (common-lisp:declare (common-lisp:ignorable connect-instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-instance-onboarding-job-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connect-instance/~A/onboarding"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connect-instance-id))))
        "GetInstanceOnboardingJobStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-instance-onboarding-job-status))
(common-lisp:progn
 (common-lisp:defun list-campaigns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-campaigns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        "/campaigns-summary" "ListCampaigns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-campaigns))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun pause-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-pause-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/pause"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "PauseCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'pause-campaign))
(common-lisp:progn
 (common-lisp:defun put-dial-request-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id dial-requests)
   (common-lisp:declare (common-lisp:ignorable id dial-requests))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-dial-request-batch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/dial-requests"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "PutDialRequestBatch"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-dial-request-batch))
(common-lisp:progn
 (common-lisp:defun resume-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/resume"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "ResumeCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resume-campaign))
(common-lisp:progn
 (common-lisp:defun start-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/start"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "StartCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-campaign))
(common-lisp:progn
 (common-lisp:defun start-instance-onboarding-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-instance-id encryption-config)
   (common-lisp:declare
    (common-lisp:ignorable connect-instance-id encryption-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-instance-onboarding-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connect-instance/~A/onboarding"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connect-instance-id))))
        "StartInstanceOnboardingJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-instance-onboarding-job))
(common-lisp:progn
 (common-lisp:defun stop-campaign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-campaign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/stop"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "StopCampaign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-campaign))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-campaign-dialer-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id dialer-config)
   (common-lisp:declare (common-lisp:ignorable id dialer-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-campaign-dialer-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/dialer-config"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateCampaignDialerConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-campaign-dialer-config))
(common-lisp:progn
 (common-lisp:defun update-campaign-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name)
   (common-lisp:declare (common-lisp:ignorable id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-campaign-name-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/campaigns/~A/name"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateCampaignName"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-campaign-name))
(common-lisp:progn
 (common-lisp:defun update-campaign-outbound-call-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id connect-contact-flow-id
                     connect-source-phone-number
                     answer-machine-detection-config)
   (common-lisp:declare
    (common-lisp:ignorable id connect-contact-flow-id
     connect-source-phone-number answer-machine-detection-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-campaign-outbound-call-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'connectcampaigns-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/campaigns/~A/outbound-call-config"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'id))))
        "UpdateCampaignOutboundCallConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-campaign-outbound-call-config))
