;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/discovery/api (:use)
                             (:nicknames #:aws/discovery)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/discovery/api)
(common-lisp:progn
 (common-lisp:define-condition discovery-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'discovery-error))
(common-lisp:progn
 (common-lisp:defclass discovery-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "discovery" :api-version
                        "2015-11-01" :host-prefix "discovery" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSPoseidonService_V2015_11_01"
                        :json-version "1.1"))
 (common-lisp:export 'discovery-request))
(common-lisp:defvar *error-map*
  '(("AuthorizationErrorException" . authorization-error-exception)
    ("ConflictErrorException" . conflict-error-exception)
    ("HomeRegionNotSetException" . home-region-not-set-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerInternalErrorException" . server-internal-error-exception)))
(common-lisp:progn
 (common-lisp:defclass agent-configuration-status common-lisp:nil
                       ((agent-id :initarg :agent-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-agent-configuration-status-agent-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operation-succeeded :initarg :operation-succeeded
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-agent-configuration-status-operation-succeeded
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-configuration-status-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-configuration-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-configuration-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-configuration-status
                    'make-agent-configuration-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-succeeded))
      (common-lisp:list
       (common-lisp:cons "operationSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-configuration-status-list ()
   '(trivial-types:proper-list agent-configuration-status))
 (common-lisp:defun make-agent-configuration-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-configuration-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-ids () '(trivial-types:proper-list agent-id))
 (common-lisp:defun make-agent-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass agent-info common-lisp:nil
                       ((agent-id :initarg :agent-id :initform common-lisp:nil
                         :type (common-lisp:or agent-id common-lisp:null)
                         :accessor struct-shape-agent-info-agent-id :shape
                         "AgentId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (host-name :initarg :host-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-host-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agent-network-info-list :initarg
                         :agent-network-info-list :initform common-lisp:nil
                         :type
                         (common-lisp:or agent-network-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-agent-info-agent-network-info-list :shape
                         "AgentNetworkInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-id :initarg :connector-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-connector-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-agent-info-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (health :initarg :health :initform common-lisp:nil
                         :type (common-lisp:or agent-status common-lisp:null)
                         :accessor struct-shape-agent-info-health :shape
                         "AgentStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-health-ping-time :initarg :last-health-ping-time
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-last-health-ping-time :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collection-status :initarg :collection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-collection-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agent-type :initarg :agent-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-agent-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-time :initarg :registered-time :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-info-registered-time :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'agent-info 'make-agent-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "hostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-network-info-list))
      (common-lisp:list
       (common-lisp:cons "agentNetworkInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-health-ping-time))
      (common-lisp:list
       (common-lisp:cons "lastHealthPingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-status))
      (common-lisp:list
       (common-lisp:cons "collectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-type))
      (common-lisp:list
       (common-lisp:cons "agentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-time))
      (common-lisp:list
       (common-lisp:cons "registeredTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-network-info common-lisp:nil
                       ((ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-network-info-ip-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mac-address :initarg :mac-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-agent-network-info-mac-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-network-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-network-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-network-info 'make-agent-network-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-network-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-network-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-network-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-network-info-list ()
   '(trivial-types:proper-list agent-network-info))
 (common-lisp:defun make-agent-network-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-network-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agents-info () '(trivial-types:proper-list agent-info))
 (common-lisp:defun make-agents-info
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-ids-list ()
   '(trivial-types:proper-list application-id))
 (common-lisp:defun make-application-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-configuration-items-to-application-request
                       common-lisp:nil
                       ((application-configuration-id :initarg
                         :application-configuration-id :initform
                         (common-lisp:error
                          ":applicationconfigurationid is required")
                         :type (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-associate-configuration-items-to-application-request-application-configuration-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-configuration-items-to-application-request-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-configuration-items-to-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-configuration-items-to-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-configuration-items-to-application-request
                    'make-associate-configuration-items-to-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "applicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-configuration-items-to-application-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-configuration-items-to-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-configuration-items-to-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-configuration-items-to-application-response
                    'make-associate-configuration-items-to-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition authorization-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       authorization-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'authorization-error-exception
                    'authorization-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-delete-agent-error common-lisp:nil
                       ((agent-id :initarg :agent-id :initform
                         (common-lisp:error ":agentid is required") :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         struct-shape-batch-delete-agent-error-agent-id :shape
                         "AgentId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         (common-lisp:error ":errormessage is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-delete-agent-error-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         (common-lisp:error ":errorcode is required") :type
                         (common-lisp:or delete-agent-error-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-agent-error-error-code
                         :shape "DeleteAgentErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-agent-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-agent-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-agent-error 'make-batch-delete-agent-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agent-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agent-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agent-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-agent-errors ()
   '(trivial-types:proper-list batch-delete-agent-error))
 (common-lisp:defun make-batch-delete-agent-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-agent-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-agents-request common-lisp:nil
                       ((delete-agents :initarg :delete-agents :initform
                         (common-lisp:error ":deleteagents is required") :type
                         (common-lisp:or delete-agents common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-agents-request-delete-agents
                         :shape "DeleteAgents" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-agents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-agents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-agents-request
                    'make-batch-delete-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-agents))
      (common-lisp:list
       (common-lisp:cons "deleteAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-agents-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-delete-agent-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-agents-response-errors
                         :shape "BatchDeleteAgentErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-agents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-agents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-agents-response
                    'make-batch-delete-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-configuration-task common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-batch-delete-configuration-task-task-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-delete-configuration-task-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-status
                         :shape "BatchDeleteConfigurationTaskStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-batch-delete-configuration-task-start-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or time-stamp common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-end-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-type :initarg :configuration-type
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-configuration-item-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-configuration-type
                         :shape "DeletionConfigurationItemType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (requested-configurations :initarg
                         :requested-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-requested-configurations
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deleted-configurations :initarg
                         :deleted-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-deleted-configurations
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-configurations :initarg :failed-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or failed-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-failed-configurations
                         :shape "FailedConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (deletion-warnings :initarg :deletion-warnings
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-warnings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-configuration-task-deletion-warnings
                         :shape "DeletionWarningsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-configuration-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-configuration-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-configuration-task
                    'make-batch-delete-configuration-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-configuration-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-configuration-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-configurations))
      (common-lisp:list
       (common-lisp:cons "requestedConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deleted-configurations))
      (common-lisp:list
       (common-lisp:cons "deletedConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-configurations))
      (common-lisp:list
       (common-lisp:cons "failedConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-warnings))
      (common-lisp:list
       (common-lisp:cons "deletionWarnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-configuration-task))
   common-lisp:nil))
(common-lisp:deftype batch-delete-configuration-task-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-delete-import-data-error common-lisp:nil
                       ((import-task-id :initarg :import-task-id :initform
                         common-lisp:nil :type
                         (common-lisp:or import-task-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-import-data-error-import-task-id
                         :shape "ImportTaskIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-delete-import-data-error-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-import-data-error-error-code
                         :shape "BatchDeleteImportDataErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-description :initarg :error-description
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          batch-delete-import-data-error-description
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-import-data-error-error-description
                         :shape "BatchDeleteImportDataErrorDescription"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-import-data-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-import-data-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-error
                    'make-batch-delete-import-data-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "importTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-description))
      (common-lisp:list
       (common-lisp:cons "errorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   common-lisp:nil))
(common-lisp:deftype batch-delete-import-data-error-code () 'common-lisp:string)
(common-lisp:deftype batch-delete-import-data-error-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-delete-import-data-error-list ()
   '(trivial-types:proper-list batch-delete-import-data-error))
 (common-lisp:defun make-batch-delete-import-data-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-import-data-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-import-data-request common-lisp:nil
                       ((import-task-ids :initarg :import-task-ids :initform
                         (common-lisp:error ":importtaskids is required") :type
                         (common-lisp:or to-delete-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-import-data-request-import-task-ids
                         :shape "ToDeleteIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delete-history :initarg :delete-history :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-batch-delete-import-data-request-delete-history
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-import-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-import-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-request
                    'make-batch-delete-import-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-ids))
      (common-lisp:list
       (common-lisp:cons "importTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-history))
      (common-lisp:list
       (common-lisp:cons "deleteHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-import-data-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-delete-import-data-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-import-data-response-errors
                         :shape "BatchDeleteImportDataErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-import-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-import-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-response
                    'make-batch-delete-import-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration () 'common-lisp:hash-table)
 (common-lisp:defun make-configuration (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype configuration-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-id-list ()
   '(trivial-types:proper-list configuration-id))
 (common-lisp:defun make-configuration-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-tag common-lisp:nil
                       ((configuration-type :initarg :configuration-type
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-item-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-tag-configuration-type
                         :shape "ConfigurationItemType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-id :initarg :configuration-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-configuration-tag-configuration-id :shape
                         "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-configuration-tag-key :shape "TagKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-configuration-tag-value :shape "TagValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (time-of-creation :initarg :time-of-creation :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-configuration-tag-time-of-creation :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-tag
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-tag 'make-configuration-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-creation))
      (common-lisp:list
       (common-lisp:cons "timeOfCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-tag-set ()
   '(trivial-types:proper-list configuration-tag))
 (common-lisp:defun make-configuration-tag-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype configurations ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun make-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configurations-download-url () 'common-lisp:string)
(common-lisp:deftype configurations-export-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-error-exception
                    'conflict-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass continuous-export-description common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-export-id
                         :shape "ConfigurationsExportId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or continuous-export-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-status
                         :shape "ContinuousExportStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status-detail :initarg :status-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or string-max255 common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-status-detail
                         :shape "StringMax255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-continuous-export-description-start-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-time :initarg :stop-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-continuous-export-description-stop-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-storage-config :initarg :schema-storage-config
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-storage-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-continuous-export-description-schema-storage-config
                         :shape "SchemaStorageConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-continuous-export-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'continuous-export-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'continuous-export-description
                    'make-continuous-export-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "statusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-storage-config))
      (common-lisp:list
       (common-lisp:cons "schemaStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype continuous-export-descriptions ()
   '(trivial-types:proper-list continuous-export-description))
 (common-lisp:defun make-continuous-export-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            continuous-export-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype continuous-export-ids ()
   '(trivial-types:proper-list configurations-export-id))
 (common-lisp:defun make-continuous-export-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurations-export-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype continuous-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-create-application-request-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-application-request-description
                         :shape "ApplicationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((configuration-id :initarg :configuration-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-application-response-configuration-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-request common-lisp:nil
                       ((configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-tags-request-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-create-tags-request-tags :shape "TagSet"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-tags-response 'make-create-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-agent-info common-lisp:nil
                       ((active-agents :initarg :active-agents :initform
                         (common-lisp:error ":activeagents is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-customer-agent-info-active-agents :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (healthy-agents :initarg :healthy-agents :initform
                         (common-lisp:error ":healthyagents is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-customer-agent-info-healthy-agents :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (black-listed-agents :initarg :black-listed-agents
                         :initform
                         (common-lisp:error ":blacklistedagents is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agent-info-black-listed-agents
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shutdown-agents :initarg :shutdown-agents :initform
                         (common-lisp:error ":shutdownagents is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agent-info-shutdown-agents
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-agents :initarg :unhealthy-agents :initform
                         (common-lisp:error ":unhealthyagents is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agent-info-unhealthy-agents
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-agents :initarg :total-agents :initform
                         (common-lisp:error ":totalagents is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-customer-agent-info-total-agents :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unknown-agents :initarg :unknown-agents :initform
                         (common-lisp:error ":unknownagents is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-customer-agent-info-unknown-agents :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-agent-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-agent-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-agent-info 'make-customer-agent-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input customer-agent-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input customer-agent-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-agents))
      (common-lisp:list
       (common-lisp:cons "activeAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-agents))
      (common-lisp:list
       (common-lisp:cons "healthyAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-listed-agents))
      (common-lisp:list
       (common-lisp:cons "blackListedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown-agents))
      (common-lisp:list
       (common-lisp:cons "shutdownAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-agents))
      (common-lisp:list
       (common-lisp:cons "unhealthyAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-agents))
      (common-lisp:list
       (common-lisp:cons "totalAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-agents))
      (common-lisp:list
       (common-lisp:cons "unknownAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input customer-agent-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-agentless-collector-info common-lisp:nil
                       ((active-agentless-collectors :initarg
                         :active-agentless-collectors :initform
                         (common-lisp:error
                          ":activeagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-active-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (healthy-agentless-collectors :initarg
                         :healthy-agentless-collectors :initform
                         (common-lisp:error
                          ":healthyagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-healthy-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deny-listed-agentless-collectors :initarg
                         :deny-listed-agentless-collectors :initform
                         (common-lisp:error
                          ":denylistedagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-deny-listed-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shutdown-agentless-collectors :initarg
                         :shutdown-agentless-collectors :initform
                         (common-lisp:error
                          ":shutdownagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-shutdown-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-agentless-collectors :initarg
                         :unhealthy-agentless-collectors :initform
                         (common-lisp:error
                          ":unhealthyagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-unhealthy-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-agentless-collectors :initarg
                         :total-agentless-collectors :initform
                         (common-lisp:error
                          ":totalagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-total-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unknown-agentless-collectors :initarg
                         :unknown-agentless-collectors :initform
                         (common-lisp:error
                          ":unknownagentlesscollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-agentless-collector-info-unknown-agentless-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-agentless-collector-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'customer-agentless-collector-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-agentless-collector-info
                    'make-customer-agentless-collector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "activeAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "healthyAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-listed-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "denyListedAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shutdown-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "shutdownAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "totalAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unknown-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "unknownAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-connector-info common-lisp:nil
                       ((active-connectors :initarg :active-connectors
                         :initform
                         (common-lisp:error ":activeconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-active-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (healthy-connectors :initarg :healthy-connectors
                         :initform
                         (common-lisp:error ":healthyconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-healthy-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (black-listed-connectors :initarg
                         :black-listed-connectors :initform
                         (common-lisp:error
                          ":blacklistedconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-black-listed-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shutdown-connectors :initarg :shutdown-connectors
                         :initform
                         (common-lisp:error ":shutdownconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-shutdown-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-connectors :initarg :unhealthy-connectors
                         :initform
                         (common-lisp:error ":unhealthyconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-unhealthy-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-connectors :initarg :total-connectors :initform
                         (common-lisp:error ":totalconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-total-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unknown-connectors :initarg :unknown-connectors
                         :initform
                         (common-lisp:error ":unknownconnectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-connector-info-unknown-connectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-connector-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-connector-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-connector-info 'make-customer-connector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-connectors))
      (common-lisp:list
       (common-lisp:cons "activeConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-connectors))
      (common-lisp:list
       (common-lisp:cons "healthyConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'black-listed-connectors))
      (common-lisp:list
       (common-lisp:cons "blackListedConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown-connectors))
      (common-lisp:list
       (common-lisp:cons "shutdownConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-connectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-connectors))
      (common-lisp:list
       (common-lisp:cons "totalConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-connectors))
      (common-lisp:list
       (common-lisp:cons "unknownConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass customer-me-collector-info common-lisp:nil
                       ((active-me-collectors :initarg :active-me-collectors
                         :initform
                         (common-lisp:error ":activemecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-active-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (healthy-me-collectors :initarg :healthy-me-collectors
                         :initform
                         (common-lisp:error ":healthymecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-healthy-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deny-listed-me-collectors :initarg
                         :deny-listed-me-collectors :initform
                         (common-lisp:error
                          ":denylistedmecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-deny-listed-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shutdown-me-collectors :initarg
                         :shutdown-me-collectors :initform
                         (common-lisp:error
                          ":shutdownmecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-shutdown-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unhealthy-me-collectors :initarg
                         :unhealthy-me-collectors :initform
                         (common-lisp:error
                          ":unhealthymecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-unhealthy-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-me-collectors :initarg :total-me-collectors
                         :initform
                         (common-lisp:error ":totalmecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-total-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unknown-me-collectors :initarg :unknown-me-collectors
                         :initform
                         (common-lisp:error ":unknownmecollectors is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-customer-me-collector-info-unknown-me-collectors
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-me-collector-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-me-collector-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-me-collector-info
                    'make-customer-me-collector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-me-collectors))
      (common-lisp:list
       (common-lisp:cons "activeMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-me-collectors))
      (common-lisp:list
       (common-lisp:cons "healthyMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-listed-me-collectors))
      (common-lisp:list
       (common-lisp:cons "denyListedMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shutdown-me-collectors))
      (common-lisp:list
       (common-lisp:cons "shutdownMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-me-collectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-me-collectors))
      (common-lisp:list
       (common-lisp:cons "totalMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unknown-me-collectors))
      (common-lisp:list
       (common-lisp:cons "unknownMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   common-lisp:nil))
(common-lisp:deftype data-source () 'common-lisp:string)
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-agent common-lisp:nil
                       ((agent-id :initarg :agent-id :initform
                         (common-lisp:error ":agentid is required") :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         struct-shape-delete-agent-agent-id :shape "AgentId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force :initarg :force :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-delete-agent-force :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-agent
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-agent
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delete-agent 'make-delete-agent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-agent))
   common-lisp:nil))
(common-lisp:deftype delete-agent-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-agents ()
   '(trivial-types:proper-list delete-agent))
 (common-lisp:defun make-delete-agents
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-agent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-applications-request common-lisp:nil
                       ((configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or application-ids-list common-lisp:null)
                         :accessor
                         struct-shape-delete-applications-request-configuration-ids
                         :shape "ApplicationIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-applications-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-applications-request
                    'make-delete-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-applications-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-applications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-applications-response
                    'make-delete-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-request common-lisp:nil
                       ((configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-tags-request-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-delete-tags-request-tags :shape "TagSet"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-tags-response 'make-delete-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-response))
   common-lisp:nil))
(common-lisp:deftype deletion-configuration-item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deletion-warning common-lisp:nil
                       ((configuration-id :initarg :configuration-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-deletion-warning-configuration-id :shape
                         "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warning-code :initarg :warning-code :initform
                         common-lisp:nil :type
                         (common-lisp:or warning-code common-lisp:null)
                         :accessor struct-shape-deletion-warning-warning-code
                         :shape "WarningCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warning-text :initarg :warning-text :initform
                         common-lisp:nil :type
                         (common-lisp:or warning-text common-lisp:null)
                         :accessor struct-shape-deletion-warning-warning-text
                         :shape "WarningText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deletion-warning
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deletion-warning
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deletion-warning 'make-deletion-warning))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deletion-warning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deletion-warning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-code))
      (common-lisp:list
       (common-lisp:cons "warningCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning-text))
      (common-lisp:list
       (common-lisp:cons "warningText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deletion-warning))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deletion-warnings-list ()
   '(trivial-types:proper-list deletion-warning))
 (common-lisp:defun make-deletion-warnings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deletion-warning))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-agents-request common-lisp:nil
                       ((agent-ids :initarg :agent-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-ids common-lisp:null) :accessor
                         struct-shape-describe-agents-request-agent-ids :shape
                         "AgentIds" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor struct-shape-describe-agents-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-agents-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-agents-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agents-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agents-request 'make-describe-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agents-response common-lisp:nil
                       ((agents-info :initarg :agents-info :initform
                         common-lisp:nil :type
                         (common-lisp:or agents-info common-lisp:null)
                         :accessor
                         struct-shape-describe-agents-response-agents-info
                         :shape "AgentsInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-agents-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-agents-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-agents-response 'make-describe-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agents-info))
      (common-lisp:list
       (common-lisp:cons "agentsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-delete-configuration-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform
                         (common-lisp:error ":taskid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-describe-batch-delete-configuration-task-request-task-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-batch-delete-configuration-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-delete-configuration-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-batch-delete-configuration-task-request
                    'make-describe-batch-delete-configuration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-batch-delete-configuration-task-response
                       common-lisp:nil
                       ((task :initarg :task :initform common-lisp:nil :type
                         (common-lisp:or batch-delete-configuration-task
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-batch-delete-configuration-task-response-task
                         :shape "BatchDeleteConfigurationTask" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-batch-delete-configuration-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-batch-delete-configuration-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-batch-delete-configuration-task-response
                    'make-describe-batch-delete-configuration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-batch-delete-configuration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-configurations-attribute ()
   'common-lisp:hash-table)
 (common-lisp:defun make-describe-configurations-attribute
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype describe-configurations-attributes ()
   '(trivial-types:proper-list describe-configurations-attribute))
 (common-lisp:defun make-describe-configurations-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-configurations-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-configurations-request common-lisp:nil
                       ((configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configurations-request-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configurations-request
                    'make-describe-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configurations-response common-lisp:nil
                       ((configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or describe-configurations-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configurations-response-configurations
                         :shape "DescribeConfigurationsAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configurations-response
                    'make-describe-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   common-lisp:nil))
(common-lisp:deftype describe-continuous-exports-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-continuous-exports-request common-lisp:nil
                       ((export-ids :initarg :export-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or continuous-export-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-continuous-exports-request-export-ids
                         :shape "ContinuousExportIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          describe-continuous-exports-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-continuous-exports-request-max-results
                         :shape "DescribeContinuousExportsMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-continuous-exports-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-continuous-exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-continuous-exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-continuous-exports-request
                    'make-describe-continuous-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-continuous-exports-response common-lisp:nil
                       ((descriptions :initarg :descriptions :initform
                         common-lisp:nil :type
                         (common-lisp:or continuous-export-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-continuous-exports-response-descriptions
                         :shape "ContinuousExportDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-continuous-exports-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-continuous-exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-continuous-exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-continuous-exports-response
                    'make-describe-continuous-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descriptions))
      (common-lisp:list
       (common-lisp:cons "descriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-configurations-request common-lisp:nil
                       ((export-ids :initarg :export-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or export-ids common-lisp:null) :accessor
                         struct-shape-describe-export-configurations-request-export-ids
                         :shape "ExportIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-export-configurations-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-configurations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-configurations-request
                    'make-describe-export-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-configurations-response common-lisp:nil
                       ((exports-info :initarg :exports-info :initform
                         common-lisp:nil :type
                         (common-lisp:or exports-info common-lisp:null)
                         :accessor
                         struct-shape-describe-export-configurations-response-exports-info
                         :shape "ExportsInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-configurations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-configurations-response
                    'make-describe-export-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports-info))
      (common-lisp:list
       (common-lisp:cons "exportsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-tasks-request common-lisp:nil
                       ((export-ids :initarg :export-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or export-ids common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-request-export-ids
                         :shape "ExportIds" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or export-filters common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-request-filters
                         :shape "ExportFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-request
                    'make-describe-export-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-export-tasks-response common-lisp:nil
                       ((exports-info :initarg :exports-info :initform
                         common-lisp:nil :type
                         (common-lisp:or exports-info common-lisp:null)
                         :accessor
                         struct-shape-describe-export-tasks-response-exports-info
                         :shape "ExportsInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-export-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-export-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-export-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-response
                    'make-describe-export-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports-info))
      (common-lisp:list
       (common-lisp:cons "exportsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-import-tasks-filter-list ()
   '(trivial-types:proper-list import-task-filter))
 (common-lisp:defun make-describe-import-tasks-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype describe-import-tasks-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-import-tasks-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-import-tasks-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-import-tasks-request-filters
                         :shape "DescribeImportTasksFilterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or describe-import-tasks-max-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-import-tasks-request-max-results
                         :shape "DescribeImportTasksMaxResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-import-tasks-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-import-tasks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-import-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-import-tasks-request
                    'make-describe-import-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-import-tasks-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-import-tasks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tasks :initarg :tasks :initform common-lisp:nil :type
                         (common-lisp:or import-task-list common-lisp:null)
                         :accessor
                         struct-shape-describe-import-tasks-response-tasks
                         :shape "ImportTaskList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-import-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-import-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-import-tasks-response
                    'make-describe-import-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or tag-filters common-lisp:null)
                         :accessor struct-shape-describe-tags-request-filters
                         :shape "TagFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-describe-tags-request-max-results :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-tags-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or configuration-tag-set
                                         common-lisp:null)
                         :accessor struct-shape-describe-tags-response-tags
                         :shape "ConfigurationTagSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-tags-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-configuration-items-from-application-request common-lisp:nil
  ((application-configuration-id :initarg :application-configuration-id
    :initform (common-lisp:error ":applicationconfigurationid is required")
    :type (common-lisp:or application-id common-lisp:null) :accessor
    struct-shape-disassociate-configuration-items-from-application-request-application-configuration-id
    :shape "ApplicationId" :location common-lisp:nil :location-name
    common-lisp:nil)
   (configuration-ids :initarg :configuration-ids :initform
    (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null) :accessor
    struct-shape-disassociate-configuration-items-from-application-request-configuration-ids
    :shape "ConfigurationIdList" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-configuration-items-from-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-configuration-items-from-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-configuration-items-from-application-request
                    'make-disassociate-configuration-items-from-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "applicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-configuration-items-from-application-response common-lisp:nil
  common-lisp:nil (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-configuration-items-from-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-configuration-items-from-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-configuration-items-from-application-response
                    'make-disassociate-configuration-items-from-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   common-lisp:nil))
(common-lisp:deftype ec2instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ec2recommendations-export-preferences common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or export-enabled common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-enabled
                         :shape "ExportEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cpu-performance-metric-basis :initarg
                         :cpu-performance-metric-basis :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-metric-basis common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-cpu-performance-metric-basis
                         :shape "UsageMetricBasis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ram-performance-metric-basis :initarg
                         :ram-performance-metric-basis :initform
                         common-lisp:nil :type
                         (common-lisp:or usage-metric-basis common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-ram-performance-metric-basis
                         :shape "UsageMetricBasis" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenancy :initarg :tenancy :initform common-lisp:nil
                         :type (common-lisp:or tenancy common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-tenancy
                         :shape "Tenancy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (excluded-instance-types :initarg
                         :excluded-instance-types :initform common-lisp:nil
                         :type
                         (common-lisp:or excluded-instance-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-excluded-instance-types
                         :shape "ExcludedInstanceTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-region :initarg :preferred-region :initform
                         common-lisp:nil :type
                         (common-lisp:or user-preferred-region
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-preferred-region
                         :shape "UserPreferredRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instance-options :initarg
                         :reserved-instance-options :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-instance-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2recommendations-export-preferences-reserved-instance-options
                         :shape "ReservedInstanceOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2recommendations-export-preferences
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2recommendations-export-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2recommendations-export-preferences
                    'make-ec2recommendations-export-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2recommendations-export-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2recommendations-export-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cpu-performance-metric-basis))
      (common-lisp:list
       (common-lisp:cons "cpuPerformanceMetricBasis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ram-performance-metric-basis))
      (common-lisp:list
       (common-lisp:cons "ramPerformanceMetricBasis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'excluded-instance-types))
      (common-lisp:list
       (common-lisp:cons "excludedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred-region))
      (common-lisp:list
       (common-lisp:cons "preferredRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-options))
      (common-lisp:list
       (common-lisp:cons "reservedInstanceOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2recommendations-export-preferences))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype excluded-instance-types ()
   '(trivial-types:proper-list ec2instance-type))
 (common-lisp:defun make-excluded-instance-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-configurations-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-configurations-response-export-id
                         :shape "ConfigurationsExportId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-configurations-response
                    'make-export-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   common-lisp:nil))
(common-lisp:deftype export-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-data-formats ()
   '(trivial-types:proper-list export-data-format))
 (common-lisp:defun make-export-data-formats
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-data-format))
   aws-sdk/generator/shape::members))
(common-lisp:deftype export-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass export-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-export-filter-name :shape
                         "FilterName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-export-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-export-filter-condition :shape
                         "Condition" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-filter 'make-export-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-filters ()
   '(trivial-types:proper-list export-filter))
 (common-lisp:defun make-export-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype export-ids ()
   '(trivial-types:proper-list configurations-export-id))
 (common-lisp:defun make-export-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurations-export-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-info common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor struct-shape-export-info-export-id :shape
                         "ConfigurationsExportId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-status :initarg :export-status :initform
                         (common-lisp:error ":exportstatus is required") :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor struct-shape-export-info-export-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         (common-lisp:error ":statusmessage is required") :type
                         (common-lisp:or export-status-message
                                         common-lisp:null)
                         :accessor struct-shape-export-info-status-message
                         :shape "ExportStatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations-download-url :initarg
                         :configurations-download-url :initform common-lisp:nil
                         :type
                         (common-lisp:or configurations-download-url
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-info-configurations-download-url
                         :shape "ConfigurationsDownloadUrl" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-request-time :initarg :export-request-time
                         :initform
                         (common-lisp:error ":exportrequesttime is required")
                         :type
                         (common-lisp:or export-request-time common-lisp:null)
                         :accessor struct-shape-export-info-export-request-time
                         :shape "ExportRequestTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-export-info-is-truncated :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requested-start-time :initarg :requested-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-export-info-requested-start-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (requested-end-time :initarg :requested-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-export-info-requested-end-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'export-info 'make-export-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configurations-download-url))
      (common-lisp:list
       (common-lisp:cons "configurationsDownloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-request-time))
      (common-lisp:list
       (common-lisp:cons "exportRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "isTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-start-time))
      (common-lisp:list
       (common-lisp:cons "requestedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-end-time))
      (common-lisp:list
       (common-lisp:cons "requestedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-preferences common-lisp:nil
                       ((ec2recommendations-preferences :initarg
                         :ec2recommendations-preferences :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2recommendations-export-preferences
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-preferences-ec2recommendations-preferences
                         :shape "Ec2RecommendationsExportPreferences" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-preferences
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-preferences 'make-export-preferences))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2recommendations-preferences))
      (common-lisp:list
       (common-lisp:cons "ec2RecommendationsPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-preferences))
   common-lisp:nil))
(common-lisp:deftype export-request-time () 'common-lisp:string)
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:deftype export-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exports-info () '(trivial-types:proper-list export-info))
 (common-lisp:defun make-exports-info
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-configuration common-lisp:nil
                       ((configuration-id :initarg :configuration-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-failed-configuration-configuration-id
                         :shape "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-status-code :initarg :error-status-code
                         :initform common-lisp:nil :type
                         (common-lisp:or error-status-code common-lisp:null)
                         :accessor
                         struct-shape-failed-configuration-error-status-code
                         :shape "ErrorStatusCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-failed-configuration-error-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failed-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-configuration 'make-failed-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-status-code))
      (common-lisp:list
       (common-lisp:cons "errorStatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-configuration-list ()
   '(trivial-types:proper-list failed-configuration))
 (common-lisp:defun make-failed-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-filter-condition :shape "Condition"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-discovery-summary-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-discovery-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-discovery-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-discovery-summary-request
                    'make-get-discovery-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-discovery-summary-response common-lisp:nil
                       ((servers :initarg :servers :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-discovery-summary-response-servers
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (applications :initarg :applications :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-discovery-summary-response-applications
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (servers-mapped-to-applications :initarg
                         :servers-mapped-to-applications :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-discovery-summary-response-servers-mapped-to-applications
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (servers-mappedto-tags :initarg :servers-mappedto-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-discovery-summary-response-servers-mappedto-tags
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (agent-summary :initarg :agent-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-agent-info common-lisp:null)
                         :accessor
                         struct-shape-get-discovery-summary-response-agent-summary
                         :shape "CustomerAgentInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-summary :initarg :connector-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-connector-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-discovery-summary-response-connector-summary
                         :shape "CustomerConnectorInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (me-collector-summary :initarg :me-collector-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-me-collector-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-discovery-summary-response-me-collector-summary
                         :shape "CustomerMeCollectorInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (agentless-collector-summary :initarg
                         :agentless-collector-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-agentless-collector-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-discovery-summary-response-agentless-collector-summary
                         :shape "CustomerAgentlessCollectorInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-discovery-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-discovery-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-discovery-summary-response
                    'make-get-discovery-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'servers-mapped-to-applications))
      (common-lisp:list
       (common-lisp:cons "serversMappedToApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'servers-mappedto-tags))
      (common-lisp:list
       (common-lisp:cons "serversMappedtoTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-summary))
      (common-lisp:list
       (common-lisp:cons "agentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-summary))
      (common-lisp:list
       (common-lisp:cons "connectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'me-collector-summary))
      (common-lisp:list
       (common-lisp:cons "meCollectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agentless-collector-summary))
      (common-lisp:list
       (common-lisp:cons "agentlessCollectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition home-region-not-set-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       home-region-not-set-exception-message)))
 (common-lisp:export
  (common-lisp:list 'home-region-not-set-exception
                    'home-region-not-set-exception-message)))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-task common-lisp:nil
                       ((import-task-id :initarg :import-task-id :initform
                         common-lisp:nil :type
                         (common-lisp:or import-task-identifier
                                         common-lisp:null)
                         :accessor struct-shape-import-task-import-task-id
                         :shape "ImportTaskIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-import-task-client-request-token :shape
                         "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or import-task-name common-lisp:null)
                         :accessor struct-shape-import-task-name :shape
                         "ImportTaskName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-url :initarg :import-url :initform
                         common-lisp:nil :type
                         (common-lisp:or import-url common-lisp:null) :accessor
                         struct-shape-import-task-import-url :shape "ImportURL"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or import-status common-lisp:null)
                         :accessor struct-shape-import-task-status :shape
                         "ImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-request-time :initarg :import-request-time
                         :initform common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-import-task-import-request-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-completion-time :initarg
                         :import-completion-time :initform common-lisp:nil
                         :type (common-lisp:or time-stamp common-lisp:null)
                         :accessor
                         struct-shape-import-task-import-completion-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-deleted-time :initarg :import-deleted-time
                         :initform common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-import-task-import-deleted-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-import-success :initarg :server-import-success
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-import-task-server-import-success :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-import-failure :initarg :server-import-failure
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-import-task-server-import-failure :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (application-import-success :initarg
                         :application-import-success :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-application-import-success
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (application-import-failure :initarg
                         :application-import-failure :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-import-task-application-import-failure
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors-and-failed-entries-zip :initarg
                         :errors-and-failed-entries-zip :initform
                         common-lisp:nil :type
                         (common-lisp:or s3presigned-url common-lisp:null)
                         :accessor
                         struct-shape-import-task-errors-and-failed-entries-zip
                         :shape "S3PresignedUrl" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'import-task 'make-import-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "importTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-url))
      (common-lisp:list
       (common-lisp:cons "importUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-request-time))
      (common-lisp:list
       (common-lisp:cons "importRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-completion-time))
      (common-lisp:list
       (common-lisp:cons "importCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-deleted-time))
      (common-lisp:list
       (common-lisp:cons "importDeletedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-import-success))
      (common-lisp:list
       (common-lisp:cons "serverImportSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-import-failure))
      (common-lisp:list
       (common-lisp:cons "serverImportFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-import-success))
      (common-lisp:list
       (common-lisp:cons "applicationImportSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-import-failure))
      (common-lisp:list
       (common-lisp:cons "applicationImportFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'errors-and-failed-entries-zip))
      (common-lisp:list
       (common-lisp:cons "errorsAndFailedEntriesZip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-task-filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or import-task-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-import-task-filter-name :shape
                         "ImportTaskFilterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or import-task-filter-value-list
                                         common-lisp:null)
                         :accessor struct-shape-import-task-filter-values
                         :shape "ImportTaskFilterValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-task-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-task-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-task-filter 'make-import-task-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task-filter))
   common-lisp:nil))
(common-lisp:deftype import-task-filter-name () 'common-lisp:string)
(common-lisp:deftype import-task-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-task-filter-value-list ()
   '(trivial-types:proper-list import-task-filter-value))
 (common-lisp:defun make-import-task-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-task-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-task-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-task-list ()
   '(trivial-types:proper-list import-task))
 (common-lisp:defun make-import-task-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-task-name () 'common-lisp:string)
(common-lisp:deftype import-url () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-configurations-request common-lisp:nil
                       ((configuration-type :initarg :configuration-type
                         :initform
                         (common-lisp:error ":configurationtype is required")
                         :type
                         (common-lisp:or configuration-item-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-request-configuration-type
                         :shape "ConfigurationItemType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filters common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-request-filters
                         :shape "Filters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-configurations-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-configurations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by-list common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-request-order-by
                         :shape "OrderByList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configurations-request
                    'make-list-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configurations-response common-lisp:nil
                       ((configurations :initarg :configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or configurations common-lisp:null)
                         :accessor
                         struct-shape-list-configurations-response-configurations
                         :shape "Configurations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-configurations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-configurations-response
                    'make-list-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-neighbors-request common-lisp:nil
                       ((configuration-id :initarg :configuration-id :initform
                         (common-lisp:error ":configurationid is required")
                         :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-list-server-neighbors-request-configuration-id
                         :shape "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port-information-needed :initarg
                         :port-information-needed :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-server-neighbors-request-port-information-needed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (neighbor-configuration-ids :initarg
                         :neighbor-configuration-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-server-neighbors-request-neighbor-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-server-neighbors-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-server-neighbors-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-neighbors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-neighbors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-neighbors-request
                    'make-list-server-neighbors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'port-information-needed))
      (common-lisp:list
       (common-lisp:cons "portInformationNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neighbor-configuration-ids))
      (common-lisp:list
       (common-lisp:cons "neighborConfigurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-server-neighbors-response common-lisp:nil
                       ((neighbors :initarg :neighbors :initform
                         (common-lisp:error ":neighbors is required") :type
                         (common-lisp:or neighbor-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-server-neighbors-response-neighbors
                         :shape "NeighborDetailsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-server-neighbors-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (known-dependency-count :initarg
                         :known-dependency-count :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-list-server-neighbors-response-known-dependency-count
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-server-neighbors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-server-neighbors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-server-neighbors-response
                    'make-list-server-neighbors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neighbors))
      (common-lisp:list
       (common-lisp:cons "neighbors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'known-dependency-count))
      (common-lisp:list
       (common-lisp:cons "knownDependencyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass neighbor-connection-detail common-lisp:nil
                       ((source-server-id :initarg :source-server-id :initform
                         (common-lisp:error ":sourceserverid is required")
                         :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-neighbor-connection-detail-source-server-id
                         :shape "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-server-id :initarg :destination-server-id
                         :initform
                         (common-lisp:error ":destinationserverid is required")
                         :type
                         (common-lisp:or configuration-id common-lisp:null)
                         :accessor
                         struct-shape-neighbor-connection-detail-destination-server-id
                         :shape "ConfigurationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-port :initarg :destination-port :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         struct-shape-neighbor-connection-detail-destination-port
                         :shape "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transport-protocol :initarg :transport-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-neighbor-connection-detail-transport-protocol
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections-count :initarg :connections-count
                         :initform
                         (common-lisp:error ":connectionscount is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-neighbor-connection-detail-connections-count
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-neighbor-connection-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'neighbor-connection-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'neighbor-connection-detail
                    'make-neighbor-connection-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-server-id))
      (common-lisp:list
       (common-lisp:cons "destinationServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "destinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-protocol))
      (common-lisp:list
       (common-lisp:cons "transportProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections-count))
      (common-lisp:list
       (common-lisp:cons "connectionsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype neighbor-details-list ()
   '(trivial-types:proper-list neighbor-connection-detail))
 (common-lisp:defun make-neighbor-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            neighbor-connection-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype offering-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-exception
                    'operation-not-permitted-exception-message)))
(common-lisp:progn
 (common-lisp:defclass order-by-element common-lisp:nil
                       ((field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or order-by-element-field-name
                                         common-lisp:null)
                         :accessor struct-shape-order-by-element-field-name
                         :shape "OrderByElementFieldName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or |orderString| common-lisp:null)
                         :accessor struct-shape-order-by-element-sort-order
                         :shape "orderString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order-by-element
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order-by-element
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'order-by-element 'make-order-by-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by-element))
   common-lisp:nil))
(common-lisp:deftype order-by-element-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype order-by-list ()
   '(trivial-types:proper-list order-by-element))
 (common-lisp:defun make-order-by-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order-by-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype purchasing-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reserved-instance-options common-lisp:nil
                       ((purchasing-option :initarg :purchasing-option
                         :initform
                         (common-lisp:error ":purchasingoption is required")
                         :type
                         (common-lisp:or purchasing-option common-lisp:null)
                         :accessor
                         struct-shape-reserved-instance-options-purchasing-option
                         :shape "PurchasingOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-class :initarg :offering-class :initform
                         (common-lisp:error ":offeringclass is required") :type
                         (common-lisp:or offering-class common-lisp:null)
                         :accessor
                         struct-shape-reserved-instance-options-offering-class
                         :shape "OfferingClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term-length :initarg :term-length :initform
                         (common-lisp:error ":termlength is required") :type
                         (common-lisp:or term-length common-lisp:null)
                         :accessor
                         struct-shape-reserved-instance-options-term-length
                         :shape "TermLength" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-instance-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-instance-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-instance-options
                    'make-reserved-instance-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchasing-option))
      (common-lisp:list
       (common-lisp:cons "purchasingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "offeringClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term-length))
      (common-lisp:list
       (common-lisp:cons "termLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3presigned-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-storage-config () 'common-lisp:hash-table)
 (common-lisp:defun make-schema-storage-config
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition server-internal-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-internal-error-exception
                    'server-internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-batch-delete-configuration-task-request
                       common-lisp:nil
                       ((configuration-type :initarg :configuration-type
                         :initform
                         (common-lisp:error ":configurationtype is required")
                         :type
                         (common-lisp:or deletion-configuration-item-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-batch-delete-configuration-task-request-configuration-type
                         :shape "DeletionConfigurationItemType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-ids :initarg :configuration-ids
                         :initform
                         (common-lisp:error ":configurationids is required")
                         :type
                         (common-lisp:or configuration-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-batch-delete-configuration-task-request-configuration-ids
                         :shape "ConfigurationIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-batch-delete-configuration-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-batch-delete-configuration-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-batch-delete-configuration-task-request
                    'make-start-batch-delete-configuration-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-batch-delete-configuration-task-response
                       common-lisp:nil
                       ((task-id :initarg :task-id :initform common-lisp:nil
                         :type (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-start-batch-delete-configuration-task-response-task-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-batch-delete-configuration-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-batch-delete-configuration-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-batch-delete-configuration-task-response
                    'make-start-batch-delete-configuration-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-batch-delete-configuration-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-continuous-export-request common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-continuous-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-continuous-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-continuous-export-request
                    'make-start-continuous-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-continuous-export-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-continuous-export-response-export-id
                         :shape "ConfigurationsExportId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor
                         struct-shape-start-continuous-export-response-s3bucket
                         :shape "S3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-start-continuous-export-response-start-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-start-continuous-export-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-storage-config :initarg :schema-storage-config
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-storage-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-continuous-export-response-schema-storage-config
                         :shape "SchemaStorageConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-continuous-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-continuous-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-continuous-export-response
                    'make-start-continuous-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-storage-config))
      (common-lisp:list
       (common-lisp:cons "schemaStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-collection-by-agent-ids-request
                       common-lisp:nil
                       ((agent-ids :initarg :agent-ids :initform
                         (common-lisp:error ":agentids is required") :type
                         (common-lisp:or agent-ids common-lisp:null) :accessor
                         struct-shape-start-data-collection-by-agent-ids-request-agent-ids
                         :shape "AgentIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-collection-by-agent-ids-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-collection-by-agent-ids-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-collection-by-agent-ids-request
                    'make-start-data-collection-by-agent-ids-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-collection-by-agent-ids-response
                       common-lisp:nil
                       ((agents-configuration-status :initarg
                         :agents-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or agent-configuration-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-data-collection-by-agent-ids-response-agents-configuration-status
                         :shape "AgentConfigurationStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-collection-by-agent-ids-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-collection-by-agent-ids-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-collection-by-agent-ids-response
                    'make-start-data-collection-by-agent-ids-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agents-configuration-status))
      (common-lisp:list
       (common-lisp:cons "agentsConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-task-request common-lisp:nil
                       ((export-data-format :initarg :export-data-format
                         :initform common-lisp:nil :type
                         (common-lisp:or export-data-formats common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-request-export-data-format
                         :shape "ExportDataFormats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or export-filters common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-request-filters :shape
                         "ExportFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-start-export-task-request-start-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or time-stamp common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-request-end-time :shape
                         "TimeStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferences :initarg :preferences :initform
                         common-lisp:nil :type
                         (common-lisp:or export-preferences common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-request-preferences
                         :shape "ExportPreferences" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-export-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-task-request
                    'make-start-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-data-format))
      (common-lisp:list
       (common-lisp:cons "exportDataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferences))
      (common-lisp:list
       (common-lisp:cons "preferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-task-response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         common-lisp:nil :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-export-task-response-export-id
                         :shape "ConfigurationsExportId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-export-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-task-response
                    'make-start-export-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-task-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         struct-shape-start-import-task-request-client-request-token
                         :shape "ClientRequestToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or import-task-name common-lisp:null)
                         :accessor struct-shape-start-import-task-request-name
                         :shape "ImportTaskName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-url :initarg :import-url :initform
                         (common-lisp:error ":importurl is required") :type
                         (common-lisp:or import-url common-lisp:null) :accessor
                         struct-shape-start-import-task-request-import-url
                         :shape "ImportURL" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-task-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-task-request
                    'make-start-import-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-url))
      (common-lisp:list
       (common-lisp:cons "importUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-task-response common-lisp:nil
                       ((task :initarg :task :initform common-lisp:nil :type
                         (common-lisp:or import-task common-lisp:null)
                         :accessor struct-shape-start-import-task-response-task
                         :shape "ImportTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-task-response
                    'make-start-import-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-continuous-export-request common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":exportid is required") :type
                         (common-lisp:or configurations-export-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-continuous-export-request-export-id
                         :shape "ConfigurationsExportId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-continuous-export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-continuous-export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-continuous-export-request
                    'make-stop-continuous-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-continuous-export-response common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-stop-continuous-export-response-start-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-time :initarg :stop-time :initform
                         common-lisp:nil :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         struct-shape-stop-continuous-export-response-stop-time
                         :shape "TimeStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-continuous-export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-continuous-export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-continuous-export-response
                    'make-stop-continuous-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-data-collection-by-agent-ids-request
                       common-lisp:nil
                       ((agent-ids :initarg :agent-ids :initform
                         (common-lisp:error ":agentids is required") :type
                         (common-lisp:or agent-ids common-lisp:null) :accessor
                         struct-shape-stop-data-collection-by-agent-ids-request-agent-ids
                         :shape "AgentIds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-data-collection-by-agent-ids-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-data-collection-by-agent-ids-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-data-collection-by-agent-ids-request
                    'make-stop-data-collection-by-agent-ids-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-data-collection-by-agent-ids-response
                       common-lisp:nil
                       ((agents-configuration-status :initarg
                         :agents-configuration-status :initform common-lisp:nil
                         :type
                         (common-lisp:or agent-configuration-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-data-collection-by-agent-ids-response-agents-configuration-status
                         :shape "AgentConfigurationStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-data-collection-by-agent-ids-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-data-collection-by-agent-ids-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-data-collection-by-agent-ids-response
                    'make-stop-data-collection-by-agent-ids-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agents-configuration-status))
      (common-lisp:list
       (common-lisp:cons "agentsConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-max255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor struct-shape-tag-filter-name :shape
                         "FilterName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-tag-filter-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-filters () '(trivial-types:proper-list tag-filter))
 (common-lisp:defun make-tag-filters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-set () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tenancy () 'common-lisp:string)
(common-lisp:deftype term-length () 'common-lisp:string)
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype to-delete-identifier-list ()
   '(trivial-types:proper-list import-task-identifier))
 (common-lisp:defun make-to-delete-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((configuration-id :initarg :configuration-id :initform
                         (common-lisp:error ":configurationid is required")
                         :type (common-lisp:or application-id common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-configuration-id
                         :shape "ApplicationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or application-name common-lisp:null)
                         :accessor struct-shape-update-application-request-name
                         :shape "ApplicationName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or application-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-application-request-description
                         :shape "ApplicationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-application-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage-metric-basis common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or usage-metric-basis-name
                                         common-lisp:null)
                         :accessor struct-shape-usage-metric-basis-name :shape
                         "UsageMetricBasisName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (percentage-adjust :initarg :percentage-adjust
                         :initform common-lisp:nil :type
                         (common-lisp:or usage-metric-percentage-adjust
                                         common-lisp:null)
                         :accessor
                         struct-shape-usage-metric-basis-percentage-adjust
                         :shape "UsageMetricPercentageAdjust" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage-metric-basis
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage-metric-basis
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'usage-metric-basis 'make-usage-metric-basis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-metric-basis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-metric-basis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-adjust))
      (common-lisp:list
       (common-lisp:cons "percentageAdjust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-metric-basis))
   common-lisp:nil))
(common-lisp:deftype usage-metric-basis-name () 'common-lisp:string)
(common-lisp:deftype usage-metric-percentage-adjust ()
  'common-lisp:double-float)
(common-lisp:deftype user-preferred-region () 'common-lisp:string)
(common-lisp:deftype warning-code () 'common-lisp:integer)
(common-lisp:deftype warning-text () 'common-lisp:string)
(common-lisp:deftype |orderString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-configuration-items-to-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-configuration-id
                     configuration-ids)
   (common-lisp:declare
    (common-lisp:ignorable application-configuration-id configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-configuration-items-to-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateConfigurationItemsToApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-configuration-items-to-application))
(common-lisp:progn
 (common-lisp:defun batch-delete-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-agents)
   (common-lisp:declare (common-lisp:ignorable delete-agents))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteAgents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-agents))
(common-lisp:progn
 (common-lisp:defun batch-delete-import-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-task-ids delete-history)
   (common-lisp:declare (common-lisp:ignorable import-task-ids delete-history))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-import-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteImportData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-import-data))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description)
   (common-lisp:declare (common-lisp:ignorable name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids tags)
   (common-lisp:declare (common-lisp:ignorable configuration-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids)
   (common-lisp:declare (common-lisp:ignorable configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteApplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-applications))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids tags)
   (common-lisp:declare (common-lisp:ignorable configuration-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAgents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-agents))
(common-lisp:progn
 (common-lisp:defun describe-batch-delete-configuration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id)
   (common-lisp:declare (common-lisp:ignorable task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-batch-delete-configuration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeBatchDeleteConfigurationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-batch-delete-configuration-task))
(common-lisp:progn
 (common-lisp:defun describe-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids)
   (common-lisp:declare (common-lisp:ignorable configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configurations))
(common-lisp:progn
 (common-lisp:defun describe-continuous-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-continuous-exports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeContinuousExports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-continuous-exports))
(common-lisp:progn
 (common-lisp:defun describe-export-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-export-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-export-configurations))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExportTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-import-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-import-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImportTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-import-tasks))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun disassociate-configuration-items-from-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-configuration-id
                     configuration-ids)
   (common-lisp:declare
    (common-lisp:ignorable application-configuration-id configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-configuration-items-from-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateConfigurationItemsFromApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-configuration-items-from-application))
(common-lisp:progn
 (common-lisp:defun export-configurations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :operation "ExportConfigurations"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'export-configurations))
(common-lisp:progn
 (common-lisp:defun get-discovery-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :operation "GetDiscoverySummary"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-discovery-summary))
(common-lisp:progn
 (common-lisp:defun list-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-type filters max-results
                     next-token order-by)
   (common-lisp:declare
    (common-lisp:ignorable configuration-type filters max-results next-token
     order-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-configurations))
(common-lisp:progn
 (common-lisp:defun list-server-neighbors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-id port-information-needed
                     neighbor-configuration-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-id port-information-needed
     neighbor-configuration-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-server-neighbors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServerNeighbors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-server-neighbors))
(common-lisp:progn
 (common-lisp:defun start-batch-delete-configuration-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-type configuration-ids)
   (common-lisp:declare
    (common-lisp:ignorable configuration-type configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-batch-delete-configuration-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartBatchDeleteConfigurationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-batch-delete-configuration-task))
(common-lisp:progn
 (common-lisp:defun start-continuous-export ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :operation "StartContinuousExport"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'start-continuous-export))
(common-lisp:progn
 (common-lisp:defun start-data-collection-by-agent-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids)
   (common-lisp:declare (common-lisp:ignorable agent-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-collection-by-agent-ids-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataCollectionByAgentIds"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-collection-by-agent-ids))
(common-lisp:progn
 (common-lisp:defun start-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-data-format filters start-time
                     end-time preferences)
   (common-lisp:declare
    (common-lisp:ignorable export-data-format filters start-time end-time
     preferences))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExportTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-export-task))
(common-lisp:progn
 (common-lisp:defun start-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name import-url)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name import-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartImportTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-import-task))
(common-lisp:progn
 (common-lisp:defun stop-continuous-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-continuous-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopContinuousExport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-continuous-export))
(common-lisp:progn
 (common-lisp:defun stop-data-collection-by-agent-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids)
   (common-lisp:declare (common-lisp:ignorable agent-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-data-collection-by-agent-ids-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopDataCollectionByAgentIds"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-data-collection-by-agent-ids))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-id name description)
   (common-lisp:declare
    (common-lisp:ignorable configuration-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-application))
