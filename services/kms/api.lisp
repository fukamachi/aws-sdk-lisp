;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kms/api
  (:use)
  (:nicknames #:aws/kms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/kms/api)
(common-lisp:progn
 (common-lisp:define-condition kms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'kms-error))
(common-lisp:progn
 (common-lisp:defclass kms-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "kms" :api-version
                        "2014-11-01" :host-prefix "kms" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "TrentService" :json-version "1.1"))
 (common-lisp:export 'kms-request))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("CloudHsmClusterInUseException" . cloud-hsm-cluster-in-use-exception)
    ("CloudHsmClusterInvalidConfigurationException"
     . cloud-hsm-cluster-invalid-configuration-exception)
    ("CloudHsmClusterNotActiveException"
     . cloud-hsm-cluster-not-active-exception)
    ("CloudHsmClusterNotFoundException"
     . cloud-hsm-cluster-not-found-exception)
    ("CloudHsmClusterNotRelatedException"
     . cloud-hsm-cluster-not-related-exception)
    ("CustomKeyStoreHasCMKsException" . custom-key-store-has-cmks-exception)
    ("CustomKeyStoreInvalidStateException"
     . custom-key-store-invalid-state-exception)
    ("CustomKeyStoreNameInUseException"
     . custom-key-store-name-in-use-exception)
    ("CustomKeyStoreNotFoundException" . custom-key-store-not-found-exception)
    ("DependencyTimeoutException" . dependency-timeout-exception)
    ("DisabledException" . disabled-exception)
    ("DryRunOperationException" . dry-run-operation-exception)
    ("ExpiredImportTokenException" . expired-import-token-exception)
    ("IncorrectKeyException" . incorrect-key-exception)
    ("IncorrectKeyMaterialException" . incorrect-key-material-exception)
    ("IncorrectTrustAnchorException" . incorrect-trust-anchor-exception)
    ("InvalidAliasNameException" . invalid-alias-name-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidCiphertextException" . invalid-ciphertext-exception)
    ("InvalidGrantIdException" . invalid-grant-id-exception)
    ("InvalidGrantTokenException" . invalid-grant-token-exception)
    ("InvalidImportTokenException" . invalid-import-token-exception)
    ("InvalidKeyUsageException" . invalid-key-usage-exception)
    ("InvalidMarkerException" . invalid-marker-exception)
    ("KMSInternalException" . kmsinternal-exception)
    ("KMSInvalidMacException" . kmsinvalid-mac-exception)
    ("KMSInvalidSignatureException" . kmsinvalid-signature-exception)
    ("KMSInvalidStateException" . kmsinvalid-state-exception)
    ("KeyUnavailableException" . key-unavailable-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("NotFoundException" . not-found-exception)
    ("TagException" . tag-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)
    ("XksKeyAlreadyInUseException" . xks-key-already-in-use-exception)
    ("XksKeyInvalidConfigurationException"
     . xks-key-invalid-configuration-exception)
    ("XksKeyNotFoundException" . xks-key-not-found-exception)
    ("XksProxyIncorrectAuthenticationCredentialException"
     . xks-proxy-incorrect-authentication-credential-exception)
    ("XksProxyInvalidConfigurationException"
     . xks-proxy-invalid-configuration-exception)
    ("XksProxyInvalidResponseException" . xks-proxy-invalid-response-exception)
    ("XksProxyUriEndpointInUseException"
     . xks-proxy-uri-endpoint-in-use-exception)
    ("XksProxyUriInUseException" . xks-proxy-uri-in-use-exception)
    ("XksProxyUriUnreachableException" . xks-proxy-uri-unreachable-exception)
    ("XksProxyVpcEndpointServiceInUseException"
     . xks-proxy-vpc-endpoint-service-in-use-exception)
    ("XksProxyVpcEndpointServiceInvalidConfigurationException"
     . xks-proxy-vpc-endpoint-service-invalid-configuration-exception)
    ("XksProxyVpcEndpointServiceNotFoundException"
     . xks-proxy-vpc-endpoint-service-not-found-exception)))
(common-lisp:deftype awsaccount-id-type () 'common-lisp:string)
(common-lisp:deftype algorithm-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alias-list ()
   '(trivial-types:proper-list alias-list-entry))
 (common-lisp:defun make-alias-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alias-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass alias-list-entry common-lisp:nil
                       ((alias-name :initarg :alias-name :initform
                         common-lisp:nil :type
                         (common-lisp:or alias-name-type common-lisp:null)
                         :accessor struct-shape-alias-list-entry-alias-name
                         :shape "AliasNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias-arn :initarg :alias-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-alias-list-entry-alias-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-key-id :initarg :target-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-alias-list-entry-target-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-alias-list-entry-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-date :initarg :last-updated-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-alias-list-entry-last-updated-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-alias-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'alias-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'alias-list-entry 'make-alias-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alias-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alias-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-arn))
      (common-lisp:list
       (common-lisp:cons "AliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alias-list-entry))
   common-lisp:nil))
(common-lisp:deftype alias-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:deftype arn-type () 'common-lisp:string)
(common-lisp:deftype attestation-document-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-key-deletion-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-cancel-key-deletion-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-key-deletion-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-key-deletion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-key-deletion-request
                    'make-cancel-key-deletion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-key-deletion-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-cancel-key-deletion-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-key-deletion-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-key-deletion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-key-deletion-response
                    'make-cancel-key-deletion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-key-deletion-response))
   common-lisp:nil))
(common-lisp:deftype ciphertext-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype cloud-hsm-cluster-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-cluster-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-cluster-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-cluster-in-use-exception
                    'cloud-hsm-cluster-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-cluster-invalid-configuration-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-cluster-invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-cluster-invalid-configuration-exception
                    'cloud-hsm-cluster-invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-cluster-not-active-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-cluster-not-active-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-cluster-not-active-exception
                    'cloud-hsm-cluster-not-active-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-cluster-not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-cluster-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-cluster-not-found-exception
                    'cloud-hsm-cluster-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition cloud-hsm-cluster-not-related-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cloud-hsm-cluster-not-related-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cloud-hsm-cluster-not-related-exception
                    'cloud-hsm-cluster-not-related-exception-message)))
(common-lisp:progn
 (common-lisp:defclass connect-custom-key-store-request common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform
                         (common-lisp:error ":custom-key-store-id is required")
                         :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-connect-custom-key-store-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-custom-key-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connect-custom-key-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-custom-key-store-request
                    'make-connect-custom-key-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connect-custom-key-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-custom-key-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connect-custom-key-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-custom-key-store-response
                    'make-connect-custom-key-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-custom-key-store-response))
   common-lisp:nil))
(common-lisp:deftype connection-error-code-type () 'common-lisp:string)
(common-lisp:deftype connection-state-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :initform
                         (common-lisp:error ":alias-name is required") :type
                         (common-lisp:or alias-name-type common-lisp:null)
                         :accessor struct-shape-create-alias-request-alias-name
                         :shape "AliasNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-key-id :initarg :target-key-id :initform
                         (common-lisp:error ":target-key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-alias-request-target-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-alias-request 'make-create-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-key-store-request common-lisp:nil
                       ((custom-key-store-name :initarg :custom-key-store-name
                         :initform
                         (common-lisp:error
                          ":custom-key-store-name is required")
                         :type
                         (common-lisp:or custom-key-store-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-custom-key-store-name
                         :shape "CustomKeyStoreNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-hsm-cluster-id :initarg :cloud-hsm-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-hsm-cluster-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-cloud-hsm-cluster-id
                         :shape "CloudHsmClusterIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust-anchor-certificate :initarg
                         :trust-anchor-certificate :initform common-lisp:nil
                         :type
                         (common-lisp:or trust-anchor-certificate-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-trust-anchor-certificate
                         :shape "TrustAnchorCertificateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-store-password :initarg :key-store-password
                         :initform common-lisp:nil :type
                         (common-lisp:or key-store-password-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-key-store-password
                         :shape "KeyStorePasswordType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-key-store-type :initarg :custom-key-store-type
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-custom-key-store-type
                         :shape "CustomKeyStoreType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xks-proxy-uri-endpoint :initarg
                         :xks-proxy-uri-endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-uri-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-xks-proxy-uri-endpoint
                         :shape "XksProxyUriEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-proxy-uri-path :initarg :xks-proxy-uri-path
                         :initform common-lisp:nil :type
                         (common-lisp:or xks-proxy-uri-path-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-xks-proxy-uri-path
                         :shape "XksProxyUriPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xks-proxy-vpc-endpoint-service-name :initarg
                         :xks-proxy-vpc-endpoint-service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          xks-proxy-vpc-endpoint-service-name-type
                          common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-xks-proxy-vpc-endpoint-service-name
                         :shape "XksProxyVpcEndpointServiceNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-proxy-authentication-credential :initarg
                         :xks-proxy-authentication-credential :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          xks-proxy-authentication-credential-type
                          common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-xks-proxy-authentication-credential
                         :shape "XksProxyAuthenticationCredentialType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (xks-proxy-connectivity :initarg
                         :xks-proxy-connectivity :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-connectivity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-request-xks-proxy-connectivity
                         :shape "XksProxyConnectivityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-key-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-key-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-key-store-request
                    'make-create-custom-key-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-key-store-name))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-hsm-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CloudHsmClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trust-anchor-certificate))
      (common-lisp:list
       (common-lisp:cons "TrustAnchorCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-store-password))
      (common-lisp:list
       (common-lisp:cons "KeyStorePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-key-store-type))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-uri-endpoint))
      (common-lisp:list
       (common-lisp:cons "XksProxyUriEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xks-proxy-uri-path))
      (common-lisp:list
       (common-lisp:cons "XksProxyUriPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-vpc-endpoint-service-name))
      (common-lisp:list
       (common-lisp:cons "XksProxyVpcEndpointServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-authentication-credential))
      (common-lisp:list
       (common-lisp:cons "XksProxyAuthenticationCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-connectivity))
      (common-lisp:list
       (common-lisp:cons "XksProxyConnectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-key-store-response common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-key-store-response-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-key-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-key-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-key-store-response
                    'make-create-custom-key-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-key-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-create-grant-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-principal :initarg :grantee-principal
                         :initform
                         (common-lisp:error ":grantee-principal is required")
                         :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-grant-request-grantee-principal
                         :shape "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retiring-principal :initarg :retiring-principal
                         :initform common-lisp:nil :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-create-grant-request-retiring-principal
                         :shape "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         (common-lisp:error ":operations is required") :type
                         (common-lisp:or grant-operation-list common-lisp:null)
                         :accessor struct-shape-create-grant-request-operations
                         :shape "GrantOperationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (constraints :initarg :constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-constraints common-lisp:null)
                         :accessor
                         struct-shape-create-grant-request-constraints :shape
                         "GrantConstraints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-create-grant-request-grant-tokens :shape
                         "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or grant-name-type common-lisp:null)
                         :accessor struct-shape-create-grant-request-name
                         :shape "GrantNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-create-grant-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-grant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-grant-request 'make-create-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grant-response common-lisp:nil
                       ((grant-token :initarg :grant-token :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-type common-lisp:null)
                         :accessor
                         struct-shape-create-grant-response-grant-token :shape
                         "GrantTokenType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-id :initarg :grant-id :initform common-lisp:nil
                         :type (common-lisp:or grant-id-type common-lisp:null)
                         :accessor struct-shape-create-grant-response-grant-id
                         :shape "GrantIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-grant-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-grant-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-grant-response 'make-create-grant-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-token))
      (common-lisp:list
       (common-lisp:cons "GrantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grant-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-key-request common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-create-key-request-policy
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor struct-shape-create-key-request-description
                         :shape "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage-type common-lisp:null)
                         :accessor struct-shape-create-key-request-key-usage
                         :shape "KeyUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-master-key-spec :initarg
                         :customer-master-key-spec :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-master-key-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-key-request-customer-master-key-spec
                         :shape "CustomerMasterKeySpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform common-lisp:nil
                         :type (common-lisp:or key-spec common-lisp:null)
                         :accessor struct-shape-create-key-request-key-spec
                         :shape "KeySpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform common-lisp:nil
                         :type (common-lisp:or origin-type common-lisp:null)
                         :accessor struct-shape-create-key-request-origin
                         :shape "OriginType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-key-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bypass-policy-lockout-safety-check :initarg
                         :bypass-policy-lockout-safety-check :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-create-key-request-bypass-policy-lockout-safety-check
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-key-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multi-region :initarg :multi-region :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-create-key-request-multi-region
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xks-key-id :initarg :xks-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or xks-key-id-type common-lisp:null)
                         :accessor struct-shape-create-key-request-xks-key-id
                         :shape "XksKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-key-request 'make-create-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-master-key-spec))
      (common-lisp:list
       (common-lisp:cons "CustomerMasterKeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-region))
      (common-lisp:list
       (common-lisp:cons "MultiRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xks-key-id))
      (common-lisp:list
       (common-lisp:cons "XksKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-key-response common-lisp:nil
                       ((key-metadata :initarg :key-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or key-metadata common-lisp:null)
                         :accessor
                         struct-shape-create-key-response-key-metadata :shape
                         "KeyMetadata" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-key-response 'make-create-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-metadata))
      (common-lisp:list
       (common-lisp:cons "KeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition custom-key-store-has-cmks-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-key-store-has-cmks-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-key-store-has-cmks-exception
                    'custom-key-store-has-cmks-exception-message)))
(common-lisp:deftype custom-key-store-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-key-store-invalid-state-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-key-store-invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-key-store-invalid-state-exception
                    'custom-key-store-invalid-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition custom-key-store-name-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-key-store-name-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-key-store-name-in-use-exception
                    'custom-key-store-name-in-use-exception-message)))
(common-lisp:deftype custom-key-store-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-key-store-not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-key-store-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-key-store-not-found-exception
                    'custom-key-store-not-found-exception-message)))
(common-lisp:deftype custom-key-store-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-key-stores-list ()
   '(trivial-types:proper-list custom-key-stores-list-entry))
 (common-lisp:defun make-custom-key-stores-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            custom-key-stores-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-key-stores-list-entry common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-key-store-name :initarg :custom-key-store-name
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-custom-key-store-name
                         :shape "CustomKeyStoreNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-hsm-cluster-id :initarg :cloud-hsm-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-hsm-cluster-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-cloud-hsm-cluster-id
                         :shape "CloudHsmClusterIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (trust-anchor-certificate :initarg
                         :trust-anchor-certificate :initform common-lisp:nil
                         :type
                         (common-lisp:or trust-anchor-certificate-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-trust-anchor-certificate
                         :shape "TrustAnchorCertificateType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-state :initarg :connection-state :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-state-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-connection-state
                         :shape "ConnectionStateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-error-code :initarg :connection-error-code
                         :initform common-lisp:nil :type
                         (common-lisp:or connection-error-code-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-connection-error-code
                         :shape "ConnectionErrorCodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-custom-key-stores-list-entry-creation-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-key-store-type :initarg :custom-key-store-type
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-custom-key-store-type
                         :shape "CustomKeyStoreType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xks-proxy-configuration :initarg
                         :xks-proxy-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-key-stores-list-entry-xks-proxy-configuration
                         :shape "XksProxyConfigurationType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-key-stores-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-key-stores-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-key-stores-list-entry
                    'make-custom-key-stores-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-key-stores-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-key-stores-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-key-store-name))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-hsm-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CloudHsmClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trust-anchor-certificate))
      (common-lisp:list
       (common-lisp:cons "TrustAnchorCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-error-code))
      (common-lisp:list
       (common-lisp:cons "ConnectionErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-key-store-type))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-configuration))
      (common-lisp:list
       (common-lisp:cons "XksProxyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-key-stores-list-entry))
   common-lisp:nil))
(common-lisp:deftype customer-master-key-spec () 'common-lisp:string)
(common-lisp:deftype data-key-pair-spec () 'common-lisp:string)
(common-lisp:deftype data-key-spec () 'common-lisp:string)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decrypt-request common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         (common-lisp:error ":ciphertext-blob is required")
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor struct-shape-decrypt-request-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrypt-request-encryption-context :shape
                         "EncryptionContextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-decrypt-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-decrypt-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-algorithm :initarg :encryption-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrypt-request-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recipient :initarg :recipient :initform
                         common-lisp:nil :type
                         (common-lisp:or recipient-info common-lisp:null)
                         :accessor struct-shape-decrypt-request-recipient
                         :shape "RecipientInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-decrypt-request-dry-run :shape
                         "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrypt-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decrypt-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'decrypt-request 'make-decrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decrypt-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-decrypt-response-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plaintext :initarg :plaintext :initform
                         common-lisp:nil :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-decrypt-response-plaintext
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-algorithm :initarg :encryption-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-decrypt-response-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ciphertext-for-recipient :initarg
                         :ciphertext-for-recipient :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-decrypt-response-ciphertext-for-recipient
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decrypt-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decrypt-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decrypt-response 'make-decrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ciphertext-for-recipient))
      (common-lisp:list
       (common-lisp:cons "CiphertextForRecipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :initform
                         (common-lisp:error ":alias-name is required") :type
                         (common-lisp:or alias-name-type common-lisp:null)
                         :accessor struct-shape-delete-alias-request-alias-name
                         :shape "AliasNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-alias-request 'make-delete-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-key-store-request common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform
                         (common-lisp:error ":custom-key-store-id is required")
                         :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-key-store-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-key-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-key-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-key-store-request
                    'make-delete-custom-key-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-key-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-key-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-key-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-key-store-response
                    'make-delete-custom-key-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-key-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-imported-key-material-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-delete-imported-key-material-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-imported-key-material-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-imported-key-material-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-imported-key-material-request
                    'make-delete-imported-key-material-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-imported-key-material-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-timeout-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-timeout-exception
                    'dependency-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass describe-custom-key-stores-request common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (custom-key-store-name :initarg :custom-key-store-name
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-request-custom-key-store-name
                         :shape "CustomKeyStoreNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-describe-custom-key-stores-request-limit
                         :shape "LimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-request-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-key-stores-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-key-stores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-key-stores-request
                    'make-describe-custom-key-stores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-key-store-name))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-key-stores-response common-lisp:nil
                       ((custom-key-stores :initarg :custom-key-stores
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-stores-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-response-custom-key-stores
                         :shape "CustomKeyStoresList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-response-next-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-describe-custom-key-stores-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-custom-key-stores-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-key-stores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-custom-key-stores-response
                    'make-describe-custom-key-stores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-stores))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-key-stores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-describe-key-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-describe-key-request-grant-tokens :shape
                         "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-key-request 'make-describe-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-key-response common-lisp:nil
                       ((key-metadata :initarg :key-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or key-metadata common-lisp:null)
                         :accessor
                         struct-shape-describe-key-response-key-metadata :shape
                         "KeyMetadata" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-key-response 'make-describe-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-metadata))
      (common-lisp:list
       (common-lisp:cons "KeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-key-response))
   common-lisp:nil))
(common-lisp:deftype description-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disable-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-disable-key-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-key-request 'make-disable-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-key-rotation-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-disable-key-rotation-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-key-rotation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-key-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-key-rotation-request
                    'make-disable-key-rotation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-key-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition disabled-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'disabled-exception 'disabled-exception-message)))
(common-lisp:progn
 (common-lisp:defclass disconnect-custom-key-store-request common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform
                         (common-lisp:error ":custom-key-store-id is required")
                         :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-disconnect-custom-key-store-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disconnect-custom-key-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disconnect-custom-key-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disconnect-custom-key-store-request
                    'make-disconnect-custom-key-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disconnect-custom-key-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disconnect-custom-key-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disconnect-custom-key-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disconnect-custom-key-store-response
                    'make-disconnect-custom-key-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disconnect-custom-key-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dry-run-operation-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dry-run-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dry-run-operation-exception
                    'dry-run-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass enable-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-enable-key-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-key-request 'make-enable-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-key-rotation-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-enable-key-rotation-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-key-rotation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-key-rotation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-key-rotation-request
                    'make-enable-key-rotation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-key-rotation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encrypt-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-encrypt-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plaintext :initarg :plaintext :initform
                         (common-lisp:error ":plaintext is required") :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-encrypt-request-plaintext
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-encrypt-request-encryption-context :shape
                         "EncryptionContextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-encrypt-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-algorithm :initarg :encryption-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-encrypt-request-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-encrypt-request-dry-run :shape
                         "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encrypt-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encrypt-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'encrypt-request 'make-encrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encrypt-response common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-encrypt-response-ciphertext-blob :shape
                         "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-encrypt-response-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-algorithm :initarg :encryption-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-encrypt-response-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encrypt-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encrypt-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encrypt-response 'make-encrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-response))
   common-lisp:nil))
(common-lisp:deftype encryption-algorithm-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype encryption-algorithm-spec-list ()
   '(trivial-types:proper-list encryption-algorithm-spec))
 (common-lisp:defun make-encryption-algorithm-spec-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            encryption-algorithm-spec))
   aws-sdk/generator/shape::members))
(common-lisp:deftype encryption-context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype encryption-context-type () 'common-lisp:hash-table)
 (common-lisp:defun make-encryption-context-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype encryption-context-value () 'common-lisp:string)
(common-lisp:deftype error-message-type () 'common-lisp:string)
(common-lisp:deftype expiration-model-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition expired-import-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-import-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-import-token-exception
                    'expired-import-token-exception-message)))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-pair-request common-lisp:nil
                       ((encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair-spec :initarg :key-pair-spec :initform
                         (common-lisp:error ":key-pair-spec is required") :type
                         (common-lisp:or data-key-pair-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-key-pair-spec
                         :shape "DataKeyPairSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recipient :initarg :recipient :initform
                         common-lisp:nil :type
                         (common-lisp:or recipient-info common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-recipient
                         :shape "RecipientInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-pair-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-pair-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-pair-request
                    'make-generate-data-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-spec))
      (common-lisp:list
       (common-lisp:cons "KeyPairSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-pair-response common-lisp:nil
                       ((private-key-ciphertext-blob :initarg
                         :private-key-ciphertext-blob :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-private-key-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-key-plaintext :initarg :private-key-plaintext
                         :initform common-lisp:nil :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-private-key-plaintext
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or public-key-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-public-key
                         :shape "PublicKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair-spec :initarg :key-pair-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or data-key-pair-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-key-pair-spec
                         :shape "DataKeyPairSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ciphertext-for-recipient :initarg
                         :ciphertext-for-recipient :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-response-ciphertext-for-recipient
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-pair-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-pair-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-pair-response
                    'make-generate-data-key-pair-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyCiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-plaintext))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyPlaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-spec))
      (common-lisp:list
       (common-lisp:cons "KeyPairSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ciphertext-for-recipient))
      (common-lisp:list
       (common-lisp:cons "CiphertextForRecipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-pair-without-plaintext-request
                       common-lisp:nil
                       ((encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-request-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair-spec :initarg :key-pair-spec :initform
                         (common-lisp:error ":key-pair-spec is required") :type
                         (common-lisp:or data-key-pair-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-request-key-pair-spec
                         :shape "DataKeyPairSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-pair-without-plaintext-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-pair-without-plaintext-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-pair-without-plaintext-request
                    'make-generate-data-key-pair-without-plaintext-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-spec))
      (common-lisp:list
       (common-lisp:cons "KeyPairSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-pair-without-plaintext-response
                       common-lisp:nil
                       ((private-key-ciphertext-blob :initarg
                         :private-key-ciphertext-blob :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-response-private-key-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or public-key-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-response-public-key
                         :shape "PublicKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-pair-spec :initarg :key-pair-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or data-key-pair-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-pair-without-plaintext-response-key-pair-spec
                         :shape "DataKeyPairSpec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-pair-without-plaintext-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-pair-without-plaintext-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-pair-without-plaintext-response
                    'make-generate-data-key-pair-without-plaintext-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyCiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-spec))
      (common-lisp:list
       (common-lisp:cons "KeyPairSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-pair-without-plaintext-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-of-bytes :initarg :number-of-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or number-of-bytes-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-number-of-bytes
                         :shape "NumberOfBytesType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform common-lisp:nil
                         :type (common-lisp:or data-key-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-key-spec :shape
                         "DataKeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recipient :initarg :recipient :initform
                         common-lisp:nil :type
                         (common-lisp:or recipient-info common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-recipient
                         :shape "RecipientInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-request-dry-run :shape
                         "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-data-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-request
                    'make-generate-data-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-response common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-response-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (plaintext :initarg :plaintext :initform
                         common-lisp:nil :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-response-plaintext
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-response-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ciphertext-for-recipient :initarg
                         :ciphertext-for-recipient :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-response-ciphertext-for-recipient
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-data-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-response
                    'make-generate-data-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ciphertext-for-recipient))
      (common-lisp:list
       (common-lisp:cons "CiphertextForRecipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-without-plaintext-request
                       common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-context :initarg :encryption-context
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform common-lisp:nil
                         :type (common-lisp:or data-key-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-key-spec
                         :shape "DataKeySpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-bytes :initarg :number-of-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or number-of-bytes-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-number-of-bytes
                         :shape "NumberOfBytesType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-without-plaintext-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-without-plaintext-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-without-plaintext-request
                    'make-generate-data-key-without-plaintext-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-context))
      (common-lisp:list
       (common-lisp:cons "EncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-data-key-without-plaintext-response
                       common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-response-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-generate-data-key-without-plaintext-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-data-key-without-plaintext-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-data-key-without-plaintext-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-data-key-without-plaintext-response
                    'make-generate-data-key-without-plaintext-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-data-key-without-plaintext-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-mac-request common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-generate-mac-request-message
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-generate-mac-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-algorithm :initarg :mac-algorithm :initform
                         (common-lisp:error ":mac-algorithm is required") :type
                         (common-lisp:or mac-algorithm-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-mac-request-mac-algorithm :shape
                         "MacAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-generate-mac-request-grant-tokens :shape
                         "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-generate-mac-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-mac-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-mac-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-mac-request 'make-generate-mac-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generate-mac-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generate-mac-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-algorithm))
      (common-lisp:list
       (common-lisp:cons "MacAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generate-mac-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-mac-response common-lisp:nil
                       ((mac :initarg :mac :initform common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor struct-shape-generate-mac-response-mac
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-algorithm :initarg :mac-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-algorithm-spec common-lisp:null)
                         :accessor
                         struct-shape-generate-mac-response-mac-algorithm
                         :shape "MacAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-generate-mac-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-mac-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-mac-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-mac-response 'make-generate-mac-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-mac-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-mac-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac))
      (common-lisp:list
       (common-lisp:cons "Mac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-algorithm))
      (common-lisp:list
       (common-lisp:cons "MacAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-mac-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-random-request common-lisp:nil
                       ((number-of-bytes :initarg :number-of-bytes :initform
                         common-lisp:nil :type
                         (common-lisp:or number-of-bytes-type common-lisp:null)
                         :accessor
                         struct-shape-generate-random-request-number-of-bytes
                         :shape "NumberOfBytesType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-generate-random-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recipient :initarg :recipient :initform
                         common-lisp:nil :type
                         (common-lisp:or recipient-info common-lisp:null)
                         :accessor
                         struct-shape-generate-random-request-recipient :shape
                         "RecipientInfo" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-random-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-random-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-random-request 'make-generate-random-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-bytes))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipient))
      (common-lisp:list
       (common-lisp:cons "Recipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-random-response common-lisp:nil
                       ((plaintext :initarg :plaintext :initform
                         common-lisp:nil :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-random-response-plaintext :shape
                         "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ciphertext-for-recipient :initarg
                         :ciphertext-for-recipient :initform common-lisp:nil
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-generate-random-response-ciphertext-for-recipient
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-random-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generate-random-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-random-response 'make-generate-random-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plaintext))
      (common-lisp:list
       (common-lisp:cons "Plaintext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ciphertext-for-recipient))
      (common-lisp:list
       (common-lisp:cons "CiphertextForRecipient"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-random-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-policy-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-get-key-policy-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name-type common-lisp:null)
                         :accessor
                         struct-shape-get-key-policy-request-policy-name :shape
                         "PolicyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-policy-request 'make-get-key-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-get-key-policy-response-policy
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-key-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-policy-response 'make-get-key-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-rotation-status-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-key-rotation-status-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-rotation-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-key-rotation-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-rotation-status-request
                    'make-get-key-rotation-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-key-rotation-status-response common-lisp:nil
                       ((key-rotation-enabled :initarg :key-rotation-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-get-key-rotation-status-response-key-rotation-enabled
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-key-rotation-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-key-rotation-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-key-rotation-status-response
                    'make-get-key-rotation-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-rotation-enabled))
      (common-lisp:list
       (common-lisp:cons "KeyRotationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-rotation-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameters-for-import-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wrapping-algorithm :initarg :wrapping-algorithm
                         :initform
                         (common-lisp:error ":wrapping-algorithm is required")
                         :type (common-lisp:or algorithm-spec common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-request-wrapping-algorithm
                         :shape "AlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (wrapping-key-spec :initarg :wrapping-key-spec
                         :initform
                         (common-lisp:error ":wrapping-key-spec is required")
                         :type
                         (common-lisp:or wrapping-key-spec common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-request-wrapping-key-spec
                         :shape "WrappingKeySpec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-parameters-for-import-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-parameters-for-import-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-parameters-for-import-request
                    'make-get-parameters-for-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wrapping-algorithm))
      (common-lisp:list
       (common-lisp:cons "WrappingAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wrapping-key-spec))
      (common-lisp:list
       (common-lisp:cons "WrappingKeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameters-for-import-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-token :initarg :import-token :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-response-import-token
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor
                         struct-shape-get-parameters-for-import-response-public-key
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters-valid-to :initarg :parameters-valid-to
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-get-parameters-for-import-response-parameters-valid-to
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-parameters-for-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-parameters-for-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-parameters-for-import-response
                    'make-get-parameters-for-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-token))
      (common-lisp:list
       (common-lisp:cons "ImportToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters-valid-to))
      (common-lisp:list
       (common-lisp:cons "ParametersValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-for-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-get-public-key-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-public-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-public-key-request 'make-get-public-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-key-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-get-public-key-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or public-key-type common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-public-key :shape
                         "PublicKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-master-key-spec :initarg
                         :customer-master-key-spec :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-master-key-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-customer-master-key-spec
                         :shape "CustomerMasterKeySpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform common-lisp:nil
                         :type (common-lisp:or key-spec common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-key-spec :shape
                         "KeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage-type common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-key-usage :shape
                         "KeyUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-algorithms :initarg :encryption-algorithms
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-encryption-algorithms
                         :shape "EncryptionAlgorithmSpecList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (signing-algorithms :initarg :signing-algorithms
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-algorithm-spec-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-public-key-response-signing-algorithms
                         :shape "SigningAlgorithmSpecList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-public-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-public-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-public-key-response 'make-get-public-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-master-key-spec))
      (common-lisp:list
       (common-lisp:cons "CustomerMasterKeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithms))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant-constraints common-lisp:nil
                       ((encryption-context-subset :initarg
                         :encryption-context-subset :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-grant-constraints-encryption-context-subset
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-context-equals :initarg
                         :encryption-context-equals :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-grant-constraints-encryption-context-equals
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-constraints 'make-grant-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-subset))
      (common-lisp:list
       (common-lisp:cons "EncryptionContextSubset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-equals))
      (common-lisp:list
       (common-lisp:cons "EncryptionContextEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-constraints))
   common-lisp:nil))
(common-lisp:deftype grant-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grant-list ()
   '(trivial-types:proper-list grant-list-entry))
 (common-lisp:defun make-grant-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass grant-list-entry common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-grant-list-entry-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grant-id :initarg :grant-id :initform common-lisp:nil
                         :type (common-lisp:or grant-id-type common-lisp:null)
                         :accessor struct-shape-grant-list-entry-grant-id
                         :shape "GrantIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or grant-name-type common-lisp:null)
                         :accessor struct-shape-grant-list-entry-name :shape
                         "GrantNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-grant-list-entry-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grantee-principal :initarg :grantee-principal
                         :initform common-lisp:nil :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-grant-list-entry-grantee-principal :shape
                         "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retiring-principal :initarg :retiring-principal
                         :initform common-lisp:nil :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-grant-list-entry-retiring-principal
                         :shape "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuing-account :initarg :issuing-account :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-grant-list-entry-issuing-account :shape
                         "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operations :initarg :operations :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-operation-list common-lisp:null)
                         :accessor struct-shape-grant-list-entry-operations
                         :shape "GrantOperationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (constraints :initarg :constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-constraints common-lisp:null)
                         :accessor struct-shape-grant-list-entry-constraints
                         :shape "GrantConstraints" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grant-list-entry 'make-grant-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuing-account))
      (common-lisp:list
       (common-lisp:cons "IssuingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant-list-entry))
   common-lisp:nil))
(common-lisp:deftype grant-name-type () 'common-lisp:string)
(common-lisp:deftype grant-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype grant-operation-list ()
   '(trivial-types:proper-list grant-operation))
 (common-lisp:defun make-grant-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype grant-token-list ()
   '(trivial-types:proper-list grant-token-type))
 (common-lisp:defun make-grant-token-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant-token-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype grant-token-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-key-material-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-import-key-material-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-token :initarg :import-token :initform
                         (common-lisp:error ":import-token is required") :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-import-key-material-request-import-token
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted-key-material :initarg
                         :encrypted-key-material :initform
                         (common-lisp:error
                          ":encrypted-key-material is required")
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-import-key-material-request-encrypted-key-material
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (valid-to :initarg :valid-to :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor
                         struct-shape-import-key-material-request-valid-to
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-model :initarg :expiration-model :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration-model-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-key-material-request-expiration-model
                         :shape "ExpirationModelType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-key-material-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-key-material-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-key-material-request
                    'make-import-key-material-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-token))
      (common-lisp:list
       (common-lisp:cons "ImportToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encrypted-key-material))
      (common-lisp:list
       (common-lisp:cons "EncryptedKeyMaterial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-to))
      (common-lisp:list
       (common-lisp:cons "ValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-model))
      (common-lisp:list
       (common-lisp:cons "ExpirationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-key-material-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-key-material-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-key-material-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-key-material-response
                    'make-import-key-material-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-material-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition incorrect-key-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-key-exception 'incorrect-key-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition incorrect-key-material-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-key-material-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-key-material-exception
                    'incorrect-key-material-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition incorrect-trust-anchor-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incorrect-trust-anchor-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incorrect-trust-anchor-exception
                    'incorrect-trust-anchor-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-alias-name-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-alias-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-alias-name-exception
                    'invalid-alias-name-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-ciphertext-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-ciphertext-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-ciphertext-exception
                    'invalid-ciphertext-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-grant-id-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-grant-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-grant-id-exception
                    'invalid-grant-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-grant-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-grant-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-grant-token-exception
                    'invalid-grant-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-import-token-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-import-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-import-token-exception
                    'invalid-import-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-key-usage-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-key-usage-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-key-usage-exception
                    'invalid-key-usage-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-marker-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-marker-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-marker-exception
                    'invalid-marker-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinternal-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinternal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinternal-exception 'kmsinternal-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-mac-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-mac-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-mac-exception
                    'kmsinvalid-mac-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-signature-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-signature-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-signature-exception
                    'kmsinvalid-signature-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'kmsinvalid-state-exception-message)))
(common-lisp:deftype key-encryption-mechanism () 'common-lisp:string)
(common-lisp:deftype key-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list key-list-entry))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass key-list-entry common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-key-list-entry-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-arn :initarg :key-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-type common-lisp:null)
                         :accessor struct-shape-key-list-entry-key-arn :shape
                         "ArnType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-list-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-list-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-list-entry 'make-key-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-list-entry))
   common-lisp:nil))
(common-lisp:deftype key-manager-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-metadata common-lisp:nil
                       ((awsaccount-id :initarg :awsaccount-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id-type common-lisp:null)
                         :accessor struct-shape-key-metadata-awsaccount-id
                         :shape "AWSAccountIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-key-metadata-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-key-metadata-arn :shape "ArnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-key-metadata-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-key-metadata-enabled :shape
                         "BooleanType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor struct-shape-key-metadata-description :shape
                         "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage-type common-lisp:null)
                         :accessor struct-shape-key-metadata-key-usage :shape
                         "KeyUsageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-state :initarg :key-state :initform
                         common-lisp:nil :type
                         (common-lisp:or key-state common-lisp:null) :accessor
                         struct-shape-key-metadata-key-state :shape "KeyState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deletion-date :initarg :deletion-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-key-metadata-deletion-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-to :initarg :valid-to :initform common-lisp:nil
                         :type (common-lisp:or date-type common-lisp:null)
                         :accessor struct-shape-key-metadata-valid-to :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (origin :initarg :origin :initform common-lisp:nil
                         :type (common-lisp:or origin-type common-lisp:null)
                         :accessor struct-shape-key-metadata-origin :shape
                         "OriginType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-key-store-id :initarg :custom-key-store-id
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-custom-key-store-id :shape
                         "CustomKeyStoreIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-hsm-cluster-id :initarg :cloud-hsm-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-hsm-cluster-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-cloud-hsm-cluster-id :shape
                         "CloudHsmClusterIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-model :initarg :expiration-model :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration-model-type
                                         common-lisp:null)
                         :accessor struct-shape-key-metadata-expiration-model
                         :shape "ExpirationModelType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-manager :initarg :key-manager :initform
                         common-lisp:nil :type
                         (common-lisp:or key-manager-type common-lisp:null)
                         :accessor struct-shape-key-metadata-key-manager :shape
                         "KeyManagerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (customer-master-key-spec :initarg
                         :customer-master-key-spec :initform common-lisp:nil
                         :type
                         (common-lisp:or customer-master-key-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-customer-master-key-spec
                         :shape "CustomerMasterKeySpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-spec :initarg :key-spec :initform common-lisp:nil
                         :type (common-lisp:or key-spec common-lisp:null)
                         :accessor struct-shape-key-metadata-key-spec :shape
                         "KeySpec" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-algorithms :initarg :encryption-algorithms
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-encryption-algorithms :shape
                         "EncryptionAlgorithmSpecList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (signing-algorithms :initarg :signing-algorithms
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-algorithm-spec-list
                                         common-lisp:null)
                         :accessor struct-shape-key-metadata-signing-algorithms
                         :shape "SigningAlgorithmSpecList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (multi-region :initarg :multi-region :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-key-metadata-multi-region
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-region-configuration :initarg
                         :multi-region-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or multi-region-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-multi-region-configuration
                         :shape "MultiRegionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pending-deletion-window-in-days :initarg
                         :pending-deletion-window-in-days :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-window-in-days-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-pending-deletion-window-in-days
                         :shape "PendingWindowInDaysType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mac-algorithms :initarg :mac-algorithms :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-algorithm-spec-list
                                         common-lisp:null)
                         :accessor struct-shape-key-metadata-mac-algorithms
                         :shape "MacAlgorithmSpecList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-key-configuration :initarg :xks-key-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or xks-key-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-key-metadata-xks-key-configuration :shape
                         "XksKeyConfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-metadata 'make-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsaccount-id))
      (common-lisp:list
       (common-lisp:cons "AWSAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-state))
      (common-lisp:list
       (common-lisp:cons "KeyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-to))
      (common-lisp:list
       (common-lisp:cons "ValidTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-hsm-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CloudHsmClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-model))
      (common-lisp:list
       (common-lisp:cons "ExpirationModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-manager))
      (common-lisp:list
       (common-lisp:cons "KeyManager"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-master-key-spec))
      (common-lisp:list
       (common-lisp:cons "CustomerMasterKeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithms))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithms))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-region))
      (common-lisp:list
       (common-lisp:cons "MultiRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-configuration))
      (common-lisp:list
       (common-lisp:cons "MultiRegionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-deletion-window-in-days))
      (common-lisp:list
       (common-lisp:cons "PendingDeletionWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-algorithms))
      (common-lisp:list
       (common-lisp:cons "MacAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-key-configuration))
      (common-lisp:list
       (common-lisp:cons "XksKeyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-metadata))
   common-lisp:nil))
(common-lisp:deftype key-spec () 'common-lisp:string)
(common-lisp:deftype key-state () 'common-lisp:string)
(common-lisp:deftype key-store-password-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition key-unavailable-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       key-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'key-unavailable-exception
                    'key-unavailable-exception-message)))
(common-lisp:deftype key-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype limit-type () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-aliases-request common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-list-aliases-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-aliases-request-limit :shape
                         "LimitType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor struct-shape-list-aliases-request-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aliases-response common-lisp:nil
                       ((aliases :initarg :aliases :initform common-lisp:nil
                         :type (common-lisp:or alias-list common-lisp:null)
                         :accessor struct-shape-list-aliases-response-aliases
                         :shape "AliasList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-aliases-response-next-marker :shape
                         "MarkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-list-aliases-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aliases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-aliases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-grants-request common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-grants-request-limit :shape
                         "LimitType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor struct-shape-list-grants-request-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-list-grants-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-id :initarg :grant-id :initform common-lisp:nil
                         :type (common-lisp:or grant-id-type common-lisp:null)
                         :accessor struct-shape-list-grants-request-grant-id
                         :shape "GrantIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-principal :initarg :grantee-principal
                         :initform common-lisp:nil :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-grants-request-grantee-principal
                         :shape "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-grants-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-grants-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-grants-request 'make-list-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "GranteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-grants-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-grants-response common-lisp:nil
                       ((grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grant-list common-lisp:null)
                         :accessor struct-shape-list-grants-response-grants
                         :shape "GrantList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-grants-response-next-marker :shape
                         "MarkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-list-grants-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-grants-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-grants-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-grants-response 'make-list-grants-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-grants-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-grants-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-grants-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-key-policies-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-key-policies-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-key-policies-request-limit :shape
                         "LimitType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-key-policies-request-marker :shape
                         "MarkerType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-key-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-key-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-key-policies-request
                    'make-list-key-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-key-policies-response common-lisp:nil
                       ((policy-names :initarg :policy-names :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-key-policies-response-policy-names
                         :shape "PolicyNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-key-policies-response-next-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-list-key-policies-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-key-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-key-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-key-policies-response
                    'make-list-key-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-key-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-keys-request common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-keys-request-limit :shape
                         "LimitType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor struct-shape-list-keys-request-marker :shape
                         "MarkerType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keys-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keys-request 'make-list-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-keys-response common-lisp:nil
                       ((keys :initarg :keys :initform common-lisp:nil :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         struct-shape-list-keys-response-keys :shape "KeyList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor struct-shape-list-keys-response-next-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-list-keys-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-keys-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-keys-response 'make-list-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-tags-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-tags-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-resource-tags-request-limit :shape
                         "LimitType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-tags-request-marker :shape
                         "MarkerType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resource-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-tags-request
                    'make-list-resource-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-resource-tags-response-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-tags-response-next-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (truncated :initarg :truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-list-resource-tags-response-truncated
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-resource-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-tags-response
                    'make-list-resource-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-retirable-grants-request common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit-type common-lisp:null) :accessor
                         struct-shape-list-retirable-grants-request-limit
                         :shape "LimitType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker-type common-lisp:null)
                         :accessor
                         struct-shape-list-retirable-grants-request-marker
                         :shape "MarkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retiring-principal :initarg :retiring-principal
                         :initform
                         (common-lisp:error ":retiring-principal is required")
                         :type
                         (common-lisp:or principal-id-type common-lisp:null)
                         :accessor
                         struct-shape-list-retirable-grants-request-retiring-principal
                         :shape "PrincipalIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-retirable-grants-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-retirable-grants-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-retirable-grants-request
                    'make-list-retirable-grants-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "RetiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-retirable-grants-request))
   common-lisp:nil))
(common-lisp:deftype mac-algorithm-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mac-algorithm-spec-list ()
   '(trivial-types:proper-list mac-algorithm-spec))
 (common-lisp:defun make-mac-algorithm-spec-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mac-algorithm-spec))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:deftype marker-type () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multi-region-configuration common-lisp:nil
                       ((multi-region-key-type :initarg :multi-region-key-type
                         :initform common-lisp:nil :type
                         (common-lisp:or multi-region-key-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-multi-region-configuration-multi-region-key-type
                         :shape "MultiRegionKeyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-key :initarg :primary-key :initform
                         common-lisp:nil :type
                         (common-lisp:or multi-region-key common-lisp:null)
                         :accessor
                         struct-shape-multi-region-configuration-primary-key
                         :shape "MultiRegionKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-keys :initarg :replica-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or multi-region-key-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-multi-region-configuration-replica-keys
                         :shape "MultiRegionKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-region-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multi-region-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-region-configuration
                    'make-multi-region-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-key-type))
      (common-lisp:list
       (common-lisp:cons "MultiRegionKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key))
      (common-lisp:list
       (common-lisp:cons "PrimaryKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-keys))
      (common-lisp:list
       (common-lisp:cons "ReplicaKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multi-region-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multi-region-key common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn-type common-lisp:null) :accessor
                         struct-shape-multi-region-key-arn :shape "ArnType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region-type common-lisp:null)
                         :accessor struct-shape-multi-region-key-region :shape
                         "RegionType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multi-region-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multi-region-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multi-region-key 'make-multi-region-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multi-region-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multi-region-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multi-region-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype multi-region-key-list ()
   '(trivial-types:proper-list multi-region-key))
 (common-lisp:defun make-multi-region-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multi-region-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype multi-region-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype nullable-boolean-type () 'common-lisp:boolean)
(common-lisp:deftype number-of-bytes-type () 'common-lisp:integer)
(common-lisp:deftype origin-type () 'common-lisp:string)
(common-lisp:deftype pending-window-in-days-type () 'common-lisp:integer)
(common-lisp:deftype plaintext-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype policy-name-list ()
   '(trivial-types:proper-list policy-name-type))
 (common-lisp:defun make-policy-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name-type () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:deftype principal-id-type () 'common-lisp:string)
(common-lisp:deftype public-key-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass put-key-policy-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-put-key-policy-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-name :initarg :policy-name :initform
                         (common-lisp:error ":policy-name is required") :type
                         (common-lisp:or policy-name-type common-lisp:null)
                         :accessor
                         struct-shape-put-key-policy-request-policy-name :shape
                         "PolicyNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-put-key-policy-request-policy
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bypass-policy-lockout-safety-check :initarg
                         :bypass-policy-lockout-safety-check :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-put-key-policy-request-bypass-policy-lockout-safety-check
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-key-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-key-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-key-policy-request 'make-put-key-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-key-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass re-encrypt-request common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         (common-lisp:error ":ciphertext-blob is required")
                         :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-ciphertext-blob :shape
                         "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-encryption-context :initarg
                         :source-encryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-source-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-key-id :initarg :source-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-source-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-key-id :initarg :destination-key-id
                         :initform
                         (common-lisp:error ":destination-key-id is required")
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-destination-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-encryption-context :initarg
                         :destination-encryption-context :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-context-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-destination-encryption-context
                         :shape "EncryptionContextType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-encryption-algorithm :initarg
                         :source-encryption-algorithm :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-source-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-encryption-algorithm :initarg
                         :destination-encryption-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-request-destination-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-re-encrypt-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-re-encrypt-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-re-encrypt-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 're-encrypt-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 're-encrypt-request 'make-re-encrypt-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-encryption-context))
      (common-lisp:list
       (common-lisp:cons "SourceEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-key-id))
      (common-lisp:list
       (common-lisp:cons "SourceKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-key-id))
      (common-lisp:list
       (common-lisp:cons "DestinationKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-encryption-context))
      (common-lisp:list
       (common-lisp:cons "DestinationEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "SourceEncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "DestinationEncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input re-encrypt-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass re-encrypt-response common-lisp:nil
                       ((ciphertext-blob :initarg :ciphertext-blob :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-response-ciphertext-blob
                         :shape "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-key-id :initarg :source-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-response-source-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-re-encrypt-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-encryption-algorithm :initarg
                         :source-encryption-algorithm :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-response-source-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-encryption-algorithm :initarg
                         :destination-encryption-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-re-encrypt-response-destination-encryption-algorithm
                         :shape "EncryptionAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-re-encrypt-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 're-encrypt-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 're-encrypt-response 'make-re-encrypt-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext-blob))
      (common-lisp:list
       (common-lisp:cons "CiphertextBlob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-key-id))
      (common-lisp:list
       (common-lisp:cons "SourceKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "SourceEncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "DestinationEncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input re-encrypt-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recipient-info common-lisp:nil
                       ((key-encryption-algorithm :initarg
                         :key-encryption-algorithm :initform common-lisp:nil
                         :type
                         (common-lisp:or key-encryption-mechanism
                                         common-lisp:null)
                         :accessor
                         struct-shape-recipient-info-key-encryption-algorithm
                         :shape "KeyEncryptionMechanism" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attestation-document :initarg :attestation-document
                         :initform common-lisp:nil :type
                         (common-lisp:or attestation-document-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-recipient-info-attestation-document
                         :shape "AttestationDocumentType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recipient-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recipient-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recipient-info 'make-recipient-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recipient-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recipient-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyEncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attestation-document))
      (common-lisp:list
       (common-lisp:cons "AttestationDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recipient-info))
   common-lisp:nil))
(common-lisp:deftype region-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replicate-key-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-replicate-key-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-region :initarg :replica-region :initform
                         (common-lisp:error ":replica-region is required")
                         :type (common-lisp:or region-type common-lisp:null)
                         :accessor
                         struct-shape-replicate-key-request-replica-region
                         :shape "RegionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy-type common-lisp:null)
                         :accessor struct-shape-replicate-key-request-policy
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bypass-policy-lockout-safety-check :initarg
                         :bypass-policy-lockout-safety-check :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor
                         struct-shape-replicate-key-request-bypass-policy-lockout-safety-check
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor
                         struct-shape-replicate-key-request-description :shape
                         "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-replicate-key-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replicate-key-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replicate-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replicate-key-request 'make-replicate-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-region))
      (common-lisp:list
       (common-lisp:cons "ReplicaRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-policy-lockout-safety-check))
      (common-lisp:list
       (common-lisp:cons "BypassPolicyLockoutSafetyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replicate-key-response common-lisp:nil
                       ((replica-key-metadata :initarg :replica-key-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or key-metadata common-lisp:null)
                         :accessor
                         struct-shape-replicate-key-response-replica-key-metadata
                         :shape "KeyMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-policy :initarg :replica-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-replicate-key-response-replica-policy
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replica-tags :initarg :replica-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-replicate-key-response-replica-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replicate-key-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replicate-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replicate-key-response 'make-replicate-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-key-metadata))
      (common-lisp:list
       (common-lisp:cons "ReplicaKeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-policy))
      (common-lisp:list
       (common-lisp:cons "ReplicaPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-tags))
      (common-lisp:list
       (common-lisp:cons "ReplicaTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replicate-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retire-grant-request common-lisp:nil
                       ((grant-token :initarg :grant-token :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-type common-lisp:null)
                         :accessor
                         struct-shape-retire-grant-request-grant-token :shape
                         "GrantTokenType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-retire-grant-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-id :initarg :grant-id :initform common-lisp:nil
                         :type (common-lisp:or grant-id-type common-lisp:null)
                         :accessor struct-shape-retire-grant-request-grant-id
                         :shape "GrantIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-retire-grant-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retire-grant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retire-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retire-grant-request 'make-retire-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retire-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retire-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-token))
      (common-lisp:list
       (common-lisp:cons "GrantToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retire-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-grant-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-revoke-grant-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-id :initarg :grant-id :initform
                         (common-lisp:error ":grant-id is required") :type
                         (common-lisp:or grant-id-type common-lisp:null)
                         :accessor struct-shape-revoke-grant-request-grant-id
                         :shape "GrantIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-revoke-grant-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-grant-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-grant-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-grant-request 'make-revoke-grant-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-id))
      (common-lisp:list
       (common-lisp:cons "GrantId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input revoke-grant-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-key-deletion-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-schedule-key-deletion-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-window-in-days :initarg
                         :pending-window-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-window-in-days-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-key-deletion-request-pending-window-in-days
                         :shape "PendingWindowInDaysType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-key-deletion-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-key-deletion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-key-deletion-request
                    'make-schedule-key-deletion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-window-in-days))
      (common-lisp:list
       (common-lisp:cons "PendingWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-key-deletion-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-schedule-key-deletion-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-date :initarg :deletion-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-schedule-key-deletion-response-deletion-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-state :initarg :key-state :initform
                         common-lisp:nil :type
                         (common-lisp:or key-state common-lisp:null) :accessor
                         struct-shape-schedule-key-deletion-response-key-state
                         :shape "KeyState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-window-in-days :initarg
                         :pending-window-in-days :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-window-in-days-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-key-deletion-response-pending-window-in-days
                         :shape "PendingWindowInDaysType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule-key-deletion-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-key-deletion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schedule-key-deletion-response
                    'make-schedule-key-deletion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-date))
      (common-lisp:list
       (common-lisp:cons "DeletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-state))
      (common-lisp:list
       (common-lisp:cons "KeyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-window-in-days))
      (common-lisp:list
       (common-lisp:cons "PendingWindowInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-key-deletion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sign-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-sign-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-sign-request-message :shape
                         "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-type :initarg :message-type :initform
                         common-lisp:nil :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor struct-shape-sign-request-message-type
                         :shape "MessageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-sign-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform
                         (common-lisp:error ":signing-algorithm is required")
                         :type
                         (common-lisp:or signing-algorithm-spec
                                         common-lisp:null)
                         :accessor struct-shape-sign-request-signing-algorithm
                         :shape "SigningAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-sign-request-dry-run :shape
                         "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sign-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sign-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sign-request 'make-sign-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sign-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sign-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sign-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sign-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-sign-response-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signature :initarg :signature :initform
                         common-lisp:nil :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor struct-shape-sign-response-signature :shape
                         "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-algorithm-spec
                                         common-lisp:null)
                         :accessor struct-shape-sign-response-signing-algorithm
                         :shape "SigningAlgorithmSpec" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sign-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sign-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sign-response 'make-sign-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sign-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sign-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sign-response))
   common-lisp:nil))
(common-lisp:deftype signing-algorithm-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype signing-algorithm-spec-list ()
   '(trivial-types:proper-list signing-algorithm-spec))
 (common-lisp:defun make-signing-algorithm-spec-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signing-algorithm-spec))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((tag-key :initarg :tag-key :initform
                         (common-lisp:error ":tag-key is required") :type
                         (common-lisp:or tag-key-type common-lisp:null)
                         :accessor struct-shape-tag-tag-key :shape "TagKeyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-value :initarg :tag-value :initform
                         (common-lisp:error ":tag-value is required") :type
                         (common-lisp:or tag-value-type common-lisp:null)
                         :accessor struct-shape-tag-tag-value :shape
                         "TagValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value))
      (common-lisp:list
       (common-lisp:cons "TagValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition tag-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tag-exception-message)))
 (common-lisp:export (common-lisp:list 'tag-exception 'tag-exception-message)))
(common-lisp:progn
 (common-lisp:deftype tag-key-list ()
   '(trivial-types:proper-list tag-key-type))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-tag-resource-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value-type () 'common-lisp:string)
(common-lisp:deftype trust-anchor-certificate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operation-exception
                    'unsupported-operation-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-untag-resource-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-alias-request common-lisp:nil
                       ((alias-name :initarg :alias-name :initform
                         (common-lisp:error ":alias-name is required") :type
                         (common-lisp:or alias-name-type common-lisp:null)
                         :accessor struct-shape-update-alias-request-alias-name
                         :shape "AliasNameType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-key-id :initarg :target-key-id :initform
                         (common-lisp:error ":target-key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-alias-request-target-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-alias-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-alias-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-alias-request 'make-update-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias-name))
      (common-lisp:list
       (common-lisp:cons "AliasName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-key-id))
      (common-lisp:list
       (common-lisp:cons "TargetKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-key-store-request common-lisp:nil
                       ((custom-key-store-id :initarg :custom-key-store-id
                         :initform
                         (common-lisp:error ":custom-key-store-id is required")
                         :type
                         (common-lisp:or custom-key-store-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-custom-key-store-id
                         :shape "CustomKeyStoreIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-custom-key-store-name :initarg
                         :new-custom-key-store-name :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-key-store-name-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-new-custom-key-store-name
                         :shape "CustomKeyStoreNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-store-password :initarg :key-store-password
                         :initform common-lisp:nil :type
                         (common-lisp:or key-store-password-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-key-store-password
                         :shape "KeyStorePasswordType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-hsm-cluster-id :initarg :cloud-hsm-cluster-id
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-hsm-cluster-id-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-cloud-hsm-cluster-id
                         :shape "CloudHsmClusterIdType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-proxy-uri-endpoint :initarg
                         :xks-proxy-uri-endpoint :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-uri-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-xks-proxy-uri-endpoint
                         :shape "XksProxyUriEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-proxy-uri-path :initarg :xks-proxy-uri-path
                         :initform common-lisp:nil :type
                         (common-lisp:or xks-proxy-uri-path-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-xks-proxy-uri-path
                         :shape "XksProxyUriPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xks-proxy-vpc-endpoint-service-name :initarg
                         :xks-proxy-vpc-endpoint-service-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          xks-proxy-vpc-endpoint-service-name-type
                          common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-xks-proxy-vpc-endpoint-service-name
                         :shape "XksProxyVpcEndpointServiceNameType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xks-proxy-authentication-credential :initarg
                         :xks-proxy-authentication-credential :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          xks-proxy-authentication-credential-type
                          common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-xks-proxy-authentication-credential
                         :shape "XksProxyAuthenticationCredentialType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (xks-proxy-connectivity :initarg
                         :xks-proxy-connectivity :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-connectivity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-custom-key-store-request-xks-proxy-connectivity
                         :shape "XksProxyConnectivityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-key-store-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-key-store-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-key-store-request
                    'make-update-custom-key-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-key-store-id))
      (common-lisp:list
       (common-lisp:cons "CustomKeyStoreId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-custom-key-store-name))
      (common-lisp:list
       (common-lisp:cons "NewCustomKeyStoreName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-store-password))
      (common-lisp:list
       (common-lisp:cons "KeyStorePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-hsm-cluster-id))
      (common-lisp:list
       (common-lisp:cons "CloudHsmClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-uri-endpoint))
      (common-lisp:list
       (common-lisp:cons "XksProxyUriEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xks-proxy-uri-path))
      (common-lisp:list
       (common-lisp:cons "XksProxyUriPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-vpc-endpoint-service-name))
      (common-lisp:list
       (common-lisp:cons "XksProxyVpcEndpointServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-authentication-credential))
      (common-lisp:list
       (common-lisp:cons "XksProxyAuthenticationCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xks-proxy-connectivity))
      (common-lisp:list
       (common-lisp:cons "XksProxyConnectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-custom-key-store-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-custom-key-store-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-custom-key-store-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-custom-key-store-response
                    'make-update-custom-key-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-key-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-key-description-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-key-description-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description-type common-lisp:null)
                         :accessor
                         struct-shape-update-key-description-request-description
                         :shape "DescriptionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-key-description-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-key-description-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-key-description-request
                    'make-update-key-description-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-key-description-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-primary-region-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor
                         struct-shape-update-primary-region-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-region :initarg :primary-region :initform
                         (common-lisp:error ":primary-region is required")
                         :type (common-lisp:or region-type common-lisp:null)
                         :accessor
                         struct-shape-update-primary-region-request-primary-region
                         :shape "RegionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-primary-region-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-primary-region-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-primary-region-request
                    'make-update-primary-region-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-region-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-region-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-region))
      (common-lisp:list
       (common-lisp:cons "PrimaryRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-primary-region-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-mac-request common-lisp:nil
                       ((message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-verify-mac-request-message
                         :shape "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-verify-mac-request-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-algorithm :initarg :mac-algorithm :initform
                         (common-lisp:error ":mac-algorithm is required") :type
                         (common-lisp:or mac-algorithm-spec common-lisp:null)
                         :accessor
                         struct-shape-verify-mac-request-mac-algorithm :shape
                         "MacAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac :initarg :mac :initform
                         (common-lisp:error ":mac is required") :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor struct-shape-verify-mac-request-mac :shape
                         "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-verify-mac-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-verify-mac-request-dry-run
                         :shape "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-mac-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-mac-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-mac-request 'make-verify-mac-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-mac-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-mac-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-algorithm))
      (common-lisp:list
       (common-lisp:cons "MacAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac))
      (common-lisp:list
       (common-lisp:cons "Mac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-mac-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-mac-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-verify-mac-response-key-id
                         :shape "KeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-valid :initarg :mac-valid :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-verify-mac-response-mac-valid
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-algorithm :initarg :mac-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-algorithm-spec common-lisp:null)
                         :accessor
                         struct-shape-verify-mac-response-mac-algorithm :shape
                         "MacAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-mac-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-mac-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'verify-mac-response 'make-verify-mac-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-mac-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-mac-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-valid))
      (common-lisp:list
       (common-lisp:cons "MacValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-algorithm))
      (common-lisp:list
       (common-lisp:cons "MacAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-mac-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-request common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-verify-request-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or plaintext-type common-lisp:null)
                         :accessor struct-shape-verify-request-message :shape
                         "PlaintextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-type :initarg :message-type :initform
                         common-lisp:nil :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor struct-shape-verify-request-message-type
                         :shape "MessageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signature :initarg :signature :initform
                         (common-lisp:error ":signature is required") :type
                         (common-lisp:or ciphertext-type common-lisp:null)
                         :accessor struct-shape-verify-request-signature :shape
                         "CiphertextType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform
                         (common-lisp:error ":signing-algorithm is required")
                         :type
                         (common-lisp:or signing-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-request-signing-algorithm :shape
                         "SigningAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grant-tokens :initarg :grant-tokens :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-token-list common-lisp:null)
                         :accessor struct-shape-verify-request-grant-tokens
                         :shape "GrantTokenList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean-type
                                         common-lisp:null)
                         :accessor struct-shape-verify-request-dry-run :shape
                         "NullableBooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'verify-request 'make-verify-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature))
      (common-lisp:list
       (common-lisp:cons "Signature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-tokens))
      (common-lisp:list
       (common-lisp:cons "GrantTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass verify-response common-lisp:nil
                       ((key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or key-id-type common-lisp:null)
                         :accessor struct-shape-verify-response-key-id :shape
                         "KeyIdType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signature-valid :initarg :signature-valid :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-type common-lisp:null)
                         :accessor struct-shape-verify-response-signature-valid
                         :shape "BooleanType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or signing-algorithm-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-verify-response-signing-algorithm :shape
                         "SigningAlgorithmSpec" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-verify-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'verify-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'verify-response 'make-verify-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-valid))
      (common-lisp:list
       (common-lisp:cons "SignatureValid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-response))
   common-lisp:nil))
(common-lisp:deftype wrapping-key-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-key-already-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-key-already-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-key-already-in-use-exception
                    'xks-key-already-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:defclass xks-key-configuration-type common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or xks-key-id-type common-lisp:null)
                         :accessor struct-shape-xks-key-configuration-type-id
                         :shape "XksKeyIdType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-xks-key-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'xks-key-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'xks-key-configuration-type
                    'make-xks-key-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xks-key-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xks-key-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xks-key-configuration-type))
   common-lisp:nil))
(common-lisp:deftype xks-key-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-key-invalid-configuration-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-key-invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-key-invalid-configuration-exception
                    'xks-key-invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-key-not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-key-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-key-not-found-exception
                    'xks-key-not-found-exception-message)))
(common-lisp:deftype xks-proxy-authentication-access-key-id-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xks-proxy-authentication-credential-type common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or
                          xks-proxy-authentication-access-key-id-type
                          common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-authentication-credential-type-access-key-id
                         :shape "XksProxyAuthenticationAccessKeyIdType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (raw-secret-access-key :initarg :raw-secret-access-key
                         :initform
                         (common-lisp:error
                          ":raw-secret-access-key is required")
                         :type
                         (common-lisp:or
                          xks-proxy-authentication-raw-secret-access-key-type
                          common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-authentication-credential-type-raw-secret-access-key
                         :shape "XksProxyAuthenticationRawSecretAccessKeyType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-xks-proxy-authentication-credential-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'xks-proxy-authentication-credential-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-authentication-credential-type
                    'make-xks-proxy-authentication-credential-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-authentication-credential-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-authentication-credential-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'raw-secret-access-key))
      (common-lisp:list
       (common-lisp:cons "RawSecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-authentication-credential-type))
   common-lisp:nil))
(common-lisp:deftype xks-proxy-authentication-raw-secret-access-key-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xks-proxy-configuration-type common-lisp:nil
                       ((connectivity :initarg :connectivity :initform
                         common-lisp:nil :type
                         (common-lisp:or xks-proxy-connectivity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-configuration-type-connectivity
                         :shape "XksProxyConnectivityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          xks-proxy-authentication-access-key-id-type
                          common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-configuration-type-access-key-id
                         :shape "XksProxyAuthenticationAccessKeyIdType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (uri-endpoint :initarg :uri-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or xks-proxy-uri-endpoint-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-configuration-type-uri-endpoint
                         :shape "XksProxyUriEndpointType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (uri-path :initarg :uri-path :initform common-lisp:nil
                         :type
                         (common-lisp:or xks-proxy-uri-path-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-configuration-type-uri-path
                         :shape "XksProxyUriPathType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-endpoint-service-name :initarg
                         :vpc-endpoint-service-name :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          xks-proxy-vpc-endpoint-service-name-type
                          common-lisp:null)
                         :accessor
                         struct-shape-xks-proxy-configuration-type-vpc-endpoint-service-name
                         :shape "XksProxyVpcEndpointServiceNameType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-xks-proxy-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'xks-proxy-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-configuration-type
                    'make-xks-proxy-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectivity))
      (common-lisp:list
       (common-lisp:cons "Connectivity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri-endpoint))
      (common-lisp:list
       (common-lisp:cons "UriEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri-path))
      (common-lisp:list
       (common-lisp:cons "UriPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-service-name))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xks-proxy-configuration-type))
   common-lisp:nil))
(common-lisp:deftype xks-proxy-connectivity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-incorrect-authentication-credential-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-incorrect-authentication-credential-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-incorrect-authentication-credential-exception
                    'xks-proxy-incorrect-authentication-credential-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-invalid-configuration-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-invalid-configuration-exception
                    'xks-proxy-invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-invalid-response-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-invalid-response-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-invalid-response-exception
                    'xks-proxy-invalid-response-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-uri-endpoint-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-uri-endpoint-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-uri-endpoint-in-use-exception
                    'xks-proxy-uri-endpoint-in-use-exception-message)))
(common-lisp:deftype xks-proxy-uri-endpoint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-uri-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-uri-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-uri-in-use-exception
                    'xks-proxy-uri-in-use-exception-message)))
(common-lisp:deftype xks-proxy-uri-path-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-uri-unreachable-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-uri-unreachable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-uri-unreachable-exception
                    'xks-proxy-uri-unreachable-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-vpc-endpoint-service-in-use-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-vpc-endpoint-service-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-vpc-endpoint-service-in-use-exception
                    'xks-proxy-vpc-endpoint-service-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-vpc-endpoint-service-invalid-configuration-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-vpc-endpoint-service-invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list
   'xks-proxy-vpc-endpoint-service-invalid-configuration-exception
   'xks-proxy-vpc-endpoint-service-invalid-configuration-exception-message)))
(common-lisp:deftype xks-proxy-vpc-endpoint-service-name-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition xks-proxy-vpc-endpoint-service-not-found-exception
     (kms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       xks-proxy-vpc-endpoint-service-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'xks-proxy-vpc-endpoint-service-not-found-exception
                    'xks-proxy-vpc-endpoint-service-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-key-deletion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-key-deletion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelKeyDeletion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-key-deletion))
(common-lisp:progn
 (common-lisp:defun connect-custom-key-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-id)
   (common-lisp:declare (common-lisp:ignorable custom-key-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-connect-custom-key-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ConnectCustomKeyStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'connect-custom-key-store))
(common-lisp:progn
 (common-lisp:defun create-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name target-key-id)
   (common-lisp:declare (common-lisp:ignorable alias-name target-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-alias))
(common-lisp:progn
 (common-lisp:defun create-custom-key-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-name
                     cloud-hsm-cluster-id trust-anchor-certificate
                     key-store-password custom-key-store-type
                     xks-proxy-uri-endpoint xks-proxy-uri-path
                     xks-proxy-vpc-endpoint-service-name
                     xks-proxy-authentication-credential
                     xks-proxy-connectivity)
   (common-lisp:declare
    (common-lisp:ignorable custom-key-store-name cloud-hsm-cluster-id
     trust-anchor-certificate key-store-password custom-key-store-type
     xks-proxy-uri-endpoint xks-proxy-uri-path
     xks-proxy-vpc-endpoint-service-name xks-proxy-authentication-credential
     xks-proxy-connectivity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-key-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomKeyStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-key-store))
(common-lisp:progn
 (common-lisp:defun create-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grantee-principal
                     retiring-principal operations constraints grant-tokens
                     name dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id grantee-principal retiring-principal
     operations constraints grant-tokens name dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-grant))
(common-lisp:progn
 (common-lisp:defun create-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy description key-usage
                     customer-master-key-spec key-spec origin
                     custom-key-store-id bypass-policy-lockout-safety-check
                     tags multi-region xks-key-id)
   (common-lisp:declare
    (common-lisp:ignorable policy description key-usage
     customer-master-key-spec key-spec origin custom-key-store-id
     bypass-policy-lockout-safety-check tags multi-region xks-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-key))
(common-lisp:progn
 (common-lisp:defun decrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ciphertext-blob encryption-context
                     grant-tokens key-id encryption-algorithm recipient
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable ciphertext-blob encryption-context grant-tokens
     key-id encryption-algorithm recipient dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Decrypt"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'decrypt))
(common-lisp:progn
 (common-lisp:defun delete-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name)
   (common-lisp:declare (common-lisp:ignorable alias-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-alias))
(common-lisp:progn
 (common-lisp:defun delete-custom-key-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-id)
   (common-lisp:declare (common-lisp:ignorable custom-key-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-key-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomKeyStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-key-store))
(common-lisp:progn
 (common-lisp:defun delete-imported-key-material
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-imported-key-material-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImportedKeyMaterial"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-imported-key-material))
(common-lisp:progn
 (common-lisp:defun describe-custom-key-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-id custom-key-store-name
                     limit marker)
   (common-lisp:declare
    (common-lisp:ignorable custom-key-store-id custom-key-store-name limit
     marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-custom-key-stores-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCustomKeyStores"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-custom-key-stores))
(common-lisp:progn
 (common-lisp:defun describe-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grant-tokens)
   (common-lisp:declare (common-lisp:ignorable key-id grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-key))
(common-lisp:progn
 (common-lisp:defun disable-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-key))
(common-lisp:progn
 (common-lisp:defun disable-key-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-key-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableKeyRotation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-key-rotation))
(common-lisp:progn
 (common-lisp:defun disconnect-custom-key-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-id)
   (common-lisp:declare (common-lisp:ignorable custom-key-store-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disconnect-custom-key-store-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisconnectCustomKeyStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disconnect-custom-key-store))
(common-lisp:progn
 (common-lisp:defun enable-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-key))
(common-lisp:progn
 (common-lisp:defun enable-key-rotation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-key-rotation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableKeyRotation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-key-rotation))
(common-lisp:progn
 (common-lisp:defun encrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id plaintext encryption-context
                     grant-tokens encryption-algorithm dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id plaintext encryption-context grant-tokens
     encryption-algorithm dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-encrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Encrypt"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'encrypt))
(common-lisp:progn
 (common-lisp:defun generate-data-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id encryption-context number-of-bytes
                     key-spec grant-tokens recipient dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id encryption-context number-of-bytes key-spec
     grant-tokens recipient dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-data-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-data-key))
(common-lisp:progn
 (common-lisp:defun generate-data-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-context key-id key-pair-spec
                     grant-tokens recipient dry-run)
   (common-lisp:declare
    (common-lisp:ignorable encryption-context key-id key-pair-spec grant-tokens
     recipient dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-data-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKeyPair"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-data-key-pair))
(common-lisp:progn
 (common-lisp:defun generate-data-key-pair-without-plaintext
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-context key-id key-pair-spec
                     grant-tokens dry-run)
   (common-lisp:declare
    (common-lisp:ignorable encryption-context key-id key-pair-spec grant-tokens
     dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-data-key-pair-without-plaintext-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKeyPairWithoutPlaintext"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-data-key-pair-without-plaintext))
(common-lisp:progn
 (common-lisp:defun generate-data-key-without-plaintext
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id encryption-context key-spec
                     number-of-bytes grant-tokens dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id encryption-context key-spec number-of-bytes
     grant-tokens dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-data-key-without-plaintext-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateDataKeyWithoutPlaintext"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-data-key-without-plaintext))
(common-lisp:progn
 (common-lisp:defun generate-mac
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key message key-id mac-algorithm grant-tokens
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable message key-id mac-algorithm grant-tokens dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-mac-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateMac"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-mac))
(common-lisp:progn
 (common-lisp:defun generate-random
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-of-bytes custom-key-store-id
                     recipient)
   (common-lisp:declare
    (common-lisp:ignorable number-of-bytes custom-key-store-id recipient))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-random-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateRandom"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-random))
(common-lisp:progn
 (common-lisp:defun get-key-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id policy-name)
   (common-lisp:declare (common-lisp:ignorable key-id policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-key-policy))
(common-lisp:progn
 (common-lisp:defun get-key-rotation-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id)
   (common-lisp:declare (common-lisp:ignorable key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-rotation-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyRotationStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-key-rotation-status))
(common-lisp:progn
 (common-lisp:defun get-parameters-for-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id wrapping-algorithm
                     wrapping-key-spec)
   (common-lisp:declare
    (common-lisp:ignorable key-id wrapping-algorithm wrapping-key-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-parameters-for-import-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetParametersForImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-parameters-for-import))
(common-lisp:progn
 (common-lisp:defun get-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grant-tokens)
   (common-lisp:declare (common-lisp:ignorable key-id grant-tokens))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPublicKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-public-key))
(common-lisp:progn
 (common-lisp:defun import-key-material
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id import-token
                     encrypted-key-material valid-to expiration-model)
   (common-lisp:declare
    (common-lisp:ignorable key-id import-token encrypted-key-material valid-to
     expiration-model))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-key-material-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportKeyMaterial"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-key-material))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id limit marker)
   (common-lisp:declare (common-lisp:ignorable key-id limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAliases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker key-id grant-id
                     grantee-principal)
   (common-lisp:declare
    (common-lisp:ignorable limit marker key-id grant-id grantee-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGrants"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-grants))
(common-lisp:progn
 (common-lisp:defun list-key-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id limit marker)
   (common-lisp:declare (common-lisp:ignorable key-id limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-key-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListKeyPolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-key-policies))
(common-lisp:progn
 (common-lisp:defun list-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker)
   (common-lisp:declare (common-lisp:ignorable limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListKeys"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-keys))
(common-lisp:progn
 (common-lisp:defun list-resource-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id limit marker)
   (common-lisp:declare (common-lisp:ignorable key-id limit marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resource-tags))
(common-lisp:progn
 (common-lisp:defun list-retirable-grants
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit marker retiring-principal)
   (common-lisp:declare
    (common-lisp:ignorable limit marker retiring-principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-retirable-grants-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRetirableGrants"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-retirable-grants))
(common-lisp:progn
 (common-lisp:defun put-key-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id policy-name policy
                     bypass-policy-lockout-safety-check)
   (common-lisp:declare
    (common-lisp:ignorable key-id policy-name policy
     bypass-policy-lockout-safety-check))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-key-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutKeyPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-key-policy))
(common-lisp:progn
 (common-lisp:defun re-encrypt
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ciphertext-blob source-encryption-context
                     source-key-id destination-key-id
                     destination-encryption-context source-encryption-algorithm
                     destination-encryption-algorithm grant-tokens dry-run)
   (common-lisp:declare
    (common-lisp:ignorable ciphertext-blob source-encryption-context
     source-key-id destination-key-id destination-encryption-context
     source-encryption-algorithm destination-encryption-algorithm grant-tokens
     dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-re-encrypt-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReEncrypt"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 're-encrypt))
(common-lisp:progn
 (common-lisp:defun replicate-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id replica-region policy
                     bypass-policy-lockout-safety-check description tags)
   (common-lisp:declare
    (common-lisp:ignorable key-id replica-region policy
     bypass-policy-lockout-safety-check description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replicate-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReplicateKey"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'replicate-key))
(common-lisp:progn
 (common-lisp:defun retire-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grant-token key-id grant-id dry-run)
   (common-lisp:declare
    (common-lisp:ignorable grant-token key-id grant-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retire-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RetireGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'retire-grant))
(common-lisp:progn
 (common-lisp:defun revoke-grant
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id grant-id dry-run)
   (common-lisp:declare (common-lisp:ignorable key-id grant-id dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-grant-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeGrant"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-grant))
(common-lisp:progn
 (common-lisp:defun schedule-key-deletion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id pending-window-in-days)
   (common-lisp:declare (common-lisp:ignorable key-id pending-window-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-schedule-key-deletion-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ScheduleKeyDeletion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'schedule-key-deletion))
(common-lisp:progn
 (common-lisp:defun sign
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id message message-type grant-tokens
                     signing-algorithm dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id message message-type grant-tokens
     signing-algorithm dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-sign-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Sign"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'sign))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id tags)
   (common-lisp:declare (common-lisp:ignorable key-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable key-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias-name target-key-id)
   (common-lisp:declare (common-lisp:ignorable alias-name target-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAlias"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-alias))
(common-lisp:progn
 (common-lisp:defun update-custom-key-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-key-store-id
                     new-custom-key-store-name key-store-password
                     cloud-hsm-cluster-id xks-proxy-uri-endpoint
                     xks-proxy-uri-path xks-proxy-vpc-endpoint-service-name
                     xks-proxy-authentication-credential
                     xks-proxy-connectivity)
   (common-lisp:declare
    (common-lisp:ignorable custom-key-store-id new-custom-key-store-name
     key-store-password cloud-hsm-cluster-id xks-proxy-uri-endpoint
     xks-proxy-uri-path xks-proxy-vpc-endpoint-service-name
     xks-proxy-authentication-credential xks-proxy-connectivity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-custom-key-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCustomKeyStore"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-custom-key-store))
(common-lisp:progn
 (common-lisp:defun update-key-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id description)
   (common-lisp:declare (common-lisp:ignorable key-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-key-description-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateKeyDescription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-key-description))
(common-lisp:progn
 (common-lisp:defun update-primary-region
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id primary-region)
   (common-lisp:declare (common-lisp:ignorable key-id primary-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-primary-region-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePrimaryRegion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-primary-region))
(common-lisp:progn
 (common-lisp:defun verify
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-id message message-type signature
                     signing-algorithm grant-tokens dry-run)
   (common-lisp:declare
    (common-lisp:ignorable key-id message message-type signature
     signing-algorithm grant-tokens dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Verify"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'verify))
(common-lisp:progn
 (common-lisp:defun verify-mac
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key message key-id mac-algorithm mac
                     grant-tokens dry-run)
   (common-lisp:declare
    (common-lisp:ignorable message key-id mac-algorithm mac grant-tokens
     dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-mac-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'kms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "VerifyMac"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'verify-mac))
