;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cognito-identity/api
  (:use)
  (:nicknames #:aws/cognito-identity)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cognito-identity/api)
(common-lisp:progn
 (common-lisp:define-condition cognito-identity-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cognito-identity-error))
(common-lisp:progn
 (common-lisp:defclass cognito-identity-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "cognito-identity"
                        :api-version "2014-06-30" :host-prefix
                        "cognito-identity" :signing-name common-lisp:nil
                        :global-host common-lisp:nil :target-prefix
                        "AWSCognitoIdentityService" :json-version "1.1"))
 (common-lisp:export 'cognito-identity-request))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("DeveloperUserAlreadyRegisteredException"
     . developer-user-already-registered-exception)
    ("ExternalServiceException" . external-service-exception)
    ("InternalErrorException" . internal-error-exception)
    ("InvalidIdentityPoolConfigurationException"
     . invalid-identity-pool-configuration-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotAuthorizedException" . not-authorized-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:deftype arnstring () 'common-lisp:string)
(common-lisp:deftype access-key-string () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype ambiguous-role-resolution-type () 'common-lisp:string)
(common-lisp:deftype claim-name () 'common-lisp:string)
(common-lisp:deftype claim-value () 'common-lisp:string)
(common-lisp:deftype classic-flow () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cognito-identity-provider common-lisp:nil
                       ((provider-name :initarg :provider-name :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-cognito-identity-provider-provider-name
                         :shape "CognitoIdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-identity-provider-client-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-cognito-identity-provider-client-id
                         :shape "CognitoIdentityProviderClientId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (server-side-token-check :initarg
                         :server-side-token-check :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-provider-token-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-cognito-identity-provider-server-side-token-check
                         :shape "CognitoIdentityProviderTokenCheck" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cognito-identity-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-identity-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cognito-identity-provider
                    'make-cognito-identity-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-identity-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-identity-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-token-check))
      (common-lisp:list
       (common-lisp:cons "ServerSideTokenCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-identity-provider))
   common-lisp:nil))
(common-lisp:deftype cognito-identity-provider-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cognito-identity-provider-list ()
   '(trivial-types:proper-list cognito-identity-provider))
 (common-lisp:defun make-cognito-identity-provider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cognito-identity-provider))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cognito-identity-provider-name () 'common-lisp:string)
(common-lisp:deftype cognito-identity-provider-token-check ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-identity-pool-input common-lisp:nil
                       ((identity-pool-name :initarg :identity-pool-name
                         :initform
                         (common-lisp:error ":identity-pool-name is required")
                         :type
                         (common-lisp:or identity-pool-name common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-identity-pool-name
                         :shape "IdentityPoolName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-unauthenticated-identities :initarg
                         :allow-unauthenticated-identities :initform
                         (common-lisp:error
                          ":allow-unauthenticated-identities is required")
                         :type
                         (common-lisp:or identity-pool-unauthenticated
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-allow-unauthenticated-identities
                         :shape "IdentityPoolUnauthenticated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allow-classic-flow :initarg :allow-classic-flow
                         :initform common-lisp:nil :type
                         (common-lisp:or classic-flow common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-allow-classic-flow
                         :shape "ClassicFlow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-login-providers :initarg
                         :supported-login-providers :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-providers common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-supported-login-providers
                         :shape "IdentityProviders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-provider-name :initarg
                         :developer-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or developer-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-developer-provider-name
                         :shape "DeveloperProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (open-id-connect-provider-arns :initarg
                         :open-id-connect-provider-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or oidcprovider-list common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-open-id-connect-provider-arns
                         :shape "OIDCProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-identity-providers :initarg
                         :cognito-identity-providers :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-provider-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-cognito-identity-providers
                         :shape "CognitoIdentityProviderList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saml-provider-arns :initarg :saml-provider-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or samlprovider-list common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-saml-provider-arns
                         :shape "SAMLProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-tags :initarg :identity-pool-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-pool-tags-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-identity-pool-input-identity-pool-tags
                         :shape "IdentityPoolTagsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-identity-pool-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-identity-pool-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-identity-pool-input
                    'make-create-identity-pool-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-pool-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-pool-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-name))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unauthenticated-identities))
      (common-lisp:list
       (common-lisp:cons "AllowUnauthenticatedIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-classic-flow))
      (common-lisp:list
       (common-lisp:cons "AllowClassicFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-login-providers))
      (common-lisp:list
       (common-lisp:cons "SupportedLoginProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-provider-name))
      (common-lisp:list
       (common-lisp:cons "DeveloperProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-id-connect-provider-arns))
      (common-lisp:list
       (common-lisp:cons "OpenIdConnectProviderARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-providers))
      (common-lisp:list
       (common-lisp:cons "CognitoIdentityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-provider-arns))
      (common-lisp:list
       (common-lisp:cons "SamlProviderARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-tags))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-identity-pool-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass credentials common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or access-key-string common-lisp:null)
                         :accessor struct-shape-credentials-access-key-id
                         :shape "AccessKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-key :initarg :secret-key :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-key-string common-lisp:null)
                         :accessor struct-shape-credentials-secret-key :shape
                         "SecretKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-token :initarg :session-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-token-string common-lisp:null)
                         :accessor struct-shape-credentials-session-token
                         :shape "SessionTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-credentials-expiration :shape "DateType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-key))
      (common-lisp:list
       (common-lisp:cons "SecretKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-identities-input common-lisp:nil
                       ((identity-ids-to-delete :initarg
                         :identity-ids-to-delete :initform
                         (common-lisp:error
                          ":identity-ids-to-delete is required")
                         :type
                         (common-lisp:or identity-id-list common-lisp:null)
                         :accessor
                         struct-shape-delete-identities-input-identity-ids-to-delete
                         :shape "IdentityIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-identities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identities-input 'make-delete-identities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-ids-to-delete))
      (common-lisp:list
       (common-lisp:cons "IdentityIdsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identities-response common-lisp:nil
                       ((unprocessed-identity-ids :initarg
                         :unprocessed-identity-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or unprocessed-identity-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-identities-response-unprocessed-identity-ids
                         :shape "UnprocessedIdentityIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-identities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identities-response
                    'make-delete-identities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-identity-ids))
      (common-lisp:list
       (common-lisp:cons "UnprocessedIdentityIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-identity-pool-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-delete-identity-pool-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-identity-pool-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-identity-pool-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-identity-pool-input
                    'make-delete-identity-pool-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-pool-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-pool-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-identity-pool-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-input common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         (common-lisp:error ":identity-id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-input 'make-describe-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-pool-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-describe-identity-pool-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-identity-pool-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-identity-pool-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-identity-pool-input
                    'make-describe-identity-pool-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-input))
   common-lisp:nil))
(common-lisp:deftype developer-provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition developer-user-already-registered-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       developer-user-already-registered-exception-message)))
 (common-lisp:export
  (common-lisp:list 'developer-user-already-registered-exception
                    'developer-user-already-registered-exception-message)))
(common-lisp:deftype developer-user-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype developer-user-identifier-list ()
   '(trivial-types:proper-list developer-user-identifier))
 (common-lisp:defun make-developer-user-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            developer-user-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition external-service-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       external-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'external-service-exception
                    'external-service-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-credentials-for-identity-input common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         (common-lisp:error ":identity-id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-credentials-for-identity-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logins :initarg :logins :initform common-lisp:nil
                         :type (common-lisp:or logins-map common-lisp:null)
                         :accessor
                         struct-shape-get-credentials-for-identity-input-logins
                         :shape "LoginsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-role-arn :initarg :custom-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arnstring common-lisp:null) :accessor
                         struct-shape-get-credentials-for-identity-input-custom-role-arn
                         :shape "ARNString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-credentials-for-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-credentials-for-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-credentials-for-identity-input
                    'make-get-credentials-for-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-role-arn))
      (common-lisp:list
       (common-lisp:cons "CustomRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-credentials-for-identity-response common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-credentials-for-identity-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (credentials :initarg :credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor
                         struct-shape-get-credentials-for-identity-response-credentials
                         :shape "Credentials" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-credentials-for-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-credentials-for-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-credentials-for-identity-response
                    'make-get-credentials-for-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-for-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-id-input common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-id-input-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor struct-shape-get-id-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logins :initarg :logins :initform common-lisp:nil
                         :type (common-lisp:or logins-map common-lisp:null)
                         :accessor struct-shape-get-id-input-logins :shape
                         "LoginsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-id-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-id-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-id-input 'make-get-id-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-id-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-id-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-id-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-id-response common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor struct-shape-get-id-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-id-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-id-response 'make-get-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-pool-roles-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-get-identity-pool-roles-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-pool-roles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-pool-roles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-pool-roles-input
                    'make-get-identity-pool-roles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-pool-roles-response common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-get-identity-pool-roles-response-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (roles :initarg :roles :initform common-lisp:nil :type
                         (common-lisp:or roles-map common-lisp:null) :accessor
                         struct-shape-get-identity-pool-roles-response-roles
                         :shape "RolesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-mappings :initarg :role-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or role-mapping-map common-lisp:null)
                         :accessor
                         struct-shape-get-identity-pool-roles-response-role-mappings
                         :shape "RoleMappingMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-identity-pool-roles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-pool-roles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-identity-pool-roles-response
                    'make-get-identity-pool-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-mappings))
      (common-lisp:list
       (common-lisp:cons "RoleMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-roles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-id-token-for-developer-identity-input
                       common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-for-developer-identity-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-for-developer-identity-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logins :initarg :logins :initform
                         (common-lisp:error ":logins is required") :type
                         (common-lisp:or logins-map common-lisp:null) :accessor
                         struct-shape-get-open-id-token-for-developer-identity-input-logins
                         :shape "LoginsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-tags :initarg :principal-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-tags common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-for-developer-identity-input-principal-tags
                         :shape "PrincipalTags" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token-duration :initarg :token-duration :initform
                         common-lisp:nil :type
                         (common-lisp:or token-duration common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-for-developer-identity-input-token-duration
                         :shape "TokenDuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-id-token-for-developer-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-id-token-for-developer-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-id-token-for-developer-identity-input
                    'make-get-open-id-token-for-developer-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-tags))
      (common-lisp:list
       (common-lisp:cons "PrincipalTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-duration))
      (common-lisp:list
       (common-lisp:cons "TokenDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-id-token-for-developer-identity-response
                       common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-for-developer-identity-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or oidctoken common-lisp:null) :accessor
                         struct-shape-get-open-id-token-for-developer-identity-response-token
                         :shape "OIDCToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-id-token-for-developer-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-open-id-token-for-developer-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-id-token-for-developer-identity-response
                    'make-get-open-id-token-for-developer-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-for-developer-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-id-token-input common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         (common-lisp:error ":identity-id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (logins :initarg :logins :initform common-lisp:nil
                         :type (common-lisp:or logins-map common-lisp:null)
                         :accessor struct-shape-get-open-id-token-input-logins
                         :shape "LoginsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-id-token-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-open-id-token-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-id-token-input 'make-get-open-id-token-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-open-id-token-response common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-get-open-id-token-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or oidctoken common-lisp:null) :accessor
                         struct-shape-get-open-id-token-response-token :shape
                         "OIDCToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-open-id-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-open-id-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-open-id-token-response
                    'make-get-open-id-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-id-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-principal-tag-attribute-map-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform
                         (common-lisp:error
                          ":identity-provider-name is required")
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-input-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-principal-tag-attribute-map-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-principal-tag-attribute-map-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-principal-tag-attribute-map-input
                    'make-get-principal-tag-attribute-map-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-principal-tag-attribute-map-response common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-response-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-response-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-defaults :initarg :use-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or use-defaults common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-response-use-defaults
                         :shape "UseDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-tags :initarg :principal-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-tags common-lisp:null)
                         :accessor
                         struct-shape-get-principal-tag-attribute-map-response-principal-tags
                         :shape "PrincipalTags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-principal-tag-attribute-map-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-principal-tag-attribute-map-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-principal-tag-attribute-map-response
                    'make-get-principal-tag-attribute-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-defaults))
      (common-lisp:list
       (common-lisp:cons "UseDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-tags))
      (common-lisp:list
       (common-lisp:cons "PrincipalTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-principal-tag-attribute-map-response))
   common-lisp:nil))
(common-lisp:deftype hide-disabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype identities-list ()
   '(trivial-types:proper-list identity-description))
 (common-lisp:defun make-identities-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity-description common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-identity-description-identity-id :shape
                         "IdentityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logins :initarg :logins :initform common-lisp:nil
                         :type (common-lisp:or logins-list common-lisp:null)
                         :accessor struct-shape-identity-description-logins
                         :shape "LoginsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-identity-description-creation-date :shape
                         "DateType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date-type common-lisp:null) :accessor
                         struct-shape-identity-description-last-modified-date
                         :shape "DateType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-description 'make-identity-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-description))
   common-lisp:nil))
(common-lisp:deftype identity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-id-list ()
   '(trivial-types:proper-list identity-id))
 (common-lisp:defun make-identity-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity-pool common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor struct-shape-identity-pool-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-name :initarg :identity-pool-name
                         :initform
                         (common-lisp:error ":identity-pool-name is required")
                         :type
                         (common-lisp:or identity-pool-name common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-identity-pool-name :shape
                         "IdentityPoolName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-unauthenticated-identities :initarg
                         :allow-unauthenticated-identities :initform
                         (common-lisp:error
                          ":allow-unauthenticated-identities is required")
                         :type
                         (common-lisp:or identity-pool-unauthenticated
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-allow-unauthenticated-identities
                         :shape "IdentityPoolUnauthenticated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allow-classic-flow :initarg :allow-classic-flow
                         :initform common-lisp:nil :type
                         (common-lisp:or classic-flow common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-allow-classic-flow :shape
                         "ClassicFlow" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-login-providers :initarg
                         :supported-login-providers :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-providers common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-supported-login-providers
                         :shape "IdentityProviders" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-provider-name :initarg
                         :developer-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or developer-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-developer-provider-name
                         :shape "DeveloperProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (open-id-connect-provider-arns :initarg
                         :open-id-connect-provider-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or oidcprovider-list common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-open-id-connect-provider-arns
                         :shape "OIDCProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-identity-providers :initarg
                         :cognito-identity-providers :initform common-lisp:nil
                         :type
                         (common-lisp:or cognito-identity-provider-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-cognito-identity-providers
                         :shape "CognitoIdentityProviderList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (saml-provider-arns :initarg :saml-provider-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or samlprovider-list common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-saml-provider-arns :shape
                         "SAMLProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-tags :initarg :identity-pool-tags
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-pool-tags-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-identity-pool-tags :shape
                         "IdentityPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-pool
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'identity-pool
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'identity-pool 'make-identity-pool))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-pool))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-pool))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-name))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unauthenticated-identities))
      (common-lisp:list
       (common-lisp:cons "AllowUnauthenticatedIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-classic-flow))
      (common-lisp:list
       (common-lisp:cons "AllowClassicFlow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-login-providers))
      (common-lisp:list
       (common-lisp:cons "SupportedLoginProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-provider-name))
      (common-lisp:list
       (common-lisp:cons "DeveloperProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-id-connect-provider-arns))
      (common-lisp:list
       (common-lisp:cons "OpenIdConnectProviderARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-identity-providers))
      (common-lisp:list
       (common-lisp:cons "CognitoIdentityProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saml-provider-arns))
      (common-lisp:list
       (common-lisp:cons "SamlProviderARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-tags))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-pool))
   common-lisp:nil))
(common-lisp:deftype identity-pool-id () 'common-lisp:string)
(common-lisp:deftype identity-pool-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-pool-short-description common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-short-description-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-name :initarg :identity-pool-name
                         :initform common-lisp:nil :type
                         (common-lisp:or identity-pool-name common-lisp:null)
                         :accessor
                         struct-shape-identity-pool-short-description-identity-pool-name
                         :shape "IdentityPoolName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-identity-pool-short-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'identity-pool-short-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'identity-pool-short-description
                    'make-identity-pool-short-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-pool-short-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-pool-short-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-name))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-pool-short-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-pool-tags-list-type ()
   '(trivial-types:proper-list tag-keys-type))
 (common-lisp:defun make-identity-pool-tags-list-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-keys-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype identity-pool-tags-type () 'common-lisp:hash-table)
 (common-lisp:defun make-identity-pool-tags-type
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype identity-pool-unauthenticated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype identity-pools-list ()
   '(trivial-types:proper-list identity-pool-short-description))
 (common-lisp:defun make-identity-pools-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            identity-pool-short-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype identity-provider-id () 'common-lisp:string)
(common-lisp:deftype identity-provider-name () 'common-lisp:string)
(common-lisp:deftype identity-provider-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype identity-providers () 'common-lisp:hash-table)
 (common-lisp:defun make-identity-providers
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition internal-error-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception
                    'internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-identity-pool-configuration-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-identity-pool-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-identity-pool-configuration-exception
                    'invalid-identity-pool-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-identities-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-list-identities-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":max-results is required") :type
                         (common-lisp:or query-limit common-lisp:null)
                         :accessor
                         struct-shape-list-identities-input-max-results :shape
                         "QueryLimit" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-identities-input-next-token :shape
                         "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hide-disabled :initarg :hide-disabled :initform
                         common-lisp:nil :type
                         (common-lisp:or hide-disabled common-lisp:null)
                         :accessor
                         struct-shape-list-identities-input-hide-disabled
                         :shape "HideDisabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identities-input 'make-list-identities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hide-disabled))
      (common-lisp:list
       (common-lisp:cons "HideDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identities-response common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-list-identities-response-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identities :initarg :identities :initform
                         common-lisp:nil :type
                         (common-lisp:or identities-list common-lisp:null)
                         :accessor
                         struct-shape-list-identities-response-identities
                         :shape "IdentitiesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-identities-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identities-response 'make-list-identities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identities))
      (common-lisp:list
       (common-lisp:cons "Identities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-pools-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         (common-lisp:error ":max-results is required") :type
                         (common-lisp:or query-limit common-lisp:null)
                         :accessor
                         struct-shape-list-identity-pools-input-max-results
                         :shape "QueryLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-identity-pools-input-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-pools-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identity-pools-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-pools-input
                    'make-list-identity-pools-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-pools-response common-lisp:nil
                       ((identity-pools :initarg :identity-pools :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pools-list common-lisp:null)
                         :accessor
                         struct-shape-list-identity-pools-response-identity-pools
                         :shape "IdentityPoolsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-list-identity-pools-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-identity-pools-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-identity-pools-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-identity-pools-response
                    'make-list-identity-pools-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pools))
      (common-lisp:list
       (common-lisp:cons "IdentityPools"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pools-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arnstring common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-input-resource-arn
                         :shape "ARNString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or identity-pool-tags-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "IdentityPoolTagsType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logins-list ()
   '(trivial-types:proper-list identity-provider-name))
 (common-lisp:defun make-logins-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-provider-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype logins-map () 'common-lisp:hash-table)
 (common-lisp:defun make-logins-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass lookup-developer-identity-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-user-identifier :initarg
                         :developer-user-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or developer-user-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-input-developer-user-identifier
                         :shape "DeveloperUserIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or query-limit common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-input-max-results
                         :shape "QueryLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-input-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lookup-developer-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lookup-developer-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lookup-developer-identity-input
                    'make-lookup-developer-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-user-identifier))
      (common-lisp:list
       (common-lisp:cons "DeveloperUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lookup-developer-identity-response common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-user-identifier-list :initarg
                         :developer-user-identifier-list :initform
                         common-lisp:nil :type
                         (common-lisp:or developer-user-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-response-developer-user-identifier-list
                         :shape "DeveloperUserIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-key common-lisp:null)
                         :accessor
                         struct-shape-lookup-developer-identity-response-next-token
                         :shape "PaginationKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lookup-developer-identity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lookup-developer-identity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lookup-developer-identity-response
                    'make-lookup-developer-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-user-identifier-list))
      (common-lisp:list
       (common-lisp:cons "DeveloperUserIdentifierList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-developer-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mapping-rule common-lisp:nil
                       ((claim :initarg :claim :initform
                         (common-lisp:error ":claim is required") :type
                         (common-lisp:or claim-name common-lisp:null) :accessor
                         struct-shape-mapping-rule-claim :shape "ClaimName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (match-type :initarg :match-type :initform
                         (common-lisp:error ":match-type is required") :type
                         (common-lisp:or mapping-rule-match-type
                                         common-lisp:null)
                         :accessor struct-shape-mapping-rule-match-type :shape
                         "MappingRuleMatchType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or claim-value common-lisp:null)
                         :accessor struct-shape-mapping-rule-value :shape
                         "ClaimValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arnstring common-lisp:null) :accessor
                         struct-shape-mapping-rule-role-arn :shape "ARNString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mapping-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mapping-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mapping-rule 'make-mapping-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'claim))
      (common-lisp:list
       (common-lisp:cons "Claim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-type))
      (common-lisp:list
       (common-lisp:cons "MatchType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-rule))
   common-lisp:nil))
(common-lisp:deftype mapping-rule-match-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mapping-rules-list ()
   '(trivial-types:proper-list mapping-rule))
 (common-lisp:defun make-mapping-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass merge-developer-identities-input common-lisp:nil
                       ((source-user-identifier :initarg
                         :source-user-identifier :initform
                         (common-lisp:error
                          ":source-user-identifier is required")
                         :type
                         (common-lisp:or developer-user-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-merge-developer-identities-input-source-user-identifier
                         :shape "DeveloperUserIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination-user-identifier :initarg
                         :destination-user-identifier :initform
                         (common-lisp:error
                          ":destination-user-identifier is required")
                         :type
                         (common-lisp:or developer-user-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-merge-developer-identities-input-destination-user-identifier
                         :shape "DeveloperUserIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (developer-provider-name :initarg
                         :developer-provider-name :initform
                         (common-lisp:error
                          ":developer-provider-name is required")
                         :type
                         (common-lisp:or developer-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-merge-developer-identities-input-developer-provider-name
                         :shape "DeveloperProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-merge-developer-identities-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge-developer-identities-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'merge-developer-identities-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'merge-developer-identities-input
                    'make-merge-developer-identities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-user-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-user-identifier))
      (common-lisp:list
       (common-lisp:cons "DestinationUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-provider-name))
      (common-lisp:list
       (common-lisp:cons "DeveloperProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass merge-developer-identities-response common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-merge-developer-identities-response-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge-developer-identities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'merge-developer-identities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'merge-developer-identities-response
                    'make-merge-developer-identities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          merge-developer-identities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:progn
 (common-lisp:deftype oidcprovider-list ()
   '(trivial-types:proper-list arnstring))
 (common-lisp:defun make-oidcprovider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arnstring))
   aws-sdk/generator/shape::members))
(common-lisp:deftype oidctoken () 'common-lisp:string)
(common-lisp:deftype pagination-key () 'common-lisp:string)
(common-lisp:deftype principal-tag-id () 'common-lisp:string)
(common-lisp:deftype principal-tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-tags () 'common-lisp:hash-table)
 (common-lisp:defun make-principal-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype query-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass role-mapping common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or role-mapping-type common-lisp:null)
                         :accessor struct-shape-role-mapping-type :shape
                         "RoleMappingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ambiguous-role-resolution :initarg
                         :ambiguous-role-resolution :initform common-lisp:nil
                         :type
                         (common-lisp:or ambiguous-role-resolution-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-mapping-ambiguous-role-resolution
                         :shape "AmbiguousRoleResolutionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rules-configuration :initarg :rules-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or rules-configuration-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-role-mapping-rules-configuration :shape
                         "RulesConfigurationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-role-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'role-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'role-mapping 'make-role-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ambiguous-role-resolution))
      (common-lisp:list
       (common-lisp:cons "AmbiguousRoleResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-configuration))
      (common-lisp:list
       (common-lisp:cons "RulesConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype role-mapping-map () 'common-lisp:hash-table)
 (common-lisp:defun make-role-mapping-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype role-mapping-type () 'common-lisp:string)
(common-lisp:deftype role-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype roles-map () 'common-lisp:hash-table)
 (common-lisp:defun make-roles-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass rules-configuration-type common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or mapping-rules-list common-lisp:null)
                         :accessor struct-shape-rules-configuration-type-rules
                         :shape "MappingRulesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rules-configuration-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rules-configuration-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rules-configuration-type 'make-rules-configuration-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rules-configuration-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rules-configuration-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rules-configuration-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype samlprovider-list ()
   '(trivial-types:proper-list arnstring))
 (common-lisp:defun make-samlprovider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arnstring))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-key-string () 'common-lisp:string)
(common-lisp:deftype session-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass set-identity-pool-roles-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-set-identity-pool-roles-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (roles :initarg :roles :initform
                         (common-lisp:error ":roles is required") :type
                         (common-lisp:or roles-map common-lisp:null) :accessor
                         struct-shape-set-identity-pool-roles-input-roles
                         :shape "RolesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-mappings :initarg :role-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or role-mapping-map common-lisp:null)
                         :accessor
                         struct-shape-set-identity-pool-roles-input-role-mappings
                         :shape "RoleMappingMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-identity-pool-roles-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-pool-roles-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-identity-pool-roles-input
                    'make-set-identity-pool-roles-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-roles-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-roles-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-mappings))
      (common-lisp:list
       (common-lisp:cons "RoleMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-roles-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-principal-tag-attribute-map-input common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform
                         (common-lisp:error
                          ":identity-provider-name is required")
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-input-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-defaults :initarg :use-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or use-defaults common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-input-use-defaults
                         :shape "UseDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-tags :initarg :principal-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-tags common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-input-principal-tags
                         :shape "PrincipalTags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-principal-tag-attribute-map-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-principal-tag-attribute-map-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-principal-tag-attribute-map-input
                    'make-set-principal-tag-attribute-map-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-defaults))
      (common-lisp:list
       (common-lisp:cons "UseDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-tags))
      (common-lisp:list
       (common-lisp:cons "PrincipalTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-principal-tag-attribute-map-response common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-response-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-provider-name :initarg
                         :identity-provider-name :initform common-lisp:nil
                         :type
                         (common-lisp:or identity-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-response-identity-provider-name
                         :shape "IdentityProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-defaults :initarg :use-defaults :initform
                         common-lisp:nil :type
                         (common-lisp:or use-defaults common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-response-use-defaults
                         :shape "UseDefaults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-tags :initarg :principal-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-tags common-lisp:null)
                         :accessor
                         struct-shape-set-principal-tag-attribute-map-response-principal-tags
                         :shape "PrincipalTags" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-set-principal-tag-attribute-map-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-principal-tag-attribute-map-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'set-principal-tag-attribute-map-response
                    'make-set-principal-tag-attribute-map-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-name))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-defaults))
      (common-lisp:list
       (common-lisp:cons "UseDefaults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-tags))
      (common-lisp:list
       (common-lisp:cons "PrincipalTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-principal-tag-attribute-map-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-keys-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arnstring common-lisp:null) :accessor
                         struct-shape-tag-resource-input-resource-arn :shape
                         "ARNString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or identity-pool-tags-type
                                         common-lisp:null)
                         :accessor struct-shape-tag-resource-input-tags :shape
                         "IdentityPoolTagsType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value-type () 'common-lisp:string)
(common-lisp:deftype token-duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (cognito-identity-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unlink-developer-identity-input common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         (common-lisp:error ":identity-id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-unlink-developer-identity-input-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :initform
                         (common-lisp:error ":identity-pool-id is required")
                         :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-unlink-developer-identity-input-identity-pool-id
                         :shape "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (developer-provider-name :initarg
                         :developer-provider-name :initform
                         (common-lisp:error
                          ":developer-provider-name is required")
                         :type
                         (common-lisp:or developer-provider-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-unlink-developer-identity-input-developer-provider-name
                         :shape "DeveloperProviderName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (developer-user-identifier :initarg
                         :developer-user-identifier :initform
                         (common-lisp:error
                          ":developer-user-identifier is required")
                         :type
                         (common-lisp:or developer-user-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-unlink-developer-identity-input-developer-user-identifier
                         :shape "DeveloperUserIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unlink-developer-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unlink-developer-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unlink-developer-identity-input
                    'make-unlink-developer-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unlink-developer-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unlink-developer-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-provider-name))
      (common-lisp:list
       (common-lisp:cons "DeveloperProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'developer-user-identifier))
      (common-lisp:list
       (common-lisp:cons "DeveloperUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unlink-developer-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unlink-identity-input common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         (common-lisp:error ":identity-id is required") :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-unlink-identity-input-identity-id :shape
                         "IdentityId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logins :initarg :logins :initform
                         (common-lisp:error ":logins is required") :type
                         (common-lisp:or logins-map common-lisp:null) :accessor
                         struct-shape-unlink-identity-input-logins :shape
                         "LoginsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (logins-to-remove :initarg :logins-to-remove :initform
                         (common-lisp:error ":logins-to-remove is required")
                         :type (common-lisp:or logins-list common-lisp:null)
                         :accessor
                         struct-shape-unlink-identity-input-logins-to-remove
                         :shape "LoginsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unlink-identity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unlink-identity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unlink-identity-input 'make-unlink-identity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unlink-identity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unlink-identity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins))
      (common-lisp:list
       (common-lisp:cons "Logins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logins-to-remove))
      (common-lisp:list
       (common-lisp:cons "LoginsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unlink-identity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unprocessed-identity-id common-lisp:nil
                       ((identity-id :initarg :identity-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         struct-shape-unprocessed-identity-id-identity-id
                         :shape "IdentityId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-unprocessed-identity-id-error-code :shape
                         "ErrorCode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unprocessed-identity-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unprocessed-identity-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unprocessed-identity-id 'make-unprocessed-identity-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-identity-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-identity-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unprocessed-identity-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-identity-id-list ()
   '(trivial-types:proper-list unprocessed-identity-id))
 (common-lisp:defun make-unprocessed-identity-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unprocessed-identity-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arnstring common-lisp:null) :accessor
                         struct-shape-untag-resource-input-resource-arn :shape
                         "ARNString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or identity-pool-tags-list-type
                                         common-lisp:null)
                         :accessor struct-shape-untag-resource-input-tag-keys
                         :shape "IdentityPoolTagsListType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype use-defaults () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun create-identity-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-name
                     allow-unauthenticated-identities allow-classic-flow
                     supported-login-providers developer-provider-name
                     open-id-connect-provider-arns cognito-identity-providers
                     saml-provider-arns identity-pool-tags)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-name allow-unauthenticated-identities
     allow-classic-flow supported-login-providers developer-provider-name
     open-id-connect-provider-arns cognito-identity-providers
     saml-provider-arns identity-pool-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-identity-pool-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "CreateIdentityPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-identity-pool))
(common-lisp:progn
 (common-lisp:defun delete-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-ids-to-delete)
   (common-lisp:declare (common-lisp:ignorable identity-ids-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteIdentities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-identities))
(common-lisp:progn
 (common-lisp:defun delete-identity-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-identity-pool-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteIdentityPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-identity-pool))
(common-lisp:progn
 (common-lisp:defun describe-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-id)
   (common-lisp:declare (common-lisp:ignorable identity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-identity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-identity))
(common-lisp:progn
 (common-lisp:defun describe-identity-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-identity-pool-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeIdentityPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-identity-pool))
(common-lisp:progn
 (common-lisp:defun get-credentials-for-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-id logins custom-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable identity-id logins custom-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-credentials-for-identity-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetCredentialsForIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-credentials-for-identity))
(common-lisp:progn
 (common-lisp:defun get-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id identity-pool-id logins)
   (common-lisp:declare
    (common-lisp:ignorable account-id identity-pool-id logins))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-id-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetId"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-id))
(common-lisp:progn
 (common-lisp:defun get-identity-pool-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-identity-pool-roles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetIdentityPoolRoles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-identity-pool-roles))
(common-lisp:progn
 (common-lisp:defun get-open-id-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-id logins)
   (common-lisp:declare (common-lisp:ignorable identity-id logins))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-open-id-token-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetOpenIdToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-open-id-token))
(common-lisp:progn
 (common-lisp:defun get-open-id-token-for-developer-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id logins
                     principal-tags token-duration)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id logins principal-tags
     token-duration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-open-id-token-for-developer-identity-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetOpenIdTokenForDeveloperIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-open-id-token-for-developer-identity))
(common-lisp:progn
 (common-lisp:defun get-principal-tag-attribute-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-provider-name)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-principal-tag-attribute-map-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "GetPrincipalTagAttributeMap"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-principal-tag-attribute-map))
(common-lisp:progn
 (common-lisp:defun list-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id max-results next-token
                     hide-disabled)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id max-results next-token
     hide-disabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "ListIdentities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identities))
(common-lisp:progn
 (common-lisp:defun list-identity-pools
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-pools-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "ListIdentityPools"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-identity-pools))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun lookup-developer-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id
                     developer-user-identifier max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id
     developer-user-identifier max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-lookup-developer-identity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "LookupDeveloperIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'lookup-developer-identity))
(common-lisp:progn
 (common-lisp:defun merge-developer-identities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-user-identifier
                     destination-user-identifier developer-provider-name
                     identity-pool-id)
   (common-lisp:declare
    (common-lisp:ignorable source-user-identifier destination-user-identifier
     developer-provider-name identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-merge-developer-identities-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "MergeDeveloperIdentities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'merge-developer-identities))
(common-lisp:progn
 (common-lisp:defun set-identity-pool-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id roles role-mappings)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id roles role-mappings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-identity-pool-roles-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "SetIdentityPoolRoles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-identity-pool-roles))
(common-lisp:progn
 (common-lisp:defun set-principal-tag-attribute-map
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-provider-name
                     use-defaults principal-tags)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-provider-name use-defaults
     principal-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-principal-tag-attribute-map-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "SetPrincipalTagAttributeMap"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'set-principal-tag-attribute-map))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun unlink-developer-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-id identity-pool-id
                     developer-provider-name developer-user-identifier)
   (common-lisp:declare
    (common-lisp:ignorable identity-id identity-pool-id developer-provider-name
     developer-user-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unlink-developer-identity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "UnlinkDeveloperIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unlink-developer-identity))
(common-lisp:progn
 (common-lisp:defun unlink-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-id logins logins-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable identity-id logins logins-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unlink-identity-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "UnlinkIdentity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'unlink-identity))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-identity-pool
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-pool-name
                     allow-unauthenticated-identities allow-classic-flow
                     supported-login-providers developer-provider-name
                     open-id-connect-provider-arns cognito-identity-providers
                     saml-provider-arns identity-pool-tags)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-pool-name
     allow-unauthenticated-identities allow-classic-flow
     supported-login-providers developer-provider-name
     open-id-connect-provider-arns cognito-identity-providers
     saml-provider-arns identity-pool-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-identity-pool
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cognito-identity-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateIdentityPool"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-identity-pool))
