;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dms/api
  (:use)
  (:nicknames #:aws/dms)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dms/api)
(common-lisp:progn
 (common-lisp:define-condition dms-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dms-error))
(common-lisp:progn
 (common-lisp:defclass dms-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "dms" :api-version
                        "2016-01-01" :host-prefix "dms" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AmazonDMSv20160101" :json-version
                        "1.1"))
 (common-lisp:export 'dms-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedFault" . access-denied-fault)
    ("CollectorNotFoundFault" . collector-not-found-fault)
    ("InsufficientResourceCapacityFault"
     . insufficient-resource-capacity-fault)
    ("InvalidCertificateFault" . invalid-certificate-fault)
    ("InvalidOperationFault" . invalid-operation-fault)
    ("InvalidResourceStateFault" . invalid-resource-state-fault)
    ("InvalidSubnet" . invalid-subnet)
    ("KMSAccessDeniedFault" . kmsaccess-denied-fault)
    ("KMSDisabledFault" . kmsdisabled-fault) ("KMSFault" . kmsfault)
    ("KMSInvalidStateFault" . kmsinvalid-state-fault)
    ("KMSKeyNotAccessibleFault" . kmskey-not-accessible-fault)
    ("KMSNotFoundFault" . kmsnot-found-fault)
    ("KMSThrottlingFault" . kmsthrottling-fault)
    ("ReplicationSubnetGroupDoesNotCoverEnoughAZs"
     . replication-subnet-group-does-not-cover-enough-azs)
    ("ResourceAlreadyExistsFault" . resource-already-exists-fault)
    ("ResourceNotFoundFault" . resource-not-found-fault)
    ("ResourceQuotaExceededFault" . resource-quota-exceeded-fault)
    ("S3AccessDeniedFault" . s3access-denied-fault)
    ("S3ResourceNotFoundFault" . s3resource-not-found-fault)
    ("SNSInvalidTopicFault" . snsinvalid-topic-fault)
    ("SNSNoAuthorizationFault" . snsno-authorization-fault)
    ("StorageQuotaExceededFault" . storage-quota-exceeded-fault)
    ("SubnetAlreadyInUse" . subnet-already-in-use)
    ("UpgradeDependencyFailureFault" . upgrade-dependency-failure-fault)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-fault-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-fault 'access-denied-fault-message)))
(common-lisp:progn
 (common-lisp:defclass account-quota common-lisp:nil
                       ((account-quota-name :initarg :account-quota-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-account-quota-account-quota-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (used :initarg :used :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-quota-used :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max :initarg :max :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-account-quota-max :shape "Long" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-quota
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-quota
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-quota 'make-account-quota))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-quota))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quota-name))
      (common-lisp:list
       (common-lisp:cons "AccountQuotaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'used))
      (common-lisp:list
       (common-lisp:cons "Used"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-quota))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-quota-list ()
   '(trivial-types:proper-list account-quota))
 (common-lisp:defun make-account-quota-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-quota))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-to-resource-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-to-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-message
                    'make-add-tags-to-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-to-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-tags-to-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-response
                    'make-add-tags-to-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-message common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-apply-pending-maintenance-action-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-action :initarg :apply-action :initform
                         (common-lisp:error ":apply-action is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-apply-pending-maintenance-action-message-apply-action
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (opt-in-type :initarg :opt-in-type :initform
                         (common-lisp:error ":opt-in-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-apply-pending-maintenance-action-message-opt-in-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-pending-maintenance-action-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-message
                    'make-apply-pending-maintenance-action-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-action))
      (common-lisp:list
       (common-lisp:cons "ApplyAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-type))
      (common-lisp:list
       (common-lisp:cons "OptInType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-pending-maintenance-action-response
                       common-lisp:nil
                       ((resource-pending-maintenance-actions :initarg
                         :resource-pending-maintenance-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         struct-shape-apply-pending-maintenance-action-response-resource-pending-maintenance-actions
                         :shape "ResourcePendingMaintenanceActions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-pending-maintenance-action-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'apply-pending-maintenance-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'apply-pending-maintenance-action-response
                    'make-apply-pending-maintenance-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "ResourcePendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-pending-maintenance-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-report-types-list ()
   '(trivial-types:proper-list assessment-report-type))
 (common-lisp:defun make-assessment-report-types-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-report-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auth-mechanism-value () 'common-lisp:string)
(common-lisp:deftype auth-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass availability-zone common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-availability-zone-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-availability-zone
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'availability-zone
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zones-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-availability-zones-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype available-upgrades-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-available-upgrades-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-start-recommendations-error-entry common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-start-recommendations-error-entry-database-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-batch-start-recommendations-error-entry-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-start-recommendations-error-entry-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-recommendations-error-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-start-recommendations-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-recommendations-error-entry
                    'make-batch-start-recommendations-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-start-recommendations-error-entry-list ()
   '(trivial-types:proper-list batch-start-recommendations-error-entry))
 (common-lisp:defun make-batch-start-recommendations-error-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-start-recommendations-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-start-recommendations-request common-lisp:nil
                       ((data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or
                          start-recommendations-request-entry-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-start-recommendations-request-data
                         :shape "StartRecommendationsRequestEntryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-start-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-recommendations-request
                    'make-batch-start-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-recommendations-response common-lisp:nil
                       ((error-entries :initarg :error-entries :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          batch-start-recommendations-error-entry-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-start-recommendations-response-error-entries
                         :shape "BatchStartRecommendationsErrorEntryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-start-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-start-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-start-recommendations-response
                    'make-batch-start-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "ErrorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-replication-task-assessment-run-message
                       common-lisp:nil
                       ((replication-task-assessment-run-arn :initarg
                         :replication-task-assessment-run-arn :initform
                         (common-lisp:error
                          ":replication-task-assessment-run-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-cancel-replication-task-assessment-run-message-replication-task-assessment-run-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-replication-task-assessment-run-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-replication-task-assessment-run-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-replication-task-assessment-run-message
                    'make-cancel-replication-task-assessment-run-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-replication-task-assessment-run-response
                       common-lisp:nil
                       ((replication-task-assessment-run :initarg
                         :replication-task-assessment-run :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task-assessment-run
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-replication-task-assessment-run-response-replication-task-assessment-run
                         :shape "ReplicationTaskAssessmentRun" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-replication-task-assessment-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-replication-task-assessment-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-replication-task-assessment-run-response
                    'make-cancel-replication-task-assessment-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-replication-task-assessment-run-response))
   common-lisp:nil))
(common-lisp:deftype canned-acl-for-objects-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate common-lisp:nil
                       ((certificate-identifier :initarg
                         :certificate-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-certificate-certificate-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-creation-date :initarg
                         :certificate-creation-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-certificate-certificate-creation-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-certificate-pem :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-wallet :initarg :certificate-wallet
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-wallet common-lisp:null)
                         :accessor struct-shape-certificate-certificate-wallet
                         :shape "CertificateWallet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-certificate-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-owner :initarg :certificate-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-certificate-owner :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-from-date :initarg :valid-from-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-valid-from-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (valid-to-date :initarg :valid-to-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-valid-to-date :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-certificate-signing-algorithm :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-length :initarg :key-length :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-certificate-key-length :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-creation-date))
      (common-lisp:list
       (common-lisp:cons "CertificateCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "CertificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-wallet))
      (common-lisp:list
       (common-lisp:cons "CertificateWallet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-owner))
      (common-lisp:list
       (common-lisp:cons "CertificateOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-from-date))
      (common-lisp:list
       (common-lisp:cons "ValidFromDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-to-date))
      (common-lisp:list
       (common-lisp:cons "ValidToDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-length))
      (common-lisp:list
       (common-lisp:cons "KeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-list ()
   '(trivial-types:proper-list certificate))
 (common-lisp:defun make-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-wallet ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype char-length-semantics () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass collector-health-check common-lisp:nil
                       ((collector-status :initarg :collector-status :initform
                         common-lisp:nil :type
                         (common-lisp:or collector-status common-lisp:null)
                         :accessor
                         struct-shape-collector-health-check-collector-status
                         :shape "CollectorStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (local-collector-s3access :initarg
                         :local-collector-s3access :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-collector-health-check-local-collector-s3access
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-collector-s3access :initarg
                         :web-collector-s3access :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-collector-health-check-web-collector-s3access
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (web-collector-granted-role-based-access :initarg
                         :web-collector-granted-role-based-access :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-collector-health-check-web-collector-granted-role-based-access
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collector-health-check
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'collector-health-check
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collector-health-check 'make-collector-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collector-health-check))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collector-health-check))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-status))
      (common-lisp:list
       (common-lisp:cons "CollectorStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'local-collector-s3access))
      (common-lisp:list
       (common-lisp:cons "LocalCollectorS3Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-collector-s3access))
      (common-lisp:list
       (common-lisp:cons "WebCollectorS3Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-collector-granted-role-based-access))
      (common-lisp:list
       (common-lisp:cons "WebCollectorGrantedRoleBasedAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collector-health-check))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition collector-not-found-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       collector-not-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 'collector-not-found-fault
                    'collector-not-found-fault-message)))
(common-lisp:progn
 (common-lisp:defclass collector-response common-lisp:nil
                       ((collector-referenced-id :initarg
                         :collector-referenced-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-collector-response-collector-referenced-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collector-name :initarg :collector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-collector-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (collector-version :initarg :collector-version
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-collector-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-status :initarg :version-status :initform
                         common-lisp:nil :type
                         (common-lisp:or version-status common-lisp:null)
                         :accessor
                         struct-shape-collector-response-version-status :shape
                         "VersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-s3bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-collector-response-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collector-health-check :initarg
                         :collector-health-check :initform common-lisp:nil
                         :type
                         (common-lisp:or collector-health-check
                                         common-lisp:null)
                         :accessor
                         struct-shape-collector-response-collector-health-check
                         :shape "CollectorHealthCheck" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-data-received :initarg :last-data-received
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-last-data-received
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registered-date :initarg :registered-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-registered-date :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-created-date :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (modified-date :initarg :modified-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-response-modified-date :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inventory-data :initarg :inventory-data :initform
                         common-lisp:nil :type
                         (common-lisp:or inventory-data common-lisp:null)
                         :accessor
                         struct-shape-collector-response-inventory-data :shape
                         "InventoryData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'collector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collector-response 'make-collector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input collector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input collector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collector-referenced-id))
      (common-lisp:list
       (common-lisp:cons "CollectorReferencedId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-name))
      (common-lisp:list
       (common-lisp:cons "CollectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-version))
      (common-lisp:list
       (common-lisp:cons "CollectorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-status))
      (common-lisp:list
       (common-lisp:cons "VersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collector-health-check))
      (common-lisp:list
       (common-lisp:cons "CollectorHealthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-data-received))
      (common-lisp:list
       (common-lisp:cons "LastDataReceived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-date))
      (common-lisp:list
       (common-lisp:cons "RegisteredDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-date))
      (common-lisp:list
       (common-lisp:cons "ModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inventory-data))
      (common-lisp:list
       (common-lisp:cons "InventoryData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input collector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collector-responses ()
   '(trivial-types:proper-list collector-response))
 (common-lisp:defun make-collector-responses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collector-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass collector-short-info-response common-lisp:nil
                       ((collector-referenced-id :initarg
                         :collector-referenced-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-collector-short-info-response-collector-referenced-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collector-name :initarg :collector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-collector-short-info-response-collector-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-collector-short-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'collector-short-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'collector-short-info-response
                    'make-collector-short-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collector-short-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collector-short-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collector-referenced-id))
      (common-lisp:list
       (common-lisp:cons "CollectorReferencedId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-name))
      (common-lisp:list
       (common-lisp:cons "CollectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collector-short-info-response))
   common-lisp:nil))
(common-lisp:deftype collector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collectors-list ()
   '(trivial-types:proper-list collector-short-info-response))
 (common-lisp:defun make-collectors-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collector-short-info-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compression-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-config common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-config-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name-servers :initarg :dns-name-servers :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-config-dns-name-servers :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-config-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity-units :initarg :max-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-compute-config-max-capacity-units :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-capacity-units :initarg :min-capacity-units
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-compute-config-min-capacity-units :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-compute-config-multi-az :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-config-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group-id :initarg
                         :replication-subnet-group-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-compute-config-replication-subnet-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-compute-config-vpc-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'compute-config 'make-compute-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name-servers))
      (common-lisp:list
       (common-lisp:cons "DnsNameServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MaxCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity-units))
      (common-lisp:list
       (common-lisp:cons "MinCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-id))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-connection-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-arn :initarg :endpoint-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-endpoint-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-connection-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-last-failure-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-identifier :initarg :endpoint-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-endpoint-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-instance-identifier :initarg
                         :replication-instance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-connection-replication-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun make-connection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-data-provider-message common-lisp:nil
                       ((data-provider-name :initarg :data-provider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-provider-message-data-provider-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-provider-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform
                         (common-lisp:error ":engine is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-data-provider-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-provider-message-settings
                         :shape "DataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-data-provider-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-provider-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-provider-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-provider-message
                    'make-create-data-provider-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-name))
      (common-lisp:list
       (common-lisp:cons "DataProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-provider-response common-lisp:nil
                       ((data-provider :initarg :data-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider common-lisp:null)
                         :accessor
                         struct-shape-create-data-provider-response-data-provider
                         :shape "DataProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-provider-response
                    'make-create-data-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider))
      (common-lisp:list
       (common-lisp:cons "DataProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-message common-lisp:nil
                       ((endpoint-identifier :initarg :endpoint-identifier
                         :initform
                         (common-lisp:error ":endpoint-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         (common-lisp:error ":endpoint-type is required") :type
                         (common-lisp:or replication-endpoint-type-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-endpoint-type
                         :shape "ReplicationEndpointTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         (common-lisp:error ":engine-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-create-endpoint-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-connection-attributes :initarg
                         :extra-connection-attributes :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-extra-connection-attributes
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-ssl-mode :shape
                         "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-table-definition :initarg
                         :external-table-definition :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-external-table-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamo-db-settings :initarg :dynamo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dynamo-db-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-dynamo-db-settings
                         :shape "DynamoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3settings :initarg :s3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or s3settings common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-s3settings :shape
                         "S3Settings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dms-transfer-settings :initarg :dms-transfer-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dms-transfer-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-dms-transfer-settings
                         :shape "DmsTransferSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mongo-db-settings :initarg :mongo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or mongo-db-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-mongo-db-settings
                         :shape "MongoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-settings :initarg :kinesis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kinesis-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-kinesis-settings
                         :shape "KinesisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kafka-settings :initarg :kafka-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kafka-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-kafka-settings
                         :shape "KafkaSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-settings :initarg
                         :elasticsearch-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or elasticsearch-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-elasticsearch-settings
                         :shape "ElasticsearchSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (neptune-settings :initarg :neptune-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or neptune-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-neptune-settings
                         :shape "NeptuneSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-settings :initarg :redshift-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or redshift-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-redshift-settings
                         :shape "RedshiftSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postgre-sqlsettings :initarg :postgre-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or postgre-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-postgre-sqlsettings
                         :shape "PostgreSQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (my-sqlsettings :initarg :my-sqlsettings :initform
                         common-lisp:nil :type
                         (common-lisp:or my-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-my-sqlsettings
                         :shape "MySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-settings :initarg :oracle-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or oracle-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-oracle-settings
                         :shape "OracleSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sybase-settings :initarg :sybase-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sybase-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-sybase-settings
                         :shape "SybaseSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (microsoft-sqlserver-settings :initarg
                         :microsoft-sqlserver-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or microsoft-sqlserver-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-microsoft-sqlserver-settings
                         :shape "MicrosoftSQLServerSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ibmdb2settings :initarg :ibmdb2settings :initform
                         common-lisp:nil :type
                         (common-lisp:or ibmdb2settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-ibmdb2settings
                         :shape "IBMDb2Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-endpoint-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (doc-db-settings :initarg :doc-db-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or doc-db-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-doc-db-settings
                         :shape "DocDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redis-settings :initarg :redis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or redis-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-redis-settings
                         :shape "RedisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gcp-my-sqlsettings :initarg :gcp-my-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or gcp-my-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-gcp-my-sqlsettings
                         :shape "GcpMySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-settings :initarg :timestream-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-settings common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-message-timestream-settings
                         :shape "TimestreamSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-message 'make-create-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-connection-attributes))
      (common-lisp:list
       (common-lisp:cons "ExtraConnectionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-table-definition))
      (common-lisp:list
       (common-lisp:cons "ExternalTableDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db-settings))
      (common-lisp:list
       (common-lisp:cons "DynamoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3settings))
      (common-lisp:list
       (common-lisp:cons "S3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dms-transfer-settings))
      (common-lisp:list
       (common-lisp:cons "DmsTransferSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-db-settings))
      (common-lisp:list
       (common-lisp:cons "MongoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-settings))
      (common-lisp:list
       (common-lisp:cons "KinesisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-settings))
      (common-lisp:list
       (common-lisp:cons "KafkaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-settings))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neptune-settings))
      (common-lisp:list
       (common-lisp:cons "NeptuneSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-settings))
      (common-lisp:list
       (common-lisp:cons "RedshiftSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postgre-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "MySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-settings))
      (common-lisp:list
       (common-lisp:cons "OracleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sybase-settings))
      (common-lisp:list
       (common-lisp:cons "SybaseSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-settings))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibmdb2settings))
      (common-lisp:list
       (common-lisp:cons "IBMDb2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'doc-db-settings))
      (common-lisp:list
       (common-lisp:cons "DocDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redis-settings))
      (common-lisp:list
       (common-lisp:cons "RedisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcp-my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "GcpMySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream-settings))
      (common-lisp:list
       (common-lisp:cons "TimestreamSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-endpoint-response common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor
                         struct-shape-create-endpoint-response-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-response 'make-create-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         (common-lisp:error ":sns-topic-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-ids :initarg :source-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-source-ids
                         :shape "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-event-subscription-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-message
                    'make-create-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids))
      (common-lisp:list
       (common-lisp:cons "SourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-event-subscription-response common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-create-event-subscription-response-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-event-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-event-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-event-subscription-response
                    'make-create-event-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-advisor-collector-request common-lisp:nil
                       ((collector-name :initarg :collector-name :initform
                         (common-lisp:error ":collector-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-advisor-collector-request-collector-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fleet-advisor-collector-request-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform
                         (common-lisp:error
                          ":service-access-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-advisor-collector-request-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fleet-advisor-collector-request-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-advisor-collector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fleet-advisor-collector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-advisor-collector-request
                    'make-create-fleet-advisor-collector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-name))
      (common-lisp:list
       (common-lisp:cons "CollectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fleet-advisor-collector-response common-lisp:nil
                       ((collector-referenced-id :initarg
                         :collector-referenced-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-advisor-collector-response-collector-referenced-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (collector-name :initarg :collector-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fleet-advisor-collector-response-collector-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fleet-advisor-collector-response-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-fleet-advisor-collector-response-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-fleet-advisor-collector-response-s3bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-fleet-advisor-collector-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-fleet-advisor-collector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-fleet-advisor-collector-response
                    'make-create-fleet-advisor-collector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collector-referenced-id))
      (common-lisp:list
       (common-lisp:cons "CollectorReferencedId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collector-name))
      (common-lisp:list
       (common-lisp:cons "CollectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fleet-advisor-collector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-message common-lisp:nil
                       ((availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-kms-key-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-instance-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-instance-profile-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-identifier :initarg
                         :subnet-group-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-message-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-message-vpc-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-message
                    'make-create-instance-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-instance-profile-response common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-create-instance-profile-response-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-instance-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-instance-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-response
                    'make-create-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-migration-project-message common-lisp:nil
                       ((migration-project-name :initarg
                         :migration-project-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-message-migration-project-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-data-provider-descriptors :initarg
                         :source-data-provider-descriptors :initform
                         (common-lisp:error
                          ":source-data-provider-descriptors is required")
                         :type
                         (common-lisp:or
                          data-provider-descriptor-definition-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-message-source-data-provider-descriptors
                         :shape "DataProviderDescriptorDefinitionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-data-provider-descriptors :initarg
                         :target-data-provider-descriptors :initform
                         (common-lisp:error
                          ":target-data-provider-descriptors is required")
                         :type
                         (common-lisp:or
                          data-provider-descriptor-definition-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-message-target-data-provider-descriptors
                         :shape "DataProviderDescriptorDefinitionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-identifier :initarg
                         :instance-profile-identifier :initform
                         (common-lisp:error
                          ":instance-profile-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-message-instance-profile-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transformation-rules :initarg :transformation-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-migration-project-message-transformation-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-migration-project-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-migration-project-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-conversion-application-attributes :initarg
                         :schema-conversion-application-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or scapplication-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-message-schema-conversion-application-attributes
                         :shape "SCApplicationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-migration-project-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-migration-project-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-migration-project-message
                    'make-create-migration-project-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-name))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "SourceDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "TargetDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transformation-rules))
      (common-lisp:list
       (common-lisp:cons "TransformationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-conversion-application-attributes))
      (common-lisp:list
       (common-lisp:cons "SchemaConversionApplicationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-migration-project-response common-lisp:nil
                       ((migration-project :initarg :migration-project
                         :initform common-lisp:nil :type
                         (common-lisp:or migration-project common-lisp:null)
                         :accessor
                         struct-shape-create-migration-project-response-migration-project
                         :shape "MigrationProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-migration-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-migration-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-migration-project-response
                    'make-create-migration-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-project))
      (common-lisp:list
       (common-lisp:cons "MigrationProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-migration-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-config-message common-lisp:nil
                       ((replication-config-identifier :initarg
                         :replication-config-identifier :initform
                         (common-lisp:error
                          ":replication-config-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-replication-config-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform
                         (common-lisp:error ":source-endpoint-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-source-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform
                         (common-lisp:error ":target-endpoint-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-target-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-config :initarg :compute-config :initform
                         (common-lisp:error ":compute-config is required")
                         :type (common-lisp:or compute-config common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-compute-config
                         :shape "ComputeConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         (common-lisp:error ":replication-type is required")
                         :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-replication-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         (common-lisp:error ":table-mappings is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-message-table-mappings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-settings :initarg :replication-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-config-message-replication-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supplemental-settings :initarg :supplemental-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-config-message-supplemental-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-config-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-replication-config-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-config-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-config-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-config-message
                    'make-create-replication-config-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-config))
      (common-lisp:list
       (common-lisp:cons "ComputeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "ReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplemental-settings))
      (common-lisp:list
       (common-lisp:cons "SupplementalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-config-response common-lisp:nil
                       ((replication-config :initarg :replication-config
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor
                         struct-shape-create-replication-config-response-replication-config
                         :shape "ReplicationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-config-response
                    'make-create-replication-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-instance-message common-lisp:nil
                       ((replication-instance-identifier :initarg
                         :replication-instance-identifier :initform
                         (common-lisp:error
                          ":replication-instance-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-replication-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-class :initarg
                         :replication-instance-class :initform
                         (common-lisp:error
                          ":replication-instance-class is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-replication-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group-identifier :initarg
                         :replication-subnet-group-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-replication-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dns-name-servers :initarg :dns-name-servers :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-dns-name-servers
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-instance-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-instance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-instance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-instance-message
                    'make-create-replication-instance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-class))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name-servers))
      (common-lisp:list
       (common-lisp:cons "DnsNameServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-instance-response common-lisp:nil
                       ((replication-instance :initarg :replication-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-instance common-lisp:null)
                         :accessor
                         struct-shape-create-replication-instance-response-replication-instance
                         :shape "ReplicationInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-instance-response
                    'make-create-replication-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-subnet-group-message common-lisp:nil
                       ((replication-subnet-group-identifier :initarg
                         :replication-subnet-group-identifier :initform
                         (common-lisp:error
                          ":replication-subnet-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-subnet-group-message-replication-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group-description :initarg
                         :replication-subnet-group-description :initform
                         (common-lisp:error
                          ":replication-subnet-group-description is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-subnet-group-message-replication-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-replication-subnet-group-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-subnet-group-message
                    'make-create-replication-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-subnet-group-response common-lisp:nil
                       ((replication-subnet-group :initarg
                         :replication-subnet-group :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-subnet-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-replication-subnet-group-response-replication-subnet-group
                         :shape "ReplicationSubnetGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-subnet-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-subnet-group-response
                    'make-create-replication-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-task-message common-lisp:nil
                       ((replication-task-identifier :initarg
                         :replication-task-identifier :initform
                         (common-lisp:error
                          ":replication-task-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-replication-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform
                         (common-lisp:error ":source-endpoint-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-source-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform
                         (common-lisp:error ":target-endpoint-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-target-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-type :initarg :migration-type :initform
                         (common-lisp:error ":migration-type is required")
                         :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-migration-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         (common-lisp:error ":table-mappings is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-table-mappings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-settings :initarg
                         :replication-task-settings :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-message-replication-task-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-time :initarg :cdc-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-cdc-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-cdc-start-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-cdc-stop-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-data :initarg :task-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-task-data
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-replication-task-message-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-task-message
                    'make-create-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-type))
      (common-lisp:list
       (common-lisp:cons "MigrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-time))
      (common-lisp:list
       (common-lisp:cons "CdcStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-data))
      (common-lisp:list
       (common-lisp:cons "TaskData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-create-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-task-response
                    'make-create-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-task-response))
   common-lisp:nil))
(common-lisp:deftype data-format-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-provider common-lisp:nil
                       ((data-provider-name :initarg :data-provider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-data-provider-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-provider-arn :initarg :data-provider-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-data-provider-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-provider-creation-time :initarg
                         :data-provider-creation-time :initform common-lisp:nil
                         :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         struct-shape-data-provider-data-provider-creation-time
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-data-provider-engine :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or data-provider-settings
                                         common-lisp:null)
                         :accessor struct-shape-data-provider-settings :shape
                         "DataProviderSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-provider 'make-data-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-name))
      (common-lisp:list
       (common-lisp:cons "DataProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-arn))
      (common-lisp:list
       (common-lisp:cons "DataProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-provider-creation-time))
      (common-lisp:list
       (common-lisp:cons "DataProviderCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-provider-descriptor common-lisp:nil
                       ((secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-provider-descriptor-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-descriptor-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-provider-name :initarg :data-provider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-descriptor-data-provider-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-provider-arn :initarg :data-provider-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-descriptor-data-provider-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-provider-descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-provider-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-provider-descriptor 'make-data-provider-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-name))
      (common-lisp:list
       (common-lisp:cons "DataProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-arn))
      (common-lisp:list
       (common-lisp:cons "DataProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-provider-descriptor-definition common-lisp:nil
                       ((data-provider-identifier :initarg
                         :data-provider-identifier :initform
                         (common-lisp:error
                          ":data-provider-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-provider-descriptor-definition-data-provider-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-provider-descriptor-definition-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-provider-descriptor-definition-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-provider-descriptor-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-provider-descriptor-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-provider-descriptor-definition
                    'make-data-provider-descriptor-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-provider-identifier))
      (common-lisp:list
       (common-lisp:cons "DataProviderIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-descriptor-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-provider-descriptor-definition-list ()
   '(trivial-types:proper-list data-provider-descriptor-definition))
 (common-lisp:defun make-data-provider-descriptor-definition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-provider-descriptor-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-provider-descriptor-list ()
   '(trivial-types:proper-list data-provider-descriptor))
 (common-lisp:defun make-data-provider-descriptor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-provider-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-provider-list ()
   '(trivial-types:proper-list data-provider))
 (common-lisp:defun make-data-provider-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-provider))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-provider-settings common-lisp:nil
                       ((redshift-settings :initarg :redshift-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or redshift-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-redshift-settings
                         :shape "RedshiftDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (postgre-sql-settings :initarg :postgre-sql-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or postgre-sql-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-postgre-sql-settings
                         :shape "PostgreSqlDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (my-sql-settings :initarg :my-sql-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or my-sql-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-my-sql-settings
                         :shape "MySqlDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (oracle-settings :initarg :oracle-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or oracle-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-oracle-settings
                         :shape "OracleDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (microsoft-sql-server-settings :initarg
                         :microsoft-sql-server-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          microsoft-sql-server-data-provider-settings
                          common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-microsoft-sql-server-settings
                         :shape "MicrosoftSqlServerDataProviderSettings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (doc-db-settings :initarg :doc-db-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or doc-db-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-doc-db-settings
                         :shape "DocDbDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maria-db-settings :initarg :maria-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or maria-db-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-maria-db-settings
                         :shape "MariaDbDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mongo-db-settings :initarg :mongo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or mongo-db-data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-provider-settings-mongo-db-settings
                         :shape "MongoDbDataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-provider-settings 'make-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-settings))
      (common-lisp:list
       (common-lisp:cons "RedshiftSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sql-settings))
      (common-lisp:list
       (common-lisp:cons "PostgreSqlSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sql-settings))
      (common-lisp:list
       (common-lisp:cons "MySqlSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-settings))
      (common-lisp:list
       (common-lisp:cons "OracleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sql-server-settings))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSqlServerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'doc-db-settings))
      (common-lisp:list
       (common-lisp:cons "DocDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maria-db-settings))
      (common-lisp:list
       (common-lisp:cons "MariaDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-db-settings))
      (common-lisp:list
       (common-lisp:cons "MongoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-instance-software-details-response
                       common-lisp:nil
                       ((engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-database-instance-software-details-response-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-instance-software-details-response-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-edition :initarg :engine-edition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-instance-software-details-response-engine-edition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-pack :initarg :service-pack :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-instance-software-details-response-service-pack
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (support-level :initarg :support-level :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-instance-software-details-response-support-level
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (os-architecture :initarg :os-architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-database-instance-software-details-response-os-architecture
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tooltip :initarg :tooltip :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-database-instance-software-details-response-tooltip
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database-instance-software-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'database-instance-software-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'database-instance-software-details-response
                    'make-database-instance-software-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-instance-software-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-instance-software-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-edition))
      (common-lisp:list
       (common-lisp:cons "EngineEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-pack))
      (common-lisp:list
       (common-lisp:cons "ServicePack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-level))
      (common-lisp:list
       (common-lisp:cons "SupportLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-architecture))
      (common-lisp:list
       (common-lisp:cons "OsArchitecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tooltip))
      (common-lisp:list
       (common-lisp:cons "Tooltip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-instance-software-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list ()
   '(trivial-types:proper-list database-response))
 (common-lisp:defun make-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass database-response common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-response-database-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-response-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-response-ip-address :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-schemas :initarg :number-of-schemas
                         :initform common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-database-response-number-of-schemas
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server :initarg :server :initform common-lisp:nil
                         :type
                         (common-lisp:or server-short-info-response
                                         common-lisp:null)
                         :accessor struct-shape-database-response-server :shape
                         "ServerShortInfoResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (software-details :initarg :software-details :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          database-instance-software-details-response
                          common-lisp:null)
                         :accessor
                         struct-shape-database-response-software-details :shape
                         "DatabaseInstanceSoftwareDetailsResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (collectors :initarg :collectors :initform
                         common-lisp:nil :type
                         (common-lisp:or collectors-list common-lisp:null)
                         :accessor struct-shape-database-response-collectors
                         :shape "CollectorsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'database-response 'make-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-schemas))
      (common-lisp:list
       (common-lisp:cons "NumberOfSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "Server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'software-details))
      (common-lisp:list
       (common-lisp:cons "SoftwareDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collectors))
      (common-lisp:list
       (common-lisp:cons "Collectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-short-info-response common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-short-info-response-database-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-short-info-response-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-ip-address :initarg :database-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-short-info-response-database-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-engine :initarg :database-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-database-short-info-response-database-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database-short-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database-short-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'database-short-info-response
                    'make-database-short-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          database-short-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          database-short-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-ip-address))
      (common-lisp:list
       (common-lisp:cons "DatabaseIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-engine))
      (common-lisp:list
       (common-lisp:cons "DatabaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          database-short-info-response))
   common-lisp:nil))
(common-lisp:deftype date-partition-delimiter-value () 'common-lisp:string)
(common-lisp:deftype date-partition-sequence-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass default-error-details common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-default-error-details-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'default-error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-error-details 'make-default-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-message common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificate-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-message-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-message
                    'make-delete-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-response-certificate
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-response
                    'make-delete-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-collector-request common-lisp:nil
                       ((collector-referenced-id :initarg
                         :collector-referenced-id :initform
                         (common-lisp:error
                          ":collector-referenced-id is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-collector-request-collector-referenced-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-collector-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-collector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-collector-request 'make-delete-collector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-collector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-collector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collector-referenced-id))
      (common-lisp:list
       (common-lisp:cons "CollectorReferencedId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-collector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-connection-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-message
                    'make-delete-connection-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-delete-connection-response-connection
                         :shape "Connection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-provider-message common-lisp:nil
                       ((data-provider-identifier :initarg
                         :data-provider-identifier :initform
                         (common-lisp:error
                          ":data-provider-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-data-provider-message-data-provider-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-provider-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-provider-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-provider-message
                    'make-delete-data-provider-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-provider-identifier))
      (common-lisp:list
       (common-lisp:cons "DataProviderIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-provider-response common-lisp:nil
                       ((data-provider :initarg :data-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider common-lisp:null)
                         :accessor
                         struct-shape-delete-data-provider-response-data-provider
                         :shape "DataProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-provider-response
                    'make-delete-data-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider))
      (common-lisp:list
       (common-lisp:cons "DataProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-endpoint-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-message 'make-delete-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-endpoint-response common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor
                         struct-shape-delete-endpoint-response-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-response 'make-delete-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-message
                    'make-delete-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-event-subscription-response common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-delete-event-subscription-response-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-event-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-event-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-event-subscription-response
                    'make-delete-event-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-advisor-databases-request common-lisp:nil
                       ((database-ids :initarg :database-ids :initform
                         (common-lisp:error ":database-ids is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-delete-fleet-advisor-databases-request-database-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fleet-advisor-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fleet-advisor-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-advisor-databases-request
                    'make-delete-fleet-advisor-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-ids))
      (common-lisp:list
       (common-lisp:cons "DatabaseIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fleet-advisor-databases-response common-lisp:nil
                       ((database-ids :initarg :database-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-delete-fleet-advisor-databases-response-database-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-fleet-advisor-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-fleet-advisor-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-fleet-advisor-databases-response
                    'make-delete-fleet-advisor-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-ids))
      (common-lisp:list
       (common-lisp:cons "DatabaseIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fleet-advisor-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-profile-message common-lisp:nil
                       ((instance-profile-identifier :initarg
                         :instance-profile-identifier :initform
                         (common-lisp:error
                          ":instance-profile-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-profile-message-instance-profile-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-message
                    'make-delete-instance-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-instance-profile-response common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-delete-instance-profile-response-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-instance-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-instance-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-response
                    'make-delete-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-migration-project-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-migration-project-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-migration-project-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-migration-project-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-migration-project-message
                    'make-delete-migration-project-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-migration-project-response common-lisp:nil
                       ((migration-project :initarg :migration-project
                         :initform common-lisp:nil :type
                         (common-lisp:or migration-project common-lisp:null)
                         :accessor
                         struct-shape-delete-migration-project-response-migration-project
                         :shape "MigrationProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-migration-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-migration-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-migration-project-response
                    'make-delete-migration-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-project))
      (common-lisp:list
       (common-lisp:cons "MigrationProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-migration-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-config-message common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-config-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-config-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-config-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-config-message
                    'make-delete-replication-config-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-config-response common-lisp:nil
                       ((replication-config :initarg :replication-config
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-config-response-replication-config
                         :shape "ReplicationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-config-response
                    'make-delete-replication-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-instance-message common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-instance-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-instance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-instance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-instance-message
                    'make-delete-replication-instance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-instance-response common-lisp:nil
                       ((replication-instance :initarg :replication-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-instance common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-instance-response-replication-instance
                         :shape "ReplicationInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-instance-response
                    'make-delete-replication-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-subnet-group-message common-lisp:nil
                       ((replication-subnet-group-identifier :initarg
                         :replication-subnet-group-identifier :initform
                         (common-lisp:error
                          ":replication-subnet-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-subnet-group-message-replication-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-subnet-group-message
                    'make-delete-replication-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-subnet-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-subnet-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-subnet-group-response
                    'make-delete-replication-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-task-assessment-run-message
                       common-lisp:nil
                       ((replication-task-assessment-run-arn :initarg
                         :replication-task-assessment-run-arn :initform
                         (common-lisp:error
                          ":replication-task-assessment-run-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-task-assessment-run-message-replication-task-assessment-run-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-task-assessment-run-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-task-assessment-run-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-task-assessment-run-message
                    'make-delete-replication-task-assessment-run-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-task-assessment-run-response
                       common-lisp:nil
                       ((replication-task-assessment-run :initarg
                         :replication-task-assessment-run :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task-assessment-run
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-task-assessment-run-response-replication-task-assessment-run
                         :shape "ReplicationTaskAssessmentRun" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-task-assessment-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-task-assessment-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-task-assessment-run-response
                    'make-delete-replication-task-assessment-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-assessment-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-task-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-task-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-task-message
                    'make-delete-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-delete-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-task-response
                    'make-delete-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-message common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-attributes-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-message
                    'make-describe-account-attributes-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-attributes-response common-lisp:nil
                       ((account-quotas :initarg :account-quotas :initform
                         common-lisp:nil :type
                         (common-lisp:or account-quota-list common-lisp:null)
                         :accessor
                         struct-shape-describe-account-attributes-response-account-quotas
                         :shape "AccountQuotaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unique-account-identifier :initarg
                         :unique-account-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-account-attributes-response-unique-account-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-account-attributes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-attributes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-account-attributes-response
                    'make-describe-account-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-quotas))
      (common-lisp:list
       (common-lisp:cons "AccountQuotas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-account-identifier))
      (common-lisp:list
       (common-lisp:cons "UniqueAccountIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-applicable-individual-assessments-message
                       common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-applicable-individual-assessments-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-engine-name :initarg :source-engine-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-applicable-individual-assessments-message-source-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-engine-name :initarg :target-engine-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-applicable-individual-assessments-message-target-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-type :initarg :migration-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-message-migration-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-applicable-individual-assessments-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-applicable-individual-assessments-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-applicable-individual-assessments-message
                    'make-describe-applicable-individual-assessments-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-engine-name))
      (common-lisp:list
       (common-lisp:cons "SourceEngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-engine-name))
      (common-lisp:list
       (common-lisp:cons "TargetEngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-type))
      (common-lisp:list
       (common-lisp:cons "MigrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-applicable-individual-assessments-response
                       common-lisp:nil
                       ((individual-assessment-names :initarg
                         :individual-assessment-names :initform common-lisp:nil
                         :type
                         (common-lisp:or individual-assessment-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-response-individual-assessment-names
                         :shape "IndividualAssessmentNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-applicable-individual-assessments-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-applicable-individual-assessments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-applicable-individual-assessments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-applicable-individual-assessments-response
                    'make-describe-applicable-individual-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'individual-assessment-names))
      (common-lisp:list
       (common-lisp:cons "IndividualAssessmentNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-applicable-individual-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificates-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificates-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificates-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificates-message
                    'make-describe-certificates-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificates-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificates :initarg :certificates :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-list common-lisp:null)
                         :accessor
                         struct-shape-describe-certificates-response-certificates
                         :shape "CertificateList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificates-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificates-response
                    'make-describe-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connections-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connections-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connections-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connections-message
                    'make-describe-connections-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connections-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor
                         struct-shape-describe-connections-response-connections
                         :shape "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-connections-response
                    'make-describe-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conversion-configuration-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-conversion-configuration-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conversion-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conversion-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conversion-configuration-message
                    'make-describe-conversion-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conversion-configuration-response
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-conversion-configuration-response-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversion-configuration :initarg
                         :conversion-configuration :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-conversion-configuration-response-conversion-configuration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conversion-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conversion-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conversion-configuration-response
                    'make-describe-conversion-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversion-configuration))
      (common-lisp:list
       (common-lisp:cons "ConversionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conversion-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-providers-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-data-providers-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-data-providers-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-providers-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-providers-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-providers-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-providers-message
                    'make-describe-data-providers-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-data-providers-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-data-providers-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-providers :initarg :data-providers :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider-list common-lisp:null)
                         :accessor
                         struct-shape-describe-data-providers-response-data-providers
                         :shape "DataProviderList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-data-providers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-data-providers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-data-providers-response
                    'make-describe-data-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-providers))
      (common-lisp:list
       (common-lisp:cons "DataProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-settings-message common-lisp:nil
                       ((engine-name :initarg :engine-name :initform
                         (common-lisp:error ":engine-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-endpoint-settings-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-settings-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-settings-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-settings-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-settings-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-settings-message
                    'make-describe-endpoint-settings-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-settings-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-settings-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-settings :initarg :endpoint-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or endpoint-settings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-settings-response-endpoint-settings
                         :shape "EndpointSettingsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-settings-response
                    'make-describe-endpoint-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-settings))
      (common-lisp:list
       (common-lisp:cons "EndpointSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-types-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-types-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-types-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-types-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-types-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-types-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-types-message
                    'make-describe-endpoint-types-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoint-types-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-types-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-endpoint-types :initarg
                         :supported-endpoint-types :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-endpoint-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoint-types-response-supported-endpoint-types
                         :shape "SupportedEndpointTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoint-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-endpoint-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-types-response
                    'make-describe-endpoint-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-endpoint-types))
      (common-lisp:list
       (common-lisp:cons "SupportedEndpointTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoints-message-filters :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoints-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoints-message-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoints-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-message
                    'make-describe-endpoints-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoints-response-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoints :initarg :endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-list common-lisp:null)
                         :accessor
                         struct-shape-describe-endpoints-response-endpoints
                         :shape "EndpointList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-response
                    'make-describe-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-versions-message common-lisp:nil
                       ((max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-versions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-versions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-versions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-versions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-versions-message
                    'make-describe-engine-versions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-engine-versions-response common-lisp:nil
                       ((engine-versions :initarg :engine-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-version-list common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-versions-response-engine-versions
                         :shape "EngineVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-engine-versions-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-engine-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-engine-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-engine-versions-response
                    'make-describe-engine-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-versions))
      (common-lisp:list
       (common-lisp:cons "EngineVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-engine-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-categories-message common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-categories-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-categories-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-categories-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-categories-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-message
                    'make-describe-event-categories-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-categories-response common-lisp:nil
                       ((event-category-group-list :initarg
                         :event-category-group-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-category-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-event-categories-response-event-category-group-list
                         :shape "EventCategoryGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-categories-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-categories-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-categories-response
                    'make-describe-event-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-category-group-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoryGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-subscriptions-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-event-subscriptions-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-subscriptions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-subscriptions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-message
                    'make-describe-event-subscriptions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-event-subscriptions-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-subscriptions-list :initarg
                         :event-subscriptions-list :initform common-lisp:nil
                         :type
                         (common-lisp:or event-subscriptions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-event-subscriptions-response-event-subscriptions-list
                         :shape "EventSubscriptionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-event-subscriptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-event-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-event-subscriptions-response
                    'make-describe-event-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-subscriptions-list))
      (common-lisp:list
       (common-lisp:cons "EventSubscriptionsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-event-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-message common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-events-message-source-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-source-type
                         :shape "SourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-events-message-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-end-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-duration :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor struct-shape-describe-events-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-events-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-events-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-events-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-events-message 'make-describe-events-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-events-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-events-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor struct-shape-describe-events-response-events
                         :shape "EventList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-events-response 'make-describe-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-extension-pack-associations-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-extension-pack-associations-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-extension-pack-associations-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-extension-pack-associations-message
                    'make-describe-extension-pack-associations-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-extension-pack-associations-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-extension-pack-associations-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-extension-pack-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-extension-pack-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-extension-pack-associations-response
                    'make-describe-extension-pack-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-extension-pack-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-collectors-request
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-collectors-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-collectors-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-collectors-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-collectors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-collectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-collectors-request
                    'make-describe-fleet-advisor-collectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-collectors-response
                       common-lisp:nil
                       ((collectors :initarg :collectors :initform
                         common-lisp:nil :type
                         (common-lisp:or collector-responses common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-collectors-response-collectors
                         :shape "CollectorResponses" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-collectors-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-collectors-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-collectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-collectors-response
                    'make-describe-fleet-advisor-collectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collectors))
      (common-lisp:list
       (common-lisp:cons "Collectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-collectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-databases-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-databases-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-databases-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-databases-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-databases-request
                    'make-describe-fleet-advisor-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-databases-response
                       common-lisp:nil
                       ((databases :initarg :databases :initform
                         common-lisp:nil :type
                         (common-lisp:or database-list common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-databases-response-databases
                         :shape "DatabaseList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-databases-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-databases-response
                    'make-describe-fleet-advisor-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "Databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-lsa-analysis-request
                       common-lisp:nil
                       ((max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-lsa-analysis-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-lsa-analysis-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-lsa-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-lsa-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-lsa-analysis-request
                    'make-describe-fleet-advisor-lsa-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-lsa-analysis-response
                       common-lisp:nil
                       ((analysis :initarg :analysis :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          fleet-advisor-lsa-analysis-response-list
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-lsa-analysis-response-analysis
                         :shape "FleetAdvisorLsaAnalysisResponseList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-lsa-analysis-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-lsa-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-lsa-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-lsa-analysis-response
                    'make-describe-fleet-advisor-lsa-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis))
      (common-lisp:list
       (common-lisp:cons "Analysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-lsa-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-schema-object-summary-request
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schema-object-summary-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schema-object-summary-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-schema-object-summary-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-schema-object-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-schema-object-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-schema-object-summary-request
                    'make-describe-fleet-advisor-schema-object-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-schema-object-summary-response
                       common-lisp:nil
                       ((fleet-advisor-schema-objects :initarg
                         :fleet-advisor-schema-objects :initform
                         common-lisp:nil :type
                         (common-lisp:or fleet-advisor-schema-object-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schema-object-summary-response-fleet-advisor-schema-objects
                         :shape "FleetAdvisorSchemaObjectList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-schema-object-summary-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-schema-object-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-schema-object-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-schema-object-summary-response
                    'make-describe-fleet-advisor-schema-object-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fleet-advisor-schema-objects))
      (common-lisp:list
       (common-lisp:cons "FleetAdvisorSchemaObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schema-object-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-schemas-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schemas-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schemas-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-schemas-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-schemas-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-schemas-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-schemas-request
                    'make-describe-fleet-advisor-schemas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-fleet-advisor-schemas-response common-lisp:nil
                       ((fleet-advisor-schemas :initarg :fleet-advisor-schemas
                         :initform common-lisp:nil :type
                         (common-lisp:or fleet-advisor-schema-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-fleet-advisor-schemas-response-fleet-advisor-schemas
                         :shape "FleetAdvisorSchemaList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-fleet-advisor-schemas-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-fleet-advisor-schemas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-fleet-advisor-schemas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-fleet-advisor-schemas-response
                    'make-describe-fleet-advisor-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fleet-advisor-schemas))
      (common-lisp:list
       (common-lisp:cons "FleetAdvisorSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-fleet-advisor-schemas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-profiles-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-instance-profiles-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-instance-profiles-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-instance-profiles-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-instance-profiles-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-profiles-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-instance-profiles-message
                    'make-describe-instance-profiles-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-profiles-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-instance-profiles-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-profiles :initarg :instance-profiles
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-profile-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-instance-profiles-response-instance-profiles
                         :shape "InstanceProfileList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-instance-profiles-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-instance-profiles-response
                    'make-describe-instance-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "InstanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-assessments-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-assessments-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-assessments-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-assessments-message
                    'make-describe-metadata-model-assessments-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-assessments-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-assessments-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-assessments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-assessments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-assessments-response
                    'make-describe-metadata-model-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-conversions-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-conversions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-conversions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-conversions-message
                    'make-describe-metadata-model-conversions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-conversions-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-conversions-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-conversions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-conversions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-conversions-response
                    'make-describe-metadata-model-conversions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-conversions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-exports-as-script-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-exports-as-script-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-exports-as-script-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-exports-as-script-message
                    'make-describe-metadata-model-exports-as-script-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-exports-as-script-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-as-script-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-exports-as-script-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-exports-as-script-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-exports-as-script-response
                    'make-describe-metadata-model-exports-as-script-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-as-script-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-exports-to-target-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-exports-to-target-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-exports-to-target-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-exports-to-target-message
                    'make-describe-metadata-model-exports-to-target-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-exports-to-target-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-exports-to-target-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-exports-to-target-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-exports-to-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-exports-to-target-response
                    'make-describe-metadata-model-exports-to-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-exports-to-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-imports-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-imports-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-imports-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-imports-message
                    'make-describe-metadata-model-imports-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-metadata-model-imports-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requests :initarg :requests :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-conversion-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-metadata-model-imports-response-requests
                         :shape "SchemaConversionRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-metadata-model-imports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-metadata-model-imports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-metadata-model-imports-response
                    'make-describe-metadata-model-imports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requests))
      (common-lisp:list
       (common-lisp:cons "Requests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-metadata-model-imports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-migration-projects-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-migration-projects-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-migration-projects-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-migration-projects-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-migration-projects-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-migration-projects-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-migration-projects-message
                    'make-describe-migration-projects-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-migration-projects-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-migration-projects-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-projects :initarg :migration-projects
                         :initform common-lisp:nil :type
                         (common-lisp:or migration-project-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-migration-projects-response-migration-projects
                         :shape "MigrationProjectList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-migration-projects-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-migration-projects-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-migration-projects-response
                    'make-describe-migration-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-projects))
      (common-lisp:list
       (common-lisp:cons "MigrationProjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-migration-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-orderable-replication-instances-message
                       common-lisp:nil
                       ((max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-replication-instances-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-replication-instances-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-orderable-replication-instances-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-orderable-replication-instances-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-replication-instances-message
                    'make-describe-orderable-replication-instances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-orderable-replication-instances-response
                       common-lisp:nil
                       ((orderable-replication-instances :initarg
                         :orderable-replication-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or orderable-replication-instance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-replication-instances-response-orderable-replication-instances
                         :shape "OrderableReplicationInstanceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-orderable-replication-instances-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-orderable-replication-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-orderable-replication-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-orderable-replication-instances-response
                    'make-describe-orderable-replication-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'orderable-replication-instances))
      (common-lisp:list
       (common-lisp:cons "OrderableReplicationInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-orderable-replication-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pending-maintenance-actions-message
                       common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pending-maintenance-actions-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-maintenance-actions-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-message
                    'make-describe-pending-maintenance-actions-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pending-maintenance-actions-response
                       common-lisp:nil
                       ((pending-maintenance-actions :initarg
                         :pending-maintenance-actions :initform common-lisp:nil
                         :type
                         (common-lisp:or pending-maintenance-actions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-response-pending-maintenance-actions
                         :shape "PendingMaintenanceActions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-maintenance-actions-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pending-maintenance-actions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-maintenance-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pending-maintenance-actions-response
                    'make-describe-pending-maintenance-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-maintenance-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendation-limitations-request
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendation-limitations-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendation-limitations-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-recommendation-limitations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-recommendation-limitations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendation-limitations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-limitations-request
                    'make-describe-recommendation-limitations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendation-limitations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-recommendation-limitations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limitations :initarg :limitations :initform
                         common-lisp:nil :type
                         (common-lisp:or limitation-list common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendation-limitations-response-limitations
                         :shape "LimitationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-recommendation-limitations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendation-limitations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-limitations-response
                    'make-describe-recommendation-limitations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limitations))
      (common-lisp:list
       (common-lisp:cons "Limitations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-limitations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendations-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendations-request-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendations-request-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-recommendations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-recommendations-request
                    'make-describe-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendations-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-recommendations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendations :initarg :recommendations :initform
                         common-lisp:nil :type
                         (common-lisp:or recommendation-list common-lisp:null)
                         :accessor
                         struct-shape-describe-recommendations-response-recommendations
                         :shape "RecommendationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-recommendations-response
                    'make-describe-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "Recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-refresh-schemas-status-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-refresh-schemas-status-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-refresh-schemas-status-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-refresh-schemas-status-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-refresh-schemas-status-message
                    'make-describe-refresh-schemas-status-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-refresh-schemas-status-response common-lisp:nil
                       ((refresh-schemas-status :initarg
                         :refresh-schemas-status :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-schemas-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-refresh-schemas-status-response-refresh-schemas-status
                         :shape "RefreshSchemasStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-refresh-schemas-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-refresh-schemas-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-refresh-schemas-status-response
                    'make-describe-refresh-schemas-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-schemas-status))
      (common-lisp:list
       (common-lisp:cons "RefreshSchemasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-refresh-schemas-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configs-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configs-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configs-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configs-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-configs-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configs-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configs-message
                    'make-describe-replication-configs-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-configs-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configs-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-configs :initarg :replication-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-config-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-configs-response-replication-configs
                         :shape "ReplicationConfigList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-configs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-configs-response
                    'make-describe-replication-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-configs))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-instance-task-logs-message
                       common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-instance-task-logs-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-instance-task-logs-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-instance-task-logs-message
                    'make-describe-replication-instance-task-logs-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-instance-task-logs-response
                       common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-response-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-task-logs :initarg
                         :replication-instance-task-logs :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-instance-task-logs-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-response-replication-instance-task-logs
                         :shape "ReplicationInstanceTaskLogsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instance-task-logs-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-instance-task-logs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-instance-task-logs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-instance-task-logs-response
                    'make-describe-replication-instance-task-logs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-task-logs))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceTaskLogs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instance-task-logs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-instances-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instances-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instances-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instances-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-instances-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-instances-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-instances-message
                    'make-describe-replication-instances-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-instances-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instances-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instances :initarg :replication-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-instance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-instances-response-replication-instances
                         :shape "ReplicationInstanceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-instances-response
                    'make-describe-replication-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instances))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-subnet-groups-message
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-subnet-groups-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-subnet-groups-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-subnet-groups-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-subnet-groups-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-subnet-groups-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-subnet-groups-message
                    'make-describe-replication-subnet-groups-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-subnet-groups-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-subnet-groups-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-groups :initarg
                         :replication-subnet-groups :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-subnet-groups
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-subnet-groups-response-replication-subnet-groups
                         :shape "ReplicationSubnetGroups" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-subnet-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-subnet-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-subnet-groups-response
                    'make-describe-replication-subnet-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-groups))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-subnet-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-table-statistics-message
                       common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-table-statistics-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-table-statistics-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-table-statistics-message
                    'make-describe-replication-table-statistics-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-table-statistics-response
                       common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-response-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-table-statistics :initarg
                         :replication-table-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-table-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-table-statistics-response-replication-table-statistics
                         :shape "ReplicationTableStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-table-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-table-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-table-statistics-response
                    'make-describe-replication-table-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-table-statistics))
      (common-lisp:list
       (common-lisp:cons "ReplicationTableStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-table-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-task-assessment-results-message
                       common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-replication-task-assessment-results-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-results-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-results-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-assessment-results-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-assessment-results-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-assessment-results-message
                    'make-describe-replication-task-assessment-results-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-task-assessment-results-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-results-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-replication-task-assessment-results-response-bucket-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-assessment-results :initarg
                         :replication-task-assessment-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-task-assessment-result-list
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-results-response-replication-task-assessment-results
                         :shape "ReplicationTaskAssessmentResultList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-assessment-results-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-assessment-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-assessment-results-response
                    'make-describe-replication-task-assessment-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-results))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-task-assessment-runs-message
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-runs-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-runs-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-runs-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-assessment-runs-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-assessment-runs-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-assessment-runs-message
                    'make-describe-replication-task-assessment-runs-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-task-assessment-runs-response
                       common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-runs-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-assessment-runs :initarg
                         :replication-task-assessment-runs :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task-assessment-run-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-assessment-runs-response-replication-task-assessment-runs
                         :shape "ReplicationTaskAssessmentRunList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-assessment-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-assessment-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-assessment-runs-response
                    'make-describe-replication-task-assessment-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-runs))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-assessment-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-task-individual-assessments-message
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-individual-assessments-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-individual-assessments-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-task-individual-assessments-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-individual-assessments-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-individual-assessments-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-individual-assessments-message
                    'make-describe-replication-task-individual-assessments-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-replication-task-individual-assessments-response common-lisp:nil
  ((marker :initarg :marker :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-describe-replication-task-individual-assessments-response-marker
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil)
   (replication-task-individual-assessments :initarg
    :replication-task-individual-assessments :initform common-lisp:nil :type
    (common-lisp:or replication-task-individual-assessment-list
                    common-lisp:null)
    :accessor
    struct-shape-describe-replication-task-individual-assessments-response-replication-task-individual-assessments
    :shape "ReplicationTaskIndividualAssessmentList" :location common-lisp:nil
    :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-task-individual-assessments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-task-individual-assessments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-task-individual-assessments-response
                    'make-describe-replication-task-individual-assessments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-individual-assessments))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIndividualAssessments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-task-individual-assessments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-tasks-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (without-settings :initarg :without-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-message-without-settings
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-tasks-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-tasks-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-tasks-message
                    'make-describe-replication-tasks-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'without-settings))
      (common-lisp:list
       (common-lisp:cons "WithoutSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replication-tasks-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-tasks :initarg :replication-tasks
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-task-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-replication-tasks-response-replication-tasks
                         :shape "ReplicationTaskList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replication-tasks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replication-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replication-tasks-response
                    'make-describe-replication-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-tasks))
      (common-lisp:list
       (common-lisp:cons "ReplicationTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replication-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replications-message common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replications-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-replications-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replications-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replications-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replications-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replications-message
                    'make-describe-replications-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-replications-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-replications-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replications :initarg :replications :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-list common-lisp:null)
                         :accessor
                         struct-shape-describe-replications-response-replications
                         :shape "ReplicationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-replications-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-replications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-replications-response
                    'make-describe-replications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replications))
      (common-lisp:list
       (common-lisp:cons "Replications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-replications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schemas-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-schemas-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-schemas-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-describe-schemas-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-schemas-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schemas-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-schemas-message 'make-describe-schemas-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schemas-response common-lisp:nil
                       ((marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-schemas-response-marker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schemas :initarg :schemas :initform common-lisp:nil
                         :type (common-lisp:or schema-list common-lisp:null)
                         :accessor
                         struct-shape-describe-schemas-response-schemas :shape
                         "SchemaList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-schemas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schemas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-schemas-response
                    'make-describe-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schemas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-table-statistics-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-records :initarg :max-records :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-message-max-records
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-message-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-message-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-table-statistics-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-table-statistics-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-table-statistics-message
                    'make-describe-table-statistics-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-records))
      (common-lisp:list
       (common-lisp:cons "MaxRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-table-statistics-response common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-table-statistics-response-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-statistics :initarg :table-statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or table-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-response-table-statistics
                         :shape "TableStatisticsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-describe-table-statistics-response-marker
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-table-statistics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-table-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-table-statistics-response
                    'make-describe-table-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-statistics))
      (common-lisp:list
       (common-lisp:cons "TableStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-statistics-response))
   common-lisp:nil))
(common-lisp:deftype dms-ssl-mode-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dms-transfer-settings common-lisp:nil
                       ((service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dms-transfer-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-dms-transfer-settings-bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dms-transfer-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dms-transfer-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dms-transfer-settings 'make-dms-transfer-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dms-transfer-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dms-transfer-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dms-transfer-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass doc-db-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-doc-db-data-provider-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-doc-db-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-doc-db-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'doc-db-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'doc-db-data-provider-settings
                    'make-doc-db-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          doc-db-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          doc-db-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          doc-db-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass doc-db-settings common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-doc-db-settings-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-doc-db-settings-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-doc-db-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nesting-level :initarg :nesting-level :initform
                         common-lisp:nil :type
                         (common-lisp:or nesting-level-value common-lisp:null)
                         :accessor struct-shape-doc-db-settings-nesting-level
                         :shape "NestingLevelValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extract-doc-id :initarg :extract-doc-id :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-doc-db-settings-extract-doc-id
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (docs-to-investigate :initarg :docs-to-investigate
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-doc-db-settings-docs-to-investigate
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-settings-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-doc-db-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-doc-db-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-update-look-up :initarg :use-update-look-up
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-doc-db-settings-use-update-look-up :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicate-shard-collections :initarg
                         :replicate-shard-collections :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-doc-db-settings-replicate-shard-collections
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-doc-db-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'doc-db-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'doc-db-settings 'make-doc-db-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input doc-db-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input doc-db-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nesting-level))
      (common-lisp:list
       (common-lisp:cons "NestingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extract-doc-id))
      (common-lisp:list
       (common-lisp:cons "ExtractDocId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docs-to-investigate))
      (common-lisp:list
       (common-lisp:cons "DocsToInvestigate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-update-look-up))
      (common-lisp:list
       (common-lisp:cons "UseUpdateLookUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicate-shard-collections))
      (common-lisp:list
       (common-lisp:cons "ReplicateShardCollections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input doc-db-settings))
   common-lisp:nil))
(common-lisp:deftype double-optional () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass dynamo-db-settings common-lisp:nil
                       ((service-access-role-arn :initarg
                         :service-access-role-arn :initform
                         (common-lisp:error
                          ":service-access-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-dynamo-db-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamo-db-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamo-db-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamo-db-settings 'make-dynamo-db-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-db-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-db-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-db-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-settings common-lisp:nil
                       ((service-access-role-arn :initarg
                         :service-access-role-arn :initform
                         (common-lisp:error
                          ":service-access-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-uri :initarg :endpoint-uri :initform
                         (common-lisp:error ":endpoint-uri is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasticsearch-settings-endpoint-uri
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-error-percentage :initarg
                         :full-load-error-percentage :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-settings-full-load-error-percentage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-retry-duration :initarg :error-retry-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-settings-error-retry-duration
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-new-mapping-type :initarg :use-new-mapping-type
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-settings-use-new-mapping-type
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-settings 'make-elasticsearch-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-uri))
      (common-lisp:list
       (common-lisp:cons "EndpointUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-error-percentage))
      (common-lisp:list
       (common-lisp:cons "FullLoadErrorPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-retry-duration))
      (common-lisp:list
       (common-lisp:cons "ErrorRetryDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-new-mapping-type))
      (common-lisp:list
       (common-lisp:cons "UseNewMappingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-settings))
   common-lisp:nil))
(common-lisp:deftype encoding-type-value () 'common-lisp:string)
(common-lisp:deftype encryption-mode-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((endpoint-identifier :initarg :endpoint-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-endpoint-identifier :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-endpoint-type-value
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-endpoint-type :shape
                         "ReplicationEndpointTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-engine-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-display-name :initarg :engine-display-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-engine-display-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-server-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-endpoint-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-database-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (extra-connection-attributes :initarg
                         :extra-connection-attributes :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-extra-connection-attributes
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-endpoint-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-kms-key-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (endpoint-arn :initarg :endpoint-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-endpoint-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-certificate-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor struct-shape-endpoint-ssl-mode :shape
                         "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-service-access-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-table-definition :initarg
                         :external-table-definition :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-endpoint-external-table-definition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-id :initarg :external-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-external-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dynamo-db-settings :initarg :dynamo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dynamo-db-settings common-lisp:null)
                         :accessor struct-shape-endpoint-dynamo-db-settings
                         :shape "DynamoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3settings :initarg :s3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or s3settings common-lisp:null) :accessor
                         struct-shape-endpoint-s3settings :shape "S3Settings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dms-transfer-settings :initarg :dms-transfer-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dms-transfer-settings
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-dms-transfer-settings
                         :shape "DmsTransferSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mongo-db-settings :initarg :mongo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or mongo-db-settings common-lisp:null)
                         :accessor struct-shape-endpoint-mongo-db-settings
                         :shape "MongoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-settings :initarg :kinesis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kinesis-settings common-lisp:null)
                         :accessor struct-shape-endpoint-kinesis-settings
                         :shape "KinesisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kafka-settings :initarg :kafka-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kafka-settings common-lisp:null)
                         :accessor struct-shape-endpoint-kafka-settings :shape
                         "KafkaSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-settings :initarg
                         :elasticsearch-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or elasticsearch-settings
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-elasticsearch-settings
                         :shape "ElasticsearchSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (neptune-settings :initarg :neptune-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or neptune-settings common-lisp:null)
                         :accessor struct-shape-endpoint-neptune-settings
                         :shape "NeptuneSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-settings :initarg :redshift-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or redshift-settings common-lisp:null)
                         :accessor struct-shape-endpoint-redshift-settings
                         :shape "RedshiftSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postgre-sqlsettings :initarg :postgre-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or postgre-sqlsettings common-lisp:null)
                         :accessor struct-shape-endpoint-postgre-sqlsettings
                         :shape "PostgreSQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (my-sqlsettings :initarg :my-sqlsettings :initform
                         common-lisp:nil :type
                         (common-lisp:or my-sqlsettings common-lisp:null)
                         :accessor struct-shape-endpoint-my-sqlsettings :shape
                         "MySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-settings :initarg :oracle-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or oracle-settings common-lisp:null)
                         :accessor struct-shape-endpoint-oracle-settings :shape
                         "OracleSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sybase-settings :initarg :sybase-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sybase-settings common-lisp:null)
                         :accessor struct-shape-endpoint-sybase-settings :shape
                         "SybaseSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (microsoft-sqlserver-settings :initarg
                         :microsoft-sqlserver-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or microsoft-sqlserver-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-endpoint-microsoft-sqlserver-settings
                         :shape "MicrosoftSQLServerSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ibmdb2settings :initarg :ibmdb2settings :initform
                         common-lisp:nil :type
                         (common-lisp:or ibmdb2settings common-lisp:null)
                         :accessor struct-shape-endpoint-ibmdb2settings :shape
                         "IBMDb2Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (doc-db-settings :initarg :doc-db-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or doc-db-settings common-lisp:null)
                         :accessor struct-shape-endpoint-doc-db-settings :shape
                         "DocDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redis-settings :initarg :redis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or redis-settings common-lisp:null)
                         :accessor struct-shape-endpoint-redis-settings :shape
                         "RedisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gcp-my-sqlsettings :initarg :gcp-my-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or gcp-my-sqlsettings common-lisp:null)
                         :accessor struct-shape-endpoint-gcp-my-sqlsettings
                         :shape "GcpMySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-settings :initarg :timestream-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-settings common-lisp:null)
                         :accessor struct-shape-endpoint-timestream-settings
                         :shape "TimestreamSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-display-name))
      (common-lisp:list
       (common-lisp:cons "EngineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-connection-attributes))
      (common-lisp:list
       (common-lisp:cons "ExtraConnectionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-table-definition))
      (common-lisp:list
       (common-lisp:cons "ExternalTableDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db-settings))
      (common-lisp:list
       (common-lisp:cons "DynamoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3settings))
      (common-lisp:list
       (common-lisp:cons "S3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dms-transfer-settings))
      (common-lisp:list
       (common-lisp:cons "DmsTransferSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-db-settings))
      (common-lisp:list
       (common-lisp:cons "MongoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-settings))
      (common-lisp:list
       (common-lisp:cons "KinesisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-settings))
      (common-lisp:list
       (common-lisp:cons "KafkaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-settings))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neptune-settings))
      (common-lisp:list
       (common-lisp:cons "NeptuneSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-settings))
      (common-lisp:list
       (common-lisp:cons "RedshiftSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postgre-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "MySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-settings))
      (common-lisp:list
       (common-lisp:cons "OracleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sybase-settings))
      (common-lisp:list
       (common-lisp:cons "SybaseSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-settings))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibmdb2settings))
      (common-lisp:list
       (common-lisp:cons "IBMDb2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'doc-db-settings))
      (common-lisp:list
       (common-lisp:cons "DocDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redis-settings))
      (common-lisp:list
       (common-lisp:cons "RedisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcp-my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "GcpMySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream-settings))
      (common-lisp:list
       (common-lisp:cons "TimestreamSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-list () '(trivial-types:proper-list endpoint))
 (common-lisp:defun make-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass endpoint-setting common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-setting-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or endpoint-setting-type-value
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-setting-type :shape
                         "EndpointSettingTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enum-values :initarg :enum-values :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoint-setting-enum-values
                                         common-lisp:null)
                         :accessor struct-shape-endpoint-setting-enum-values
                         :shape "EndpointSettingEnumValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sensitive :initarg :sensitive :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-endpoint-setting-sensitive
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (units :initarg :units :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-setting-units :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (applicability :initarg :applicability :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-setting-applicability :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (int-value-min :initarg :int-value-min :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-endpoint-setting-int-value-min
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (int-value-max :initarg :int-value-max :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-endpoint-setting-int-value-max
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-value :initarg :default-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-endpoint-setting-default-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-endpoint-setting
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'endpoint-setting 'make-endpoint-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enum-values))
      (common-lisp:list
       (common-lisp:cons "EnumValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensitive))
      (common-lisp:list
       (common-lisp:cons "Sensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "Units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applicability))
      (common-lisp:list
       (common-lisp:cons "Applicability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-value-min))
      (common-lisp:list
       (common-lisp:cons "IntValueMin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-value-max))
      (common-lisp:list
       (common-lisp:cons "IntValueMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-setting))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-setting-enum-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-endpoint-setting-enum-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-setting-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype endpoint-settings-list ()
   '(trivial-types:proper-list endpoint-setting))
 (common-lisp:defun make-endpoint-settings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-setting))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass engine-version common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-engine-version-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (lifecycle :initarg :lifecycle :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-engine-version-lifecycle :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (release-status :initarg :release-status :initform
                         common-lisp:nil :type
                         (common-lisp:or release-status-values
                                         common-lisp:null)
                         :accessor struct-shape-engine-version-release-status
                         :shape "ReleaseStatusValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (launch-date :initarg :launch-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-engine-version-launch-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-upgrade-date :initarg :auto-upgrade-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-engine-version-auto-upgrade-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecation-date :initarg :deprecation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-engine-version-deprecation-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (force-upgrade-date :initarg :force-upgrade-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-engine-version-force-upgrade-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (available-upgrades :initarg :available-upgrades
                         :initform common-lisp:nil :type
                         (common-lisp:or available-upgrades-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-engine-version-available-upgrades :shape
                         "AvailableUpgradesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-engine-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'engine-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'engine-version 'make-engine-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input engine-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-status))
      (common-lisp:list
       (common-lisp:cons "ReleaseStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-date))
      (common-lisp:list
       (common-lisp:cons "LaunchDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-upgrade-date))
      (common-lisp:list
       (common-lisp:cons "AutoUpgradeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecation-date))
      (common-lisp:list
       (common-lisp:cons "DeprecationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-upgrade-date))
      (common-lisp:list
       (common-lisp:cons "ForceUpgradeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-upgrades))
      (common-lisp:list
       (common-lisp:cons "AvailableUpgrades"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input engine-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engine-version-list ()
   '(trivial-types:proper-list engine-version))
 (common-lisp:defun make-engine-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list engine-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((default-error-details :initarg :default-error-details
                         :initform common-lisp:nil :type
                         (common-lisp:or default-error-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-error-details-default-error-details
                         :shape "DefaultErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-error-details))
      (common-lisp:list
       (common-lisp:cons "defaultErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event common-lisp:nil
                       ((source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-source-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor struct-shape-event-source-type :shape
                         "SourceType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor struct-shape-event-event-categories :shape
                         "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-event-date :shape "TStamp" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-categories-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-event-categories-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-category-group common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-category-group-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-category-group-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-category-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-category-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-category-group 'make-event-category-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-category-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-category-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-category-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-category-group-list ()
   '(trivial-types:proper-list event-category-group))
 (common-lisp:defun make-event-category-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-category-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-subscription common-lisp:nil
                       ((customer-aws-id :initarg :customer-aws-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-customer-aws-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cust-subscription-id :initarg :cust-subscription-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-cust-subscription-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-sns-topic-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-event-subscription-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-creation-time :initarg
                         :subscription-creation-time :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-subscription-creation-time
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-event-subscription-source-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-ids-list :initarg :source-ids-list :initform
                         common-lisp:nil :type
                         (common-lisp:or source-ids-list common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-source-ids-list :shape
                         "SourceIdsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories-list :initarg :event-categories-list
                         :initform common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-event-subscription-event-categories-list
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-event-subscription-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-subscription
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-aws-id))
      (common-lisp:list
       (common-lisp:cons "CustomerAwsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cust-subscription-id))
      (common-lisp:list
       (common-lisp:cons "CustSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-creation-time))
      (common-lisp:list
       (common-lisp:cons "SubscriptionCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ids-list))
      (common-lisp:list
       (common-lisp:cons "SourceIdsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-categories-list))
      (common-lisp:list
       (common-lisp:cons "EventCategoriesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-subscriptions-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun make-event-subscriptions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exclude-test-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-exclude-test-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass export-metadata-model-assessment-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-export-metadata-model-assessment-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-export-metadata-model-assessment-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-name :initarg :file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-metadata-model-assessment-message-file-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-report-types :initarg
                         :assessment-report-types :initform common-lisp:nil
                         :type
                         (common-lisp:or assessment-report-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-metadata-model-assessment-message-assessment-report-types
                         :shape "AssessmentReportTypesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-metadata-model-assessment-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-metadata-model-assessment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-metadata-model-assessment-message
                    'make-export-metadata-model-assessment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "FileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-report-types))
      (common-lisp:list
       (common-lisp:cons "AssessmentReportTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-metadata-model-assessment-response
                       common-lisp:nil
                       ((pdf-report :initarg :pdf-report :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          export-metadata-model-assessment-result-entry
                          common-lisp:null)
                         :accessor
                         struct-shape-export-metadata-model-assessment-response-pdf-report
                         :shape "ExportMetadataModelAssessmentResultEntry"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (csv-report :initarg :csv-report :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          export-metadata-model-assessment-result-entry
                          common-lisp:null)
                         :accessor
                         struct-shape-export-metadata-model-assessment-response-csv-report
                         :shape "ExportMetadataModelAssessmentResultEntry"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-metadata-model-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-metadata-model-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-metadata-model-assessment-response
                    'make-export-metadata-model-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pdf-report))
      (common-lisp:list
       (common-lisp:cons "PdfReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-report))
      (common-lisp:list
       (common-lisp:cons "CsvReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-metadata-model-assessment-result-entry
                       common-lisp:nil
                       ((s3object-key :initarg :s3object-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-metadata-model-assessment-result-entry-s3object-key
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-url :initarg :object-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-metadata-model-assessment-result-entry-object-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-metadata-model-assessment-result-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-metadata-model-assessment-result-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-metadata-model-assessment-result-entry
                    'make-export-metadata-model-assessment-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-result-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-result-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-key))
      (common-lisp:list
       (common-lisp:cons "S3ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-url))
      (common-lisp:list
       (common-lisp:cons "ObjectURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-metadata-model-assessment-result-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-sql-details common-lisp:nil
                       ((s3object-key :initarg :s3object-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-sql-details-s3object-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-url :initarg :object-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-export-sql-details-object-url :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-sql-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-sql-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-sql-details 'make-export-sql-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-sql-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-sql-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-key))
      (common-lisp:list
       (common-lisp:cons "S3ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-url))
      (common-lisp:list
       (common-lisp:cons "ObjectURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-sql-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-filter-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-value-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "FilterValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-value-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fleet-advisor-lsa-analysis-response common-lisp:nil
                       ((lsa-analysis-id :initarg :lsa-analysis-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fleet-advisor-lsa-analysis-response-lsa-analysis-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-fleet-advisor-lsa-analysis-response-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fleet-advisor-lsa-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fleet-advisor-lsa-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fleet-advisor-lsa-analysis-response
                    'make-fleet-advisor-lsa-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-lsa-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-lsa-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lsa-analysis-id))
      (common-lisp:list
       (common-lisp:cons "LsaAnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-lsa-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype fleet-advisor-lsa-analysis-response-list ()
   '(trivial-types:proper-list fleet-advisor-lsa-analysis-response))
 (common-lisp:defun make-fleet-advisor-lsa-analysis-response-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fleet-advisor-lsa-analysis-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fleet-advisor-schema-list ()
   '(trivial-types:proper-list schema-response))
 (common-lisp:defun make-fleet-advisor-schema-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype fleet-advisor-schema-object-list ()
   '(trivial-types:proper-list fleet-advisor-schema-object-response))
 (common-lisp:defun make-fleet-advisor-schema-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            fleet-advisor-schema-object-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass fleet-advisor-schema-object-response common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fleet-advisor-schema-object-response-schema-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-type :initarg :object-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-fleet-advisor-schema-object-response-object-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-objects :initarg :number-of-objects
                         :initform common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-fleet-advisor-schema-object-response-number-of-objects
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-line-count :initarg :code-line-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-fleet-advisor-schema-object-response-code-line-count
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-size :initarg :code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-fleet-advisor-schema-object-response-code-size
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fleet-advisor-schema-object-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'fleet-advisor-schema-object-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fleet-advisor-schema-object-response
                    'make-fleet-advisor-schema-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-schema-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-schema-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "ObjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-objects))
      (common-lisp:list
       (common-lisp:cons "NumberOfObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-line-count))
      (common-lisp:list
       (common-lisp:cons "CodeLineCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fleet-advisor-schema-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gcp-my-sqlsettings common-lisp:nil
                       ((after-connect-script :initarg :after-connect-script
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gcp-my-sqlsettings-after-connect-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clean-source-metadata-on-mismatch :initarg
                         :clean-source-metadata-on-mismatch :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-clean-source-metadata-on-mismatch
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gcp-my-sqlsettings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events-poll-interval :initarg :events-poll-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-events-poll-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-db-type :initarg :target-db-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-db-type common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-target-db-type :shape
                         "TargetDbType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-max-file-size :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parallel-load-threads :initarg :parallel-load-threads
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-parallel-load-threads
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-gcp-my-sqlsettings-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-gcp-my-sqlsettings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gcp-my-sqlsettings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-timezone :initarg :server-timezone :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gcp-my-sqlsettings-server-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-gcp-my-sqlsettings-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-gcp-my-sqlsettings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-gcp-my-sqlsettings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-gcp-my-sqlsettings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'gcp-my-sqlsettings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'gcp-my-sqlsettings 'make-gcp-my-sqlsettings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gcp-my-sqlsettings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gcp-my-sqlsettings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-connect-script))
      (common-lisp:list
       (common-lisp:cons "AfterConnectScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clean-source-metadata-on-mismatch))
      (common-lisp:list
       (common-lisp:cons "CleanSourceMetadataOnMismatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-poll-interval))
      (common-lisp:list
       (common-lisp:cons "EventsPollInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-db-type))
      (common-lisp:list
       (common-lisp:cons "TargetDbType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-load-threads))
      (common-lisp:list
       (common-lisp:cons "ParallelLoadThreads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-timezone))
      (common-lisp:list
       (common-lisp:cons "ServerTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gcp-my-sqlsettings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ibmdb2settings common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ibmdb2settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ibmdb2settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (set-data-capture-changes :initarg
                         :set-data-capture-changes :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-ibmdb2settings-set-data-capture-changes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-lsn :initarg :current-lsn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ibmdb2settings-current-lsn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-kbytes-per-read :initarg :max-kbytes-per-read
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-ibmdb2settings-max-kbytes-per-read :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ibmdb2settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ibmdb2settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-timeout :initarg :load-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-load-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-buffer-size :initarg :write-buffer-size
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-ibmdb2settings-write-buffer-size :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-max-file-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keep-csv-files :initarg :keep-csv-files :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-ibmdb2settings-keep-csv-files
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ibmdb2settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ibmdb2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ibmdb2settings 'make-ibmdb2settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ibmdb2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ibmdb2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'set-data-capture-changes))
      (common-lisp:list
       (common-lisp:cons "SetDataCaptureChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-lsn))
      (common-lisp:list
       (common-lisp:cons "CurrentLsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-kbytes-per-read))
      (common-lisp:list
       (common-lisp:cons "MaxKBytesPerRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-timeout))
      (common-lisp:list
       (common-lisp:cons "LoadTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-buffer-size))
      (common-lisp:list
       (common-lisp:cons "WriteBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keep-csv-files))
      (common-lisp:list
       (common-lisp:cons "KeepCsvFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ibmdb2settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-certificate-message common-lisp:nil
                       ((certificate-identifier :initarg
                         :certificate-identifier :initform
                         (common-lisp:error
                          ":certificate-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-message-certificate-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-pem :initarg :certificate-pem :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-message-certificate-pem
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-wallet :initarg :certificate-wallet
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-wallet common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-message-certificate-wallet
                         :shape "CertificateWallet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-import-certificate-message-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-certificate-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-certificate-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-certificate-message
                    'make-import-certificate-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "CertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-pem))
      (common-lisp:list
       (common-lisp:cons "CertificatePem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-wallet))
      (common-lisp:list
       (common-lisp:cons "CertificateWallet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-response-certificate
                         :shape "Certificate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-certificate-response
                    'make-import-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype include-test-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-include-test-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype individual-assessment-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-individual-assessment-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-profile common-lisp:nil
                       ((instance-profile-arn :initarg :instance-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-availability-zone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-kms-key-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-network-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-instance-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-profile-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-creation-time :initarg
                         :instance-profile-creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-instance-profile-creation-time
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-identifier :initarg
                         :subnet-group-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-instance-profile-vpc-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-profile
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-profile 'make-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-creation-time))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-profile-list ()
   '(trivial-types:proper-list instance-profile))
 (common-lisp:defun make-instance-profile-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition insufficient-resource-capacity-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       insufficient-resource-capacity-fault-message)))
 (common-lisp:export
  (common-lisp:list 'insufficient-resource-capacity-fault
                    'insufficient-resource-capacity-fault-message)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-list () '(trivial-types:proper-list integer))
 (common-lisp:defun make-integer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-certificate-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-certificate-fault-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-fault
                    'invalid-certificate-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-operation-fault-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-operation-fault 'invalid-operation-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-state-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-resource-state-fault-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-resource-state-fault
                    'invalid-resource-state-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-subnet
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-subnet-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-subnet 'invalid-subnet-message)))
(common-lisp:progn
 (common-lisp:defclass inventory-data common-lisp:nil
                       ((number-of-databases :initarg :number-of-databases
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-inventory-data-number-of-databases :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-schemas :initarg :number-of-schemas
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-inventory-data-number-of-schemas :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'inventory-data 'make-inventory-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-databases))
      (common-lisp:list
       (common-lisp:cons "NumberOfDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-schemas))
      (common-lisp:list
       (common-lisp:cons "NumberOfSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-data))
   common-lisp:nil))
(common-lisp:deftype iso8601date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition kmsaccess-denied-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsaccess-denied-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmsaccess-denied-fault 'kmsaccess-denied-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsdisabled-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsdisabled-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmsdisabled-fault 'kmsdisabled-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsfault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsfault-message)))
 (common-lisp:export (common-lisp:list 'kmsfault 'kmsfault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsinvalid-state-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsinvalid-state-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-fault 'kmsinvalid-state-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmskey-not-accessible-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmskey-not-accessible-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmskey-not-accessible-fault
                    'kmskey-not-accessible-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsnot-found-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsnot-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmsnot-found-fault 'kmsnot-found-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition kmsthrottling-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       kmsthrottling-fault-message)))
 (common-lisp:export
  (common-lisp:list 'kmsthrottling-fault 'kmsthrottling-fault-message)))
(common-lisp:deftype kafka-sasl-mechanism () 'common-lisp:string)
(common-lisp:deftype kafka-security-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kafka-settings common-lisp:nil
                       ((broker :initarg :broker :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-kafka-settings-broker :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (topic :initarg :topic :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-settings-topic :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-format :initarg :message-format :initform
                         common-lisp:nil :type
                         (common-lisp:or message-format-value common-lisp:null)
                         :accessor struct-shape-kafka-settings-message-format
                         :shape "MessageFormatValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-transaction-details :initarg
                         :include-transaction-details :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-include-transaction-details
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-partition-value :initarg
                         :include-partition-value :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-include-partition-value
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-include-schema-table :initarg
                         :partition-include-schema-table :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-partition-include-schema-table
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-table-alter-operations :initarg
                         :include-table-alter-operations :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-include-table-alter-operations
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-control-details :initarg
                         :include-control-details :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-include-control-details
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-max-bytes :initarg :message-max-bytes
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-message-max-bytes :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-null-and-empty :initarg
                         :include-null-and-empty :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-include-null-and-empty
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-protocol :initarg :security-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or kafka-security-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-security-protocol :shape
                         "KafkaSecurityProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-client-certificate-arn :initarg
                         :ssl-client-certificate-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-ssl-client-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-client-key-arn :initarg :ssl-client-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-settings-ssl-client-key-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-client-key-password :initarg
                         :ssl-client-key-password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-ssl-client-key-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-ca-certificate-arn :initarg
                         :ssl-ca-certificate-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-ssl-ca-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sasl-username :initarg :sasl-username :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kafka-settings-sasl-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sasl-password :initarg :sasl-password :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-kafka-settings-sasl-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-hex-prefix :initarg :no-hex-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-kafka-settings-no-hex-prefix
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sasl-mechanism :initarg :sasl-mechanism :initform
                         common-lisp:nil :type
                         (common-lisp:or kafka-sasl-mechanism common-lisp:null)
                         :accessor struct-shape-kafka-settings-sasl-mechanism
                         :shape "KafkaSaslMechanism" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-endpoint-identification-algorithm :initarg
                         :ssl-endpoint-identification-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          kafka-ssl-endpoint-identification-algorithm
                          common-lisp:null)
                         :accessor
                         struct-shape-kafka-settings-ssl-endpoint-identification-algorithm
                         :shape "KafkaSslEndpointIdentificationAlgorithm"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kafka-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'kafka-settings 'make-kafka-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kafka-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kafka-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'broker))
      (common-lisp:list
       (common-lisp:cons "Broker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "Topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "MessageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-transaction-details))
      (common-lisp:list
       (common-lisp:cons "IncludeTransactionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-partition-value))
      (common-lisp:list
       (common-lisp:cons "IncludePartitionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-include-schema-table))
      (common-lisp:list
       (common-lisp:cons "PartitionIncludeSchemaTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-table-alter-operations))
      (common-lisp:list
       (common-lisp:cons "IncludeTableAlterOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-control-details))
      (common-lisp:list
       (common-lisp:cons "IncludeControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-max-bytes))
      (common-lisp:list
       (common-lisp:cons "MessageMaxBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-null-and-empty))
      (common-lisp:list
       (common-lisp:cons "IncludeNullAndEmpty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-protocol))
      (common-lisp:list
       (common-lisp:cons "SecurityProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-client-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "SslClientCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-client-key-arn))
      (common-lisp:list
       (common-lisp:cons "SslClientKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-client-key-password))
      (common-lisp:list
       (common-lisp:cons "SslClientKeyPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-ca-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "SslCaCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-username))
      (common-lisp:list
       (common-lisp:cons "SaslUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-password))
      (common-lisp:list
       (common-lisp:cons "SaslPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-hex-prefix))
      (common-lisp:list
       (common-lisp:cons "NoHexPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sasl-mechanism))
      (common-lisp:list
       (common-lisp:cons "SaslMechanism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-endpoint-identification-algorithm))
      (common-lisp:list
       (common-lisp:cons "SslEndpointIdentificationAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kafka-settings))
   common-lisp:nil))
(common-lisp:deftype kafka-ssl-endpoint-identification-algorithm ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kinesis-settings common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-kinesis-settings-stream-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-format :initarg :message-format :initform
                         common-lisp:nil :type
                         (common-lisp:or message-format-value common-lisp:null)
                         :accessor struct-shape-kinesis-settings-message-format
                         :shape "MessageFormatValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-transaction-details :initarg
                         :include-transaction-details :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-include-transaction-details
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-partition-value :initarg
                         :include-partition-value :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-include-partition-value
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-include-schema-table :initarg
                         :partition-include-schema-table :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-partition-include-schema-table
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-table-alter-operations :initarg
                         :include-table-alter-operations :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-include-table-alter-operations
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-control-details :initarg
                         :include-control-details :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-include-control-details
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-null-and-empty :initarg
                         :include-null-and-empty :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-kinesis-settings-include-null-and-empty
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-hex-prefix :initarg :no-hex-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-kinesis-settings-no-hex-prefix
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-settings 'make-kinesis-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kinesis-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kinesis-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-format))
      (common-lisp:list
       (common-lisp:cons "MessageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-transaction-details))
      (common-lisp:list
       (common-lisp:cons "IncludeTransactionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-partition-value))
      (common-lisp:list
       (common-lisp:cons "IncludePartitionValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-include-schema-table))
      (common-lisp:list
       (common-lisp:cons "PartitionIncludeSchemaTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-table-alter-operations))
      (common-lisp:list
       (common-lisp:cons "IncludeTableAlterOperations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-control-details))
      (common-lisp:list
       (common-lisp:cons "IncludeControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-null-and-empty))
      (common-lisp:list
       (common-lisp:cons "IncludeNullAndEmpty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-hex-prefix))
      (common-lisp:list
       (common-lisp:cons "NoHexPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kinesis-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass limitation common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-limitation-database-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-limitation-engine-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-limitation-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-limitation-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (impact :initarg :impact :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-limitation-impact :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-limitation-type :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limitation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limitation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'limitation 'make-limitation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limitation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limitation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "Impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limitation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limitation-list ()
   '(trivial-types:proper-list limitation))
 (common-lisp:defun make-limitation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limitation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn-list :initarg :resource-arn-list
                         :initform common-lisp:nil :type
                         (common-lisp:or arn-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-message-resource-arn-list
                         :shape "ArnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-message
                    'make-list-tags-for-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn-list))
      (common-lisp:list
       (common-lisp:cons "ResourceArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:deftype long-varchar-mapping-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maria-db-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-maria-db-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-maria-db-data-provider-settings-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-maria-db-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-maria-db-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-maria-db-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'maria-db-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'maria-db-data-provider-settings
                    'make-maria-db-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maria-db-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maria-db-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maria-db-data-provider-settings))
   common-lisp:nil))
(common-lisp:deftype message-format-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass microsoft-sqlserver-settings common-lisp:nil
                       ((port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bcp-packet-size :initarg :bcp-packet-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-bcp-packet-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (control-tables-file-group :initarg
                         :control-tables-file-group :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-control-tables-file-group
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-single-always-on-node :initarg
                         :query-single-always-on-node :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-query-single-always-on-node
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-backup-only :initarg :read-backup-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-read-backup-only
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (safeguard-policy :initarg :safeguard-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or safeguard-policy common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-safeguard-policy
                         :shape "SafeguardPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-bcp-full-load :initarg :use-bcp-full-load
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-use-bcp-full-load
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-third-party-backup-device :initarg
                         :use-third-party-backup-device :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-use-third-party-backup-device
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trim-space-in-char :initarg :trim-space-in-char
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-trim-space-in-char
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tlog-access-mode :initarg :tlog-access-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or tlog-access-mode common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-tlog-access-mode
                         :shape "TlogAccessMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-lob-lookup :initarg :force-lob-lookup :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-settings-force-lob-lookup
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-microsoft-sqlserver-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'microsoft-sqlserver-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'microsoft-sqlserver-settings
                    'make-microsoft-sqlserver-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bcp-packet-size))
      (common-lisp:list
       (common-lisp:cons "BcpPacketSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'control-tables-file-group))
      (common-lisp:list
       (common-lisp:cons "ControlTablesFileGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-single-always-on-node))
      (common-lisp:list
       (common-lisp:cons "QuerySingleAlwaysOnNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-backup-only))
      (common-lisp:list
       (common-lisp:cons "ReadBackupOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'safeguard-policy))
      (common-lisp:list
       (common-lisp:cons "SafeguardPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-bcp-full-load))
      (common-lisp:list
       (common-lisp:cons "UseBcpFullLoad"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-third-party-backup-device))
      (common-lisp:list
       (common-lisp:cons "UseThirdPartyBackupDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trim-space-in-char))
      (common-lisp:list
       (common-lisp:cons "TrimSpaceInChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlog-access-mode))
      (common-lisp:list
       (common-lisp:cons "TlogAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-lob-lookup))
      (common-lisp:list
       (common-lisp:cons "ForceLobLookup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass microsoft-sql-server-data-provider-settings
                       common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sql-server-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sql-server-data-provider-settings-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sql-server-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sql-server-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-microsoft-sql-server-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-microsoft-sql-server-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'microsoft-sql-server-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'microsoft-sql-server-data-provider-settings
                    'make-microsoft-sql-server-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sql-server-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sql-server-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sql-server-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass migration-project common-lisp:nil
                       ((migration-project-name :initarg
                         :migration-project-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-migration-project-migration-project-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-project-arn :initarg :migration-project-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-migration-project-migration-project-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-project-creation-time :initarg
                         :migration-project-creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         struct-shape-migration-project-migration-project-creation-time
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-data-provider-descriptors :initarg
                         :source-data-provider-descriptors :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider-descriptor-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-migration-project-source-data-provider-descriptors
                         :shape "DataProviderDescriptorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-data-provider-descriptors :initarg
                         :target-data-provider-descriptors :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider-descriptor-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-migration-project-target-data-provider-descriptors
                         :shape "DataProviderDescriptorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-profile-arn :initarg :instance-profile-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-migration-project-instance-profile-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-migration-project-instance-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transformation-rules :initarg :transformation-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-migration-project-transformation-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-migration-project-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-conversion-application-attributes :initarg
                         :schema-conversion-application-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or scapplication-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-migration-project-schema-conversion-application-attributes
                         :shape "SCApplicationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-migration-project
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'migration-project
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'migration-project 'make-migration-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input migration-project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input migration-project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-name))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-arn))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-creation-time))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "SourceDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "TargetDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transformation-rules))
      (common-lisp:list
       (common-lisp:cons "TransformationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-conversion-application-attributes))
      (common-lisp:list
       (common-lisp:cons "SchemaConversionApplicationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input migration-project))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype migration-project-list ()
   '(trivial-types:proper-list migration-project))
 (common-lisp:defun make-migration-project-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list migration-project))
   aws-sdk/generator/shape::members))
(common-lisp:deftype migration-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-conversion-configuration-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-conversion-configuration-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conversion-configuration :initarg
                         :conversion-configuration :initform
                         (common-lisp:error
                          ":conversion-configuration is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-conversion-configuration-message-conversion-configuration
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-conversion-configuration-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-conversion-configuration-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-conversion-configuration-message
                    'make-modify-conversion-configuration-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conversion-configuration))
      (common-lisp:list
       (common-lisp:cons "ConversionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-conversion-configuration-response common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-conversion-configuration-response-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-conversion-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-conversion-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-conversion-configuration-response
                    'make-modify-conversion-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-conversion-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-data-provider-message common-lisp:nil
                       ((data-provider-identifier :initarg
                         :data-provider-identifier :initform
                         (common-lisp:error
                          ":data-provider-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-data-provider-message-data-provider-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-provider-name :initarg :data-provider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-data-provider-message-data-provider-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-data-provider-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine :initarg :engine :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-data-provider-message-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exact-settings :initarg :exact-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-data-provider-message-exact-settings
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or data-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-data-provider-message-settings
                         :shape "DataProviderSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-data-provider-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-data-provider-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-data-provider-message
                    'make-modify-data-provider-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-provider-identifier))
      (common-lisp:list
       (common-lisp:cons "DataProviderIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider-name))
      (common-lisp:list
       (common-lisp:cons "DataProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "Engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-settings))
      (common-lisp:list
       (common-lisp:cons "ExactSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-data-provider-response common-lisp:nil
                       ((data-provider :initarg :data-provider :initform
                         common-lisp:nil :type
                         (common-lisp:or data-provider common-lisp:null)
                         :accessor
                         struct-shape-modify-data-provider-response-data-provider
                         :shape "DataProvider" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-data-provider-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-data-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-data-provider-response
                    'make-modify-data-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-provider))
      (common-lisp:list
       (common-lisp:cons "DataProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-data-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-endpoint-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-identifier :initarg :endpoint-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-endpoint-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-endpoint-type-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-endpoint-type
                         :shape "ReplicationEndpointTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-modify-endpoint-message-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-connection-attributes :initarg
                         :extra-connection-attributes :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-extra-connection-attributes
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-ssl-mode :shape
                         "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-table-definition :initarg
                         :external-table-definition :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-external-table-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamo-db-settings :initarg :dynamo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dynamo-db-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-dynamo-db-settings
                         :shape "DynamoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3settings :initarg :s3settings :initform
                         common-lisp:nil :type
                         (common-lisp:or s3settings common-lisp:null) :accessor
                         struct-shape-modify-endpoint-message-s3settings :shape
                         "S3Settings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dms-transfer-settings :initarg :dms-transfer-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or dms-transfer-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-dms-transfer-settings
                         :shape "DmsTransferSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mongo-db-settings :initarg :mongo-db-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or mongo-db-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-mongo-db-settings
                         :shape "MongoDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-settings :initarg :kinesis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kinesis-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-kinesis-settings
                         :shape "KinesisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kafka-settings :initarg :kafka-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or kafka-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-kafka-settings
                         :shape "KafkaSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-settings :initarg
                         :elasticsearch-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or elasticsearch-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-elasticsearch-settings
                         :shape "ElasticsearchSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (neptune-settings :initarg :neptune-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or neptune-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-neptune-settings
                         :shape "NeptuneSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-settings :initarg :redshift-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or redshift-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-redshift-settings
                         :shape "RedshiftSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postgre-sqlsettings :initarg :postgre-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or postgre-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-postgre-sqlsettings
                         :shape "PostgreSQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (my-sqlsettings :initarg :my-sqlsettings :initform
                         common-lisp:nil :type
                         (common-lisp:or my-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-my-sqlsettings
                         :shape "MySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-settings :initarg :oracle-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or oracle-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-oracle-settings
                         :shape "OracleSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sybase-settings :initarg :sybase-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sybase-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-sybase-settings
                         :shape "SybaseSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (microsoft-sqlserver-settings :initarg
                         :microsoft-sqlserver-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or microsoft-sqlserver-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-microsoft-sqlserver-settings
                         :shape "MicrosoftSQLServerSettings" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ibmdb2settings :initarg :ibmdb2settings :initform
                         common-lisp:nil :type
                         (common-lisp:or ibmdb2settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-ibmdb2settings
                         :shape "IBMDb2Settings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (doc-db-settings :initarg :doc-db-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or doc-db-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-doc-db-settings
                         :shape "DocDbSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redis-settings :initarg :redis-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or redis-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-redis-settings
                         :shape "RedisSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exact-settings :initarg :exact-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-exact-settings
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (gcp-my-sqlsettings :initarg :gcp-my-sqlsettings
                         :initform common-lisp:nil :type
                         (common-lisp:or gcp-my-sqlsettings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-gcp-my-sqlsettings
                         :shape "GcpMySQLSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestream-settings :initarg :timestream-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or timestream-settings common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-message-timestream-settings
                         :shape "TimestreamSettings" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-endpoint-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-endpoint-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-endpoint-message 'make-modify-endpoint-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-identifier))
      (common-lisp:list
       (common-lisp:cons "EndpointIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-connection-attributes))
      (common-lisp:list
       (common-lisp:cons "ExtraConnectionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-table-definition))
      (common-lisp:list
       (common-lisp:cons "ExternalTableDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db-settings))
      (common-lisp:list
       (common-lisp:cons "DynamoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3settings))
      (common-lisp:list
       (common-lisp:cons "S3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dms-transfer-settings))
      (common-lisp:list
       (common-lisp:cons "DmsTransferSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-db-settings))
      (common-lisp:list
       (common-lisp:cons "MongoDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kinesis-settings))
      (common-lisp:list
       (common-lisp:cons "KinesisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kafka-settings))
      (common-lisp:list
       (common-lisp:cons "KafkaSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-settings))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neptune-settings))
      (common-lisp:list
       (common-lisp:cons "NeptuneSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-settings))
      (common-lisp:list
       (common-lisp:cons "RedshiftSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postgre-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "MySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-settings))
      (common-lisp:list
       (common-lisp:cons "OracleSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sybase-settings))
      (common-lisp:list
       (common-lisp:cons "SybaseSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-settings))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibmdb2settings))
      (common-lisp:list
       (common-lisp:cons "IBMDb2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'doc-db-settings))
      (common-lisp:list
       (common-lisp:cons "DocDbSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redis-settings))
      (common-lisp:list
       (common-lisp:cons "RedisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-settings))
      (common-lisp:list
       (common-lisp:cons "ExactSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gcp-my-sqlsettings))
      (common-lisp:list
       (common-lisp:cons "GcpMySQLSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestream-settings))
      (common-lisp:list
       (common-lisp:cons "TimestreamSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-endpoint-response common-lisp:nil
                       ((endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor
                         struct-shape-modify-endpoint-response-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modify-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-endpoint-response 'make-modify-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-message common-lisp:nil
                       ((subscription-name :initarg :subscription-name
                         :initform
                         (common-lisp:error ":subscription-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-subscription-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-sns-topic-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-event-subscription-message-source-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-categories :initarg :event-categories :initform
                         common-lisp:nil :type
                         (common-lisp:or event-categories-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-event-categories
                         :shape "EventCategoriesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-message-enabled
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-message
                    'make-modify-event-subscription-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscription-name))
      (common-lisp:list
       (common-lisp:cons "SubscriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "EventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-event-subscription-response common-lisp:nil
                       ((event-subscription :initarg :event-subscription
                         :initform common-lisp:nil :type
                         (common-lisp:or event-subscription common-lisp:null)
                         :accessor
                         struct-shape-modify-event-subscription-response-event-subscription
                         :shape "EventSubscription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-event-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-event-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-event-subscription-response
                    'make-modify-event-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscription))
      (common-lisp:list
       (common-lisp:cons "EventSubscription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-event-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-instance-profile-message common-lisp:nil
                       ((instance-profile-identifier :initarg
                         :instance-profile-identifier :initform
                         (common-lisp:error
                          ":instance-profile-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-profile-message-instance-profile-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-instance-profile-message-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-instance-profile-message-kms-key-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-profile-message-publicly-accessible
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-instance-profile-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-profile-name :initarg :instance-profile-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-instance-profile-message-instance-profile-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-instance-profile-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-identifier :initarg
                         :subnet-group-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-profile-message-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-profile-message-vpc-security-groups
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-instance-profile-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-instance-profile-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-instance-profile-message
                    'make-modify-instance-profile-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-instance-profile-response common-lisp:nil
                       ((instance-profile :initarg :instance-profile :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-profile common-lisp:null)
                         :accessor
                         struct-shape-modify-instance-profile-response-instance-profile
                         :shape "InstanceProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-instance-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-instance-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-instance-profile-response
                    'make-modify-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-migration-project-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-project-name :initarg
                         :migration-project-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-migration-project-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-data-provider-descriptors :initarg
                         :source-data-provider-descriptors :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          data-provider-descriptor-definition-list
                          common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-source-data-provider-descriptors
                         :shape "DataProviderDescriptorDefinitionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-data-provider-descriptors :initarg
                         :target-data-provider-descriptors :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          data-provider-descriptor-definition-list
                          common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-target-data-provider-descriptors
                         :shape "DataProviderDescriptorDefinitionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-profile-identifier :initarg
                         :instance-profile-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-instance-profile-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transformation-rules :initarg :transformation-rules
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-migration-project-message-transformation-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-migration-project-message-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-conversion-application-attributes :initarg
                         :schema-conversion-application-attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or scapplication-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-message-schema-conversion-application-attributes
                         :shape "SCApplicationAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-migration-project-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-migration-project-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-migration-project-message
                    'make-modify-migration-project-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-name))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "SourceDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-data-provider-descriptors))
      (common-lisp:list
       (common-lisp:cons "TargetDataProviderDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-identifier))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transformation-rules))
      (common-lisp:list
       (common-lisp:cons "TransformationRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-conversion-application-attributes))
      (common-lisp:list
       (common-lisp:cons "SchemaConversionApplicationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-migration-project-response common-lisp:nil
                       ((migration-project :initarg :migration-project
                         :initform common-lisp:nil :type
                         (common-lisp:or migration-project common-lisp:null)
                         :accessor
                         struct-shape-modify-migration-project-response-migration-project
                         :shape "MigrationProject" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-migration-project-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-migration-project-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-migration-project-response
                    'make-modify-migration-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-project))
      (common-lisp:list
       (common-lisp:cons "MigrationProject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-migration-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-config-message common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-config-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-config-identifier :initarg
                         :replication-config-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-replication-config-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-config-message-replication-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-table-mappings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-settings :initarg :replication-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-replication-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supplemental-settings :initarg :supplemental-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-supplemental-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-config :initarg :compute-config :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-config common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-config-message-compute-config
                         :shape "ComputeConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-source-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-config-message-target-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-config-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-config-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-config-message
                    'make-modify-replication-config-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "ReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplemental-settings))
      (common-lisp:list
       (common-lisp:cons "SupplementalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-config))
      (common-lisp:list
       (common-lisp:cons "ComputeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-config-response common-lisp:nil
                       ((replication-config :initarg :replication-config
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-config common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-config-response-replication-config
                         :shape "ReplicationConfig" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-config-response
                    'make-modify-replication-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-config))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-instance-message common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-immediately :initarg :apply-immediately
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-modify-replication-instance-message-apply-immediately
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-class :initarg
                         :replication-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-replication-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-group-ids :initarg
                         :vpc-security-group-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-vpc-security-group-ids
                         :shape "VpcSecurityGroupIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-instance-message-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-instance-message-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-major-version-upgrade :initarg
                         :allow-major-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-allow-major-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-message-auto-minor-version-upgrade
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-identifier :initarg
                         :replication-instance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-instance-message-replication-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-instance-message-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-instance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-instance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-instance-message
                    'make-modify-replication-instance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "ApplyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-class))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-major-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AllowMajorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-instance-response common-lisp:nil
                       ((replication-instance :initarg :replication-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-instance common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-instance-response-replication-instance
                         :shape "ReplicationInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-instance-response
                    'make-modify-replication-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-subnet-group-message common-lisp:nil
                       ((replication-subnet-group-identifier :initarg
                         :replication-subnet-group-identifier :initform
                         (common-lisp:error
                          ":replication-subnet-group-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-subnet-group-message-replication-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group-description :initarg
                         :replication-subnet-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-subnet-group-message-replication-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required") :type
                         (common-lisp:or subnet-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-subnet-group-message-subnet-ids
                         :shape "SubnetIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-subnet-group-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-subnet-group-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-subnet-group-message
                    'make-modify-replication-subnet-group-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-subnet-group-response common-lisp:nil
                       ((replication-subnet-group :initarg
                         :replication-subnet-group :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-subnet-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-subnet-group-response-replication-subnet-group
                         :shape "ReplicationSubnetGroup" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-subnet-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-subnet-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-subnet-group-response
                    'make-modify-replication-subnet-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-subnet-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-task-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-task-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-identifier :initarg
                         :replication-task-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-task-message-replication-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-type :initarg :migration-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-task-message-migration-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-task-message-table-mappings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-settings :initarg
                         :replication-task-settings :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-task-message-replication-task-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-time :initarg :cdc-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-modify-replication-task-message-cdc-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-task-message-cdc-start-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-task-message-cdc-stop-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-data :initarg :task-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modify-replication-task-message-task-data
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-task-message
                    'make-modify-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-type))
      (common-lisp:list
       (common-lisp:cons "MigrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-time))
      (common-lisp:list
       (common-lisp:cons "CdcStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-data))
      (common-lisp:list
       (common-lisp:cons "TaskData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-modify-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modify-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modify-replication-task-response
                    'make-modify-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-replication-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mongo-db-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-data-provider-settings-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-type-value common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-data-provider-settings-auth-type
                         :shape "AuthTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-source :initarg :auth-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-data-provider-settings-auth-source
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-mechanism :initarg :auth-mechanism :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mechanism-value common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-data-provider-settings-auth-mechanism
                         :shape "AuthMechanismValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mongo-db-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'mongo-db-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mongo-db-data-provider-settings
                    'make-mongo-db-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mongo-db-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mongo-db-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-source))
      (common-lisp:list
       (common-lisp:cons "AuthSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mechanism))
      (common-lisp:list
       (common-lisp:cons "AuthMechanism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mongo-db-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mongo-db-settings common-lisp:nil
                       ((username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-mongo-db-settings-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-mongo-db-settings-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-mongo-db-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-type-value common-lisp:null)
                         :accessor struct-shape-mongo-db-settings-auth-type
                         :shape "AuthTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-mechanism :initarg :auth-mechanism :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-mechanism-value common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-settings-auth-mechanism :shape
                         "AuthMechanismValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (nesting-level :initarg :nesting-level :initform
                         common-lisp:nil :type
                         (common-lisp:or nesting-level-value common-lisp:null)
                         :accessor struct-shape-mongo-db-settings-nesting-level
                         :shape "NestingLevelValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extract-doc-id :initarg :extract-doc-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-extract-doc-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (docs-to-investigate :initarg :docs-to-investigate
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-docs-to-investigate
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-source :initarg :auth-source :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-auth-source :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-mongo-db-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-update-look-up :initarg :use-update-look-up
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-settings-use-update-look-up
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replicate-shard-collections :initarg
                         :replicate-shard-collections :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-mongo-db-settings-replicate-shard-collections
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mongo-db-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mongo-db-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mongo-db-settings 'make-mongo-db-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mongo-db-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mongo-db-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mechanism))
      (common-lisp:list
       (common-lisp:cons "AuthMechanism"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nesting-level))
      (common-lisp:list
       (common-lisp:cons "NestingLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extract-doc-id))
      (common-lisp:list
       (common-lisp:cons "ExtractDocId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'docs-to-investigate))
      (common-lisp:list
       (common-lisp:cons "DocsToInvestigate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-source))
      (common-lisp:list
       (common-lisp:cons "AuthSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-update-look-up))
      (common-lisp:list
       (common-lisp:cons "UseUpdateLookUp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replicate-shard-collections))
      (common-lisp:list
       (common-lisp:cons "ReplicateShardCollections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mongo-db-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass move-replication-task-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-move-replication-task-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-replication-instance-arn :initarg
                         :target-replication-instance-arn :initform
                         (common-lisp:error
                          ":target-replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-move-replication-task-message-target-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-move-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'move-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'move-replication-task-message
                    'make-move-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "TargetReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass move-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-move-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-move-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'move-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'move-replication-task-response
                    'make-move-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          move-replication-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass my-sqlsettings common-lisp:nil
                       ((after-connect-script :initarg :after-connect-script
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sqlsettings-after-connect-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (clean-source-metadata-on-mismatch :initarg
                         :clean-source-metadata-on-mismatch :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-my-sqlsettings-clean-source-metadata-on-mismatch
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sqlsettings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events-poll-interval :initarg :events-poll-interval
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-my-sqlsettings-events-poll-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-db-type :initarg :target-db-type :initform
                         common-lisp:nil :type
                         (common-lisp:or target-db-type common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-target-db-type
                         :shape "TargetDbType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-max-file-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parallel-load-threads :initarg :parallel-load-threads
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-my-sqlsettings-parallel-load-threads
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sqlsettings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-timezone :initarg :server-timezone :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sqlsettings-server-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sqlsettings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-my-sqlsettings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execute-timeout :initarg :execute-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-my-sqlsettings-execute-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-my-sqlsettings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'my-sqlsettings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'my-sqlsettings 'make-my-sqlsettings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sqlsettings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sqlsettings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-connect-script))
      (common-lisp:list
       (common-lisp:cons "AfterConnectScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clean-source-metadata-on-mismatch))
      (common-lisp:list
       (common-lisp:cons "CleanSourceMetadataOnMismatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'events-poll-interval))
      (common-lisp:list
       (common-lisp:cons "EventsPollInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-db-type))
      (common-lisp:list
       (common-lisp:cons "TargetDbType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-load-threads))
      (common-lisp:list
       (common-lisp:cons "ParallelLoadThreads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-timezone))
      (common-lisp:list
       (common-lisp:cons "ServerTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-timeout))
      (common-lisp:list
       (common-lisp:cons "ExecuteTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sqlsettings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass my-sql-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sql-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-my-sql-data-provider-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-my-sql-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-my-sql-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-my-sql-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'my-sql-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'my-sql-data-provider-settings
                    'make-my-sql-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          my-sql-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          my-sql-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          my-sql-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass neptune-settings common-lisp:nil
                       ((service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-neptune-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-neptune-settings-s3bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-folder :initarg :s3bucket-folder :initform
                         (common-lisp:error ":s3bucket-folder is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-neptune-settings-s3bucket-folder :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-retry-duration :initarg :error-retry-duration
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-neptune-settings-error-retry-duration
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-neptune-settings-max-file-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-retry-count :initarg :max-retry-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-neptune-settings-max-retry-count :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-auth-enabled :initarg :iam-auth-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-neptune-settings-iam-auth-enabled :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-neptune-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'neptune-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'neptune-settings 'make-neptune-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input neptune-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input neptune-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-folder))
      (common-lisp:list
       (common-lisp:cons "S3BucketFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-retry-duration))
      (common-lisp:list
       (common-lisp:cons "ErrorRetryDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retry-count))
      (common-lisp:list
       (common-lisp:cons "MaxRetryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-auth-enabled))
      (common-lisp:list
       (common-lisp:cons "IamAuthEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input neptune-settings))
   common-lisp:nil))
(common-lisp:deftype nesting-level-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass oracle-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-data-provider-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-oracle-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asm-server :initarg :asm-server :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-asm-server
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-oracle-asm-secret-id :initarg
                         :secrets-manager-oracle-asm-secret-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-secrets-manager-oracle-asm-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-oracle-asm-access-role-arn :initarg
                         :secrets-manager-oracle-asm-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-secrets-manager-oracle-asm-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-security-db-encryption-secret-id
                         :initarg
                         :secrets-manager-security-db-encryption-secret-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-secrets-manager-security-db-encryption-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-security-db-encryption-access-role-arn
                         :initarg
                         :secrets-manager-security-db-encryption-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-data-provider-settings-secrets-manager-security-db-encryption-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oracle-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'oracle-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oracle-data-provider-settings
                    'make-oracle-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oracle-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oracle-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asm-server))
      (common-lisp:list
       (common-lisp:cons "AsmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-oracle-asm-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerOracleAsmSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-oracle-asm-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerOracleAsmAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-security-db-encryption-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecurityDbEncryptionSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-security-db-encryption-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecurityDbEncryptionAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oracle-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oracle-settings common-lisp:nil
                       ((add-supplemental-logging :initarg
                         :add-supplemental-logging :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-add-supplemental-logging
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (archived-log-dest-id :initarg :archived-log-dest-id
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-archived-log-dest-id
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-archived-log-dest-id :initarg
                         :additional-archived-log-dest-id :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-additional-archived-log-dest-id
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-archived-log-dest-ids :initarg
                         :extra-archived-log-dest-ids :initform common-lisp:nil
                         :type (common-lisp:or integer-list common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-extra-archived-log-dest-ids
                         :shape "IntegerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-select-nested-tables :initarg
                         :allow-select-nested-tables :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-allow-select-nested-tables
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parallel-asm-read-threads :initarg
                         :parallel-asm-read-threads :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-parallel-asm-read-threads
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-ahead-blocks :initarg :read-ahead-blocks
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-read-ahead-blocks :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-alternate-directly :initarg
                         :access-alternate-directly :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-access-alternate-directly
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-alternate-folder-for-online :initarg
                         :use-alternate-folder-for-online :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-use-alternate-folder-for-online
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-path-prefix :initarg :oracle-path-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-oracle-path-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-path-prefix :initarg :use-path-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-use-path-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replace-path-prefix :initarg :replace-path-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-replace-path-prefix
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-homogenous-tablespace :initarg
                         :enable-homogenous-tablespace :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-enable-homogenous-tablespace
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-path-no-log :initarg :direct-path-no-log
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-direct-path-no-log :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (archived-logs-only :initarg :archived-logs-only
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-archived-logs-only :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asm-password :initarg :asm-password :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-oracle-settings-asm-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asm-server :initarg :asm-server :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-asm-server :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asm-user :initarg :asm-user :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-oracle-settings-asm-user :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (char-length-semantics :initarg :char-length-semantics
                         :initform common-lisp:nil :type
                         (common-lisp:or char-length-semantics
                                         common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-char-length-semantics
                         :shape "CharLengthSemantics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (direct-path-parallel-load :initarg
                         :direct-path-parallel-load :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-direct-path-parallel-load
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fail-tasks-on-lob-truncation :initarg
                         :fail-tasks-on-lob-truncation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-fail-tasks-on-lob-truncation
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-datatype-scale :initarg :number-datatype-scale
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-number-datatype-scale
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-oracle-settings-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-oracle-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (read-table-space-name :initarg :read-table-space-name
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-read-table-space-name
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-interval :initarg :retry-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-oracle-settings-retry-interval
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-db-encryption :initarg
                         :security-db-encryption :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-security-db-encryption
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-db-encryption-name :initarg
                         :security-db-encryption-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-security-db-encryption-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (spatial-data-option-to-geo-json-function-name :initarg
                         :spatial-data-option-to-geo-json-function-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-spatial-data-option-to-geo-json-function-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (standby-delay-time :initarg :standby-delay-time
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-standby-delay-time :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-oracle-settings-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-bfile :initarg :use-bfile :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-oracle-settings-use-bfile
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-direct-path-full-load :initarg
                         :use-direct-path-full-load :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-use-direct-path-full-load
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-logminer-reader :initarg :use-logminer-reader
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-use-logminer-reader
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-oracle-asm-access-role-arn :initarg
                         :secrets-manager-oracle-asm-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-secrets-manager-oracle-asm-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-oracle-asm-secret-id :initarg
                         :secrets-manager-oracle-asm-secret-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-oracle-settings-secrets-manager-oracle-asm-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trim-space-in-char :initarg :trim-space-in-char
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-trim-space-in-char :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (convert-timestamp-with-zone-to-utc :initarg
                         :convert-timestamp-with-zone-to-utc :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-convert-timestamp-with-zone-to-utc
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-transaction-window :initarg
                         :open-transaction-window :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-oracle-settings-open-transaction-window
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oracle-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'oracle-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'oracle-settings 'make-oracle-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oracle-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oracle-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-supplemental-logging))
      (common-lisp:list
       (common-lisp:cons "AddSupplementalLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archived-log-dest-id))
      (common-lisp:list
       (common-lisp:cons "ArchivedLogDestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-archived-log-dest-id))
      (common-lisp:list
       (common-lisp:cons "AdditionalArchivedLogDestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-archived-log-dest-ids))
      (common-lisp:list
       (common-lisp:cons "ExtraArchivedLogDestIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-select-nested-tables))
      (common-lisp:list
       (common-lisp:cons "AllowSelectNestedTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallel-asm-read-threads))
      (common-lisp:list
       (common-lisp:cons "ParallelAsmReadThreads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-ahead-blocks))
      (common-lisp:list
       (common-lisp:cons "ReadAheadBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-alternate-directly))
      (common-lisp:list
       (common-lisp:cons "AccessAlternateDirectly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-alternate-folder-for-online))
      (common-lisp:list
       (common-lisp:cons "UseAlternateFolderForOnline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oracle-path-prefix))
      (common-lisp:list
       (common-lisp:cons "OraclePathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-path-prefix))
      (common-lisp:list
       (common-lisp:cons "UsePathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-path-prefix))
      (common-lisp:list
       (common-lisp:cons "ReplacePathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-homogenous-tablespace))
      (common-lisp:list
       (common-lisp:cons "EnableHomogenousTablespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-path-no-log))
      (common-lisp:list
       (common-lisp:cons "DirectPathNoLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archived-logs-only))
      (common-lisp:list
       (common-lisp:cons "ArchivedLogsOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asm-password))
      (common-lisp:list
       (common-lisp:cons "AsmPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asm-server))
      (common-lisp:list
       (common-lisp:cons "AsmServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asm-user))
      (common-lisp:list
       (common-lisp:cons "AsmUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'char-length-semantics))
      (common-lisp:list
       (common-lisp:cons "CharLengthSemantics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-path-parallel-load))
      (common-lisp:list
       (common-lisp:cons "DirectPathParallelLoad"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fail-tasks-on-lob-truncation))
      (common-lisp:list
       (common-lisp:cons "FailTasksOnLobTruncation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-datatype-scale))
      (common-lisp:list
       (common-lisp:cons "NumberDatatypeScale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'read-table-space-name))
      (common-lisp:list
       (common-lisp:cons "ReadTableSpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval))
      (common-lisp:list
       (common-lisp:cons "RetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-db-encryption))
      (common-lisp:list
       (common-lisp:cons "SecurityDbEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-db-encryption-name))
      (common-lisp:list
       (common-lisp:cons "SecurityDbEncryptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-data-option-to-geo-json-function-name))
      (common-lisp:list
       (common-lisp:cons "SpatialDataOptionToGeoJsonFunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standby-delay-time))
      (common-lisp:list
       (common-lisp:cons "StandbyDelayTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-bfile))
      (common-lisp:list
       (common-lisp:cons "UseBFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-direct-path-full-load))
      (common-lisp:list
       (common-lisp:cons "UseDirectPathFullLoad"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-logminer-reader))
      (common-lisp:list
       (common-lisp:cons "UseLogminerReader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-oracle-asm-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerOracleAsmAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-oracle-asm-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerOracleAsmSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trim-space-in-char))
      (common-lisp:list
       (common-lisp:cons "TrimSpaceInChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'convert-timestamp-with-zone-to-utc))
      (common-lisp:list
       (common-lisp:cons "ConvertTimestampWithZoneToUTC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-transaction-window))
      (common-lisp:list
       (common-lisp:cons "OpenTransactionWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oracle-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass orderable-replication-instance common-lisp:nil
                       ((engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-replication-instance-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-class :initarg
                         :replication-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-orderable-replication-instance-replication-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-orderable-replication-instance-storage-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (min-allocated-storage :initarg :min-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-orderable-replication-instance-min-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-allocated-storage :initarg :max-allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-orderable-replication-instance-max-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-allocated-storage :initarg
                         :default-allocated-storage :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-orderable-replication-instance-default-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (included-allocated-storage :initarg
                         :included-allocated-storage :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-orderable-replication-instance-included-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zones-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-replication-instance-availability-zones
                         :shape "AvailabilityZonesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (release-status :initarg :release-status :initform
                         common-lisp:nil :type
                         (common-lisp:or release-status-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-orderable-replication-instance-release-status
                         :shape "ReleaseStatusValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-orderable-replication-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'orderable-replication-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'orderable-replication-instance
                    'make-orderable-replication-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          orderable-replication-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          orderable-replication-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-class))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MinAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "MaxAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "DefaultAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-allocated-storage))
      (common-lisp:list
       (common-lisp:cons "IncludedAllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-status))
      (common-lisp:list
       (common-lisp:cons "ReleaseStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          orderable-replication-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orderable-replication-instance-list ()
   '(trivial-types:proper-list orderable-replication-instance))
 (common-lisp:defun make-orderable-replication-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orderable-replication-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype origin-type-value () 'common-lisp:string)
(common-lisp:deftype parquet-version-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pending-maintenance-action common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-action :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auto-applied-after-date :initarg
                         :auto-applied-after-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-pending-maintenance-action-auto-applied-after-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (forced-apply-date :initarg :forced-apply-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-forced-apply-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (opt-in-status :initarg :opt-in-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-opt-in-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-apply-date :initarg :current-apply-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-current-apply-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pending-maintenance-action-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-maintenance-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-maintenance-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-applied-after-date))
      (common-lisp:list
       (common-lisp:cons "AutoAppliedAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forced-apply-date))
      (common-lisp:list
       (common-lisp:cons "ForcedApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opt-in-status))
      (common-lisp:list
       (common-lisp:cons "OptInStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "CurrentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-details ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun make-pending-maintenance-action-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-actions ()
   '(trivial-types:proper-list resource-pending-maintenance-actions))
 (common-lisp:defun make-pending-maintenance-actions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-pending-maintenance-actions))
   aws-sdk/generator/shape::members))
(common-lisp:deftype plugin-name-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass postgre-sqlsettings common-lisp:nil
                       ((after-connect-script :initarg :after-connect-script
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-after-connect-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (capture-ddls :initarg :capture-ddls :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-capture-ddls :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-max-file-size :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ddl-artifacts-schema :initarg :ddl-artifacts-schema
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-ddl-artifacts-schema
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execute-timeout :initarg :execute-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-execute-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fail-tasks-on-lob-truncation :initarg
                         :fail-tasks-on-lob-truncation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-fail-tasks-on-lob-truncation
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (heartbeat-enable :initarg :heartbeat-enable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-heartbeat-enable
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (heartbeat-schema :initarg :heartbeat-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-heartbeat-schema
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (heartbeat-frequency :initarg :heartbeat-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-heartbeat-frequency
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-postgre-sqlsettings-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-postgre-sqlsettings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-postgre-sqlsettings-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (slot-name :initarg :slot-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-slot-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (plugin-name :initarg :plugin-name :initform
                         common-lisp:nil :type
                         (common-lisp:or plugin-name-value common-lisp:null)
                         :accessor struct-shape-postgre-sqlsettings-plugin-name
                         :shape "PluginNameValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sqlsettings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trim-space-in-char :initarg :trim-space-in-char
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-trim-space-in-char
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-boolean-as-boolean :initarg
                         :map-boolean-as-boolean :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-map-boolean-as-boolean
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-jsonb-as-clob :initarg :map-jsonb-as-clob
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-map-jsonb-as-clob
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-long-varchar-as :initarg :map-long-varchar-as
                         :initform common-lisp:nil :type
                         (common-lisp:or long-varchar-mapping-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-map-long-varchar-as
                         :shape "LongVarcharMappingType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-mode :initarg :database-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or database-mode common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-database-mode :shape
                         "DatabaseMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (babelfish-database-name :initarg
                         :babelfish-database-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlsettings-babelfish-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-postgre-sqlsettings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'postgre-sqlsettings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'postgre-sqlsettings 'make-postgre-sqlsettings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input postgre-sqlsettings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input postgre-sqlsettings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-connect-script))
      (common-lisp:list
       (common-lisp:cons "AfterConnectScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-ddls))
      (common-lisp:list
       (common-lisp:cons "CaptureDdls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ddl-artifacts-schema))
      (common-lisp:list
       (common-lisp:cons "DdlArtifactsSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-timeout))
      (common-lisp:list
       (common-lisp:cons "ExecuteTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fail-tasks-on-lob-truncation))
      (common-lisp:list
       (common-lisp:cons "FailTasksOnLobTruncation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-enable))
      (common-lisp:list
       (common-lisp:cons "HeartbeatEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-schema))
      (common-lisp:list
       (common-lisp:cons "HeartbeatSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-frequency))
      (common-lisp:list
       (common-lisp:cons "HeartbeatFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-name))
      (common-lisp:list
       (common-lisp:cons "SlotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-name))
      (common-lisp:list
       (common-lisp:cons "PluginName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trim-space-in-char))
      (common-lisp:list
       (common-lisp:cons "TrimSpaceInChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-boolean-as-boolean))
      (common-lisp:list
       (common-lisp:cons "MapBooleanAsBoolean"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-jsonb-as-clob))
      (common-lisp:list
       (common-lisp:cons "MapJsonbAsClob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-long-varchar-as))
      (common-lisp:list
       (common-lisp:cons "MapLongVarcharAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-mode))
      (common-lisp:list
       (common-lisp:cons "DatabaseMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'babelfish-database-name))
      (common-lisp:list
       (common-lisp:cons "BabelfishDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input postgre-sqlsettings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass postgre-sql-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sql-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-postgre-sql-data-provider-settings-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sql-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-mode :initarg :ssl-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or dms-ssl-mode-value common-lisp:null)
                         :accessor
                         struct-shape-postgre-sql-data-provider-settings-ssl-mode
                         :shape "DmsSslModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-postgre-sql-data-provider-settings-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-postgre-sql-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'postgre-sql-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'postgre-sql-data-provider-settings
                    'make-postgre-sql-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssl-mode))
      (common-lisp:list
       (common-lisp:cons "SslMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sql-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass provision-data common-lisp:nil
                       ((provision-state :initarg :provision-state :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-provision-data-provision-state :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provisioned-capacity-units :initarg
                         :provisioned-capacity-units :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-provision-data-provisioned-capacity-units
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-provisioned :initarg :date-provisioned :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-provision-data-date-provisioned :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-new-provisioning-available :initarg
                         :is-new-provisioning-available :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-provision-data-is-new-provisioning-available
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-new-provisioning-data-available :initarg
                         :date-new-provisioning-data-available :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-provision-data-date-new-provisioning-data-available
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reason-for-new-provisioning-data :initarg
                         :reason-for-new-provisioning-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-provision-data-reason-for-new-provisioning-data
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-provision-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'provision-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'provision-data 'make-provision-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provision-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provision-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provision-state))
      (common-lisp:list
       (common-lisp:cons "ProvisionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-capacity-units))
      (common-lisp:list
       (common-lisp:cons "ProvisionedCapacityUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-provisioned))
      (common-lisp:list
       (common-lisp:cons "DateProvisioned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-new-provisioning-available))
      (common-lisp:list
       (common-lisp:cons "IsNewProvisioningAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-new-provisioning-data-available))
      (common-lisp:list
       (common-lisp:cons "DateNewProvisioningDataAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reason-for-new-provisioning-data))
      (common-lisp:list
       (common-lisp:cons "ReasonForNewProvisioningData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provision-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-configuration common-lisp:nil
                       ((engine-edition :initarg :engine-edition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-configuration-engine-edition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-configuration-instance-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-vcpu :initarg :instance-vcpu :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor struct-shape-rds-configuration-instance-vcpu
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-memory :initarg :instance-memory :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-rds-configuration-instance-memory :shape
                         "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type :initarg :storage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-configuration-storage-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-size :initarg :storage-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-rds-configuration-storage-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-iops :initarg :storage-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-rds-configuration-storage-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-option :initarg :deployment-option
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-configuration-deployment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-configuration-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-configuration 'make-rds-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-edition))
      (common-lisp:list
       (common-lisp:cons "EngineEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-vcpu))
      (common-lisp:list
       (common-lisp:cons "InstanceVcpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-memory))
      (common-lisp:list
       (common-lisp:cons "InstanceMemory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "StorageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-size))
      (common-lisp:list
       (common-lisp:cons "StorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-iops))
      (common-lisp:list
       (common-lisp:cons "StorageIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "DeploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-recommendation common-lisp:nil
                       ((requirements-to-target :initarg
                         :requirements-to-target :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-requirements common-lisp:null)
                         :accessor
                         struct-shape-rds-recommendation-requirements-to-target
                         :shape "RdsRequirements" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-configuration :initarg :target-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or rds-configuration common-lisp:null)
                         :accessor
                         struct-shape-rds-recommendation-target-configuration
                         :shape "RdsConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-recommendation 'make-rds-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requirements-to-target))
      (common-lisp:list
       (common-lisp:cons "RequirementsToTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-requirements common-lisp:nil
                       ((engine-edition :initarg :engine-edition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-requirements-engine-edition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (instance-vcpu :initarg :instance-vcpu :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor struct-shape-rds-requirements-instance-vcpu
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-memory :initarg :instance-memory :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor
                         struct-shape-rds-requirements-instance-memory :shape
                         "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-size :initarg :storage-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-rds-requirements-storage-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-iops :initarg :storage-iops :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-rds-requirements-storage-iops
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-option :initarg :deployment-option
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-requirements-deployment-option :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-requirements-engine-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-requirements
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-requirements
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-requirements 'make-rds-requirements))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rds-requirements))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rds-requirements))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-edition))
      (common-lisp:list
       (common-lisp:cons "EngineEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-vcpu))
      (common-lisp:list
       (common-lisp:cons "InstanceVcpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-memory))
      (common-lisp:list
       (common-lisp:cons "InstanceMemory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-size))
      (common-lisp:list
       (common-lisp:cons "StorageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-iops))
      (common-lisp:list
       (common-lisp:cons "StorageIops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "DeploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rds-requirements))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-replication-instance-message common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reboot-replication-instance-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-failover :initarg :force-failover :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-reboot-replication-instance-message-force-failover
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (force-planned-failover :initarg
                         :force-planned-failover :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-reboot-replication-instance-message-force-planned-failover
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-replication-instance-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reboot-replication-instance-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-replication-instance-message
                    'make-reboot-replication-instance-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-failover))
      (common-lisp:list
       (common-lisp:cons "ForceFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-planned-failover))
      (common-lisp:list
       (common-lisp:cons "ForcePlannedFailover"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-replication-instance-response common-lisp:nil
                       ((replication-instance :initarg :replication-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-instance common-lisp:null)
                         :accessor
                         struct-shape-reboot-replication-instance-response-replication-instance
                         :shape "ReplicationInstance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reboot-replication-instance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reboot-replication-instance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reboot-replication-instance-response
                    'make-reboot-replication-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-replication-instance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-database-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-engine-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-date :initarg :created-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-created-date :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-recommendation-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preferred :initarg :preferred :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-recommendation-preferred :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or recommendation-settings
                                         common-lisp:null)
                         :accessor struct-shape-recommendation-settings :shape
                         "RecommendationSettings" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or recommendation-data common-lisp:null)
                         :accessor struct-shape-recommendation-data :shape
                         "RecommendationData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preferred))
      (common-lisp:list
       (common-lisp:cons "Preferred"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation-data common-lisp:nil
                       ((rds-engine :initarg :rds-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-recommendation common-lisp:null)
                         :accessor struct-shape-recommendation-data-rds-engine
                         :shape "RdsRecommendation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-data 'make-recommendation-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-engine))
      (common-lisp:list
       (common-lisp:cons "RdsEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommendation-settings common-lisp:nil
                       ((instance-sizing-type :initarg :instance-sizing-type
                         :initform
                         (common-lisp:error
                          ":instance-sizing-type is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-settings-instance-sizing-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workload-type :initarg :workload-type :initform
                         (common-lisp:error ":workload-type is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-settings-workload-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-settings 'make-recommendation-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-sizing-type))
      (common-lisp:list
       (common-lisp:cons "InstanceSizingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-type))
      (common-lisp:list
       (common-lisp:cons "WorkloadType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-settings))
   common-lisp:nil))
(common-lisp:deftype redis-auth-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass redis-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         (common-lisp:error ":server-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redis-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (port :initarg :port :initform
                         (common-lisp:error ":port is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-redis-settings-port :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ssl-security-protocol :initarg :ssl-security-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or ssl-security-protocol-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-redis-settings-ssl-security-protocol
                         :shape "SslSecurityProtocolValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-type :initarg :auth-type :initform
                         common-lisp:nil :type
                         (common-lisp:or redis-auth-type-value
                                         common-lisp:null)
                         :accessor struct-shape-redis-settings-auth-type :shape
                         "RedisAuthTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-user-name :initarg :auth-user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redis-settings-auth-user-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (auth-password :initarg :auth-password :initform
                         common-lisp:nil :type
                         (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-redis-settings-auth-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ssl-ca-certificate-arn :initarg
                         :ssl-ca-certificate-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redis-settings-ssl-ca-certificate-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redis-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redis-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'redis-settings 'make-redis-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redis-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redis-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-security-protocol))
      (common-lisp:list
       (common-lisp:cons "SslSecurityProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-type))
      (common-lisp:list
       (common-lisp:cons "AuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-user-name))
      (common-lisp:list
       (common-lisp:cons "AuthUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-password))
      (common-lisp:list
       (common-lisp:cons "AuthPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssl-ca-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "SslCaCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redis-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-data-provider-settings common-lisp:nil
                       ((server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-data-provider-settings-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-data-provider-settings-port
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-data-provider-settings-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-data-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-data-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-data-provider-settings
                    'make-redshift-data-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-data-provider-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-settings common-lisp:nil
                       ((accept-any-date :initarg :accept-any-date :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-accept-any-date :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (after-connect-script :initarg :after-connect-script
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-after-connect-script
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-folder :initarg :bucket-folder :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-bucket-folder :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (case-sensitive-names :initarg :case-sensitive-names
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-case-sensitive-names
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comp-update :initarg :comp-update :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-comp-update
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-timeout :initarg :connection-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-connection-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-format :initarg :date-format :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-date-format :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (empty-as-null :initarg :empty-as-null :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-empty-as-null
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-encryption-mode :shape
                         "EncryptionModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (explicit-ids :initarg :explicit-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-explicit-ids
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-transfer-upload-streams :initarg
                         :file-transfer-upload-streams :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-file-transfer-upload-streams
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (load-timeout :initarg :load-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-load-timeout
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-max-file-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-redshift-settings-password
                         :shape "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-quotes :initarg :remove-quotes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-remove-quotes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replace-invalid-chars :initarg :replace-invalid-chars
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-replace-invalid-chars
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replace-chars :initarg :replace-chars :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-replace-chars :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-side-encryption-kms-key-id :initarg
                         :server-side-encryption-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-server-side-encryption-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-format :initarg :time-format :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-time-format :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trim-blanks :initarg :trim-blanks :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-redshift-settings-trim-blanks
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (truncate-columns :initarg :truncate-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-truncate-columns :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-redshift-settings-username
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-buffer-size :initarg :write-buffer-size
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-write-buffer-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (map-boolean-as-boolean :initarg
                         :map-boolean-as-boolean :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-redshift-settings-map-boolean-as-boolean
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-settings 'make-redshift-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-any-date))
      (common-lisp:list
       (common-lisp:cons "AcceptAnyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'after-connect-script))
      (common-lisp:list
       (common-lisp:cons "AfterConnectScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-folder))
      (common-lisp:list
       (common-lisp:cons "BucketFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'case-sensitive-names))
      (common-lisp:list
       (common-lisp:cons "CaseSensitiveNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comp-update))
      (common-lisp:list
       (common-lisp:cons "CompUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-timeout))
      (common-lisp:list
       (common-lisp:cons "ConnectionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-format))
      (common-lisp:list
       (common-lisp:cons "DateFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty-as-null))
      (common-lisp:list
       (common-lisp:cons "EmptyAsNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "EncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explicit-ids))
      (common-lisp:list
       (common-lisp:cons "ExplicitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-transfer-upload-streams))
      (common-lisp:list
       (common-lisp:cons "FileTransferUploadStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-timeout))
      (common-lisp:list
       (common-lisp:cons "LoadTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-quotes))
      (common-lisp:list
       (common-lisp:cons "RemoveQuotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-invalid-chars))
      (common-lisp:list
       (common-lisp:cons "ReplaceInvalidChars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-chars))
      (common-lisp:list
       (common-lisp:cons "ReplaceChars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-format))
      (common-lisp:list
       (common-lisp:cons "TimeFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trim-blanks))
      (common-lisp:list
       (common-lisp:cons "TrimBlanks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncate-columns))
      (common-lisp:list
       (common-lisp:cons "TruncateColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-buffer-size))
      (common-lisp:list
       (common-lisp:cons "WriteBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'map-boolean-as-boolean))
      (common-lisp:list
       (common-lisp:cons "MapBooleanAsBoolean"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-schemas-message common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-refresh-schemas-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-refresh-schemas-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-refresh-schemas-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-schemas-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'refresh-schemas-message 'make-refresh-schemas-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-schemas-response common-lisp:nil
                       ((refresh-schemas-status :initarg
                         :refresh-schemas-status :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-schemas-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-refresh-schemas-response-refresh-schemas-status
                         :shape "RefreshSchemasStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-refresh-schemas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-schemas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'refresh-schemas-response 'make-refresh-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'refresh-schemas-status))
      (common-lisp:list
       (common-lisp:cons "RefreshSchemasStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-schemas-status common-lisp:nil
                       ((endpoint-arn :initarg :endpoint-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-refresh-schemas-status-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-refresh-schemas-status-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or refresh-schemas-status-type-value
                                         common-lisp:null)
                         :accessor struct-shape-refresh-schemas-status-status
                         :shape "RefreshSchemasStatusTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-refresh-date :initarg :last-refresh-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-refresh-schemas-status-last-refresh-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-refresh-schemas-status-last-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-refresh-schemas-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'refresh-schemas-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'refresh-schemas-status 'make-refresh-schemas-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-refresh-date))
      (common-lisp:list
       (common-lisp:cons "LastRefreshDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-schemas-status))
   common-lisp:nil))
(common-lisp:deftype refresh-schemas-status-type-value () 'common-lisp:string)
(common-lisp:deftype release-status-values () 'common-lisp:string)
(common-lisp:deftype reload-option-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reload-replication-tables-message common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reload-replication-tables-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-to-reload :initarg :tables-to-reload :initform
                         (common-lisp:error ":tables-to-reload is required")
                         :type
                         (common-lisp:or table-list-to-reload common-lisp:null)
                         :accessor
                         struct-shape-reload-replication-tables-message-tables-to-reload
                         :shape "TableListToReload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reload-option :initarg :reload-option :initform
                         common-lisp:nil :type
                         (common-lisp:or reload-option-value common-lisp:null)
                         :accessor
                         struct-shape-reload-replication-tables-message-reload-option
                         :shape "ReloadOptionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reload-replication-tables-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reload-replication-tables-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reload-replication-tables-message
                    'make-reload-replication-tables-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-to-reload))
      (common-lisp:list
       (common-lisp:cons "TablesToReload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reload-option))
      (common-lisp:list
       (common-lisp:cons "ReloadOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reload-replication-tables-response common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reload-replication-tables-response-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reload-replication-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reload-replication-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reload-replication-tables-response
                    'make-reload-replication-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reload-replication-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reload-tables-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-reload-tables-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-to-reload :initarg :tables-to-reload :initform
                         (common-lisp:error ":tables-to-reload is required")
                         :type
                         (common-lisp:or table-list-to-reload common-lisp:null)
                         :accessor
                         struct-shape-reload-tables-message-tables-to-reload
                         :shape "TableListToReload" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reload-option :initarg :reload-option :initform
                         common-lisp:nil :type
                         (common-lisp:or reload-option-value common-lisp:null)
                         :accessor
                         struct-shape-reload-tables-message-reload-option
                         :shape "ReloadOptionValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reload-tables-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reload-tables-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reload-tables-message 'make-reload-tables-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-to-reload))
      (common-lisp:list
       (common-lisp:cons "TablesToReload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reload-option))
      (common-lisp:list
       (common-lisp:cons "ReloadOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reload-tables-response common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reload-tables-response-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reload-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reload-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reload-tables-response 'make-reload-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reload-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-message common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         struct-shape-remove-tags-from-resource-message-tag-keys
                         :shape "KeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-from-resource-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-message
                    'make-remove-tags-from-resource-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-from-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-response
                    'make-remove-tags-from-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication common-lisp:nil
                       ((replication-config-identifier :initarg
                         :replication-config-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-replication-config-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-config-arn :initarg
                         :replication-config-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-replication-config-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-source-endpoint-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-target-endpoint-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor struct-shape-replication-replication-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-replication-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provision-data :initarg :provision-data :initform
                         common-lisp:nil :type
                         (common-lisp:or provision-data common-lisp:null)
                         :accessor struct-shape-replication-provision-data
                         :shape "ProvisionData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-reason :initarg :stop-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-stop-reason :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-messages :initarg :failure-messages :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-replication-failure-messages
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-stats :initarg :replication-stats
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-stats common-lisp:null)
                         :accessor struct-shape-replication-replication-stats
                         :shape "ReplicationStats" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-replication-type :initarg
                         :start-replication-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-start-replication-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cdc-start-time :initarg :cdc-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-cdc-start-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-cdc-start-position :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-cdc-stop-position :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recovery-checkpoint :initarg :recovery-checkpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-recovery-checkpoint :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-create-time :initarg
                         :replication-create-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-replication-replication-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-update-time :initarg
                         :replication-update-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-replication-replication-update-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-last-stop-time :initarg
                         :replication-last-stop-time :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-replication-replication-last-stop-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-deprovision-time :initarg
                         :replication-deprovision-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-replication-deprovision-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'replication 'make-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "ReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provision-data))
      (common-lisp:list
       (common-lisp:cons "ProvisionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-reason))
      (common-lisp:list
       (common-lisp:cons "StopReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-messages))
      (common-lisp:list
       (common-lisp:cons "FailureMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-stats))
      (common-lisp:list
       (common-lisp:cons "ReplicationStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-replication-type))
      (common-lisp:list
       (common-lisp:cons "StartReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-time))
      (common-lisp:list
       (common-lisp:cons "CdcStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-checkpoint))
      (common-lisp:list
       (common-lisp:cons "RecoveryCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-create-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-update-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-last-stop-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationLastStopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-deprovision-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationDeprovisionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-config common-lisp:nil
                       ((replication-config-identifier :initarg
                         :replication-config-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-replication-config-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-config-arn :initarg
                         :replication-config-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-config-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-source-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-target-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-type :initarg :replication-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor
                         struct-shape-replication-config-replication-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-config :initarg :compute-config :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-config common-lisp:null)
                         :accessor
                         struct-shape-replication-config-compute-config :shape
                         "ComputeConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-settings :initarg :replication-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-replication-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supplemental-settings :initarg :supplemental-settings
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-supplemental-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-config-table-mappings :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-config-create-time :initarg
                         :replication-config-create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-config-replication-config-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-config-update-time :initarg
                         :replication-config-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-config-replication-config-update-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-config 'make-replication-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-type))
      (common-lisp:list
       (common-lisp:cons "ReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-config))
      (common-lisp:list
       (common-lisp:cons "ComputeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplemental-settings))
      (common-lisp:list
       (common-lisp:cons "SupplementalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-create-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-update-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-config-list ()
   '(trivial-types:proper-list replication-config))
 (common-lisp:defun make-replication-config-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-endpoint-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-instance common-lisp:nil
                       ((replication-instance-identifier :initarg
                         :replication-instance-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-replication-instance-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-class :initarg
                         :replication-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-status :initarg
                         :replication-instance-status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-instance-allocated-storage
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-create-time :initarg :instance-create-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-instance-instance-create-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-security-groups :initarg :vpc-security-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-security-group-membership-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-vpc-security-groups
                         :shape "VpcSecurityGroupMembershipList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group :initarg
                         :replication-subnet-group :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-subnet-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-subnet-group
                         :shape "ReplicationSubnetGroup" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (preferred-maintenance-window :initarg
                         :preferred-maintenance-window :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-preferred-maintenance-window
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-modified-values :initarg
                         :pending-modified-values :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-pending-modified-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-pending-modified-values
                         :shape "ReplicationPendingModifiedValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-replication-instance-multi-az
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-minor-version-upgrade :initarg
                         :auto-minor-version-upgrade :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-auto-minor-version-upgrade
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-kms-key-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-public-ip-address :initarg
                         :replication-instance-public-ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-replication-instance-public-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-private-ip-address :initarg
                         :replication-instance-private-ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-replication-instance-private-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-public-ip-addresses :initarg
                         :replication-instance-public-ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-instance-public-ip-address-list
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-public-ip-addresses
                         :shape "ReplicationInstancePublicIpAddressList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-instance-private-ip-addresses :initarg
                         :replication-instance-private-ip-addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          replication-instance-private-ip-address-list
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-private-ip-addresses
                         :shape "ReplicationInstancePrivateIpAddressList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-instance-ipv6addresses :initarg
                         :replication-instance-ipv6addresses :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-instance-ipv6address-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-replication-instance-ipv6addresses
                         :shape "ReplicationInstanceIpv6AddressList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (publicly-accessible :initarg :publicly-accessible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-replication-instance-publicly-accessible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secondary-availability-zone :initarg
                         :secondary-availability-zone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-instance-secondary-availability-zone
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (free-until :initarg :free-until :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-instance-free-until :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name-servers :initarg :dns-name-servers :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-dns-name-servers
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-network-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-instance 'make-replication-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-class))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-status))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-create-time))
      (common-lisp:list
       (common-lisp:cons "InstanceCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "PreferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "PendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-minor-version-upgrade))
      (common-lisp:list
       (common-lisp:cons "AutoMinorVersionUpgrade"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-public-ip-address))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstancePublicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-private-ip-address))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstancePrivateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-public-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstancePublicIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstancePrivateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceIpv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "PubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SecondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-until))
      (common-lisp:list
       (common-lisp:cons "FreeUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name-servers))
      (common-lisp:list
       (common-lisp:cons "DnsNameServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-instance-ipv6address-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-replication-instance-ipv6address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-instance-list ()
   '(trivial-types:proper-list replication-instance))
 (common-lisp:defun make-replication-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-instance-private-ip-address-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-replication-instance-private-ip-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-instance-public-ip-address-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-replication-instance-public-ip-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-instance-task-log common-lisp:nil
                       ((replication-task-name :initarg :replication-task-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-task-log-replication-task-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-instance-task-log-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-task-log-size :initarg
                         :replication-instance-task-log-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-replication-instance-task-log-replication-instance-task-log-size
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-instance-task-log
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-instance-task-log
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-instance-task-log
                    'make-replication-instance-task-log))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-instance-task-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-instance-task-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-name))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-task-log-size))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceTaskLogSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-instance-task-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-instance-task-logs-list ()
   '(trivial-types:proper-list replication-instance-task-log))
 (common-lisp:defun make-replication-instance-task-logs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-instance-task-log))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-list ()
   '(trivial-types:proper-list replication))
 (common-lisp:defun make-replication-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-pending-modified-values common-lisp:nil
                       ((replication-instance-class :initarg
                         :replication-instance-class :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-pending-modified-values-replication-instance-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-storage :initarg :allocated-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-pending-modified-values-allocated-storage
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multi-az :initarg :multi-az :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-replication-pending-modified-values-multi-az
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-version :initarg :engine-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-pending-modified-values-engine-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-type :initarg :network-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-pending-modified-values-network-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-pending-modified-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-pending-modified-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-pending-modified-values
                    'make-replication-pending-modified-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-pending-modified-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-pending-modified-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-class))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-storage))
      (common-lisp:list
       (common-lisp:cons "AllocatedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-az))
      (common-lisp:list
       (common-lisp:cons "MultiAZ"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-type))
      (common-lisp:list
       (common-lisp:cons "NetworkType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-pending-modified-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-stats common-lisp:nil
                       ((full-load-progress-percent :initarg
                         :full-load-progress-percent :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-replication-stats-full-load-progress-percent
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elapsed-time-millis :initarg :elapsed-time-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-replication-stats-elapsed-time-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables-loaded :initarg :tables-loaded :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-stats-tables-loaded :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables-loading :initarg :tables-loading :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-stats-tables-loading :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables-queued :initarg :tables-queued :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-stats-tables-queued :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables-errored :initarg :tables-errored :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-stats-tables-errored :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fresh-start-date :initarg :fresh-start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-stats-fresh-start-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-stats-start-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-stats-stop-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (full-load-start-date :initarg :full-load-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-stats-full-load-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-finish-date :initarg :full-load-finish-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-stats-full-load-finish-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-stats 'make-replication-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-progress-percent))
      (common-lisp:list
       (common-lisp:cons "FullLoadProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elapsed-time-millis))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-loaded))
      (common-lisp:list
       (common-lisp:cons "TablesLoaded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-loading))
      (common-lisp:list
       (common-lisp:cons "TablesLoading"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-queued))
      (common-lisp:list
       (common-lisp:cons "TablesQueued"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-errored))
      (common-lisp:list
       (common-lisp:cons "TablesErrored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fresh-start-date))
      (common-lisp:list
       (common-lisp:cons "FreshStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "StopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-start-date))
      (common-lisp:list
       (common-lisp:cons "FullLoadStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-finish-date))
      (common-lisp:list
       (common-lisp:cons "FullLoadFinishDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-subnet-group common-lisp:nil
                       ((replication-subnet-group-identifier :initarg
                         :replication-subnet-group-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-subnet-group-replication-subnet-group-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-subnet-group-description :initarg
                         :replication-subnet-group-description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-subnet-group-replication-subnet-group-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-replication-subnet-group-vpc-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-group-status :initarg :subnet-group-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-subnet-group-subnet-group-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnets :initarg :subnets :initform common-lisp:nil
                         :type (common-lisp:or subnet-list common-lisp:null)
                         :accessor
                         struct-shape-replication-subnet-group-subnets :shape
                         "SubnetList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-network-types :initarg
                         :supported-network-types :initform common-lisp:nil
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-replication-subnet-group-supported-network-types
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-subnet-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-subnet-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-subnet-group 'make-replication-subnet-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-subnet-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-subnet-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-subnet-group-description))
      (common-lisp:list
       (common-lisp:cons "ReplicationSubnetGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-group-status))
      (common-lisp:list
       (common-lisp:cons "SubnetGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-network-types))
      (common-lisp:list
       (common-lisp:cons "SupportedNetworkTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-subnet-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition replication-subnet-group-does-not-cover-enough-azs
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       replication-subnet-group-does-not-cover-enough-azs-message)))
 (common-lisp:export
  (common-lisp:list 'replication-subnet-group-does-not-cover-enough-azs
                    'replication-subnet-group-does-not-cover-enough-azs-message)))
(common-lisp:progn
 (common-lisp:deftype replication-subnet-groups ()
   '(trivial-types:proper-list replication-subnet-group))
 (common-lisp:defun make-replication-subnet-groups
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-subnet-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-table-statistics-list ()
   '(trivial-types:proper-list table-statistics))
 (common-lisp:defun make-replication-table-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-task common-lisp:nil
                       ((replication-task-identifier :initarg
                         :replication-task-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-replication-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-endpoint-arn :initarg :source-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-source-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-endpoint-arn :initarg :target-endpoint-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-target-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-instance-arn :initarg
                         :replication-instance-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-type :initarg :migration-type :initform
                         common-lisp:nil :type
                         (common-lisp:or migration-type-value common-lisp:null)
                         :accessor struct-shape-replication-task-migration-type
                         :shape "MigrationTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-mappings :initarg :table-mappings :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-table-mappings :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-task-settings :initarg
                         :replication-task-settings :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-replication-task-settings
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-replication-task-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-last-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-reason :initarg :stop-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-stop-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-task-creation-date :initarg
                         :replication-task-creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-replication-task-creation-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-start-date :initarg
                         :replication-task-start-date :initform common-lisp:nil
                         :type (common-lisp:or tstamp common-lisp:null)
                         :accessor
                         struct-shape-replication-task-replication-task-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-cdc-start-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-cdc-stop-position :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recovery-checkpoint :initarg :recovery-checkpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-recovery-checkpoint
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-stats :initarg
                         :replication-task-stats :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-task-stats
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-task-replication-task-stats
                         :shape "ReplicationTaskStats" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-data :initarg :task-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-task-data :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-replication-instance-arn :initarg
                         :target-replication-instance-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-target-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-task
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task 'make-replication-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "SourceEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "TargetEndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'migration-type))
      (common-lisp:list
       (common-lisp:cons "MigrationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-mappings))
      (common-lisp:list
       (common-lisp:cons "TableMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-settings))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-reason))
      (common-lisp:list
       (common-lisp:cons "StopReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-creation-date))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-start-date))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-checkpoint))
      (common-lisp:list
       (common-lisp:cons "RecoveryCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-stats))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-data))
      (common-lisp:list
       (common-lisp:cons "TaskData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "TargetReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-task-assessment-result common-lisp:nil
                       ((replication-task-identifier :initarg
                         :replication-task-identifier :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-result-replication-task-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-result-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-last-assessment-date :initarg
                         :replication-task-last-assessment-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-result-replication-task-last-assessment-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-status :initarg :assessment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-result-assessment-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-results-file :initarg
                         :assessment-results-file :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-result-assessment-results-file
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-results :initarg :assessment-results
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-result-assessment-results
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3object-url :initarg :s3object-url :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-result-s3object-url
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task-assessment-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-task-assessment-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task-assessment-result
                    'make-replication-task-assessment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-identifier))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-last-assessment-date))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskLastAssessmentDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-status))
      (common-lisp:list
       (common-lisp:cons "AssessmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-results-file))
      (common-lisp:list
       (common-lisp:cons "AssessmentResultsFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-results))
      (common-lisp:list
       (common-lisp:cons "AssessmentResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-url))
      (common-lisp:list
       (common-lisp:cons "S3ObjectUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-task-assessment-result-list ()
   '(trivial-types:proper-list replication-task-assessment-result))
 (common-lisp:defun make-replication-task-assessment-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-task-assessment-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-task-assessment-run common-lisp:nil
                       ((replication-task-assessment-run-arn :initarg
                         :replication-task-assessment-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-replication-task-assessment-run-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-arn :initarg :replication-task-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-assessment-run-creation-date :initarg
                         :replication-task-assessment-run-creation-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-replication-task-assessment-run-creation-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-progress :initarg :assessment-progress
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          replication-task-assessment-run-progress
                          common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-assessment-progress
                         :shape "ReplicationTaskAssessmentRunProgress"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failure-message :initarg :last-failure-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-last-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-location-bucket :initarg
                         :result-location-bucket :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-result-location-bucket
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-location-folder :initarg
                         :result-location-folder :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-result-location-folder
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-encryption-mode :initarg
                         :result-encryption-mode :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-result-encryption-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-kms-key-arn :initarg :result-kms-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-result-kms-key-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-run-name :initarg :assessment-run-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-assessment-run-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task-assessment-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-task-assessment-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task-assessment-run
                    'make-replication-task-assessment-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run-creation-date))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRunCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-progress))
      (common-lisp:list
       (common-lisp:cons "AssessmentProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failure-message))
      (common-lisp:list
       (common-lisp:cons "LastFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-location-bucket))
      (common-lisp:list
       (common-lisp:cons "ResultLocationBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-location-folder))
      (common-lisp:list
       (common-lisp:cons "ResultLocationFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "ResultEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "ResultKmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-name))
      (common-lisp:list
       (common-lisp:cons "AssessmentRunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-task-assessment-run-list ()
   '(trivial-types:proper-list replication-task-assessment-run))
 (common-lisp:defun make-replication-task-assessment-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-task-assessment-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-task-assessment-run-progress common-lisp:nil
                       ((individual-assessment-count :initarg
                         :individual-assessment-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-replication-task-assessment-run-progress-individual-assessment-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (individual-assessment-completed-count :initarg
                         :individual-assessment-completed-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-task-assessment-run-progress-individual-assessment-completed-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task-assessment-run-progress
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-task-assessment-run-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task-assessment-run-progress
                    'make-replication-task-assessment-run-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'individual-assessment-count))
      (common-lisp:list
       (common-lisp:cons "IndividualAssessmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'individual-assessment-completed-count))
      (common-lisp:list
       (common-lisp:cons "IndividualAssessmentCompletedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-assessment-run-progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-task-individual-assessment common-lisp:nil
                       ((replication-task-individual-assessment-arn :initarg
                         :replication-task-individual-assessment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-individual-assessment-replication-task-individual-assessment-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-assessment-run-arn :initarg
                         :replication-task-assessment-run-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-replication-task-individual-assessment-replication-task-assessment-run-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (individual-assessment-name :initarg
                         :individual-assessment-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-individual-assessment-individual-assessment-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-replication-task-individual-assessment-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-task-individual-assessment-start-date
                         :initarg
                         :replication-task-individual-assessment-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-individual-assessment-replication-task-individual-assessment-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task-individual-assessment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-task-individual-assessment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task-individual-assessment
                    'make-replication-task-individual-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-individual-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-individual-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-individual-assessment-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIndividualAssessmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'individual-assessment-name))
      (common-lisp:list
       (common-lisp:cons "IndividualAssessmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-individual-assessment-start-date))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskIndividualAssessmentStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-individual-assessment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-task-individual-assessment-list ()
   '(trivial-types:proper-list replication-task-individual-assessment))
 (common-lisp:defun make-replication-task-individual-assessment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            replication-task-individual-assessment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype replication-task-list ()
   '(trivial-types:proper-list replication-task))
 (common-lisp:defun make-replication-task-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass replication-task-stats common-lisp:nil
                       ((full-load-progress-percent :initarg
                         :full-load-progress-percent :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-replication-task-stats-full-load-progress-percent
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elapsed-time-millis :initarg :elapsed-time-millis
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-replication-task-stats-elapsed-time-millis
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tables-loaded :initarg :tables-loaded :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-task-stats-tables-loaded
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-loading :initarg :tables-loading :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-task-stats-tables-loading
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-queued :initarg :tables-queued :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-task-stats-tables-queued
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-errored :initarg :tables-errored :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-replication-task-stats-tables-errored
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fresh-start-date :initarg :fresh-start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-stats-fresh-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-date :initarg :start-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-stats-start-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-date :initarg :stop-date :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-stats-stop-date :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (full-load-start-date :initarg :full-load-start-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-stats-full-load-start-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-finish-date :initarg :full-load-finish-date
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-replication-task-stats-full-load-finish-date
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-task-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-task-stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-task-stats 'make-replication-task-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-progress-percent))
      (common-lisp:list
       (common-lisp:cons "FullLoadProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'elapsed-time-millis))
      (common-lisp:list
       (common-lisp:cons "ElapsedTimeMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-loaded))
      (common-lisp:list
       (common-lisp:cons "TablesLoaded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-loading))
      (common-lisp:list
       (common-lisp:cons "TablesLoading"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-queued))
      (common-lisp:list
       (common-lisp:cons "TablesQueued"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-errored))
      (common-lisp:list
       (common-lisp:cons "TablesErrored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fresh-start-date))
      (common-lisp:list
       (common-lisp:cons "FreshStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-date))
      (common-lisp:list
       (common-lisp:cons "StopDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-start-date))
      (common-lisp:list
       (common-lisp:cons "FullLoadStartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-finish-date))
      (common-lisp:list
       (common-lisp:cons "FullLoadFinishDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-task-stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-fault-message)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-fault-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-fault
                    'resource-already-exists-fault-message
                    'resource-already-exists-fault-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-fault
                    'resource-not-found-fault-message)))
(common-lisp:progn
 (common-lisp:defclass resource-pending-maintenance-actions common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-resource-pending-maintenance-actions-resource-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-maintenance-action-details :initarg
                         :pending-maintenance-action-details :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-maintenance-action-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-pending-maintenance-actions-pending-maintenance-action-details
                         :shape "PendingMaintenanceActionDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-pending-maintenance-actions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-pending-maintenance-actions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-pending-maintenance-actions
                    'make-resource-pending-maintenance-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-action-details))
      (common-lisp:list
       (common-lisp:cons "PendingMaintenanceActionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-pending-maintenance-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-quota-exceeded-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-quota-exceeded-fault-message)))
 (common-lisp:export
  (common-lisp:list 'resource-quota-exceeded-fault
                    'resource-quota-exceeded-fault-message)))
(common-lisp:progn
 (common-lisp:defclass run-fleet-advisor-lsa-analysis-response common-lisp:nil
                       ((lsa-analysis-id :initarg :lsa-analysis-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-run-fleet-advisor-lsa-analysis-response-lsa-analysis-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-run-fleet-advisor-lsa-analysis-response-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-fleet-advisor-lsa-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'run-fleet-advisor-lsa-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-fleet-advisor-lsa-analysis-response
                    'make-run-fleet-advisor-lsa-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-fleet-advisor-lsa-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-fleet-advisor-lsa-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lsa-analysis-id))
      (common-lisp:list
       (common-lisp:cons "LsaAnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-fleet-advisor-lsa-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition s3access-denied-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       s3access-denied-fault-message)))
 (common-lisp:export
  (common-lisp:list 's3access-denied-fault 's3access-denied-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition s3resource-not-found-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       s3resource-not-found-fault-message)))
 (common-lisp:export
  (common-lisp:list 's3resource-not-found-fault
                    's3resource-not-found-fault-message)))
(common-lisp:progn
 (common-lisp:defclass s3settings common-lisp:nil
                       ((service-access-role-arn :initarg
                         :service-access-role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-s3settings-service-access-role-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (external-table-definition :initarg
                         :external-table-definition :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-s3settings-external-table-definition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csv-row-delimiter :initarg :csv-row-delimiter
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-csv-row-delimiter :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (csv-delimiter :initarg :csv-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-csv-delimiter :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-folder :initarg :bucket-folder :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-bucket-folder :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-bucket-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compression-type-value
                                         common-lisp:null)
                         :accessor struct-shape-s3settings-compression-type
                         :shape "CompressionTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-mode :initarg :encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption-mode-value
                                         common-lisp:null)
                         :accessor struct-shape-s3settings-encryption-mode
                         :shape "EncryptionModeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-side-encryption-kms-key-id :initarg
                         :server-side-encryption-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-server-side-encryption-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format-value common-lisp:null)
                         :accessor struct-shape-s3settings-data-format :shape
                         "DataFormatValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type-value common-lisp:null)
                         :accessor struct-shape-s3settings-encoding-type :shape
                         "EncodingTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dict-page-size-limit :initarg :dict-page-size-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-dict-page-size-limit
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (row-group-length :initarg :row-group-length :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-row-group-length
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-page-size :initarg :data-page-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-data-page-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parquet-version :initarg :parquet-version :initform
                         common-lisp:nil :type
                         (common-lisp:or parquet-version-value
                                         common-lisp:null)
                         :accessor struct-shape-s3settings-parquet-version
                         :shape "ParquetVersionValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-statistics :initarg :enable-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-s3settings-enable-statistics
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-op-for-full-load :initarg
                         :include-op-for-full-load :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-include-op-for-full-load
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-inserts-only :initarg :cdc-inserts-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-s3settings-cdc-inserts-only
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp-column-name :initarg :timestamp-column-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-timestamp-column-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parquet-timestamp-in-millisecond :initarg
                         :parquet-timestamp-in-millisecond :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-parquet-timestamp-in-millisecond
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-inserts-and-updates :initarg
                         :cdc-inserts-and-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-cdc-inserts-and-updates :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-partition-enabled :initarg
                         :date-partition-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-date-partition-enabled :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-partition-sequence :initarg
                         :date-partition-sequence :initform common-lisp:nil
                         :type
                         (common-lisp:or date-partition-sequence-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3settings-date-partition-sequence :shape
                         "DatePartitionSequenceValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-partition-delimiter :initarg
                         :date-partition-delimiter :initform common-lisp:nil
                         :type
                         (common-lisp:or date-partition-delimiter-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3settings-date-partition-delimiter
                         :shape "DatePartitionDelimiterValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (use-csv-no-sup-value :initarg :use-csv-no-sup-value
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-s3settings-use-csv-no-sup-value
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csv-no-sup-value :initarg :csv-no-sup-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-csv-no-sup-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (preserve-transactions :initarg :preserve-transactions
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-preserve-transactions :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-path :initarg :cdc-path :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-s3settings-cdc-path :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-task-start-time-for-full-load-timestamp :initarg
                         :use-task-start-time-for-full-load-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-use-task-start-time-for-full-load-timestamp
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (canned-acl-for-objects :initarg
                         :canned-acl-for-objects :initform common-lisp:nil
                         :type
                         (common-lisp:or canned-acl-for-objects-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3settings-canned-acl-for-objects :shape
                         "CannedAclForObjectsValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-column-name :initarg :add-column-name :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-s3settings-add-column-name
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-max-batch-interval :initarg
                         :cdc-max-batch-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-cdc-max-batch-interval :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-min-file-size :initarg :cdc-min-file-size
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-cdc-min-file-size
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csv-null-value :initarg :csv-null-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-csv-null-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ignore-header-rows :initarg :ignore-header-rows
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-ignore-header-rows
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-file-size :initarg :max-file-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-s3settings-max-file-size :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rfc4180 :initarg :rfc4180 :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor struct-shape-s3settings-rfc4180 :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-partition-timezone :initarg
                         :date-partition-timezone :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-s3settings-date-partition-timezone :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (add-trailing-padding-character :initarg
                         :add-trailing-padding-character :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-add-trailing-padding-character
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-s3settings-expected-bucket-owner :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glue-catalog-generation :initarg
                         :glue-catalog-generation :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-s3settings-glue-catalog-generation :shape
                         "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3settings 'make-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-table-definition))
      (common-lisp:list
       (common-lisp:cons "ExternalTableDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-row-delimiter))
      (common-lisp:list
       (common-lisp:cons "CsvRowDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-delimiter))
      (common-lisp:list
       (common-lisp:cons "CsvDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-folder))
      (common-lisp:list
       (common-lisp:cons "BucketFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-mode))
      (common-lisp:list
       (common-lisp:cons "EncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dict-page-size-limit))
      (common-lisp:list
       (common-lisp:cons "DictPageSizeLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-group-length))
      (common-lisp:list
       (common-lisp:cons "RowGroupLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-page-size))
      (common-lisp:list
       (common-lisp:cons "DataPageSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet-version))
      (common-lisp:list
       (common-lisp:cons "ParquetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-statistics))
      (common-lisp:list
       (common-lisp:cons "EnableStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-op-for-full-load))
      (common-lisp:list
       (common-lisp:cons "IncludeOpForFullLoad"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-inserts-only))
      (common-lisp:list
       (common-lisp:cons "CdcInsertsOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-column-name))
      (common-lisp:list
       (common-lisp:cons "TimestampColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parquet-timestamp-in-millisecond))
      (common-lisp:list
       (common-lisp:cons "ParquetTimestampInMillisecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdc-inserts-and-updates))
      (common-lisp:list
       (common-lisp:cons "CdcInsertsAndUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-partition-enabled))
      (common-lisp:list
       (common-lisp:cons "DatePartitionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-partition-sequence))
      (common-lisp:list
       (common-lisp:cons "DatePartitionSequence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-partition-delimiter))
      (common-lisp:list
       (common-lisp:cons "DatePartitionDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-csv-no-sup-value))
      (common-lisp:list
       (common-lisp:cons "UseCsvNoSupValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-no-sup-value))
      (common-lisp:list
       (common-lisp:cons "CsvNoSupValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preserve-transactions))
      (common-lisp:list
       (common-lisp:cons "PreserveTransactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-path))
      (common-lisp:list
       (common-lisp:cons "CdcPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-task-start-time-for-full-load-timestamp))
      (common-lisp:list
       (common-lisp:cons "UseTaskStartTimeForFullLoadTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'canned-acl-for-objects))
      (common-lisp:list
       (common-lisp:cons "CannedAclForObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-column-name))
      (common-lisp:list
       (common-lisp:cons "AddColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdc-max-batch-interval))
      (common-lisp:list
       (common-lisp:cons "CdcMaxBatchInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-min-file-size))
      (common-lisp:list
       (common-lisp:cons "CdcMinFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-null-value))
      (common-lisp:list
       (common-lisp:cons "CsvNullValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-header-rows))
      (common-lisp:list
       (common-lisp:cons "IgnoreHeaderRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-file-size))
      (common-lisp:list
       (common-lisp:cons "MaxFileSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rfc4180))
      (common-lisp:list
       (common-lisp:cons "Rfc4180"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-partition-timezone))
      (common-lisp:list
       (common-lisp:cons "DatePartitionTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-trailing-padding-character))
      (common-lisp:list
       (common-lisp:cons "AddTrailingPaddingCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:list
       (common-lisp:cons "ExpectedBucketOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glue-catalog-generation))
      (common-lisp:list
       (common-lisp:cons "GlueCatalogGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scapplication-attributes common-lisp:nil
                       ((s3bucket-path :initarg :s3bucket-path :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scapplication-attributes-s3bucket-path
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-role-arn :initarg :s3bucket-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-scapplication-attributes-s3bucket-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scapplication-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scapplication-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scapplication-attributes 'make-scapplication-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scapplication-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scapplication-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-path))
      (common-lisp:list
       (common-lisp:cons "S3BucketPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scapplication-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition snsinvalid-topic-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       snsinvalid-topic-fault-message)))
 (common-lisp:export
  (common-lisp:list 'snsinvalid-topic-fault 'snsinvalid-topic-fault-message)))
(common-lisp:progn
 (common-lisp:define-condition snsno-authorization-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       snsno-authorization-fault-message)))
 (common-lisp:export
  (common-lisp:list 'snsno-authorization-fault
                    'snsno-authorization-fault-message)))
(common-lisp:deftype safeguard-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-conversion-request common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-schema-conversion-request-status :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-conversion-request-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (migration-project-arn :initarg :migration-project-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-conversion-request-migration-project-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-schema-conversion-request-error
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-sql-details :initarg :export-sql-details
                         :initform common-lisp:nil :type
                         (common-lisp:or export-sql-details common-lisp:null)
                         :accessor
                         struct-shape-schema-conversion-request-export-sql-details
                         :shape "ExportSqlDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-conversion-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-conversion-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-conversion-request
                    'make-schema-conversion-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-conversion-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-conversion-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-arn))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-sql-details))
      (common-lisp:list
       (common-lisp:cons "ExportSqlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-conversion-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-conversion-request-list ()
   '(trivial-types:proper-list schema-conversion-request))
 (common-lisp:defun make-schema-conversion-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            schema-conversion-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype schema-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-schema-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema-response common-lisp:nil
                       ((code-line-count :initarg :code-line-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor struct-shape-schema-response-code-line-count
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-size :initarg :code-size :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor struct-shape-schema-response-code-size
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (complexity :initarg :complexity :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-response-complexity :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server :initarg :server :initform common-lisp:nil
                         :type
                         (common-lisp:or server-short-info-response
                                         common-lisp:null)
                         :accessor struct-shape-schema-response-server :shape
                         "ServerShortInfoResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-instance :initarg :database-instance
                         :initform common-lisp:nil :type
                         (common-lisp:or database-short-info-response
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-response-database-instance :shape
                         "DatabaseShortInfoResponse" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-response-schema-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-response-schema-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (original-schema :initarg :original-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-short-info-response
                                         common-lisp:null)
                         :accessor struct-shape-schema-response-original-schema
                         :shape "SchemaShortInfoResponse" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (similarity :initarg :similarity :initform
                         common-lisp:nil :type
                         (common-lisp:or double-optional common-lisp:null)
                         :accessor struct-shape-schema-response-similarity
                         :shape "DoubleOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema-response 'make-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-line-count))
      (common-lisp:list
       (common-lisp:cons "CodeLineCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-size))
      (common-lisp:list
       (common-lisp:cons "CodeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'complexity))
      (common-lisp:list
       (common-lisp:cons "Complexity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "Server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-instance))
      (common-lisp:list
       (common-lisp:cons "DatabaseInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-schema))
      (common-lisp:list
       (common-lisp:cons "OriginalSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'similarity))
      (common-lisp:list
       (common-lisp:cons "Similarity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-short-info-response common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-short-info-response-schema-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-short-info-response-schema-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-id :initarg :database-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-short-info-response-database-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-short-info-response-database-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-ip-address :initarg :database-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-schema-short-info-response-database-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-short-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-short-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-short-info-response
                    'make-schema-short-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-short-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-short-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-ip-address))
      (common-lisp:list
       (common-lisp:cons "DatabaseIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-short-info-response))
   common-lisp:nil))
(common-lisp:deftype secret-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-short-info-response common-lisp:nil
                       ((server-id :initarg :server-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-server-short-info-response-server-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-server-short-info-response-ip-address
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-server-short-info-response-server-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-short-info-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-short-info-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-short-info-response
                    'make-server-short-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-short-info-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-short-info-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-short-info-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-ids-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-source-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype ssl-security-protocol-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-extension-pack-association-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-extension-pack-association-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-extension-pack-association-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-extension-pack-association-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-extension-pack-association-message
                    'make-start-extension-pack-association-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-extension-pack-association-response
                       common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-extension-pack-association-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-extension-pack-association-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-extension-pack-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-extension-pack-association-response
                    'make-start-extension-pack-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-extension-pack-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-assessment-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-assessment-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-assessment-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-assessment-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-assessment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-assessment-message
                    'make-start-metadata-model-assessment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-assessment-response common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-assessment-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-assessment-response
                    'make-start-metadata-model-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-conversion-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-conversion-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-conversion-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-conversion-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-conversion-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-conversion-message
                    'make-start-metadata-model-conversion-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-conversion-response common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-conversion-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-conversion-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-conversion-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-conversion-response
                    'make-start-metadata-model-conversion-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-conversion-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-export-as-script-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-as-script-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-as-script-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform
                         (common-lisp:error ":origin is required") :type
                         (common-lisp:or origin-type-value common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-as-script-message-origin
                         :shape "OriginTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (file-name :initarg :file-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-export-as-script-message-file-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-export-as-script-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-export-as-script-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-export-as-script-message
                    'make-start-metadata-model-export-as-script-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "FileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-export-as-script-response
                       common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-export-as-script-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-export-as-script-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-export-as-script-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-export-as-script-response
                    'make-start-metadata-model-export-as-script-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-as-script-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-export-to-target-message
                       common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-to-target-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-to-target-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (overwrite-extension-pack :initarg
                         :overwrite-extension-pack :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-export-to-target-message-overwrite-extension-pack
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-export-to-target-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-export-to-target-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-export-to-target-message
                    'make-start-metadata-model-export-to-target-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overwrite-extension-pack))
      (common-lisp:list
       (common-lisp:cons "OverwriteExtensionPack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-export-to-target-response
                       common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-export-to-target-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-export-to-target-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-export-to-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-export-to-target-response
                    'make-start-metadata-model-export-to-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-export-to-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-import-message common-lisp:nil
                       ((migration-project-identifier :initarg
                         :migration-project-identifier :initform
                         (common-lisp:error
                          ":migration-project-identifier is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-import-message-migration-project-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selection-rules :initarg :selection-rules :initform
                         (common-lisp:error ":selection-rules is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-import-message-selection-rules
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (origin :initarg :origin :initform
                         (common-lisp:error ":origin is required") :type
                         (common-lisp:or origin-type-value common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-import-message-origin
                         :shape "OriginTypeValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (refresh :initarg :refresh :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-start-metadata-model-import-message-refresh
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-import-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-import-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-import-message
                    'make-start-metadata-model-import-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'migration-project-identifier))
      (common-lisp:list
       (common-lisp:cons "MigrationProjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selection-rules))
      (common-lisp:list
       (common-lisp:cons "SelectionRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "Origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'refresh))
      (common-lisp:list
       (common-lisp:cons "Refresh"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-metadata-model-import-response common-lisp:nil
                       ((request-identifier :initarg :request-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-metadata-model-import-response-request-identifier
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-metadata-model-import-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-metadata-model-import-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-metadata-model-import-response
                    'make-start-metadata-model-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-identifier))
      (common-lisp:list
       (common-lisp:cons "RequestIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-metadata-model-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-recommendations-request common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         (common-lisp:error ":database-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-recommendations-request-database-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or recommendation-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-recommendations-request-settings
                         :shape "RecommendationSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-recommendations-request
                    'make-start-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-recommendations-request-entry common-lisp:nil
                       ((database-id :initarg :database-id :initform
                         (common-lisp:error ":database-id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-recommendations-request-entry-database-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform
                         (common-lisp:error ":settings is required") :type
                         (common-lisp:or recommendation-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-recommendations-request-entry-settings
                         :shape "RecommendationSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-recommendations-request-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-recommendations-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-recommendations-request-entry
                    'make-start-recommendations-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-id))
      (common-lisp:list
       (common-lisp:cons "DatabaseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-recommendations-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype start-recommendations-request-entry-list ()
   '(trivial-types:proper-list start-recommendations-request-entry))
 (common-lisp:defun make-start-recommendations-request-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            start-recommendations-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-replication-message common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-replication-type :initarg
                         :start-replication-type :initform
                         (common-lisp:error
                          ":start-replication-type is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-message-start-replication-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-time :initarg :cdc-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-start-replication-message-cdc-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-replication-message-cdc-start-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-replication-message-cdc-stop-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-replication-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-message
                    'make-start-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-replication-type))
      (common-lisp:list
       (common-lisp:cons "StartReplicationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-time))
      (common-lisp:list
       (common-lisp:cons "CdcStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-response common-lisp:nil
                       ((replication :initarg :replication :initform
                         common-lisp:nil :type
                         (common-lisp:or replication common-lisp:null)
                         :accessor
                         struct-shape-start-replication-response-replication
                         :shape "Replication" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-response
                    'make-start-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication))
      (common-lisp:list
       (common-lisp:cons "Replication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-assessment-message
                       common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-assessment-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-assessment-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-assessment-message
                    'make-start-replication-task-assessment-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-assessment-response
                       common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-assessment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-assessment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-assessment-response
                    'make-start-replication-task-assessment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-assessment-run-message
                       common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-access-role-arn :initarg
                         :service-access-role-arn :initform
                         (common-lisp:error
                          ":service-access-role-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-service-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-location-bucket :initarg
                         :result-location-bucket :initform
                         (common-lisp:error
                          ":result-location-bucket is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-result-location-bucket
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-location-folder :initarg
                         :result-location-folder :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-result-location-folder
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-encryption-mode :initarg
                         :result-encryption-mode :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-result-encryption-mode
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-kms-key-arn :initarg :result-kms-key-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-replication-task-assessment-run-message-result-kms-key-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (assessment-run-name :initarg :assessment-run-name
                         :initform
                         (common-lisp:error ":assessment-run-name is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-assessment-run-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-only :initarg :include-only :initform
                         common-lisp:nil :type
                         (common-lisp:or include-test-list common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-include-only
                         :shape "IncludeTestList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclude :initarg :exclude :initform common-lisp:nil
                         :type
                         (common-lisp:or exclude-test-list common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-message-exclude
                         :shape "ExcludeTestList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-assessment-run-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-assessment-run-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-assessment-run-message
                    'make-start-replication-task-assessment-run-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-location-bucket))
      (common-lisp:list
       (common-lisp:cons "ResultLocationBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-location-folder))
      (common-lisp:list
       (common-lisp:cons "ResultLocationFolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "ResultEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "ResultKmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-name))
      (common-lisp:list
       (common-lisp:cons "AssessmentRunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-only))
      (common-lisp:list
       (common-lisp:cons "IncludeOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude))
      (common-lisp:list
       (common-lisp:cons "Exclude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-assessment-run-response
                       common-lisp:nil
                       ((replication-task-assessment-run :initarg
                         :replication-task-assessment-run :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task-assessment-run
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-assessment-run-response-replication-task-assessment-run
                         :shape "ReplicationTaskAssessmentRun" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-assessment-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-assessment-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-assessment-run-response
                    'make-start-replication-task-assessment-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-assessment-run))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskAssessmentRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-assessment-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-replication-task-type :initarg
                         :start-replication-task-type :initform
                         (common-lisp:error
                          ":start-replication-task-type is required")
                         :type
                         (common-lisp:or start-replication-task-type-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-message-start-replication-task-type
                         :shape "StartReplicationTaskTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cdc-start-time :initarg :cdc-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-start-replication-task-message-cdc-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-start-position :initarg :cdc-start-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-replication-task-message-cdc-start-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-stop-position :initarg :cdc-stop-position
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-replication-task-message-cdc-stop-position
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-message
                    'make-start-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'start-replication-task-type))
      (common-lisp:list
       (common-lisp:cons "StartReplicationTaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-time))
      (common-lisp:list
       (common-lisp:cons "CdcStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-start-position))
      (common-lisp:list
       (common-lisp:cons "CdcStartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdc-stop-position))
      (common-lisp:list
       (common-lisp:cons "CdcStopPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-start-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-replication-task-response
                    'make-start-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-replication-task-response))
   common-lisp:nil))
(common-lisp:deftype start-replication-task-type-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-replication-message common-lisp:nil
                       ((replication-config-arn :initarg
                         :replication-config-arn :initform
                         (common-lisp:error
                          ":replication-config-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-replication-message-replication-config-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-replication-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-replication-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-replication-message 'make-stop-replication-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-config-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-replication-response common-lisp:nil
                       ((replication :initarg :replication :initform
                         common-lisp:nil :type
                         (common-lisp:or replication common-lisp:null)
                         :accessor
                         struct-shape-stop-replication-response-replication
                         :shape "Replication" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-replication-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-replication-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-replication-response
                    'make-stop-replication-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication))
      (common-lisp:list
       (common-lisp:cons "Replication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-replication-task-message common-lisp:nil
                       ((replication-task-arn :initarg :replication-task-arn
                         :initform
                         (common-lisp:error
                          ":replication-task-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-stop-replication-task-message-replication-task-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-replication-task-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-replication-task-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-replication-task-message
                    'make-stop-replication-task-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-task-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-replication-task-response common-lisp:nil
                       ((replication-task :initarg :replication-task :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-task common-lisp:null)
                         :accessor
                         struct-shape-stop-replication-task-response-replication-task
                         :shape "ReplicationTask" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-replication-task-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-replication-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-replication-task-response
                    'make-stop-replication-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-task))
      (common-lisp:list
       (common-lisp:cons "ReplicationTask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-replication-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition storage-quota-exceeded-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       storage-quota-exceeded-fault-message)))
 (common-lisp:export
  (common-lisp:list 'storage-quota-exceeded-fault
                    'storage-quota-exceeded-fault-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass subnet common-lisp:nil
                       ((subnet-identifier :initarg :subnet-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-identifier :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-availability-zone :initarg
                         :subnet-availability-zone :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor struct-shape-subnet-subnet-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-status :initarg :subnet-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-subnet-subnet-status :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subnet
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subnet
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'subnet 'make-subnet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subnet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-identifier))
      (common-lisp:list
       (common-lisp:cons "SubnetIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subnet-availability-zone))
      (common-lisp:list
       (common-lisp:cons "SubnetAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-status))
      (common-lisp:list
       (common-lisp:cons "SubnetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subnet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition subnet-already-in-use
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       subnet-already-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'subnet-already-in-use 'subnet-already-in-use-message)))
(common-lisp:progn
 (common-lisp:deftype subnet-identifier-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-subnet-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list subnet))
 (common-lisp:defun make-subnet-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass supported-endpoint-type common-lisp:nil
                       ((engine-name :initarg :engine-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-endpoint-type-engine-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supports-cdc :initarg :supports-cdc :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-supported-endpoint-type-supports-cdc
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-endpoint-type-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-supported-endpoint-type-endpoint-type
                         :shape "ReplicationEndpointTypeValue" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-instance-engine-minimum-version :initarg
                         :replication-instance-engine-minimum-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-endpoint-type-replication-instance-engine-minimum-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (engine-display-name :initarg :engine-display-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-supported-endpoint-type-engine-display-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-endpoint-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-endpoint-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-endpoint-type 'make-supported-endpoint-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          supported-endpoint-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          supported-endpoint-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-name))
      (common-lisp:list
       (common-lisp:cons "EngineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-cdc))
      (common-lisp:list
       (common-lisp:cons "SupportsCDC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-engine-minimum-version))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceEngineMinimumVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-display-name))
      (common-lisp:list
       (common-lisp:cons "EngineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          supported-endpoint-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype supported-endpoint-type-list ()
   '(trivial-types:proper-list supported-endpoint-type))
 (common-lisp:defun make-supported-endpoint-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-endpoint-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sybase-settings common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sybase-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (password :initarg :password :initform common-lisp:nil
                         :type (common-lisp:or secret-string common-lisp:null)
                         :accessor struct-shape-sybase-settings-password :shape
                         "SecretString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (port :initarg :port :initform common-lisp:nil :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor struct-shape-sybase-settings-port :shape
                         "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-name :initarg :server-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sybase-settings-server-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (username :initarg :username :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-sybase-settings-username :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secrets-manager-access-role-arn :initarg
                         :secrets-manager-access-role-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sybase-settings-secrets-manager-access-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secrets-manager-secret-id :initarg
                         :secrets-manager-secret-id :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-sybase-settings-secrets-manager-secret-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sybase-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sybase-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sybase-settings 'make-sybase-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sybase-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sybase-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-name))
      (common-lisp:list
       (common-lisp:cons "ServerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret-id))
      (common-lisp:list
       (common-lisp:cons "SecretsManagerSecretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sybase-settings))
   common-lisp:nil))
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-list-to-reload ()
   '(trivial-types:proper-list table-to-reload))
 (common-lisp:defun make-table-list-to-reload
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-to-reload))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-statistics common-lisp:nil
                       ((schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-statistics-schema-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-statistics-table-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inserts :initarg :inserts :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-inserts :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deletes :initarg :deletes :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-deletes :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updates :initarg :updates :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-updates :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ddls :initarg :ddls :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-ddls :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (applied-inserts :initarg :applied-inserts :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-table-statistics-applied-inserts :shape
                         "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applied-deletes :initarg :applied-deletes :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-table-statistics-applied-deletes :shape
                         "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applied-updates :initarg :applied-updates :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor
                         struct-shape-table-statistics-applied-updates :shape
                         "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (applied-ddls :initarg :applied-ddls :initform
                         common-lisp:nil :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor struct-shape-table-statistics-applied-ddls
                         :shape "LongOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-rows :initarg :full-load-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-full-load-rows :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (full-load-condtnl-chk-failed-rows :initarg
                         :full-load-condtnl-chk-failed-rows :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-full-load-condtnl-chk-failed-rows
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (full-load-error-rows :initarg :full-load-error-rows
                         :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-full-load-error-rows
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (full-load-start-time :initarg :full-load-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-table-statistics-full-load-start-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-end-time :initarg :full-load-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-table-statistics-full-load-end-time
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (full-load-reloaded :initarg :full-load-reloaded
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-table-statistics-full-load-reloaded
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-table-statistics-last-update-time :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-state :initarg :table-state :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-statistics-table-state :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-pending-records :initarg
                         :validation-pending-records :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-validation-pending-records
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-failed-records :initarg
                         :validation-failed-records :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-validation-failed-records
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-suspended-records :initarg
                         :validation-suspended-records :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-table-statistics-validation-suspended-records
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-state :initarg :validation-state :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-statistics-validation-state :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-state-details :initarg
                         :validation-state-details :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-table-statistics-validation-state-details
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-statistics 'make-table-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inserts))
      (common-lisp:list
       (common-lisp:cons "Inserts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ddls))
      (common-lisp:list
       (common-lisp:cons "Ddls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-inserts))
      (common-lisp:list
       (common-lisp:cons "AppliedInserts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-deletes))
      (common-lisp:list
       (common-lisp:cons "AppliedDeletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-updates))
      (common-lisp:list
       (common-lisp:cons "AppliedUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-ddls))
      (common-lisp:list
       (common-lisp:cons "AppliedDdls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-load-rows))
      (common-lisp:list
       (common-lisp:cons "FullLoadRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-condtnl-chk-failed-rows))
      (common-lisp:list
       (common-lisp:cons "FullLoadCondtnlChkFailedRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-error-rows))
      (common-lisp:list
       (common-lisp:cons "FullLoadErrorRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'full-load-start-time))
      (common-lisp:list
       (common-lisp:cons "FullLoadStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-load-end-time))
      (common-lisp:list
       (common-lisp:cons "FullLoadEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'full-load-reloaded))
      (common-lisp:list
       (common-lisp:cons "FullLoadReloaded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-state))
      (common-lisp:list
       (common-lisp:cons "TableState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-pending-records))
      (common-lisp:list
       (common-lisp:cons "ValidationPendingRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-failed-records))
      (common-lisp:list
       (common-lisp:cons "ValidationFailedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-suspended-records))
      (common-lisp:list
       (common-lisp:cons "ValidationSuspendedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-state))
      (common-lisp:list
       (common-lisp:cons "ValidationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-state-details))
      (common-lisp:list
       (common-lisp:cons "ValidationStateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-statistics-list ()
   '(trivial-types:proper-list table-statistics))
 (common-lisp:defun make-table-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-to-reload common-lisp:nil
                       ((schema-name :initarg :schema-name :initform
                         (common-lisp:error ":schema-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-to-reload-schema-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-table-to-reload-table-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-to-reload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-to-reload
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-to-reload 'make-table-to-reload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-to-reload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-to-reload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-to-reload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-arn :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-db-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-connection-message common-lisp:nil
                       ((replication-instance-arn :initarg
                         :replication-instance-arn :initform
                         (common-lisp:error
                          ":replication-instance-arn is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-test-connection-message-replication-instance-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint-arn :initarg :endpoint-arn :initform
                         (common-lisp:error ":endpoint-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-test-connection-message-endpoint-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-connection-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-connection-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-connection-message 'make-test-connection-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-instance-arn))
      (common-lisp:list
       (common-lisp:cons "ReplicationInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-test-connection-response-connection
                         :shape "Connection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-test-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'test-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'test-connection-response 'make-test-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timestream-settings common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-timestream-settings-database-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory-duration :initarg :memory-duration :initform
                         (common-lisp:error ":memory-duration is required")
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-timestream-settings-memory-duration
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (magnetic-duration :initarg :magnetic-duration
                         :initform
                         (common-lisp:error ":magnetic-duration is required")
                         :type
                         (common-lisp:or integer-optional common-lisp:null)
                         :accessor
                         struct-shape-timestream-settings-magnetic-duration
                         :shape "IntegerOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cdc-inserts-and-updates :initarg
                         :cdc-inserts-and-updates :initform common-lisp:nil
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-timestream-settings-cdc-inserts-and-updates
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-magnetic-store-writes :initarg
                         :enable-magnetic-store-writes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-timestream-settings-enable-magnetic-store-writes
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestream-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestream-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestream-settings 'make-timestream-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestream-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestream-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-duration))
      (common-lisp:list
       (common-lisp:cons "MemoryDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'magnetic-duration))
      (common-lisp:list
       (common-lisp:cons "MagneticDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdc-inserts-and-updates))
      (common-lisp:list
       (common-lisp:cons "CdcInsertsAndUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-magnetic-store-writes))
      (common-lisp:list
       (common-lisp:cons "EnableMagneticStoreWrites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestream-settings))
   common-lisp:nil))
(common-lisp:deftype tlog-access-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-subscriptions-to-event-bridge-message
                       common-lisp:nil
                       ((force-move :initarg :force-move :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         struct-shape-update-subscriptions-to-event-bridge-message-force-move
                         :shape "BooleanOptional" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriptions-to-event-bridge-message
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscriptions-to-event-bridge-message
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriptions-to-event-bridge-message
                    'make-update-subscriptions-to-event-bridge-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-move))
      (common-lisp:list
       (common-lisp:cons "ForceMove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscriptions-to-event-bridge-response
                       common-lisp:nil
                       ((result :initarg :result :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-subscriptions-to-event-bridge-response-result
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriptions-to-event-bridge-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscriptions-to-event-bridge-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriptions-to-event-bridge-response
                    'make-update-subscriptions-to-event-bridge-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriptions-to-event-bridge-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition upgrade-dependency-failure-fault
     (dms-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       upgrade-dependency-failure-fault-message)))
 (common-lisp:export
  (common-lisp:list 'upgrade-dependency-failure-fault
                    'upgrade-dependency-failure-fault-message)))
(common-lisp:deftype version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-vpc-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-security-group-membership common-lisp:nil
                       ((vpc-security-group-id :initarg :vpc-security-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-security-group-membership-vpc-security-group-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-vpc-security-group-membership-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-security-group-membership
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-security-group-membership
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "VpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun make-vpc-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddTagsToResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun apply-pending-maintenance-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn apply-action
                     opt-in-type)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn apply-action opt-in-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-apply-pending-maintenance-action-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ApplyPendingMaintenanceAction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'apply-pending-maintenance-action))
(common-lisp:progn
 (common-lisp:defun batch-start-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data)
   (common-lisp:declare (common-lisp:ignorable data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-start-recommendations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchStartRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-start-recommendations))
(common-lisp:progn
 (common-lisp:defun cancel-replication-task-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-assessment-run-arn)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-replication-task-assessment-run-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelReplicationTaskAssessmentRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-replication-task-assessment-run))
(common-lisp:progn
 (common-lisp:defun create-data-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-provider-name description engine
                     settings tags)
   (common-lisp:declare
    (common-lisp:ignorable data-provider-name description engine settings
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-provider-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-provider))
(common-lisp:progn
 (common-lisp:defun create-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-identifier endpoint-type
                     engine-name username password server-name port
                     database-name extra-connection-attributes kms-key-id tags
                     certificate-arn ssl-mode service-access-role-arn
                     external-table-definition dynamo-db-settings s3settings
                     dms-transfer-settings mongo-db-settings kinesis-settings
                     kafka-settings elasticsearch-settings neptune-settings
                     redshift-settings postgre-sqlsettings my-sqlsettings
                     oracle-settings sybase-settings
                     microsoft-sqlserver-settings ibmdb2settings
                     resource-identifier doc-db-settings redis-settings
                     gcp-my-sqlsettings timestream-settings)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-identifier endpoint-type engine-name
     username password server-name port database-name
     extra-connection-attributes kms-key-id tags certificate-arn ssl-mode
     service-access-role-arn external-table-definition dynamo-db-settings
     s3settings dms-transfer-settings mongo-db-settings kinesis-settings
     kafka-settings elasticsearch-settings neptune-settings redshift-settings
     postgre-sqlsettings my-sqlsettings oracle-settings sybase-settings
     microsoft-sqlserver-settings ibmdb2settings resource-identifier
     doc-db-settings redis-settings gcp-my-sqlsettings timestream-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-endpoint))
(common-lisp:progn
 (common-lisp:defun create-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories source-ids enabled tags)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories source-ids enabled tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-event-subscription))
(common-lisp:progn
 (common-lisp:defun create-fleet-advisor-collector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collector-name description
                     service-access-role-arn s3bucket-name)
   (common-lisp:declare
    (common-lisp:ignorable collector-name description service-access-role-arn
     s3bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-fleet-advisor-collector-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFleetAdvisorCollector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-fleet-advisor-collector))
(common-lisp:progn
 (common-lisp:defun create-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zone kms-key-arn
                     publicly-accessible tags network-type
                     instance-profile-name description subnet-group-identifier
                     vpc-security-groups)
   (common-lisp:declare
    (common-lisp:ignorable availability-zone kms-key-arn publicly-accessible
     tags network-type instance-profile-name description
     subnet-group-identifier vpc-security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-profile-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-instance-profile))
(common-lisp:progn
 (common-lisp:defun create-migration-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-name
                     source-data-provider-descriptors
                     target-data-provider-descriptors
                     instance-profile-identifier transformation-rules
                     description tags schema-conversion-application-attributes)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-name
     source-data-provider-descriptors target-data-provider-descriptors
     instance-profile-identifier transformation-rules description tags
     schema-conversion-application-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-migration-project-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMigrationProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-migration-project))
(common-lisp:progn
 (common-lisp:defun create-replication-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-identifier
                     source-endpoint-arn target-endpoint-arn compute-config
                     replication-type table-mappings replication-settings
                     supplemental-settings resource-identifier tags)
   (common-lisp:declare
    (common-lisp:ignorable replication-config-identifier source-endpoint-arn
     target-endpoint-arn compute-config replication-type table-mappings
     replication-settings supplemental-settings resource-identifier tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-config-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-config))
(common-lisp:progn
 (common-lisp:defun create-replication-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-identifier
                     allocated-storage replication-instance-class
                     vpc-security-group-ids availability-zone
                     replication-subnet-group-identifier
                     preferred-maintenance-window multi-az engine-version
                     auto-minor-version-upgrade tags kms-key-id
                     publicly-accessible dns-name-servers resource-identifier
                     network-type)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-identifier allocated-storage
     replication-instance-class vpc-security-group-ids availability-zone
     replication-subnet-group-identifier preferred-maintenance-window multi-az
     engine-version auto-minor-version-upgrade tags kms-key-id
     publicly-accessible dns-name-servers resource-identifier network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-instance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-instance))
(common-lisp:progn
 (common-lisp:defun create-replication-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-subnet-group-identifier
                     replication-subnet-group-description subnet-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable replication-subnet-group-identifier
     replication-subnet-group-description subnet-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-replication-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-subnet-group))
(common-lisp:progn
 (common-lisp:defun create-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-identifier
                     source-endpoint-arn target-endpoint-arn
                     replication-instance-arn migration-type table-mappings
                     replication-task-settings cdc-start-time
                     cdc-start-position cdc-stop-position tags task-data
                     resource-identifier)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-identifier source-endpoint-arn
     target-endpoint-arn replication-instance-arn migration-type table-mappings
     replication-task-settings cdc-start-time cdc-start-position
     cdc-stop-position tags task-data resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-task))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn replication-instance-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-arn replication-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-data-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-provider-identifier)
   (common-lisp:declare (common-lisp:ignorable data-provider-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-provider-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-provider))
(common-lisp:progn
 (common-lisp:defun delete-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name)
   (common-lisp:declare (common-lisp:ignorable subscription-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-event-subscription))
(common-lisp:progn
 (common-lisp:defun delete-fleet-advisor-collector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collector-referenced-id)
   (common-lisp:declare (common-lisp:ignorable collector-referenced-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFleetAdvisorCollector"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-fleet-advisor-collector))
(common-lisp:progn
 (common-lisp:defun delete-fleet-advisor-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-ids)
   (common-lisp:declare (common-lisp:ignorable database-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-fleet-advisor-databases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFleetAdvisorDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-fleet-advisor-databases))
(common-lisp:progn
 (common-lisp:defun delete-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-identifier)
   (common-lisp:declare (common-lisp:ignorable instance-profile-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-profile-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-instance-profile))
(common-lisp:progn
 (common-lisp:defun delete-migration-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier)
   (common-lisp:declare (common-lisp:ignorable migration-project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-migration-project-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMigrationProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-migration-project))
(common-lisp:progn
 (common-lisp:defun delete-replication-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn)
   (common-lisp:declare (common-lisp:ignorable replication-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-config-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-config))
(common-lisp:progn
 (common-lisp:defun delete-replication-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn)
   (common-lisp:declare (common-lisp:ignorable replication-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-instance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-instance))
(common-lisp:progn
 (common-lisp:defun delete-replication-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-subnet-group-identifier)
   (common-lisp:declare
    (common-lisp:ignorable replication-subnet-group-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-subnet-group))
(common-lisp:progn
 (common-lisp:defun delete-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn)
   (common-lisp:declare (common-lisp:ignorable replication-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-task))
(common-lisp:progn
 (common-lisp:defun delete-replication-task-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-assessment-run-arn)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-replication-task-assessment-run-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteReplicationTaskAssessmentRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-task-assessment-run))
(common-lisp:progn
 (common-lisp:defun describe-account-attributes ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'dms-request :method "POST" :path "/"
                                :operation "DescribeAccountAttributes"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-account-attributes))
(common-lisp:progn
 (common-lisp:defun describe-applicable-individual-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn
                     replication-instance-arn source-engine-name
                     target-engine-name migration-type max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn replication-instance-arn
     source-engine-name target-engine-name migration-type max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-applicable-individual-assessments-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeApplicableIndividualAssessments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-applicable-individual-assessments))
(common-lisp:progn
 (common-lisp:defun describe-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificates-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificates"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-certificates))
(common-lisp:progn
 (common-lisp:defun describe-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connections-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-connections))
(common-lisp:progn
 (common-lisp:defun describe-conversion-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier)
   (common-lisp:declare (common-lisp:ignorable migration-project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conversion-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConversionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-conversion-configuration))
(common-lisp:progn
 (common-lisp:defun describe-data-providers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-data-providers-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataProviders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-data-providers))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-name max-records marker)
   (common-lisp:declare (common-lisp:ignorable engine-name max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-endpoint-settings-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpointSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-endpoint-settings))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-types-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpointTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-endpoint-types))
(common-lisp:progn
 (common-lisp:defun describe-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoints-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-endpoints))
(common-lisp:progn
 (common-lisp:defun describe-engine-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-records marker)
   (common-lisp:declare (common-lisp:ignorable max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-engine-versions-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEngineVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-engine-versions))
(common-lisp:progn
 (common-lisp:defun describe-event-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-type filters)
   (common-lisp:declare (common-lisp:ignorable source-type filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-categories-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventCategories"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-event-categories))
(common-lisp:progn
 (common-lisp:defun describe-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-event-subscriptions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEventSubscriptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun describe-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-identifier source-type start-time
                     end-time duration event-categories filters max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable source-identifier source-type start-time end-time
     duration event-categories filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-events-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-events))
(common-lisp:progn
 (common-lisp:defun describe-extension-pack-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-extension-pack-associations-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExtensionPackAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-extension-pack-associations))
(common-lisp:progn
 (common-lisp:defun describe-fleet-advisor-collectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-advisor-collectors-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFleetAdvisorCollectors"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-advisor-collectors))
(common-lisp:progn
 (common-lisp:defun describe-fleet-advisor-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-advisor-databases-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFleetAdvisorDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-advisor-databases))
(common-lisp:progn
 (common-lisp:defun describe-fleet-advisor-lsa-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-records next-token)
   (common-lisp:declare (common-lisp:ignorable max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-advisor-lsa-analysis-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFleetAdvisorLsaAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-advisor-lsa-analysis))
(common-lisp:progn
 (common-lisp:defun describe-fleet-advisor-schema-object-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-advisor-schema-object-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFleetAdvisorSchemaObjectSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-advisor-schema-object-summary))
(common-lisp:progn
 (common-lisp:defun describe-fleet-advisor-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-fleet-advisor-schemas-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFleetAdvisorSchemas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-fleet-advisor-schemas))
(common-lisp:progn
 (common-lisp:defun describe-instance-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-profiles-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInstanceProfiles"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-instance-profiles))
(common-lisp:progn
 (common-lisp:defun describe-metadata-model-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-metadata-model-assessments-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetadataModelAssessments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metadata-model-assessments))
(common-lisp:progn
 (common-lisp:defun describe-metadata-model-conversions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-metadata-model-conversions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetadataModelConversions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metadata-model-conversions))
(common-lisp:progn
 (common-lisp:defun describe-metadata-model-exports-as-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-metadata-model-exports-as-script-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetadataModelExportsAsScript"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metadata-model-exports-as-script))
(common-lisp:progn
 (common-lisp:defun describe-metadata-model-exports-to-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-metadata-model-exports-to-target-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetadataModelExportsToTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metadata-model-exports-to-target))
(common-lisp:progn
 (common-lisp:defun describe-metadata-model-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier filters
                     marker max-records)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-metadata-model-imports-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMetadataModelImports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-metadata-model-imports))
(common-lisp:progn
 (common-lisp:defun describe-migration-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-migration-projects-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMigrationProjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-migration-projects))
(common-lisp:progn
 (common-lisp:defun describe-orderable-replication-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-records marker)
   (common-lisp:declare (common-lisp:ignorable max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-orderable-replication-instances-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrderableReplicationInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-orderable-replication-instances))
(common-lisp:progn
 (common-lisp:defun describe-pending-maintenance-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn filters marker
                     max-records)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn filters marker
     max-records))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-maintenance-actions-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePendingMaintenanceActions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-pending-maintenance-actions))
(common-lisp:progn
 (common-lisp:defun describe-recommendation-limitations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-recommendation-limitations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRecommendationLimitations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-recommendation-limitations))
(common-lisp:progn
 (common-lisp:defun describe-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-records next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-recommendations))
(common-lisp:progn
 (common-lisp:defun describe-refresh-schemas-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn)
   (common-lisp:declare (common-lisp:ignorable endpoint-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-refresh-schemas-status-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRefreshSchemasStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-refresh-schemas-status))
(common-lisp:progn
 (common-lisp:defun describe-replication-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-configs-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationConfigs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-configs))
(common-lisp:progn
 (common-lisp:defun describe-replication-instance-task-logs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn max-records
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-instance-task-logs-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationInstanceTaskLogs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-instance-task-logs))
(common-lisp:progn
 (common-lisp:defun describe-replication-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-instances-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-instances))
(common-lisp:progn
 (common-lisp:defun describe-replication-subnet-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-subnet-groups-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationSubnetGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-subnet-groups))
(common-lisp:progn
 (common-lisp:defun describe-replication-table-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn max-records marker
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable replication-config-arn max-records marker filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-table-statistics-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationTableStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-table-statistics))
(common-lisp:progn
 (common-lisp:defun describe-replication-task-assessment-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-task-assessment-results-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationTaskAssessmentResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-task-assessment-results))
(common-lisp:progn
 (common-lisp:defun describe-replication-task-assessment-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-task-assessment-runs-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationTaskAssessmentRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-task-assessment-runs))
(common-lisp:progn
 (common-lisp:defun describe-replication-task-individual-assessments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-task-individual-assessments-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationTaskIndividualAssessments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-task-individual-assessments))
(common-lisp:progn
 (common-lisp:defun describe-replication-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker
                     without-settings)
   (common-lisp:declare
    (common-lisp:ignorable filters max-records marker without-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-replication-tasks-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplicationTasks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replication-tasks))
(common-lisp:progn
 (common-lisp:defun describe-replications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-records marker)
   (common-lisp:declare (common-lisp:ignorable filters max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-replications-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeReplications"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-replications))
(common-lisp:progn
 (common-lisp:defun describe-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn max-records marker)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-arn max-records marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-schemas-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSchemas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-schemas))
(common-lisp:progn
 (common-lisp:defun describe-table-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn max-records marker
                     filters)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn max-records marker filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-table-statistics-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTableStatistics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-table-statistics))
(common-lisp:progn
 (common-lisp:defun export-metadata-model-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules file-name assessment-report-types)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules
     file-name assessment-report-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-export-metadata-model-assessment-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportMetadataModelAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-metadata-model-assessment))
(common-lisp:progn
 (common-lisp:defun import-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-identifier certificate-pem
                     certificate-wallet tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-identifier certificate-pem
     certificate-wallet tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-certificate-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-certificate))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-arn-list)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-conversion-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     conversion-configuration)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier
     conversion-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-conversion-configuration-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyConversionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-conversion-configuration))
(common-lisp:progn
 (common-lisp:defun modify-data-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-provider-identifier
                     data-provider-name description engine exact-settings
                     settings)
   (common-lisp:declare
    (common-lisp:ignorable data-provider-identifier data-provider-name
     description engine exact-settings settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-data-provider-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyDataProvider"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-data-provider))
(common-lisp:progn
 (common-lisp:defun modify-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn endpoint-identifier
                     endpoint-type engine-name username password server-name
                     port database-name extra-connection-attributes
                     certificate-arn ssl-mode service-access-role-arn
                     external-table-definition dynamo-db-settings s3settings
                     dms-transfer-settings mongo-db-settings kinesis-settings
                     kafka-settings elasticsearch-settings neptune-settings
                     redshift-settings postgre-sqlsettings my-sqlsettings
                     oracle-settings sybase-settings
                     microsoft-sqlserver-settings ibmdb2settings
                     doc-db-settings redis-settings exact-settings
                     gcp-my-sqlsettings timestream-settings)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-arn endpoint-identifier endpoint-type
     engine-name username password server-name port database-name
     extra-connection-attributes certificate-arn ssl-mode
     service-access-role-arn external-table-definition dynamo-db-settings
     s3settings dms-transfer-settings mongo-db-settings kinesis-settings
     kafka-settings elasticsearch-settings neptune-settings redshift-settings
     postgre-sqlsettings my-sqlsettings oracle-settings sybase-settings
     microsoft-sqlserver-settings ibmdb2settings doc-db-settings redis-settings
     exact-settings gcp-my-sqlsettings timestream-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-endpoint-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-endpoint))
(common-lisp:progn
 (common-lisp:defun modify-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscription-name sns-topic-arn
                     source-type event-categories enabled)
   (common-lisp:declare
    (common-lisp:ignorable subscription-name sns-topic-arn source-type
     event-categories enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-event-subscription-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyEventSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-event-subscription))
(common-lisp:progn
 (common-lisp:defun modify-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-identifier
                     availability-zone kms-key-arn publicly-accessible
                     network-type instance-profile-name description
                     subnet-group-identifier vpc-security-groups)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-identifier availability-zone
     kms-key-arn publicly-accessible network-type instance-profile-name
     description subnet-group-identifier vpc-security-groups))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-instance-profile-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyInstanceProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-instance-profile))
(common-lisp:progn
 (common-lisp:defun modify-migration-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     migration-project-name source-data-provider-descriptors
                     target-data-provider-descriptors
                     instance-profile-identifier transformation-rules
                     description schema-conversion-application-attributes)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier migration-project-name
     source-data-provider-descriptors target-data-provider-descriptors
     instance-profile-identifier transformation-rules description
     schema-conversion-application-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-migration-project-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyMigrationProject"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-migration-project))
(common-lisp:progn
 (common-lisp:defun modify-replication-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn
                     replication-config-identifier replication-type
                     table-mappings replication-settings supplemental-settings
                     compute-config source-endpoint-arn target-endpoint-arn)
   (common-lisp:declare
    (common-lisp:ignorable replication-config-arn replication-config-identifier
     replication-type table-mappings replication-settings supplemental-settings
     compute-config source-endpoint-arn target-endpoint-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-replication-config-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-replication-config))
(common-lisp:progn
 (common-lisp:defun modify-replication-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn
                     allocated-storage apply-immediately
                     replication-instance-class vpc-security-group-ids
                     preferred-maintenance-window multi-az engine-version
                     allow-major-version-upgrade auto-minor-version-upgrade
                     replication-instance-identifier network-type)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn allocated-storage
     apply-immediately replication-instance-class vpc-security-group-ids
     preferred-maintenance-window multi-az engine-version
     allow-major-version-upgrade auto-minor-version-upgrade
     replication-instance-identifier network-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-replication-instance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-replication-instance))
(common-lisp:progn
 (common-lisp:defun modify-replication-subnet-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-subnet-group-identifier
                     replication-subnet-group-description subnet-ids)
   (common-lisp:declare
    (common-lisp:ignorable replication-subnet-group-identifier
     replication-subnet-group-description subnet-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-replication-subnet-group-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationSubnetGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-replication-subnet-group))
(common-lisp:progn
 (common-lisp:defun modify-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn
                     replication-task-identifier migration-type table-mappings
                     replication-task-settings cdc-start-time
                     cdc-start-position cdc-stop-position task-data)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn replication-task-identifier
     migration-type table-mappings replication-task-settings cdc-start-time
     cdc-start-position cdc-stop-position task-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-modify-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ModifyReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'modify-replication-task))
(common-lisp:progn
 (common-lisp:defun move-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn
                     target-replication-instance-arn)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn
     target-replication-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-move-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "MoveReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'move-replication-task))
(common-lisp:progn
 (common-lisp:defun reboot-replication-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn force-failover
                     force-planned-failover)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn force-failover
     force-planned-failover))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reboot-replication-instance-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootReplicationInstance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reboot-replication-instance))
(common-lisp:progn
 (common-lisp:defun refresh-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-arn replication-instance-arn)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-arn replication-instance-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-refresh-schemas-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RefreshSchemas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'refresh-schemas))
(common-lisp:progn
 (common-lisp:defun reload-replication-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn tables-to-reload
                     reload-option)
   (common-lisp:declare
    (common-lisp:ignorable replication-config-arn tables-to-reload
     reload-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reload-replication-tables-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReloadReplicationTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reload-replication-tables))
(common-lisp:progn
 (common-lisp:defun reload-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn tables-to-reload
                     reload-option)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn tables-to-reload
     reload-option))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reload-tables-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReloadTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reload-tables))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveTagsFromResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun run-fleet-advisor-lsa-analysis ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'dms-request :method "POST" :path "/"
                                :operation "RunFleetAdvisorLsaAnalysis"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'run-fleet-advisor-lsa-analysis))
(common-lisp:progn
 (common-lisp:defun start-extension-pack-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier)
   (common-lisp:declare (common-lisp:ignorable migration-project-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-extension-pack-association-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExtensionPackAssociation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-extension-pack-association))
(common-lisp:progn
 (common-lisp:defun start-metadata-model-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-metadata-model-assessment-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMetadataModelAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-metadata-model-assessment))
(common-lisp:progn
 (common-lisp:defun start-metadata-model-conversion
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-metadata-model-conversion-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMetadataModelConversion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-metadata-model-conversion))
(common-lisp:progn
 (common-lisp:defun start-metadata-model-export-as-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules origin file-name)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules origin
     file-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-metadata-model-export-as-script-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMetadataModelExportAsScript"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-metadata-model-export-as-script))
(common-lisp:progn
 (common-lisp:defun start-metadata-model-export-to-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules overwrite-extension-pack)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules
     overwrite-extension-pack))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-metadata-model-export-to-target-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMetadataModelExportToTarget"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-metadata-model-export-to-target))
(common-lisp:progn
 (common-lisp:defun start-metadata-model-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key migration-project-identifier
                     selection-rules origin refresh)
   (common-lisp:declare
    (common-lisp:ignorable migration-project-identifier selection-rules origin
     refresh))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-metadata-model-import-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMetadataModelImport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-metadata-model-import))
(common-lisp:progn
 (common-lisp:defun start-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-id settings)
   (common-lisp:declare (common-lisp:ignorable database-id settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-recommendations))
(common-lisp:progn
 (common-lisp:defun start-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn
                     start-replication-type cdc-start-time cdc-start-position
                     cdc-stop-position)
   (common-lisp:declare
    (common-lisp:ignorable replication-config-arn start-replication-type
     cdc-start-time cdc-start-position cdc-stop-position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-replication-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-replication))
(common-lisp:progn
 (common-lisp:defun start-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn
                     start-replication-task-type cdc-start-time
                     cdc-start-position cdc-stop-position)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn start-replication-task-type
     cdc-start-time cdc-start-position cdc-stop-position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-replication-task))
(common-lisp:progn
 (common-lisp:defun start-replication-task-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn)
   (common-lisp:declare (common-lisp:ignorable replication-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-replication-task-assessment-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartReplicationTaskAssessment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-replication-task-assessment))
(common-lisp:progn
 (common-lisp:defun start-replication-task-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn
                     service-access-role-arn result-location-bucket
                     result-location-folder result-encryption-mode
                     result-kms-key-arn assessment-run-name include-only
                     exclude)
   (common-lisp:declare
    (common-lisp:ignorable replication-task-arn service-access-role-arn
     result-location-bucket result-location-folder result-encryption-mode
     result-kms-key-arn assessment-run-name include-only exclude))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-replication-task-assessment-run-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartReplicationTaskAssessmentRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-replication-task-assessment-run))
(common-lisp:progn
 (common-lisp:defun stop-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-config-arn)
   (common-lisp:declare (common-lisp:ignorable replication-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-replication-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-replication))
(common-lisp:progn
 (common-lisp:defun stop-replication-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-task-arn)
   (common-lisp:declare (common-lisp:ignorable replication-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-replication-task-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopReplicationTask"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-replication-task))
(common-lisp:progn
 (common-lisp:defun test-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key replication-instance-arn endpoint-arn)
   (common-lisp:declare
    (common-lisp:ignorable replication-instance-arn endpoint-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-connection-message
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'test-connection))
(common-lisp:progn
 (common-lisp:defun update-subscriptions-to-event-bridge
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force-move)
   (common-lisp:declare (common-lisp:ignorable force-move))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscriptions-to-event-bridge-message
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dms-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSubscriptionsToEventBridge"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscriptions-to-event-bridge))
