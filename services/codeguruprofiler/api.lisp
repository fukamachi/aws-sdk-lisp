;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/codeguruprofiler/api (:use)
                             (:nicknames #:aws/codeguruprofiler)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeguruprofiler/api)
(common-lisp:progn
 (common-lisp:define-condition codeguruprofiler-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeguruprofiler-error))
(common-lisp:progn
 (common-lisp:defclass codeguruprofiler-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "codeguruprofiler"
                        :api-version "2019-07-18" :host-prefix
                        "codeguru-profiler" :signing-name "codeguru-profiler"
                        :global-host common-lisp:nil))
 (common-lisp:export 'codeguruprofiler-request))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype action-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-notification-channels-request common-lisp:nil
                       ((channels :initarg :channels :initform
                         (common-lisp:error ":channels is required") :type
                         (common-lisp:or channels common-lisp:null) :accessor
                         struct-shape-add-notification-channels-request-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-add-notification-channels-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-notification-channels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-notification-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-notification-channels-request
                    'make-add-notification-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-notification-channels-response common-lisp:nil
                       ((notification-configuration :initarg
                         :notification-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-add-notification-channels-response-notification-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-notification-channels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-notification-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-notification-channels-response
                    'make-add-notification-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-configuration common-lisp:nil
                       ((agent-parameters :initarg :agent-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or agent-parameters common-lisp:null)
                         :accessor
                         struct-shape-agent-configuration-agent-parameters
                         :shape "AgentParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period-in-seconds :initarg :period-in-seconds
                         :initform
                         (common-lisp:error ":periodinseconds is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-agent-configuration-period-in-seconds
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (should-profile :initarg :should-profile :initform
                         (common-lisp:error ":shouldprofile is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-agent-configuration-should-profile :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-configuration 'make-agent-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-parameters))
      (common-lisp:list
       (common-lisp:cons "agentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "periodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'should-profile))
      (common-lisp:list
       (common-lisp:cons "shouldProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-orchestration-config common-lisp:nil
                       ((profiling-enabled :initarg :profiling-enabled
                         :initform
                         (common-lisp:error ":profilingenabled is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-agent-orchestration-config-profiling-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-agent-orchestration-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'agent-orchestration-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'agent-orchestration-config
                    'make-agent-orchestration-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-enabled))
      (common-lisp:list
       (common-lisp:cons "profilingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   common-lisp:nil))
(common-lisp:deftype agent-parameter-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-agent-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype agent-profile ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype aggregated-profile ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass aggregated-profile-time common-lisp:nil
                       ((period :initarg :period :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor struct-shape-aggregated-profile-time-period
                         :shape "AggregationPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-aggregated-profile-time-start :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-profile-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-profile-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-profile-time 'make-aggregated-profile-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   common-lisp:nil))
(common-lisp:deftype aggregation-period () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomalies () '(trivial-types:proper-list anomaly))
 (common-lisp:defun make-anomalies
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((instances :initarg :instances :initform
                         (common-lisp:error ":instances is required") :type
                         (common-lisp:or anomaly-instances common-lisp:null)
                         :accessor struct-shape-anomaly-instances :shape
                         "AnomalyInstances" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric :initarg :metric :initform
                         (common-lisp:error ":metric is required") :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         struct-shape-anomaly-metric :shape "Metric" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason :initarg :reason :initform
                         (common-lisp:error ":reason is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-anomaly-reason :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-instance common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-anomaly-instance-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-anomaly-instance-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-anomaly-instance-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-feedback :initarg :user-feedback :initform
                         common-lisp:nil :type
                         (common-lisp:or user-feedback common-lisp:null)
                         :accessor struct-shape-anomaly-instance-user-feedback
                         :shape "UserFeedback" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-anomaly-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'anomaly-instance 'make-anomaly-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-feedback))
      (common-lisp:list
       (common-lisp:cons "userFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-instance))
   common-lisp:nil))
(common-lisp:deftype anomaly-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-instances ()
   '(trivial-types:proper-list anomaly-instance))
 (common-lisp:defun make-anomaly-instances
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-frame-metric-data-request common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (frame-metrics :initarg :frame-metrics :initform
                         common-lisp:nil :type
                         (common-lisp:or frame-metrics common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-request-frame-metrics
                         :shape "FrameMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (period :initarg :period :initform common-lisp:nil
                         :type (common-lisp:or period common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-request-period
                         :shape "Period" :location "querystring" :location-name
                         "period")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-frame-metric-data-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime")
                        (target-resolution :initarg :target-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-request-target-resolution
                         :shape "AggregationPeriod" :location "querystring"
                         :location-name "targetResolution"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-frame-metric-data-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-frame-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-frame-metric-data-request
                    'make-batch-get-frame-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metrics))
      (common-lisp:list
       (common-lisp:cons "frameMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-frame-metric-data-response common-lisp:nil
                       ((end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-frame-metric-data-response-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-times :initarg :end-times :initform
                         (common-lisp:error ":endtimes is required") :type
                         (common-lisp:or list-of-timestamps common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-response-end-times
                         :shape "ListOfTimestamps" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (frame-metric-data :initarg :frame-metric-data
                         :initform
                         (common-lisp:error ":framemetricdata is required")
                         :type
                         (common-lisp:or frame-metric-data common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-response-frame-metric-data
                         :shape "FrameMetricData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resolution :initarg :resolution :initform
                         (common-lisp:error ":resolution is required") :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-response-resolution
                         :shape "AggregationPeriod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-batch-get-frame-metric-data-response-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-end-times :initarg :unprocessed-end-times
                         :initform
                         (common-lisp:error ":unprocessedendtimes is required")
                         :type
                         (common-lisp:or unprocessed-end-time-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-frame-metric-data-response-unprocessed-end-times
                         :shape "UnprocessedEndTimeMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-frame-metric-data-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-frame-metric-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-frame-metric-data-response
                    'make-batch-get-frame-metric-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-times))
      (common-lisp:list
       (common-lisp:cons "endTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metric-data))
      (common-lisp:list
       (common-lisp:cons "frameMetricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-end-times))
      (common-lisp:list
       (common-lisp:cons "unprocessedEndTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass channel common-lisp:nil
                       ((event-publishers :initarg :event-publishers :initform
                         (common-lisp:error ":eventpublishers is required")
                         :type
                         (common-lisp:or event-publishers common-lisp:null)
                         :accessor struct-shape-channel-event-publishers :shape
                         "EventPublishers" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         struct-shape-channel-id :shape "ChannelId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (uri :initarg :uri :initform
                         (common-lisp:error ":uri is required") :type
                         (common-lisp:or channel-uri common-lisp:null)
                         :accessor struct-shape-channel-uri :shape "ChannelUri"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-publishers))
      (common-lisp:list
       (common-lisp:cons "eventPublishers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-id () 'common-lisp:string)
(common-lisp:deftype channel-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun make-channels
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype compute-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configure-agent-request common-lisp:nil
                       ((fleet-instance-id :initarg :fleet-instance-id
                         :initform common-lisp:nil :type
                         (common-lisp:or fleet-instance-id common-lisp:null)
                         :accessor
                         struct-shape-configure-agent-request-fleet-instance-id
                         :shape "FleetInstanceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor
                         struct-shape-configure-agent-request-metadata :shape
                         "Metadata" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-configure-agent-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configure-agent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configure-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configure-agent-request 'make-configure-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-instance-id))
      (common-lisp:list
       (common-lisp:cons "fleetInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configure-agent-response common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or agent-configuration common-lisp:null)
                         :accessor
                         struct-shape-configure-agent-response-configuration
                         :shape "AgentConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configure-agent-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configure-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configure-agent-response 'make-configure-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-profiling-group-request common-lisp:nil
                       ((agent-orchestration-config :initarg
                         :agent-orchestration-config :initform common-lisp:nil
                         :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profiling-group-request-agent-orchestration-config
                         :shape "AgentOrchestrationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         (common-lisp:error ":clienttoken is required") :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-profiling-group-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken")
                        (compute-platform :initarg :compute-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor
                         struct-shape-create-profiling-group-request-compute-platform
                         :shape "ComputePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-create-profiling-group-request-profiling-group-name
                         :shape "ProfilingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-profiling-group-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profiling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profiling-group-request
                    'make-create-profiling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :profiling-group :initform
                         (common-lisp:error ":profilinggroup is required")
                         :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-profiling-group-response-profiling-group
                         :shape "ProfilingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-profiling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-profiling-group-response
                    'make-create-profiling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass delete-profiling-group-request common-lisp:nil
                       ((profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-delete-profiling-group-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profiling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profiling-group-request
                    'make-delete-profiling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profiling-group-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-profiling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-profiling-group-response
                    'make-delete-profiling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profiling-group-request common-lisp:nil
                       ((profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-describe-profiling-group-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-profiling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-profiling-group-request
                    'make-describe-profiling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :profiling-group :initform
                         (common-lisp:error ":profilinggroup is required")
                         :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-profiling-group-response-profiling-group
                         :shape "ProfilingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-profiling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-profiling-group-response
                    'make-describe-profiling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype event-publisher () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-publishers ()
   '(trivial-types:proper-list event-publisher))
 (common-lisp:defun make-event-publishers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-publisher))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feedback-type () 'common-lisp:string)
(common-lisp:deftype findings-report-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype findings-report-summaries ()
   '(trivial-types:proper-list findings-report-summary))
 (common-lisp:defun make-findings-report-summaries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list findings-report-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass findings-report-summary common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or findings-report-id common-lisp:null)
                         :accessor struct-shape-findings-report-summary-id
                         :shape "FindingsReportId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-end-time :initarg :profile-end-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-findings-report-summary-profile-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-start-time :initarg :profile-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-findings-report-summary-profile-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-findings-report-summary-profiling-group-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-number-of-findings :initarg
                         :total-number-of-findings :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-findings-report-summary-total-number-of-findings
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-findings-report-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'findings-report-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'findings-report-summary 'make-findings-report-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-end-time))
      (common-lisp:list
       (common-lisp:cons "profileEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-start-time))
      (common-lisp:list
       (common-lisp:cons "profileStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-findings))
      (common-lisp:list
       (common-lisp:cons "totalNumberOfFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   common-lisp:nil))
(common-lisp:deftype fleet-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-metric common-lisp:nil
                       ((frame-name :initarg :frame-name :initform
                         (common-lisp:error ":framename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-frame-metric-frame-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thread-states :initarg :thread-states :initform
                         (common-lisp:error ":threadstates is required") :type
                         (common-lisp:or thread-states common-lisp:null)
                         :accessor struct-shape-frame-metric-thread-states
                         :shape "ThreadStates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor struct-shape-frame-metric-type :shape
                         "MetricType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'frame-metric 'make-frame-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frame-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frame-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-name))
      (common-lisp:list
       (common-lisp:cons "frameName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-states))
      (common-lisp:list
       (common-lisp:cons "threadStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frame-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype frame-metric-data ()
   '(trivial-types:proper-list frame-metric-datum))
 (common-lisp:defun make-frame-metric-data
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass frame-metric-datum common-lisp:nil
                       ((frame-metric :initarg :frame-metric :initform
                         (common-lisp:error ":framemetric is required") :type
                         (common-lisp:or frame-metric common-lisp:null)
                         :accessor struct-shape-frame-metric-datum-frame-metric
                         :shape "FrameMetric" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or frame-metric-values common-lisp:null)
                         :accessor struct-shape-frame-metric-datum-values
                         :shape "FrameMetricValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-frame-metric-datum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'frame-metric-datum
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'frame-metric-datum 'make-frame-metric-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metric))
      (common-lisp:list
       (common-lisp:cons "frameMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   common-lisp:nil))
(common-lisp:deftype frame-metric-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype frame-metric-values ()
   '(trivial-types:proper-list frame-metric-value))
 (common-lisp:defun make-frame-metric-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype frame-metrics ()
   '(trivial-types:proper-list frame-metric))
 (common-lisp:defun make-frame-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-findings-report-account-summary-request
                       common-lisp:nil
                       ((daily-reports-only :initarg :daily-reports-only
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-findings-report-account-summary-request-daily-reports-only
                         :shape "Boolean" :location "querystring"
                         :location-name "dailyReportsOnly")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-findings-report-account-summary-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-findings-report-account-summary-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-report-account-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-report-account-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-account-summary-request
                    'make-get-findings-report-account-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-report-account-summary-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-findings-report-account-summary-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (report-summaries :initarg :report-summaries :initform
                         (common-lisp:error ":reportsummaries is required")
                         :type
                         (common-lisp:or findings-report-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-findings-report-account-summary-response-report-summaries
                         :shape "FindingsReportSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-findings-report-account-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-report-account-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-account-summary-response
                    'make-get-findings-report-account-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-summaries))
      (common-lisp:list
       (common-lisp:cons "reportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-configuration-request common-lisp:nil
                       ((profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-notification-configuration-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-notification-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-notification-configuration-request
                    'make-get-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-configuration-response common-lisp:nil
                       ((notification-configuration :initarg
                         :notification-configuration :initform
                         (common-lisp:error
                          ":notificationconfiguration is required")
                         :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-notification-configuration-response-notification-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-notification-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-notification-configuration-response
                    'make-get-notification-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-policy-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-policy-response-policy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor struct-shape-get-policy-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-request common-lisp:nil
                       ((accept :initarg :accept :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-get-profile-request-accept
                         :shape "String" :location "header" :location-name
                         "Accept")
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-get-profile-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (max-depth :initarg :max-depth :initform
                         common-lisp:nil :type
                         (common-lisp:or max-depth common-lisp:null) :accessor
                         struct-shape-get-profile-request-max-depth :shape
                         "MaxDepth" :location "querystring" :location-name
                         "maxDepth")
                        (period :initarg :period :initform common-lisp:nil
                         :type (common-lisp:or period common-lisp:null)
                         :accessor struct-shape-get-profile-request-period
                         :shape "Period" :location "querystring" :location-name
                         "period")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-profile-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-profile-request-start-time :shape
                         "Timestamp" :location "querystring" :location-name
                         "startTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-request 'make-get-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-response common-lisp:nil
                       ((content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-profile-response-content-encoding
                         :shape "String" :location "header" :location-name
                         "Content-Encoding")
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-profile-response-content-type :shape
                         "String" :location "header" :location-name
                         "Content-Type")
                        (profile :initarg :profile :initform
                         (common-lisp:error ":profile is required") :type
                         (common-lisp:or aggregated-profile common-lisp:null)
                         :accessor struct-shape-get-profile-response-profile
                         :shape "AggregatedProfile" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-profile-response 'make-get-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-request common-lisp:nil
                       ((end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-recommendations-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or locale common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-locale :shape
                         "Locale" :location "querystring" :location-name
                         "locale")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-recommendations-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-request
                    'make-get-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-response common-lisp:nil
                       ((anomalies :initarg :anomalies :initform
                         (common-lisp:error ":anomalies is required") :type
                         (common-lisp:or anomalies common-lisp:null) :accessor
                         struct-shape-get-recommendations-response-anomalies
                         :shape "Anomalies" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-end-time :initarg :profile-end-time :initform
                         (common-lisp:error ":profileendtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-profile-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-start-time :initarg :profile-start-time
                         :initform
                         (common-lisp:error ":profilestarttime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-profile-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-profiling-group-name
                         :shape "ProfilingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendations :initarg :recommendations :initform
                         (common-lisp:error ":recommendations is required")
                         :type
                         (common-lisp:or recommendations common-lisp:null)
                         :accessor
                         struct-shape-get-recommendations-response-recommendations
                         :shape "Recommendations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-response
                    'make-get-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-end-time))
      (common-lisp:list
       (common-lisp:cons "profileEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-start-time))
      (common-lisp:list
       (common-lisp:cons "profileStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-findings-reports-request common-lisp:nil
                       ((daily-reports-only :initarg :daily-reports-only
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-findings-reports-request-daily-reports-only
                         :shape "Boolean" :location "querystring"
                         :location-name "dailyReportsOnly")
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-findings-reports-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-findings-reports-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-findings-reports-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-findings-reports-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-findings-reports-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-reports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-reports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-reports-request
                    'make-list-findings-reports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-reports-response common-lisp:nil
                       ((findings-report-summaries :initarg
                         :findings-report-summaries :initform
                         (common-lisp:error
                          ":findingsreportsummaries is required")
                         :type
                         (common-lisp:or findings-report-summaries
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-findings-reports-response-findings-report-summaries
                         :shape "FindingsReportSummaries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-findings-reports-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-reports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-reports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-reports-response
                    'make-list-findings-reports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'findings-report-summaries))
      (common-lisp:list
       (common-lisp:cons "findingsReportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-timestamps ()
   '(trivial-types:proper-list timestamp-structure))
 (common-lisp:defun make-list-of-timestamps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-structure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-profile-times-request common-lisp:nil
                       ((end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-profile-times-request-end-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "endTime")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-request-order-by
                         :shape "OrderBy" :location "querystring"
                         :location-name "orderBy")
                        (period :initarg :period :initform
                         (common-lisp:error ":period is required") :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-request-period :shape
                         "AggregationPeriod" :location "querystring"
                         :location-name "period")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-list-profile-times-request-start-time
                         :shape "Timestamp" :location "querystring"
                         :location-name "startTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-times-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-times-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-times-request
                    'make-list-profile-times-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-times-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profile-times :initarg :profile-times :initform
                         (common-lisp:error ":profiletimes is required") :type
                         (common-lisp:or profile-times common-lisp:null)
                         :accessor
                         struct-shape-list-profile-times-response-profile-times
                         :shape "ProfileTimes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profile-times-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-times-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profile-times-response
                    'make-list-profile-times-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-times))
      (common-lisp:list
       (common-lisp:cons "profileTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiling-groups-request common-lisp:nil
                       ((include-description :initarg :include-description
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-list-profiling-groups-request-include-description
                         :shape "Boolean" :location "querystring"
                         :location-name "includeDescription")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-profiling-groups-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-profiling-groups-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profiling-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profiling-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profiling-groups-request
                    'make-list-profiling-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiling-groups-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-profiling-groups-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-names :initarg :profiling-group-names
                         :initform
                         (common-lisp:error ":profilinggroupnames is required")
                         :type
                         (common-lisp:or profiling-group-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profiling-groups-response-profiling-group-names
                         :shape "ProfilingGroupNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-groups :initarg :profiling-groups :initform
                         common-lisp:nil :type
                         (common-lisp:or profiling-group-descriptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-profiling-groups-response-profiling-groups
                         :shape "ProfilingGroupDescriptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-profiling-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profiling-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-profiling-groups-response
                    'make-list-profiling-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-names))
      (common-lisp:list
       (common-lisp:cons "profilingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-groups))
      (common-lisp:list
       (common-lisp:cons "profilingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ProfilingGroupArn" :location "uri"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass match common-lisp:nil
                       ((frame-address :initarg :frame-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-match-frame-address :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-frames-index :initarg :target-frames-index
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-match-target-frames-index :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (threshold-breach-value :initarg
                         :threshold-breach-value :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor struct-shape-match-threshold-breach-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-match
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'match
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'match 'make-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-address))
      (common-lisp:list
       (common-lisp:cons "frameAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-frames-index))
      (common-lisp:list
       (common-lisp:cons "targetFramesIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-breach-value))
      (common-lisp:list
       (common-lisp:cons "thresholdBreachValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matches () '(trivial-types:proper-list match))
 (common-lisp:defun make-matches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-depth () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((frame-name :initarg :frame-name :initform
                         (common-lisp:error ":framename is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-metric-frame-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (thread-states :initarg :thread-states :initform
                         (common-lisp:error ":threadstates is required") :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-metric-thread-states :shape "Strings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor struct-shape-metric-type :shape "MetricType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-name))
      (common-lisp:list
       (common-lisp:cons "frameName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-states))
      (common-lisp:list
       (common-lisp:cons "threadStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((channels :initarg :channels :initform common-lisp:nil
                         :type (common-lisp:or channels common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-channels
                         :shape "Channels" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pattern common-lisp:nil
                       ((counters-to-aggregate :initarg :counters-to-aggregate
                         :initform common-lisp:nil :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         struct-shape-pattern-counters-to-aggregate :shape
                         "Strings" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pattern-description :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pattern-id :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pattern-name :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolution-steps :initarg :resolution-steps :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-pattern-resolution-steps :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-frames :initarg :target-frames :initform
                         common-lisp:nil :type
                         (common-lisp:or target-frames common-lisp:null)
                         :accessor struct-shape-pattern-target-frames :shape
                         "TargetFrames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold-percent :initarg :threshold-percent
                         :initform common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-pattern-threshold-percent :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pattern
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pattern
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'pattern 'make-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'counters-to-aggregate))
      (common-lisp:list
       (common-lisp:cons "countersToAggregate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-steps))
      (common-lisp:list
       (common-lisp:cons "resolutionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-frames))
      (common-lisp:list
       (common-lisp:cons "targetFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-percent))
      (common-lisp:list
       (common-lisp:cons "thresholdPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pattern))
   common-lisp:nil))
(common-lisp:deftype percentage () 'common-lisp:double-float)
(common-lisp:deftype period () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-agent-profile-request common-lisp:nil
                       ((agent-profile :initarg :agent-profile :initform
                         (common-lisp:error ":agentprofile is required") :type
                         (common-lisp:or agent-profile common-lisp:null)
                         :accessor
                         struct-shape-post-agent-profile-request-agent-profile
                         :shape "AgentProfile" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (content-type :initarg :content-type :initform
                         (common-lisp:error ":contenttype is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-post-agent-profile-request-content-type
                         :shape "String" :location "header" :location-name
                         "Content-Type")
                        (profile-token :initarg :profile-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-post-agent-profile-request-profile-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "profileToken")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-post-agent-profile-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-agent-profile-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-agent-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-agent-profile-request
                    'make-post-agent-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-profile))
      (common-lisp:list
       (common-lisp:cons "agentProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'agent-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass post-agent-profile-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-post-agent-profile-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'post-agent-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'post-agent-profile-response
                    'make-post-agent-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   common-lisp:nil))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun make-principals
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-time common-lisp:nil
                       ((start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profile-time-start :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profile-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profile-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'profile-time 'make-profile-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-times ()
   '(trivial-types:proper-list profile-time))
 (common-lisp:defun make-profile-times
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profiling-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass profiling-group-description common-lisp:nil
                       ((agent-orchestration-config :initarg
                         :agent-orchestration-config :initform common-lisp:nil
                         :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-profiling-group-description-agent-orchestration-config
                         :shape "AgentOrchestrationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor struct-shape-profiling-group-description-arn
                         :shape "ProfilingGroupArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compute-platform :initarg :compute-platform :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor
                         struct-shape-profiling-group-description-compute-platform
                         :shape "ComputePlatform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profiling-group-description-created-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-profiling-group-description-name :shape
                         "ProfilingGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-status :initarg :profiling-status :initform
                         common-lisp:nil :type
                         (common-lisp:or profiling-status common-lisp:null)
                         :accessor
                         struct-shape-profiling-group-description-profiling-status
                         :shape "ProfilingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-profiling-group-description-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profiling-group-description-updated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profiling-group-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profiling-group-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profiling-group-description
                    'make-profiling-group-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-status))
      (common-lisp:list
       (common-lisp:cons "profilingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profiling-group-descriptions ()
   '(trivial-types:proper-list profiling-group-description))
 (common-lisp:defun make-profiling-group-descriptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profiling-group-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profiling-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profiling-group-names ()
   '(trivial-types:proper-list profiling-group-name))
 (common-lisp:defun make-profiling-group-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profiling-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profiling-status common-lisp:nil
                       ((latest-agent-orchestrated-at :initarg
                         :latest-agent-orchestrated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profiling-status-latest-agent-orchestrated-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-agent-profile-reported-at :initarg
                         :latest-agent-profile-reported-at :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-profiling-status-latest-agent-profile-reported-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-aggregated-profile :initarg
                         :latest-aggregated-profile :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregated-profile-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-profiling-status-latest-aggregated-profile
                         :shape "AggregatedProfileTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-profiling-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'profiling-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'profiling-status 'make-profiling-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profiling-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profiling-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-agent-orchestrated-at))
      (common-lisp:list
       (common-lisp:cons "latestAgentOrchestratedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-agent-profile-reported-at))
      (common-lisp:list
       (common-lisp:cons "latestAgentProfileReportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-aggregated-profile))
      (common-lisp:list
       (common-lisp:cons "latestAggregatedProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profiling-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-permission-request common-lisp:nil
                       ((action-group :initarg :action-group :initform
                         (common-lisp:error ":actiongroup is required") :type
                         (common-lisp:or action-group common-lisp:null)
                         :accessor
                         struct-shape-put-permission-request-action-group
                         :shape "ActionGroup" :location "uri" :location-name
                         "actionGroup")
                        (principals :initarg :principals :initform
                         (common-lisp:error ":principals is required") :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         struct-shape-put-permission-request-principals :shape
                         "Principals" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-put-permission-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (revision-id :initarg :revision-id :initform
                         common-lisp:nil :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-put-permission-request-revision-id :shape
                         "RevisionId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-permission-request 'make-put-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-permission-response common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-permission-response-policy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-put-permission-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-permission-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-permission-response 'make-put-permission-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((all-matches-count :initarg :all-matches-count
                         :initform
                         (common-lisp:error ":allmatchescount is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-recommendation-all-matches-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (all-matches-sum :initarg :all-matches-sum :initform
                         (common-lisp:error ":allmatchessum is required") :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-recommendation-all-matches-sum :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-recommendation-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pattern :initarg :pattern :initform
                         (common-lisp:error ":pattern is required") :type
                         (common-lisp:or pattern common-lisp:null) :accessor
                         struct-shape-recommendation-pattern :shape "Pattern"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-recommendation-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (top-matches :initarg :top-matches :initform
                         (common-lisp:error ":topmatches is required") :type
                         (common-lisp:or matches common-lisp:null) :accessor
                         struct-shape-recommendation-top-matches :shape
                         "Matches" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-matches-count))
      (common-lisp:list
       (common-lisp:cons "allMatchesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-matches-sum))
      (common-lisp:list
       (common-lisp:cons "allMatchesSum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-matches))
      (common-lisp:list
       (common-lisp:cons "topMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendations ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun make-recommendations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remove-notification-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :initform
                         (common-lisp:error ":channelid is required") :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         struct-shape-remove-notification-channel-request-channel-id
                         :shape "ChannelId" :location "uri" :location-name
                         "channelId")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-remove-notification-channel-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-notification-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-notification-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-request
                    'make-remove-notification-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-notification-channel-response common-lisp:nil
                       ((notification-configuration :initarg
                         :notification-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-notification-channel-response-notification-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-notification-channel-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-notification-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-response
                    'make-remove-notification-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-permission-request common-lisp:nil
                       ((action-group :initarg :action-group :initform
                         (common-lisp:error ":actiongroup is required") :type
                         (common-lisp:or action-group common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-request-action-group
                         :shape "ActionGroup" :location "uri" :location-name
                         "actionGroup")
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-request-revision-id
                         :shape "RevisionId" :location "querystring"
                         :location-name "revisionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-permission-response common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remove-permission-response-policy :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revision-id :initarg :revision-id :initform
                         (common-lisp:error ":revisionid is required") :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor
                         struct-shape-remove-permission-response-revision-id
                         :shape "RevisionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-permission-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-permission-response
                    'make-remove-permission-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype strings () '(trivial-types:proper-list string))
 (common-lisp:defun make-strings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass submit-feedback-request common-lisp:nil
                       ((anomaly-instance-id :initarg :anomaly-instance-id
                         :initform
                         (common-lisp:error ":anomalyinstanceid is required")
                         :type
                         (common-lisp:or anomaly-instance-id common-lisp:null)
                         :accessor
                         struct-shape-submit-feedback-request-anomaly-instance-id
                         :shape "AnomalyInstanceId" :location "uri"
                         :location-name "anomalyInstanceId")
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-submit-feedback-request-comment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-submit-feedback-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName")
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or feedback-type common-lisp:null)
                         :accessor struct-shape-submit-feedback-request-type
                         :shape "FeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-feedback-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'submit-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-feedback-request 'make-submit-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-feedback-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-submit-feedback-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'submit-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'submit-feedback-response 'make-submit-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ProfilingGroupArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype target-frame () '(trivial-types:proper-list string))
 (common-lisp:defun make-target-frame
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-frames ()
   '(trivial-types:proper-list target-frame))
 (common-lisp:defun make-target-frames
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-frame))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thread-states () '(trivial-types:proper-list string))
 (common-lisp:defun make-thread-states
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-structure common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-timestamp-structure-value :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timestamp-structure
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-structure
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'timestamp-structure 'make-timestamp-structure))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-end-time-map () 'common-lisp:hash-table)
 (common-lisp:defun make-unprocessed-end-time-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ProfilingGroupArn" :location "uri"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profiling-group-request common-lisp:nil
                       ((agent-orchestration-config :initarg
                         :agent-orchestration-config :initform
                         (common-lisp:error
                          ":agentorchestrationconfig is required")
                         :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profiling-group-request-agent-orchestration-config
                         :shape "AgentOrchestrationConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (profiling-group-name :initarg :profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required")
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         struct-shape-update-profiling-group-request-profiling-group-name
                         :shape "ProfilingGroupName" :location "uri"
                         :location-name "profilingGroupName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profiling-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profiling-group-request
                    'make-update-profiling-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :profiling-group :initform
                         (common-lisp:error ":profilinggroup is required")
                         :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-profiling-group-response-profiling-group
                         :shape "ProfilingGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-profiling-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-profiling-group-response
                    'make-update-profiling-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass user-feedback common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or feedback-type common-lisp:null)
                         :accessor struct-shape-user-feedback-type :shape
                         "FeedbackType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-feedback
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user-feedback 'make-user-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeguruprofiler-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun add-notification-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable channels profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-notification-channels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "AddNotificationChannels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-notification-channels))
(common-lisp:progn
 (common-lisp:defun batch-get-frame-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time frame-metrics period
                     profiling-group-name start-time target-resolution)
   (common-lisp:declare
    (common-lisp:ignorable end-time frame-metrics period profiling-group-name
     start-time target-resolution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-frame-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/frames/-/metrics"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "BatchGetFrameMetricData"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-frame-metric-data))
(common-lisp:progn
 (common-lisp:defun configure-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-instance-id metadata
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable fleet-instance-id metadata profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-configure-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/configureAgent"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ConfigureAgent"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'configure-agent))
(common-lisp:progn
 (common-lisp:defun create-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-orchestration-config client-token
                     compute-platform profiling-group-name tags)
   (common-lisp:declare
    (common-lisp:ignorable agent-orchestration-config client-token
     compute-platform profiling-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        "/profilingGroups" "CreateProfilingGroup"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-profiling-group))
(common-lisp:progn
 (common-lisp:defun delete-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "DeleteProfilingGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-profiling-group))
(common-lisp:progn
 (common-lisp:defun describe-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "DescribeProfilingGroup"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-profiling-group))
(common-lisp:progn
 (common-lisp:defun get-findings-report-account-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key daily-reports-only max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable daily-reports-only max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-findings-report-account-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        "/internal/findingsReports" "GetFindingsReportAccountSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-findings-report-account-summary))
(common-lisp:progn
 (common-lisp:defun get-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetNotificationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept end-time max-depth period
                     profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable accept end-time max-depth period
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/profile"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetProfile")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time locale profiling-group-name
                     start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time locale profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/recommendations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-recommendations))
(common-lisp:progn
 (common-lisp:defun list-findings-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key daily-reports-only end-time max-results
                     next-token profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable daily-reports-only end-time max-results next-token
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-reports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/findingsReports"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ListFindingsReports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-findings-reports))
(common-lisp:progn
 (common-lisp:defun list-profile-times
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results next-token order-by
                     period profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results next-token order-by period
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-times-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/profileTimes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ListProfileTimes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profile-times))
(common-lisp:progn
 (common-lisp:defun list-profiling-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-description max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable include-description max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiling-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        "/profilingGroups" "ListProfilingGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-profiling-groups))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun post-agent-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-profile content-type profile-token
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable agent-profile content-type profile-token
     profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-post-agent-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/agentProfile"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "PostAgentProfile"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'post-agent-profile))
(common-lisp:progn
 (common-lisp:defun put-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-group principals
                     profiling-group-name revision-id)
   (common-lisp:declare
    (common-lisp:ignorable action-group principals profiling-group-name
     revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'action-group))))
        "PutPermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-permission))
(common-lisp:progn
 (common-lisp:defun remove-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable channel-id profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-notification-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-id))))
        "RemoveNotificationChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-notification-channel))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-group profiling-group-name
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable action-group profiling-group-name revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'action-group))))
        "RemovePermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun submit-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-instance-id comment
                     profiling-group-name type)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-instance-id comment profiling-group-name
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-submit-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/anomalies/~A/feedback"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'anomaly-instance-id))))
        "SubmitFeedback"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'submit-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-orchestration-config
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable agent-orchestration-config profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "UpdateProfilingGroup"))
      "structure" common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-profiling-group))
