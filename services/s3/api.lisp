;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/s3/api
  (:use)
  (:nicknames #:aws/s3)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/s3/api)
(common-lisp:progn
 (common-lisp:define-condition s3-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 's3-error))
(common-lisp:progn
 (common-lisp:defclass s3-request (aws-sdk/rest-xml-request:rest-xml-request)
                       common-lisp:nil
                       (:default-initargs :service "s3" :api-version
                        "2006-03-01" :host-prefix "s3" :signing-name
                        common-lisp:nil :global-host "s3.amazonaws.com"))
 (common-lisp:export 's3-request))
(common-lisp:defvar *error-map*
  '(("BucketAlreadyExists" . bucket-already-exists)
    ("BucketAlreadyOwnedByYou" . bucket-already-owned-by-you)
    ("InvalidObjectState" . invalid-object-state)
    ("NoSuchBucket" . no-such-bucket) ("NoSuchKey" . no-such-key)
    ("NoSuchUpload" . no-such-upload)
    ("ObjectAlreadyInActiveTierError" . object-already-in-active-tier-error)
    ("ObjectNotInActiveTierError" . object-not-in-active-tier-error)))
(common-lisp:deftype abort-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass abort-incomplete-multipart-upload common-lisp:nil
                       ((days-after-initiation :initarg :days-after-initiation
                         :initform common-lisp:nil :type
                         (common-lisp:or days-after-initiation
                                         common-lisp:null)
                         :accessor
                         struct-shape-abort-incomplete-multipart-upload-days-after-initiation
                         :shape "DaysAfterInitiation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-incomplete-multipart-upload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-incomplete-multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'abort-incomplete-multipart-upload
                    'make-abort-incomplete-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'days-after-initiation))
      (common-lisp:list
       (common-lisp:cons "DaysAfterInitiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-incomplete-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-multipart-upload-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-abort-multipart-upload-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-multipart-upload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-output
                    'make-abort-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-multipart-upload-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-abort-multipart-upload-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-abort-multipart-upload-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":upload-id is required") :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor
                         struct-shape-abort-multipart-upload-request-upload-id
                         :shape "MultipartUploadId" :location "querystring"
                         :location-name "uploadId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-abort-multipart-upload-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-abort-multipart-upload-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-abort-multipart-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'abort-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'abort-multipart-upload-request
                    'make-abort-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-multipart-upload-request))
   common-lisp:nil))
(common-lisp:deftype abort-rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accelerate-configuration common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-accelerate-status
                                         common-lisp:null)
                         :accessor struct-shape-accelerate-configuration-status
                         :shape "BucketAccelerateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accelerate-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accelerate-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accelerate-configuration 'make-accelerate-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accelerate-configuration))
   common-lisp:nil))
(common-lisp:deftype accept-ranges () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-control-policy common-lisp:nil
                       ((grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grants common-lisp:null)
                         :accessor struct-shape-access-control-policy-grants
                         :shape "Grants" :location common-lisp:nil
                         :location-name "AccessControlList")
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-access-control-policy-owner :shape
                         "Owner" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-policy 'make-access-control-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-control-translation common-lisp:nil
                       ((owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or owner-override common-lisp:null)
                         :accessor
                         struct-shape-access-control-translation-owner :shape
                         "OwnerOverride" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-control-translation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-control-translation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-control-translation
                    'make-access-control-translation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-translation))
   common-lisp:nil))
(common-lisp:deftype access-key-id-value () 'common-lisp:string)
(common-lisp:deftype access-point-alias () 'common-lisp:boolean)
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype allow-quoted-record-delimiter () 'common-lisp:boolean)
(common-lisp:deftype allowed-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-headers ()
   '(trivial-types:proper-list allowed-header))
 (common-lisp:defun make-allowed-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-methods ()
   '(trivial-types:proper-list allowed-method))
 (common-lisp:defun make-allowed-methods
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-origin () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-origins ()
   '(trivial-types:proper-list allowed-origin))
 (common-lisp:defun make-allowed-origins
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-origin))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-and-operator common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-analytics-and-operator-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-analytics-and-operator-tags :shape
                         "TagSet" :location common-lisp:nil :location-name
                         "Tag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-and-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-and-operator 'make-analytics-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-configuration common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor struct-shape-analytics-configuration-id
                         :shape "AnalyticsId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-filter common-lisp:null)
                         :accessor struct-shape-analytics-configuration-filter
                         :shape "AnalyticsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-class-analysis :initarg
                         :storage-class-analysis :initform
                         (common-lisp:error
                          ":storage-class-analysis is required")
                         :type
                         (common-lisp:or storage-class-analysis
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-configuration-storage-class-analysis
                         :shape "StorageClassAnalysis" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-configuration 'make-analytics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-class-analysis))
      (common-lisp:list
       (common-lisp:cons "StorageClassAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analytics-configuration-list ()
   '(trivial-types:proper-list analytics-configuration))
 (common-lisp:defun make-analytics-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analytics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analytics-export-destination common-lisp:nil
                       ((s3bucket-destination :initarg :s3bucket-destination
                         :initform
                         (common-lisp:error
                          ":s3bucket-destination is required")
                         :type
                         (common-lisp:or analytics-s3bucket-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-export-destination-s3bucket-destination
                         :shape "AnalyticsS3BucketDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-export-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-export-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-export-destination
                    'make-analytics-export-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-export-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analytics-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-analytics-filter-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-analytics-filter-tag :shape "Tag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or analytics-and-operator
                                         common-lisp:null)
                         :accessor struct-shape-analytics-filter-and :shape
                         "AnalyticsAndOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analytics-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-filter 'make-analytics-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analytics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analytics-filter))
   common-lisp:nil))
(common-lisp:deftype analytics-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analytics-s3bucket-destination common-lisp:nil
                       ((format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or analytics-s3export-file-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-analytics-s3bucket-destination-format
                         :shape "AnalyticsS3ExportFileFormat" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bucket-account-id :initarg :bucket-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-analytics-s3bucket-destination-bucket-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-analytics-s3bucket-destination-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-analytics-s3bucket-destination-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analytics-s3bucket-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'analytics-s3bucket-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analytics-s3bucket-destination
                    'make-analytics-s3bucket-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-account-id))
      (common-lisp:list
       (common-lisp:cons "BucketAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analytics-s3bucket-destination))
   common-lisp:nil))
(common-lisp:deftype analytics-s3export-file-format () 'common-lisp:string)
(common-lisp:deftype archive-status () 'common-lisp:string)
(common-lisp:deftype body ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass bucket common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-bucket-name :shape "BucketName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor struct-shape-bucket-creation-date :shape
                         "CreationDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:deftype bucket-accelerate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bucket-already-exists
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-exists)))
(common-lisp:progn
 (common-lisp:define-condition bucket-already-owned-by-you
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'bucket-already-owned-by-you)))
(common-lisp:deftype bucket-canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-info common-lisp:nil
                       ((data-redundancy :initarg :data-redundancy :initform
                         common-lisp:nil :type
                         (common-lisp:or data-redundancy common-lisp:null)
                         :accessor struct-shape-bucket-info-data-redundancy
                         :shape "DataRedundancy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or bucket-type common-lisp:null)
                         :accessor struct-shape-bucket-info-type :shape
                         "BucketType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bucket-info 'make-bucket-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-redundancy))
      (common-lisp:list
       (common-lisp:cons "DataRedundancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-info))
   common-lisp:nil))
(common-lisp:deftype bucket-key-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bucket-lifecycle-configuration common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor
                         struct-shape-bucket-lifecycle-configuration-rules
                         :shape "LifecycleRules" :location common-lisp:nil
                         :location-name "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-lifecycle-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'bucket-lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bucket-lifecycle-configuration
                    'make-bucket-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-lifecycle-configuration))
   common-lisp:nil))
(common-lisp:deftype bucket-location-constraint () 'common-lisp:string)
(common-lisp:deftype bucket-location-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bucket-logging-status common-lisp:nil
                       ((logging-enabled :initarg :logging-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor
                         struct-shape-bucket-logging-status-logging-enabled
                         :shape "LoggingEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bucket-logging-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bucket-logging-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'bucket-logging-status 'make-bucket-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-logging-status))
   common-lisp:nil))
(common-lisp:deftype bucket-logs-permission () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype bucket-type () 'common-lisp:string)
(common-lisp:deftype bucket-versioning-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buckets () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-buckets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bypass-governance-retention () 'common-lisp:boolean)
(common-lisp:deftype bytes-processed () 'common-lisp:integer)
(common-lisp:deftype bytes-returned () 'common-lisp:integer)
(common-lisp:deftype bytes-scanned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass corsconfiguration common-lisp:nil
                       ((corsrules :initarg :corsrules :initform
                         (common-lisp:error ":corsrules is required") :type
                         (common-lisp:or corsrules common-lisp:null) :accessor
                         struct-shape-corsconfiguration-corsrules :shape
                         "CORSRules" :location common-lisp:nil :location-name
                         "CORSRule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-corsconfiguration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'corsconfiguration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'corsconfiguration 'make-corsconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsconfiguration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsconfiguration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass corsrule common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-corsrule-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (allowed-headers :initarg :allowed-headers :initform
                         common-lisp:nil :type
                         (common-lisp:or allowed-headers common-lisp:null)
                         :accessor struct-shape-corsrule-allowed-headers :shape
                         "AllowedHeaders" :location common-lisp:nil
                         :location-name "AllowedHeader")
                        (allowed-methods :initarg :allowed-methods :initform
                         (common-lisp:error ":allowed-methods is required")
                         :type
                         (common-lisp:or allowed-methods common-lisp:null)
                         :accessor struct-shape-corsrule-allowed-methods :shape
                         "AllowedMethods" :location common-lisp:nil
                         :location-name "AllowedMethod")
                        (allowed-origins :initarg :allowed-origins :initform
                         (common-lisp:error ":allowed-origins is required")
                         :type
                         (common-lisp:or allowed-origins common-lisp:null)
                         :accessor struct-shape-corsrule-allowed-origins :shape
                         "AllowedOrigins" :location common-lisp:nil
                         :location-name "AllowedOrigin")
                        (expose-headers :initarg :expose-headers :initform
                         common-lisp:nil :type
                         (common-lisp:or expose-headers common-lisp:null)
                         :accessor struct-shape-corsrule-expose-headers :shape
                         "ExposeHeaders" :location common-lisp:nil
                         :location-name "ExposeHeader")
                        (max-age-seconds :initarg :max-age-seconds :initform
                         common-lisp:nil :type
                         (common-lisp:or max-age-seconds common-lisp:null)
                         :accessor struct-shape-corsrule-max-age-seconds :shape
                         "MaxAgeSeconds" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-corsrule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'corsrule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'corsrule 'make-corsrule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input corsrule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-headers))
      (common-lisp:list
       (common-lisp:cons "AllowedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-methods))
      (common-lisp:list
       (common-lisp:cons "AllowedMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-origins))
      (common-lisp:list
       (common-lisp:cons "AllowedOrigins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expose-headers))
      (common-lisp:list
       (common-lisp:cons "ExposeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-age-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxAgeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input corsrule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype corsrules () '(trivial-types:proper-list corsrule))
 (common-lisp:defun make-corsrules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list corsrule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass csvinput common-lisp:nil
                       ((file-header-info :initarg :file-header-info :initform
                         common-lisp:nil :type
                         (common-lisp:or file-header-info common-lisp:null)
                         :accessor struct-shape-csvinput-file-header-info
                         :shape "FileHeaderInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comments :initarg :comments :initform common-lisp:nil
                         :type (common-lisp:or comments common-lisp:null)
                         :accessor struct-shape-csvinput-comments :shape
                         "Comments" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quote-escape-character :initarg
                         :quote-escape-character :initform common-lisp:nil
                         :type
                         (common-lisp:or quote-escape-character
                                         common-lisp:null)
                         :accessor struct-shape-csvinput-quote-escape-character
                         :shape "QuoteEscapeCharacter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (record-delimiter :initarg :record-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor struct-shape-csvinput-record-delimiter
                         :shape "RecordDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-delimiter :initarg :field-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or field-delimiter common-lisp:null)
                         :accessor struct-shape-csvinput-field-delimiter :shape
                         "FieldDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-character :initarg :quote-character :initform
                         common-lisp:nil :type
                         (common-lisp:or quote-character common-lisp:null)
                         :accessor struct-shape-csvinput-quote-character :shape
                         "QuoteCharacter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-quoted-record-delimiter :initarg
                         :allow-quoted-record-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or allow-quoted-record-delimiter
                                         common-lisp:null)
                         :accessor
                         struct-shape-csvinput-allow-quoted-record-delimiter
                         :shape "AllowQuotedRecordDelimiter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csvinput
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csvinput
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'csvinput 'make-csvinput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvinput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-header-info))
      (common-lisp:list
       (common-lisp:cons "FileHeaderInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comments))
      (common-lisp:list
       (common-lisp:cons "Comments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-quoted-record-delimiter))
      (common-lisp:list
       (common-lisp:cons "AllowQuotedRecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvinput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass csvoutput common-lisp:nil
                       ((quote-fields :initarg :quote-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or quote-fields common-lisp:null)
                         :accessor struct-shape-csvoutput-quote-fields :shape
                         "QuoteFields" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quote-escape-character :initarg
                         :quote-escape-character :initform common-lisp:nil
                         :type
                         (common-lisp:or quote-escape-character
                                         common-lisp:null)
                         :accessor
                         struct-shape-csvoutput-quote-escape-character :shape
                         "QuoteEscapeCharacter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (record-delimiter :initarg :record-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor struct-shape-csvoutput-record-delimiter
                         :shape "RecordDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-delimiter :initarg :field-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or field-delimiter common-lisp:null)
                         :accessor struct-shape-csvoutput-field-delimiter
                         :shape "FieldDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-character :initarg :quote-character :initform
                         common-lisp:nil :type
                         (common-lisp:or quote-character common-lisp:null)
                         :accessor struct-shape-csvoutput-quote-character
                         :shape "QuoteCharacter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csvoutput
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csvoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'csvoutput 'make-csvoutput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csvoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-fields))
      (common-lisp:list
       (common-lisp:cons "QuoteFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quote-escape-character))
      (common-lisp:list
       (common-lisp:cons "QuoteEscapeCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-delimiter))
      (common-lisp:list
       (common-lisp:cons "FieldDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-character))
      (common-lisp:list
       (common-lisp:cons "QuoteCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csvoutput))
   common-lisp:nil))
(common-lisp:deftype cache-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass checksum common-lisp:nil
                       ((checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor struct-shape-checksum-checksum-crc32 :shape
                         "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor struct-shape-checksum-checksum-crc32c :shape
                         "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-checksum-checksum-sha1 :shape
                         "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor struct-shape-checksum-checksum-sha256 :shape
                         "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-checksum
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'checksum
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'checksum 'make-checksum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input checksum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input checksum))
   common-lisp:nil))
(common-lisp:deftype checksum-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype checksum-algorithm-list ()
   '(trivial-types:proper-list checksum-algorithm))
 (common-lisp:defun make-checksum-algorithm-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list checksum-algorithm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype checksum-crc32 () 'common-lisp:string)
(common-lisp:deftype checksum-crc32c () 'common-lisp:string)
(common-lisp:deftype checksum-mode () 'common-lisp:string)
(common-lisp:deftype checksum-sha1 () 'common-lisp:string)
(common-lisp:deftype checksum-sha256 () 'common-lisp:string)
(common-lisp:deftype cloud-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-function-configuration common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor struct-shape-cloud-function-configuration-id
                         :shape "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event :initarg :event :initform common-lisp:nil :type
                         (common-lisp:or event common-lisp:null) :accessor
                         struct-shape-cloud-function-configuration-event :shape
                         "Event" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor
                         struct-shape-cloud-function-configuration-events
                         :shape "EventList" :location common-lisp:nil
                         :location-name "Event")
                        (cloud-function :initarg :cloud-function :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-function common-lisp:null)
                         :accessor
                         struct-shape-cloud-function-configuration-cloud-function
                         :shape "CloudFunction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (invocation-role :initarg :invocation-role :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-function-invocation-role
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-function-configuration-invocation-role
                         :shape "CloudFunctionInvocationRole" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-function-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-function-configuration
                    'make-cloud-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-function))
      (common-lisp:list
       (common-lisp:cons "CloudFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-role))
      (common-lisp:list
       (common-lisp:cons "InvocationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-function-configuration))
   common-lisp:nil))
(common-lisp:deftype cloud-function-invocation-role () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:deftype comments () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass common-prefix common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-common-prefix-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-common-prefix
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'common-prefix
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'common-prefix 'make-common-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input common-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input common-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype common-prefix-list ()
   '(trivial-types:proper-list common-prefix))
 (common-lisp:defun make-common-prefix-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass complete-multipart-upload-output common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-complete-multipart-upload-output-key
                         :shape "ObjectKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-complete-multipart-upload-output-expiration
                         :shape "Expiration" :location "header" :location-name
                         "x-amz-expiration")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-complete-multipart-upload-output-etag
                         :shape "ETag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-checksum-crc32
                         :shape "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-checksum-crc32c
                         :shape "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-checksum-sha1
                         :shape "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-checksum-sha256
                         :shape "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-multipart-upload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-output
                    'make-complete-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-multipart-upload-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-complete-multipart-upload-request-key
                         :shape "ObjectKey" :location "uri" :location-name
                         "Key")
                        (multipart-upload :initarg :multipart-upload :initform
                         common-lisp:nil :type
                         (common-lisp:or completed-multipart-upload
                                         common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-multipart-upload
                         :shape "CompletedMultipartUpload" :location
                         common-lisp:nil :location-name
                         "CompleteMultipartUpload")
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":upload-id is required") :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-upload-id
                         :shape "MultipartUploadId" :location "querystring"
                         :location-name "uploadId")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-checksum-crc32
                         :shape "ChecksumCRC32" :location "header"
                         :location-name "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-checksum-crc32c
                         :shape "ChecksumCRC32C" :location "header"
                         :location-name "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-checksum-sha1
                         :shape "ChecksumSHA1" :location "header"
                         :location-name "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-checksum-sha256
                         :shape "ChecksumSHA256" :location "header"
                         :location-name "x-amz-checksum-sha256")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-complete-multipart-upload-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-complete-multipart-upload-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-complete-multipart-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'complete-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'complete-multipart-upload-request
                    'make-complete-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multipart-upload))
      (common-lisp:list
       (common-lisp:cons "MultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          complete-multipart-upload-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "CompleteMultipartUpload" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass completed-multipart-upload common-lisp:nil
                       ((parts :initarg :parts :initform common-lisp:nil :type
                         (common-lisp:or completed-part-list common-lisp:null)
                         :accessor
                         struct-shape-completed-multipart-upload-parts :shape
                         "CompletedPartList" :location common-lisp:nil
                         :location-name "Part"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-completed-multipart-upload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'completed-multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'completed-multipart-upload
                    'make-completed-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          completed-multipart-upload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass completed-part common-lisp:nil
                       ((etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-completed-part-etag :shape "ETag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor struct-shape-completed-part-checksum-crc32
                         :shape "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor struct-shape-completed-part-checksum-crc32c
                         :shape "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-completed-part-checksum-sha1
                         :shape "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor struct-shape-completed-part-checksum-sha256
                         :shape "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-number :initarg :part-number :initform
                         common-lisp:nil :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-completed-part-part-number
                         :shape "PartNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-completed-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'completed-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'completed-part 'make-completed-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input completed-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input completed-part))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype completed-part-list ()
   '(trivial-types:proper-list completed-part))
 (common-lisp:defun make-completed-part-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list completed-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((http-error-code-returned-equals :initarg
                         :http-error-code-returned-equals :initform
                         common-lisp:nil :type
                         (common-lisp:or http-error-code-returned-equals
                                         common-lisp:null)
                         :accessor
                         struct-shape-condition-http-error-code-returned-equals
                         :shape "HttpErrorCodeReturnedEquals" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-prefix-equals :initarg :key-prefix-equals
                         :initform common-lisp:nil :type
                         (common-lisp:or key-prefix-equals common-lisp:null)
                         :accessor struct-shape-condition-key-prefix-equals
                         :shape "KeyPrefixEquals" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-error-code-returned-equals))
      (common-lisp:list
       (common-lisp:cons "HttpErrorCodeReturnedEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-prefix-equals))
      (common-lisp:list
       (common-lisp:cons "KeyPrefixEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:deftype confirm-remove-self-bucket-access () 'common-lisp:boolean)
(common-lisp:deftype content-disposition () 'common-lisp:string)
(common-lisp:deftype content-encoding () 'common-lisp:string)
(common-lisp:deftype content-language () 'common-lisp:string)
(common-lisp:deftype content-length () 'common-lisp:integer)
(common-lisp:deftype content-md5 () 'common-lisp:string)
(common-lisp:deftype content-range () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass continuation-event common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-continuation-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'continuation-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'continuation-event 'make-continuation-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input continuation-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input continuation-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-object-output common-lisp:nil
                       ((copy-object-result :initarg :copy-object-result
                         :initform common-lisp:nil :type
                         (common-lisp:or copy-object-result common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-copy-object-result
                         :shape "CopyObjectResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-copy-object-output-expiration :shape
                         "Expiration" :location "header" :location-name
                         "x-amz-expiration")
                        (copy-source-version-id :initarg
                         :copy-source-version-id :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-copy-source-version-id
                         :shape "CopySourceVersionId" :location "header"
                         :location-name "x-amz-copy-source-version-id")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-copy-object-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-copy-object-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-copy-object-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-object-output 'make-copy-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-object-result))
      (common-lisp:list
       (common-lisp:cons "CopyObjectResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'copy-object-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input copy-object-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass copy-object-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor struct-shape-copy-object-request-acl :shape
                         "ObjectCannedACL" :location "header" :location-name
                         "x-amz-acl")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-copy-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-cache-control :shape
                         "CacheControl" :location "header" :location-name
                         "Cache-Control")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-checksum-algorithm")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-content-encoding
                         :shape "ContentEncoding" :location "header"
                         :location-name "Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-content-language
                         :shape "ContentLanguage" :location "header"
                         :location-name "Content-Language")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-content-type :shape
                         "ContentType" :location "header" :location-name
                         "Content-Type")
                        (copy-source :initarg :copy-source :initform
                         (common-lisp:error ":copy-source is required") :type
                         (common-lisp:or copy-source common-lisp:null)
                         :accessor struct-shape-copy-object-request-copy-source
                         :shape "CopySource" :location "header" :location-name
                         "x-amz-copy-source")
                        (copy-source-if-match :initarg :copy-source-if-match
                         :initform common-lisp:nil :type
                         (common-lisp:or copy-source-if-match common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-if-match
                         :shape "CopySourceIfMatch" :location "header"
                         :location-name "x-amz-copy-source-if-match")
                        (copy-source-if-modified-since :initarg
                         :copy-source-if-modified-since :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-if-modified-since
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-if-modified-since
                         :shape "CopySourceIfModifiedSince" :location "header"
                         :location-name "x-amz-copy-source-if-modified-since")
                        (copy-source-if-none-match :initarg
                         :copy-source-if-none-match :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-if-none-match
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-if-none-match
                         :shape "CopySourceIfNoneMatch" :location "header"
                         :location-name "x-amz-copy-source-if-none-match")
                        (copy-source-if-unmodified-since :initarg
                         :copy-source-if-unmodified-since :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-if-unmodified-since
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-if-unmodified-since
                         :shape "CopySourceIfUnmodifiedSince" :location
                         "header" :location-name
                         "x-amz-copy-source-if-unmodified-since")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor struct-shape-copy-object-request-expires
                         :shape "Expires" :location "header" :location-name
                         "Expires")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-copy-object-request-grant-read :shape
                         "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-grant-read-acp :shape
                         "GrantReadACP" :location "header" :location-name
                         "x-amz-grant-read-acp")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-grant-write-acp
                         :shape "GrantWriteACP" :location "header"
                         :location-name "x-amz-grant-write-acp")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-copy-object-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor struct-shape-copy-object-request-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (metadata-directive :initarg :metadata-directive
                         :initform common-lisp:nil :type
                         (common-lisp:or metadata-directive common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-metadata-directive
                         :shape "MetadataDirective" :location "header"
                         :location-name "x-amz-metadata-directive")
                        (tagging-directive :initarg :tagging-directive
                         :initform common-lisp:nil :type
                         (common-lisp:or tagging-directive common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-tagging-directive
                         :shape "TaggingDirective" :location "header"
                         :location-name "x-amz-tagging-directive")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-storage-class :shape
                         "StorageClass" :location "header" :location-name
                         "x-amz-storage-class")
                        (website-redirect-location :initarg
                         :website-redirect-location :initform common-lisp:nil
                         :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-website-redirect-location
                         :shape "WebsiteRedirectLocation" :location "header"
                         :location-name "x-amz-website-redirect-location")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-ssekmskey-id :shape
                         "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (copy-source-ssecustomer-algorithm :initarg
                         :copy-source-ssecustomer-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-ssecustomer-algorithm
                         :shape "CopySourceSSECustomerAlgorithm" :location
                         "header" :location-name
                         "x-amz-copy-source-server-side-encryption-customer-algorithm")
                        (copy-source-ssecustomer-key :initarg
                         :copy-source-ssecustomer-key :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-ssecustomer-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-ssecustomer-key
                         :shape "CopySourceSSECustomerKey" :location "header"
                         :location-name
                         "x-amz-copy-source-server-side-encryption-customer-key")
                        (copy-source-ssecustomer-key-md5 :initarg
                         :copy-source-ssecustomer-key-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-ssecustomer-key-md5
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-copy-source-ssecustomer-key-md5
                         :shape "CopySourceSSECustomerKeyMD5" :location
                         "header" :location-name
                         "x-amz-copy-source-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (tagging :initarg :tagging :initform common-lisp:nil
                         :type (common-lisp:or tagging-header common-lisp:null)
                         :accessor struct-shape-copy-object-request-tagging
                         :shape "TaggingHeader" :location "header"
                         :location-name "x-amz-tagging")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-object-lock-mode
                         :shape "ObjectLockMode" :location "header"
                         :location-name "x-amz-object-lock-mode")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name "x-amz-object-lock-retain-until-date")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-copy-object-request-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name "x-amz-object-lock-legal-hold")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-copy-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (expected-source-bucket-owner :initarg
                         :expected-source-bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-copy-object-request-expected-source-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-source-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-object-request 'make-copy-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-directive))
      (common-lisp:cons "x-amz-metadata-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging-directive))
      (common-lisp:cons "x-amz-tagging-directive"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-object-result common-lisp:nil
                       ((etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-copy-object-result-etag :shape "ETag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-copy-object-result-last-modified :shape
                         "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-copy-object-result-checksum-crc32 :shape
                         "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-copy-object-result-checksum-crc32c :shape
                         "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-copy-object-result-checksum-sha1 :shape
                         "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-copy-object-result-checksum-sha256 :shape
                         "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-object-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-object-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-object-result 'make-copy-object-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-object-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-object-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-part-result common-lisp:nil
                       ((etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-copy-part-result-etag :shape "ETag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor struct-shape-copy-part-result-last-modified
                         :shape "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor struct-shape-copy-part-result-checksum-crc32
                         :shape "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-copy-part-result-checksum-crc32c :shape
                         "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-copy-part-result-checksum-sha1
                         :shape "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-copy-part-result-checksum-sha256 :shape
                         "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-copy-part-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'copy-part-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'copy-part-result 'make-copy-part-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-part-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-part-result))
   common-lisp:nil))
(common-lisp:deftype copy-source () 'common-lisp:string)
(common-lisp:deftype copy-source-if-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-modified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-if-none-match () 'common-lisp:string)
(common-lisp:deftype copy-source-if-unmodified-since () 'common-lisp:string)
(common-lisp:deftype copy-source-range () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype copy-source-ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:deftype copy-source-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-bucket-configuration common-lisp:nil
                       ((location-constraint :initarg :location-constraint
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-location-constraint
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-configuration-location-constraint
                         :shape "BucketLocationConstraint" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location-info common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-configuration-location
                         :shape "LocationInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-info common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-configuration-bucket :shape
                         "BucketInfo" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-configuration
                    'make-create-bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-output common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-create-bucket-output-location
                         :shape "Location" :location "header" :location-name
                         "Location"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-output 'make-create-bucket-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:cons "Location" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-bucket-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or bucket-canned-acl common-lisp:null)
                         :accessor struct-shape-create-bucket-request-acl
                         :shape "BucketCannedACL" :location "header"
                         :location-name "x-amz-acl")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-create-bucket-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (create-bucket-configuration :initarg
                         :create-bucket-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or create-bucket-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-create-bucket-configuration
                         :shape "CreateBucketConfiguration" :location
                         common-lisp:nil :location-name
                         "CreateBucketConfiguration")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-create-bucket-request-grant-read :shape
                         "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-grant-read-acp
                         :shape "GrantReadACP" :location "header"
                         :location-name "x-amz-grant-read-acp")
                        (grant-write :initarg :grant-write :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-grant-write :shape
                         "GrantWrite" :location "header" :location-name
                         "x-amz-grant-write")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-grant-write-acp
                         :shape "GrantWriteACP" :location "header"
                         :location-name "x-amz-grant-write-acp")
                        (object-lock-enabled-for-bucket :initarg
                         :object-lock-enabled-for-bucket :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-enabled-for-bucket
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-object-lock-enabled-for-bucket
                         :shape "ObjectLockEnabledForBucket" :location "header"
                         :location-name "x-amz-bucket-object-lock-enabled")
                        (object-ownership :initarg :object-ownership :initform
                         common-lisp:nil :type
                         (common-lisp:or object-ownership common-lisp:null)
                         :accessor
                         struct-shape-create-bucket-request-object-ownership
                         :shape "ObjectOwnership" :location "header"
                         :location-name "x-amz-object-ownership"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-enabled-for-bucket))
      (common-lisp:cons "x-amz-bucket-object-lock-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:cons "x-amz-object-ownership"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-bucket-configuration))
      (common-lisp:list
       (common-lisp:cons "CreateBucketConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'create-bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "CreateBucketConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass create-multipart-upload-output common-lisp:nil
                       ((abort-date :initarg :abort-date :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-date common-lisp:null) :accessor
                         struct-shape-create-multipart-upload-output-abort-date
                         :shape "AbortDate" :location "header" :location-name
                         "x-amz-abort-date")
                        (abort-rule-id :initarg :abort-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-rule-id common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-abort-rule-id
                         :shape "AbortRuleId" :location "header" :location-name
                         "x-amz-abort-rule-id")
                        (bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name "Bucket")
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-create-multipart-upload-output-key :shape
                         "ObjectKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-upload-id
                         :shape "MultipartUploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-output-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-checksum-algorithm"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multipart-upload-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multipart-upload-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-output
                    'make-create-multipart-upload-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multipart-upload-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-acl
                         :shape "ObjectCannedACL" :location "header"
                         :location-name "x-amz-acl")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-cache-control
                         :shape "CacheControl" :location "header"
                         :location-name "Cache-Control")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-content-encoding
                         :shape "ContentEncoding" :location "header"
                         :location-name "Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-content-language
                         :shape "ContentLanguage" :location "header"
                         :location-name "Content-Language")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-expires
                         :shape "Expires" :location "header" :location-name
                         "Expires")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-create-multipart-upload-request-grant-read
                         :shape "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-grant-read-acp
                         :shape "GrantReadACP" :location "header"
                         :location-name "x-amz-grant-read-acp")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-grant-write-acp
                         :shape "GrantWriteACP" :location "header"
                         :location-name "x-amz-grant-write-acp")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-create-multipart-upload-request-key
                         :shape "ObjectKey" :location "uri" :location-name
                         "Key")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-storage-class
                         :shape "StorageClass" :location "header"
                         :location-name "x-amz-storage-class")
                        (website-redirect-location :initarg
                         :website-redirect-location :initform common-lisp:nil
                         :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-website-redirect-location
                         :shape "WebsiteRedirectLocation" :location "header"
                         :location-name "x-amz-website-redirect-location")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (tagging :initarg :tagging :initform common-lisp:nil
                         :type (common-lisp:or tagging-header common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-tagging
                         :shape "TaggingHeader" :location "header"
                         :location-name "x-amz-tagging")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-object-lock-mode
                         :shape "ObjectLockMode" :location "header"
                         :location-name "x-amz-object-lock-mode")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name "x-amz-object-lock-retain-until-date")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name "x-amz-object-lock-legal-hold")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-multipart-upload-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-create-multipart-upload-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-checksum-algorithm"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-multipart-upload-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multipart-upload-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-multipart-upload-request
                    'make-create-multipart-upload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multipart-upload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-output common-lisp:nil
                       ((credentials :initarg :credentials :initform
                         (common-lisp:error ":credentials is required") :type
                         (common-lisp:or session-credentials common-lisp:null)
                         :accessor
                         struct-shape-create-session-output-credentials :shape
                         "SessionCredentials" :location common-lisp:nil
                         :location-name "Credentials"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-output 'make-create-session-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "Credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-request common-lisp:nil
                       ((session-mode :initarg :session-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or session-mode common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-session-mode
                         :shape "SessionMode" :location "header" :location-name
                         "x-amz-create-session-mode")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-create-session-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-mode))
      (common-lisp:cons "x-amz-create-session-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype data-redundancy () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype days () 'common-lisp:integer)
(common-lisp:deftype days-after-initiation () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass default-retention common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or object-lock-retention-mode
                                         common-lisp:null)
                         :accessor struct-shape-default-retention-mode :shape
                         "ObjectLockRetentionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-default-retention-days :shape "Days"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (years :initarg :years :initform common-lisp:nil :type
                         (common-lisp:or years common-lisp:null) :accessor
                         struct-shape-default-retention-years :shape "Years"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-default-retention
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'default-retention
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'default-retention 'make-default-retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input default-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'years))
      (common-lisp:list
       (common-lisp:cons "Years"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input default-retention))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete common-lisp:nil
                       ((objects :initarg :objects :initform
                         (common-lisp:error ":objects is required") :type
                         (common-lisp:or object-identifier-list
                                         common-lisp:null)
                         :accessor struct-shape-delete-objects :shape
                         "ObjectIdentifierList" :location common-lisp:nil
                         :location-name "Object")
                        (quiet :initarg :quiet :initform common-lisp:nil :type
                         (common-lisp:or quiet common-lisp:null) :accessor
                         struct-shape-delete-quiet :shape "Quiet" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delete 'make-delete))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objects))
      (common-lisp:list
       (common-lisp:cons "Objects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quiet))
      (common-lisp:list
       (common-lisp:cons "Quiet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-analytics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-analytics-configuration-request-id
                         :shape "AnalyticsId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-analytics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-analytics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-analytics-configuration-request
                    'make-delete-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-cors-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-cors-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-cors-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-cors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-cors-request
                    'make-delete-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-encryption-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-encryption-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-encryption-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-encryption-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-encryption-request
                    'make-delete-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-intelligent-tiering-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-intelligent-tiering-configuration-request-id
                         :shape "IntelligentTieringId" :location "querystring"
                         :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-intelligent-tiering-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-intelligent-tiering-configuration-request
                    'make-delete-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-inventory-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-inventory-configuration-request-id
                         :shape "InventoryId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-inventory-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-inventory-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-inventory-configuration-request
                    'make-delete-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-lifecycle-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-lifecycle-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-lifecycle-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-lifecycle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-lifecycle-request
                    'make-delete-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-metrics-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-metrics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-metrics-configuration-request-id
                         :shape "MetricsId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-metrics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-metrics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-metrics-configuration-request
                    'make-delete-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-ownership-controls-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-ownership-controls-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-ownership-controls-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-ownership-controls-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-ownership-controls-request
                    'make-delete-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-policy-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-policy-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-policy-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-policy-request
                    'make-delete-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-replication-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-replication-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-replication-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-replication-request
                    'make-delete-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-delete-bucket-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-tagging-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-tagging-request
                    'make-delete-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-bucket-website-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-bucket-website-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-bucket-website-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-bucket-website-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-website-request
                    'make-delete-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-website-request))
   common-lisp:nil))
(common-lisp:deftype delete-marker () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass delete-marker-entry common-lisp:nil
                       ((owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-delete-marker-entry-owner :shape "Owner"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-delete-marker-entry-key :shape
                         "ObjectKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-delete-marker-entry-version-id
                         :shape "ObjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-latest :initarg :is-latest :initform
                         common-lisp:nil :type
                         (common-lisp:or is-latest common-lisp:null) :accessor
                         struct-shape-delete-marker-entry-is-latest :shape
                         "IsLatest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-delete-marker-entry-last-modified :shape
                         "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-marker-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-marker-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-marker-entry 'make-delete-marker-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-marker-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-marker-replication common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-marker-replication-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-marker-replication-status :shape
                         "DeleteMarkerReplicationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-marker-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-marker-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-marker-replication
                    'make-delete-marker-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-marker-replication))
   common-lisp:nil))
(common-lisp:deftype delete-marker-replication-status () 'common-lisp:string)
(common-lisp:deftype delete-marker-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delete-markers ()
   '(trivial-types:proper-list delete-marker-entry))
 (common-lisp:defun make-delete-markers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delete-marker-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-object-output common-lisp:nil
                       ((delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor
                         struct-shape-delete-object-output-delete-marker :shape
                         "DeleteMarker" :location "header" :location-name
                         "x-amz-delete-marker")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-delete-object-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-delete-object-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-object-output 'make-delete-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-delete-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-delete-object-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (mfa :initarg :mfa :initform common-lisp:nil :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         struct-shape-delete-object-request-mfa :shape "MFA"
                         :location "header" :location-name "x-amz-mfa")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-delete-object-request-version-id :shape
                         "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-delete-object-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :initform common-lisp:nil
                         :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-object-request-bypass-governance-retention
                         :shape "BypassGovernanceRetention" :location "header"
                         :location-name "x-amz-bypass-governance-retention")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-object-request 'make-delete-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-tagging-output common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-delete-object-tagging-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-object-tagging-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-output
                    'make-delete-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-object-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-object-tagging-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-delete-object-tagging-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-delete-object-tagging-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-object-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-object-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-object-tagging-request
                    'make-delete-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-output common-lisp:nil
                       ((deleted :initarg :deleted :initform common-lisp:nil
                         :type
                         (common-lisp:or deleted-objects common-lisp:null)
                         :accessor struct-shape-delete-objects-output-deleted
                         :shape "DeletedObjects" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-delete-objects-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged")
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or errors common-lisp:null)
                         :accessor struct-shape-delete-objects-output-errors
                         :shape "Errors" :location common-lisp:nil
                         :location-name "Error"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-objects-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-objects-output 'make-delete-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-objects-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-delete-objects-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (delete :initarg :delete :initform
                         (common-lisp:error ":delete is required") :type
                         (common-lisp:or delete common-lisp:null) :accessor
                         struct-shape-delete-objects-request-delete :shape
                         "Delete" :location common-lisp:nil :location-name
                         "Delete")
                        (mfa :initarg :mfa :initform common-lisp:nil :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         struct-shape-delete-objects-request-mfa :shape "MFA"
                         :location "header" :location-name "x-amz-mfa")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-delete-objects-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :initform common-lisp:nil
                         :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-objects-request-bypass-governance-retention
                         :shape "BypassGovernanceRetention" :location "header"
                         :location-name "x-amz-bypass-governance-retention")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-objects-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-delete-objects-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-objects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-objects-request 'make-delete-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete))
      (common-lisp:list
       (common-lisp:cons "Delete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'delete))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          delete-objects-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "Delete" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass delete-public-access-block-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-delete-public-access-block-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-public-access-block-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-public-access-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-public-access-block-request
                    'make-delete-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deleted-object common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-deleted-object-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-deleted-object-version-id
                         :shape "ObjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor struct-shape-deleted-object-delete-marker
                         :shape "DeleteMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-marker-version-id :initarg
                         :delete-marker-version-id :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-marker-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-deleted-object-delete-marker-version-id
                         :shape "DeleteMarkerVersionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deleted-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deleted-object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deleted-object 'make-deleted-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deleted-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:list
       (common-lisp:cons "DeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-version-id))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deleted-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deleted-objects ()
   '(trivial-types:proper-list deleted-object))
 (common-lisp:defun make-deleted-objects
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deleted-object))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delimiter () 'common-lisp:string)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-destination-bucket :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor struct-shape-destination-account :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor struct-shape-destination-storage-class
                         :shape "StorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-control-translation :initarg
                         :access-control-translation :initform common-lisp:nil
                         :type
                         (common-lisp:or access-control-translation
                                         common-lisp:null)
                         :accessor
                         struct-shape-destination-access-control-translation
                         :shape "AccessControlTranslation" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-destination-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replication-time :initarg :replication-time :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-time common-lisp:null)
                         :accessor struct-shape-destination-replication-time
                         :shape "ReplicationTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or metrics common-lisp:null)
                         :accessor struct-shape-destination-metrics :shape
                         "Metrics" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-translation))
      (common-lisp:list
       (common-lisp:cons "AccessControlTranslation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-time))
      (common-lisp:list
       (common-lisp:cons "ReplicationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype directory-bucket-token () 'common-lisp:string)
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:deftype etag () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:deftype enable-request-progress () 'common-lisp:boolean)
(common-lisp:deftype encoding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption common-lisp:nil
                       ((encryption-type :initarg :encryption-type :initform
                         (common-lisp:error ":encryption-type is required")
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor struct-shape-encryption-encryption-type
                         :shape "ServerSideEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-encryption-kmskey-id :shape
                         "SSEKMSKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kmscontext :initarg :kmscontext :initform
                         common-lisp:nil :type
                         (common-lisp:or kmscontext common-lisp:null) :accessor
                         struct-shape-encryption-kmscontext :shape "KMSContext"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'encryption 'make-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmscontext))
      (common-lisp:list
       (common-lisp:cons "KMSContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((replica-kms-key-id :initarg :replica-kms-key-id
                         :initform common-lisp:nil :type
                         (common-lisp:or replica-kms-key-id common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-replica-kms-key-id
                         :shape "ReplicaKmsKeyID" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replica-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ReplicaKmsKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype end () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass end-event common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-end-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'end-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'end-event 'make-end-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-error-key :shape "ObjectKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-error-version-id :shape
                         "ObjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or code common-lisp:null) :accessor
                         struct-shape-error-code :shape "Code" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-error-message :shape "Message"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error 'make-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-document common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-error-document-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-document 'make-error-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-document))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype errors () '(trivial-types:proper-list error))
 (common-lisp:defun make-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-bridge-configuration common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-bridge-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-bridge-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-bridge-configuration
                    'make-event-bridge-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-bridge-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-list () '(trivial-types:proper-list event))
 (common-lisp:defun make-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass existing-object-replication common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or existing-object-replication-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-existing-object-replication-status :shape
                         "ExistingObjectReplicationStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-existing-object-replication
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'existing-object-replication
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'existing-object-replication
                    'make-existing-object-replication))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          existing-object-replication))
   common-lisp:nil))
(common-lisp:deftype existing-object-replication-status () 'common-lisp:string)
(common-lisp:deftype expiration () 'common-lisp:string)
(common-lisp:deftype expiration-status () 'common-lisp:string)
(common-lisp:deftype expired-object-delete-marker () 'common-lisp:boolean)
(common-lisp:deftype expires () 'common-lisp:string)
(common-lisp:deftype expose-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype expose-headers ()
   '(trivial-types:proper-list expose-header))
 (common-lisp:defun make-expose-headers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expose-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:deftype expression-type () 'common-lisp:string)
(common-lisp:deftype fetch-owner () 'common-lisp:boolean)
(common-lisp:deftype field-delimiter () 'common-lisp:string)
(common-lisp:deftype file-header-info () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-rule common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or filter-rule-name common-lisp:null)
                         :accessor struct-shape-filter-rule-name :shape
                         "FilterRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or filter-rule-value common-lisp:null)
                         :accessor struct-shape-filter-rule-value :shape
                         "FilterRuleValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-rule 'make-filter-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-rule-list ()
   '(trivial-types:proper-list filter-rule))
 (common-lisp:defun make-filter-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-rule-name () 'common-lisp:string)
(common-lisp:deftype filter-rule-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-bucket-accelerate-configuration-output
                       common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-accelerate-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-accelerate-configuration-output-status
                         :shape "BucketAccelerateStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-accelerate-configuration-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-accelerate-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-accelerate-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-output
                    'make-get-bucket-accelerate-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-accelerate-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-accelerate-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-accelerate-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-accelerate-configuration-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-accelerate-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-accelerate-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-accelerate-configuration-request
                    'make-get-bucket-accelerate-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-accelerate-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-acl-output common-lisp:nil
                       ((owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-get-bucket-acl-output-owner :shape
                         "Owner" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grants common-lisp:null)
                         :accessor struct-shape-get-bucket-acl-output-grants
                         :shape "Grants" :location common-lisp:nil
                         :location-name "AccessControlList"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-acl-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-output 'make-get-bucket-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-acl-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-get-bucket-acl-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-acl-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-acl-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-acl-request 'make-get-bucket-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-analytics-configuration-output
                       common-lisp:nil
                       ((analytics-configuration :initarg
                         :analytics-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or analytics-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-analytics-configuration-output-analytics-configuration
                         :shape "AnalyticsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-analytics-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-analytics-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-output
                    'make-get-bucket-analytics-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'analytics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-analytics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-analytics-configuration-request-id
                         :shape "AnalyticsId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-analytics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-analytics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-analytics-configuration-request
                    'make-get-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-analytics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-cors-output common-lisp:nil
                       ((corsrules :initarg :corsrules :initform
                         common-lisp:nil :type
                         (common-lisp:or corsrules common-lisp:null) :accessor
                         struct-shape-get-bucket-cors-output-corsrules :shape
                         "CORSRules" :location common-lisp:nil :location-name
                         "CORSRule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-cors-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-cors-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-output 'make-get-bucket-cors-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsrules))
      (common-lisp:list
       (common-lisp:cons "CORSRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-cors-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-get-bucket-cors-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-cors-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-cors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-cors-request 'make-get-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-cors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-encryption-output common-lisp:nil
                       ((server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-encryption-output-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-encryption-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-encryption-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-output
                    'make-get-bucket-encryption-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-encryption-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-encryption-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-encryption-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-encryption-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-encryption-request
                    'make-get-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-encryption-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-intelligent-tiering-configuration-output
                       common-lisp:nil
                       ((intelligent-tiering-configuration :initarg
                         :intelligent-tiering-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or intelligent-tiering-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-intelligent-tiering-configuration-output-intelligent-tiering-configuration
                         :shape "IntelligentTieringConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-intelligent-tiering-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-intelligent-tiering-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-output
                    'make-get-bucket-intelligent-tiering-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-intelligent-tiering-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-intelligent-tiering-configuration-request-id
                         :shape "IntelligentTieringId" :location "querystring"
                         :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-intelligent-tiering-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-intelligent-tiering-configuration-request
                    'make-get-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-intelligent-tiering-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-inventory-configuration-output
                       common-lisp:nil
                       ((inventory-configuration :initarg
                         :inventory-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or inventory-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-inventory-configuration-output-inventory-configuration
                         :shape "InventoryConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-inventory-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-inventory-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-output
                    'make-get-bucket-inventory-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'inventory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-inventory-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-inventory-configuration-request-id
                         :shape "InventoryId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-inventory-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-inventory-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-inventory-configuration-request
                    'make-get-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-inventory-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-output
                       common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-rules common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-lifecycle-configuration-output-rules
                         :shape "LifecycleRules" :location common-lisp:nil
                         :location-name "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-output
                    'make-get-bucket-lifecycle-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-lifecycle-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-lifecycle-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-lifecycle-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-configuration-request
                    'make-get-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-output common-lisp:nil
                       ((rules :initarg :rules :initform common-lisp:nil :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-get-bucket-lifecycle-output-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-lifecycle-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-lifecycle-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-output
                    'make-get-bucket-lifecycle-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-lifecycle-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-lifecycle-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-lifecycle-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-lifecycle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-lifecycle-request
                    'make-get-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-lifecycle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-location-output common-lisp:nil
                       ((location-constraint :initarg :location-constraint
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-location-constraint
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-location-output-location-constraint
                         :shape "BucketLocationConstraint" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-location-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-location-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-output
                    'make-get-bucket-location-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-constraint))
      (common-lisp:list
       (common-lisp:cons "LocationConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-location-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-location-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-location-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-location-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-location-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-location-request
                    'make-get-bucket-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-logging-output common-lisp:nil
                       ((logging-enabled :initarg :logging-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or logging-enabled common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-logging-output-logging-enabled
                         :shape "LoggingEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-logging-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-logging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-output
                    'make-get-bucket-logging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-enabled))
      (common-lisp:list
       (common-lisp:cons "LoggingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-logging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-logging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-logging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-logging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-logging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-logging-request
                    'make-get-bucket-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-logging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metrics-configuration-output common-lisp:nil
                       ((metrics-configuration :initarg :metrics-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or metrics-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metrics-configuration-output-metrics-configuration
                         :shape "MetricsConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-metrics-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metrics-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-output
                    'make-get-bucket-metrics-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'metrics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-metrics-configuration-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-metrics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         struct-shape-get-bucket-metrics-configuration-request-id
                         :shape "MetricsId" :location "querystring"
                         :location-name "id")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-metrics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-metrics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metrics-configuration-request
                    'make-get-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metrics-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-notification-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-notification-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-notification-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-notification-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-notification-configuration-request
                    'make-get-bucket-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-ownership-controls-output common-lisp:nil
                       ((ownership-controls :initarg :ownership-controls
                         :initform common-lisp:nil :type
                         (common-lisp:or ownership-controls common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-ownership-controls-output-ownership-controls
                         :shape "OwnershipControls" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-ownership-controls-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-ownership-controls-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-output
                    'make-get-bucket-ownership-controls-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'ownership-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-ownership-controls-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-ownership-controls-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-ownership-controls-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-ownership-controls-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-ownership-controls-request
                    'make-get-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-ownership-controls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-output common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor struct-shape-get-bucket-policy-output-policy
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-output 'make-get-bucket-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-policy-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-policy-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-request
                    'make-get-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-status-output common-lisp:nil
                       ((policy-status :initarg :policy-status :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-status common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-policy-status-output-policy-status
                         :shape "PolicyStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-policy-status-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-policy-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-output
                    'make-get-bucket-policy-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-policy-status-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-policy-status-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-policy-status-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-policy-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-policy-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-policy-status-request
                    'make-get-bucket-policy-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-policy-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-output common-lisp:nil
                       ((replication-configuration :initarg
                         :replication-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-replication-output-replication-configuration
                         :shape "ReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-replication-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-output
                    'make-get-bucket-replication-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-bucket-replication-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-replication-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-replication-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-replication-request
                    'make-get-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-replication-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-request-payment-output common-lisp:nil
                       ((payer :initarg :payer :initform common-lisp:nil :type
                         (common-lisp:or payer common-lisp:null) :accessor
                         struct-shape-get-bucket-request-payment-output-payer
                         :shape "Payer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-request-payment-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-request-payment-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-output
                    'make-get-bucket-request-payment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-request-payment-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-request-payment-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-request-payment-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-request-payment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-request-payment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-request-payment-request
                    'make-get-bucket-request-payment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-request-payment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-output common-lisp:nil
                       ((tag-set :initarg :tag-set :initform
                         (common-lisp:error ":tag-set is required") :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-get-bucket-tagging-output-tag-set :shape
                         "TagSet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-tagging-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-output
                    'make-get-bucket-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-tagging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-tagging-request
                    'make-get-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-output common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-versioning-output-status
                         :shape "BucketVersioningStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (mfadelete :initarg :mfadelete :initform
                         common-lisp:nil :type
                         (common-lisp:or mfadelete-status common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-versioning-output-mfadelete
                         :shape "MFADeleteStatus" :location common-lisp:nil
                         :location-name "MfaDelete"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-versioning-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-versioning-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-output
                    'make-get-bucket-versioning-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-versioning-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-versioning-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-versioning-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-versioning-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-versioning-request
                    'make-get-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-versioning-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-website-output common-lisp:nil
                       ((redirect-all-requests-to :initarg
                         :redirect-all-requests-to :initform common-lisp:nil
                         :type
                         (common-lisp:or redirect-all-requests-to
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-website-output-redirect-all-requests-to
                         :shape "RedirectAllRequestsTo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index-document :initarg :index-document :initform
                         common-lisp:nil :type
                         (common-lisp:or index-document common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-website-output-index-document
                         :shape "IndexDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-document :initarg :error-document :initform
                         common-lisp:nil :type
                         (common-lisp:or error-document common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-website-output-error-document
                         :shape "ErrorDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (routing-rules :initarg :routing-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or routing-rules common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-website-output-routing-rules
                         :shape "RoutingRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-website-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-website-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-output
                    'make-get-bucket-website-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bucket-website-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-bucket-website-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-bucket-website-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-bucket-website-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-bucket-website-request
                    'make-get-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-website-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-acl-output common-lisp:nil
                       ((owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-get-object-acl-output-owner :shape
                         "Owner" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grants :initarg :grants :initform common-lisp:nil
                         :type (common-lisp:or grants common-lisp:null)
                         :accessor struct-shape-get-object-acl-output-grants
                         :shape "Grants" :location common-lisp:nil
                         :location-name "AccessControlList")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-get-object-acl-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-acl-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-output 'make-get-object-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "Grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-acl-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-get-object-acl-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-acl-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-acl-request-version-id :shape
                         "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-acl-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-acl-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-acl-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-acl-request 'make-get-object-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-acl-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-output common-lisp:nil
                       ((delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-delete-marker
                         :shape "DeleteMarker" :location "header"
                         :location-name "x-amz-delete-marker")
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-last-modified
                         :shape "LastModified" :location "header"
                         :location-name "Last-Modified")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-get-object-attributes-output-etag :shape
                         "ETag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checksum :initarg :checksum :initform common-lisp:nil
                         :type (common-lisp:or checksum common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-checksum
                         :shape "Checksum" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-parts :initarg :object-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or get-object-attributes-parts
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-object-parts
                         :shape "GetObjectAttributesParts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-storage-class
                         :shape "StorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (object-size :initarg :object-size :initform
                         common-lisp:nil :type
                         (common-lisp:or object-size common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-output-object-size
                         :shape "ObjectSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-attributes-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-attributes-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-output
                    'make-get-object-attributes-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:list
       (common-lisp:cons "Checksum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-parts))
      (common-lisp:list
       (common-lisp:cons "ObjectParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-size))
      (common-lisp:list
       (common-lisp:cons "ObjectSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-parts common-lisp:nil
                       ((total-parts-count :initarg :total-parts-count
                         :initform common-lisp:nil :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-parts-total-parts-count
                         :shape "PartsCount" :location common-lisp:nil
                         :location-name "PartsCount")
                        (part-number-marker :initarg :part-number-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-parts-part-number-marker
                         :shape "PartNumberMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-part-number-marker :initarg
                         :next-part-number-marker :initform common-lisp:nil
                         :type
                         (common-lisp:or next-part-number-marker
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-parts-next-part-number-marker
                         :shape "NextPartNumberMarker" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-parts :initarg :max-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         struct-shape-get-object-attributes-parts-max-parts
                         :shape "MaxParts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-parts-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parts :initarg :parts :initform common-lisp:nil :type
                         (common-lisp:or parts-list common-lisp:null) :accessor
                         struct-shape-get-object-attributes-parts-parts :shape
                         "PartsList" :location common-lisp:nil :location-name
                         "Part"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-attributes-parts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-attributes-parts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-parts
                    'make-get-object-attributes-parts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-parts-count))
      (common-lisp:list
       (common-lisp:cons "TotalPartsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-parts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-attributes-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-attributes-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (max-parts :initarg :max-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         struct-shape-get-object-attributes-request-max-parts
                         :shape "MaxParts" :location "header" :location-name
                         "x-amz-max-parts")
                        (part-number-marker :initarg :part-number-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-part-number-marker
                         :shape "PartNumberMarker" :location "header"
                         :location-name "x-amz-part-number-marker")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-attributes-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (object-attributes :initarg :object-attributes
                         :initform
                         (common-lisp:error ":object-attributes is required")
                         :type
                         (common-lisp:or object-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-attributes-request-object-attributes
                         :shape "ObjectAttributesList" :location "header"
                         :location-name "x-amz-object-attributes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-attributes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-attributes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-request
                    'make-get-object-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:cons "x-amz-max-parts" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:cons "x-amz-part-number-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-attributes))
      (common-lisp:cons "x-amz-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-legal-hold-output common-lisp:nil
                       ((legal-hold :initarg :legal-hold :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-legal-hold-output-legal-hold
                         :shape "ObjectLockLegalHold" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-legal-hold-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-output
                    'make-get-object-legal-hold-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'legal-hold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-object-legal-hold-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-legal-hold-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-legal-hold-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-legal-hold-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-legal-hold-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-legal-hold-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-legal-hold-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-legal-hold-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-legal-hold-request
                    'make-get-object-legal-hold-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-legal-hold-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-lock-configuration-output common-lisp:nil
                       ((object-lock-configuration :initarg
                         :object-lock-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or object-lock-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-lock-configuration-output-object-lock-configuration
                         :shape "ObjectLockConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-lock-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-lock-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-output
                    'make-get-object-lock-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'object-lock-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-object-lock-configuration-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-lock-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-lock-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-lock-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-object-lock-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-lock-configuration-request
                    'make-get-object-lock-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-lock-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-output common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-object-output-body :shape
                         "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor struct-shape-get-object-output-delete-marker
                         :shape "DeleteMarker" :location "header"
                         :location-name "x-amz-delete-marker")
                        (accept-ranges :initarg :accept-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor struct-shape-get-object-output-accept-ranges
                         :shape "AcceptRanges" :location "header"
                         :location-name "accept-ranges")
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-get-object-output-expiration :shape
                         "Expiration" :location "header" :location-name
                         "x-amz-expiration")
                        (restore :initarg :restore :initform common-lisp:nil
                         :type (common-lisp:or restore common-lisp:null)
                         :accessor struct-shape-get-object-output-restore
                         :shape "Restore" :location "header" :location-name
                         "x-amz-restore")
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor struct-shape-get-object-output-last-modified
                         :shape "LastModified" :location "header"
                         :location-name "Last-Modified")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-content-length :shape
                         "ContentLength" :location "header" :location-name
                         "Content-Length")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-get-object-output-etag :shape "ETag"
                         :location "header" :location-name "ETag")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-checksum-crc32c :shape
                         "ChecksumCRC32C" :location "header" :location-name
                         "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-get-object-output-checksum-sha1
                         :shape "ChecksumSHA1" :location "header"
                         :location-name "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-checksum-sha256 :shape
                         "ChecksumSHA256" :location "header" :location-name
                         "x-amz-checksum-sha256")
                        (missing-meta :initarg :missing-meta :initform
                         common-lisp:nil :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor struct-shape-get-object-output-missing-meta
                         :shape "MissingMeta" :location "header" :location-name
                         "x-amz-missing-meta")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-get-object-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor struct-shape-get-object-output-cache-control
                         :shape "CacheControl" :location "header"
                         :location-name "Cache-Control")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-content-encoding :shape
                         "ContentEncoding" :location "header" :location-name
                         "Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-content-language :shape
                         "ContentLanguage" :location "header" :location-name
                         "Content-Language")
                        (content-range :initarg :content-range :initform
                         common-lisp:nil :type
                         (common-lisp:or content-range common-lisp:null)
                         :accessor struct-shape-get-object-output-content-range
                         :shape "ContentRange" :location "header"
                         :location-name "Content-Range")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-get-object-output-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor struct-shape-get-object-output-expires
                         :shape "Expires" :location "header" :location-name
                         "Expires")
                        (website-redirect-location :initarg
                         :website-redirect-location :initform common-lisp:nil
                         :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-website-redirect-location
                         :shape "WebsiteRedirectLocation" :location "header"
                         :location-name "x-amz-website-redirect-location")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor struct-shape-get-object-output-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-get-object-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor struct-shape-get-object-output-storage-class
                         :shape "StorageClass" :location "header"
                         :location-name "x-amz-storage-class")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged")
                        (replication-status :initarg :replication-status
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-replication-status
                         :shape "ReplicationStatus" :location "header"
                         :location-name "x-amz-replication-status")
                        (parts-count :initarg :parts-count :initform
                         common-lisp:nil :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor struct-shape-get-object-output-parts-count
                         :shape "PartsCount" :location "header" :location-name
                         "x-amz-mp-parts-count")
                        (tag-count :initarg :tag-count :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-count common-lisp:null) :accessor
                         struct-shape-get-object-output-tag-count :shape
                         "TagCount" :location "header" :location-name
                         "x-amz-tagging-count")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-object-lock-mode :shape
                         "ObjectLockMode" :location "header" :location-name
                         "x-amz-object-lock-mode")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name "x-amz-object-lock-retain-until-date")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-output-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name "x-amz-object-lock-legal-hold"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-output 'make-get-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "Content-Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-tagging-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input get-object-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-object-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-get-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (if-match :initarg :if-match :initform common-lisp:nil
                         :type (common-lisp:or if-match common-lisp:null)
                         :accessor struct-shape-get-object-request-if-match
                         :shape "IfMatch" :location "header" :location-name
                         "If-Match")
                        (if-modified-since :initarg :if-modified-since
                         :initform common-lisp:nil :type
                         (common-lisp:or if-modified-since common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-if-modified-since
                         :shape "IfModifiedSince" :location "header"
                         :location-name "If-Modified-Since")
                        (if-none-match :initarg :if-none-match :initform
                         common-lisp:nil :type
                         (common-lisp:or if-none-match common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-if-none-match :shape
                         "IfNoneMatch" :location "header" :location-name
                         "If-None-Match")
                        (if-unmodified-since :initarg :if-unmodified-since
                         :initform common-lisp:nil :type
                         (common-lisp:or if-unmodified-since common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-if-unmodified-since
                         :shape "IfUnmodifiedSince" :location "header"
                         :location-name "If-Unmodified-Since")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-request-key :shape "ObjectKey"
                         :location "uri" :location-name "Key")
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or range common-lisp:null) :accessor
                         struct-shape-get-object-request-range :shape "Range"
                         :location "header" :location-name "Range")
                        (response-cache-control :initarg
                         :response-cache-control :initform common-lisp:nil
                         :type
                         (common-lisp:or response-cache-control
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-cache-control
                         :shape "ResponseCacheControl" :location "querystring"
                         :location-name "response-cache-control")
                        (response-content-disposition :initarg
                         :response-content-disposition :initform
                         common-lisp:nil :type
                         (common-lisp:or response-content-disposition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-content-disposition
                         :shape "ResponseContentDisposition" :location
                         "querystring" :location-name
                         "response-content-disposition")
                        (response-content-encoding :initarg
                         :response-content-encoding :initform common-lisp:nil
                         :type
                         (common-lisp:or response-content-encoding
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-content-encoding
                         :shape "ResponseContentEncoding" :location
                         "querystring" :location-name
                         "response-content-encoding")
                        (response-content-language :initarg
                         :response-content-language :initform common-lisp:nil
                         :type
                         (common-lisp:or response-content-language
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-content-language
                         :shape "ResponseContentLanguage" :location
                         "querystring" :location-name
                         "response-content-language")
                        (response-content-type :initarg :response-content-type
                         :initform common-lisp:nil :type
                         (common-lisp:or response-content-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-content-type
                         :shape "ResponseContentType" :location "querystring"
                         :location-name "response-content-type")
                        (response-expires :initarg :response-expires :initform
                         common-lisp:nil :type
                         (common-lisp:or response-expires common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-response-expires
                         :shape "ResponseExpires" :location "querystring"
                         :location-name "response-expires")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-get-object-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-ssecustomer-key :shape
                         "SSECustomerKey" :location "header" :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (part-number :initarg :part-number :initform
                         common-lisp:nil :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-get-object-request-part-number
                         :shape "PartNumber" :location "querystring"
                         :location-name "partNumber")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (checksum-mode :initarg :checksum-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-mode common-lisp:null)
                         :accessor
                         struct-shape-get-object-request-checksum-mode :shape
                         "ChecksumMode" :location "header" :location-name
                         "x-amz-checksum-mode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-request 'make-get-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-object-request))
   common-lisp:nil))
(common-lisp:deftype get-object-response-status-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-object-retention-output common-lisp:nil
                       ((retention :initarg :retention :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retention
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-object-retention-output-retention
                         :shape "ObjectLockRetention" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-retention-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-retention-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-output
                    'make-get-object-retention-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-object-retention-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-retention-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-retention-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-retention-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-retention-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-retention-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-retention-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-retention-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-retention-request
                    'make-get-object-retention-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-retention-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-tagging-output common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-tagging-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (tag-set :initarg :tag-set :initform
                         (common-lisp:error ":tag-set is required") :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-get-object-tagging-output-tag-set :shape
                         "TagSet" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-tagging-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-output
                    'make-get-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-tagging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-tagging-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-get-object-tagging-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-tagging-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-tagging-request
                    'make-get-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-tagging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-object-torrent-output common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor struct-shape-get-object-torrent-output-body
                         :shape "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-get-object-torrent-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-torrent-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-torrent-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-output
                    'make-get-object-torrent-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-object-torrent-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-object-torrent-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-get-object-torrent-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-get-object-torrent-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-object-torrent-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-object-torrent-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-object-torrent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-object-torrent-request
                    'make-get-object-torrent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-torrent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-output common-lisp:nil
                       ((public-access-block-configuration :initarg
                         :public-access-block-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-public-access-block-output-public-access-block-configuration
                         :shape "PublicAccessBlockConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-public-access-block-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-output
                    'make-get-public-access-block-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass get-public-access-block-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-get-public-access-block-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-public-access-block-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-public-access-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-public-access-block-request
                    'make-get-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-public-access-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass glacier-job-parameters common-lisp:nil
                       ((tier :initarg :tier :initform
                         (common-lisp:error ":tier is required") :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         struct-shape-glacier-job-parameters-tier :shape "Tier"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glacier-job-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glacier-job-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glacier-job-parameters 'make-glacier-job-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glacier-job-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grant common-lisp:nil
                       ((grantee :initarg :grantee :initform common-lisp:nil
                         :type (common-lisp:or grantee common-lisp:null)
                         :accessor struct-shape-grant-grantee :shape "Grantee"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permission :initarg :permission :initform
                         common-lisp:nil :type
                         (common-lisp:or permission common-lisp:null) :accessor
                         struct-shape-grant-permission :shape "Permission"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grant
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grant
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grant 'make-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grant))
   common-lisp:nil))
(common-lisp:deftype grant-full-control () 'common-lisp:string)
(common-lisp:deftype grant-read () 'common-lisp:string)
(common-lisp:deftype grant-read-acp () 'common-lisp:string)
(common-lisp:deftype grant-write () 'common-lisp:string)
(common-lisp:deftype grant-write-acp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass grantee common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-grantee-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email-address common-lisp:null)
                         :accessor struct-shape-grantee-email-address :shape
                         "EmailAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-grantee-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-grantee-type :shape "Type" :location
                         common-lisp:nil :location-name "xsi:type")
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-grantee-uri :shape "URI" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grantee
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grantee
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grantee 'make-grantee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "EmailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grantee))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grants () '(trivial-types:proper-list grant))
 (common-lisp:defun make-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass head-bucket-output common-lisp:nil
                       ((bucket-location-type :initarg :bucket-location-type
                         :initform common-lisp:nil :type
                         (common-lisp:or location-type common-lisp:null)
                         :accessor
                         struct-shape-head-bucket-output-bucket-location-type
                         :shape "LocationType" :location "header"
                         :location-name "x-amz-bucket-location-type")
                        (bucket-location-name :initarg :bucket-location-name
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-location-name common-lisp:null)
                         :accessor
                         struct-shape-head-bucket-output-bucket-location-name
                         :shape "BucketLocationName" :location "header"
                         :location-name "x-amz-bucket-location-name")
                        (bucket-region :initarg :bucket-region :initform
                         common-lisp:nil :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-head-bucket-output-bucket-region :shape
                         "Region" :location "header" :location-name
                         "x-amz-bucket-region")
                        (access-point-alias :initarg :access-point-alias
                         :initform common-lisp:nil :type
                         (common-lisp:or access-point-alias common-lisp:null)
                         :accessor
                         struct-shape-head-bucket-output-access-point-alias
                         :shape "AccessPointAlias" :location "header"
                         :location-name "x-amz-access-point-alias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-head-bucket-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'head-bucket-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'head-bucket-output 'make-head-bucket-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-bucket-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-location-type))
      (common-lisp:cons "x-amz-bucket-location-type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-location-name))
      (common-lisp:cons "x-amz-bucket-location-name"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-region))
      (common-lisp:cons "x-amz-bucket-region" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-alias))
      (common-lisp:cons "x-amz-access-point-alias"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-bucket-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-bucket-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass head-bucket-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-head-bucket-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-head-bucket-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-head-bucket-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'head-bucket-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'head-bucket-request 'make-head-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass head-object-output common-lisp:nil
                       ((delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-delete-marker :shape
                         "DeleteMarker" :location "header" :location-name
                         "x-amz-delete-marker")
                        (accept-ranges :initarg :accept-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-accept-ranges :shape
                         "AcceptRanges" :location "header" :location-name
                         "accept-ranges")
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-head-object-output-expiration :shape
                         "Expiration" :location "header" :location-name
                         "x-amz-expiration")
                        (restore :initarg :restore :initform common-lisp:nil
                         :type (common-lisp:or restore common-lisp:null)
                         :accessor struct-shape-head-object-output-restore
                         :shape "Restore" :location "header" :location-name
                         "x-amz-restore")
                        (archive-status :initarg :archive-status :initform
                         common-lisp:nil :type
                         (common-lisp:or archive-status common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-archive-status :shape
                         "ArchiveStatus" :location "header" :location-name
                         "x-amz-archive-status")
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-last-modified :shape
                         "LastModified" :location "header" :location-name
                         "Last-Modified")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-content-length :shape
                         "ContentLength" :location "header" :location-name
                         "Content-Length")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-checksum-crc32c :shape
                         "ChecksumCRC32C" :location "header" :location-name
                         "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-checksum-sha1 :shape
                         "ChecksumSHA1" :location "header" :location-name
                         "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-checksum-sha256 :shape
                         "ChecksumSHA256" :location "header" :location-name
                         "x-amz-checksum-sha256")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-head-object-output-etag :shape "ETag"
                         :location "header" :location-name "ETag")
                        (missing-meta :initarg :missing-meta :initform
                         common-lisp:nil :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor struct-shape-head-object-output-missing-meta
                         :shape "MissingMeta" :location "header" :location-name
                         "x-amz-missing-meta")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-head-object-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-cache-control :shape
                         "CacheControl" :location "header" :location-name
                         "Cache-Control")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-content-encoding
                         :shape "ContentEncoding" :location "header"
                         :location-name "Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-content-language
                         :shape "ContentLanguage" :location "header"
                         :location-name "Content-Language")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-head-object-output-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor struct-shape-head-object-output-expires
                         :shape "Expires" :location "header" :location-name
                         "Expires")
                        (website-redirect-location :initarg
                         :website-redirect-location :initform common-lisp:nil
                         :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-website-redirect-location
                         :shape "WebsiteRedirectLocation" :location "header"
                         :location-name "x-amz-website-redirect-location")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor struct-shape-head-object-output-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-head-object-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-storage-class :shape
                         "StorageClass" :location "header" :location-name
                         "x-amz-storage-class")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged")
                        (replication-status :initarg :replication-status
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-replication-status
                         :shape "ReplicationStatus" :location "header"
                         :location-name "x-amz-replication-status")
                        (parts-count :initarg :parts-count :initform
                         common-lisp:nil :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor struct-shape-head-object-output-parts-count
                         :shape "PartsCount" :location "header" :location-name
                         "x-amz-mp-parts-count")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-object-lock-mode
                         :shape "ObjectLockMode" :location "header"
                         :location-name "x-amz-object-lock-mode")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name "x-amz-object-lock-retain-until-date")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-output-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name "x-amz-object-lock-legal-hold"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-head-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'head-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'head-object-output 'make-head-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-delete-marker" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "accept-ranges" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-restore" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-status))
      (common-lisp:cons "x-amz-archive-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-missing-meta" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-mp-parts-count" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass head-object-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-head-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (if-match :initarg :if-match :initform common-lisp:nil
                         :type (common-lisp:or if-match common-lisp:null)
                         :accessor struct-shape-head-object-request-if-match
                         :shape "IfMatch" :location "header" :location-name
                         "If-Match")
                        (if-modified-since :initarg :if-modified-since
                         :initform common-lisp:nil :type
                         (common-lisp:or if-modified-since common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-if-modified-since
                         :shape "IfModifiedSince" :location "header"
                         :location-name "If-Modified-Since")
                        (if-none-match :initarg :if-none-match :initform
                         common-lisp:nil :type
                         (common-lisp:or if-none-match common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-if-none-match :shape
                         "IfNoneMatch" :location "header" :location-name
                         "If-None-Match")
                        (if-unmodified-since :initarg :if-unmodified-since
                         :initform common-lisp:nil :type
                         (common-lisp:or if-unmodified-since common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-if-unmodified-since
                         :shape "IfUnmodifiedSince" :location "header"
                         :location-name "If-Unmodified-Since")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-head-object-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (range :initarg :range :initform common-lisp:nil :type
                         (common-lisp:or range common-lisp:null) :accessor
                         struct-shape-head-object-request-range :shape "Range"
                         :location "header" :location-name "Range")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-head-object-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (part-number :initarg :part-number :initform
                         common-lisp:nil :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-head-object-request-part-number
                         :shape "PartNumber" :location "querystring"
                         :location-name "partNumber")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-head-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (checksum-mode :initarg :checksum-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-mode common-lisp:null)
                         :accessor
                         struct-shape-head-object-request-checksum-mode :shape
                         "ChecksumMode" :location "header" :location-name
                         "x-amz-checksum-mode"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-head-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'head-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'head-object-request 'make-head-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-match))
      (common-lisp:cons "If-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-modified-since))
      (common-lisp:cons "If-Modified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-none-match))
      (common-lisp:cons "If-None-Match" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'if-unmodified-since))
      (common-lisp:cons "If-Unmodified-Since" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:cons "Range" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-mode))
      (common-lisp:cons "x-amz-checksum-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input head-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input head-object-request))
   common-lisp:nil))
(common-lisp:deftype host-name () 'common-lisp:string)
(common-lisp:deftype http-error-code-returned-equals () 'common-lisp:string)
(common-lisp:deftype http-redirect-code () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype if-match () 'common-lisp:string)
(common-lisp:deftype if-modified-since () 'common-lisp:string)
(common-lisp:deftype if-none-match () 'common-lisp:string)
(common-lisp:deftype if-unmodified-since () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass index-document common-lisp:nil
                       ((suffix :initarg :suffix :initform
                         (common-lisp:error ":suffix is required") :type
                         (common-lisp:or suffix common-lisp:null) :accessor
                         struct-shape-index-document-suffix :shape "Suffix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-index-document
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'index-document
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'index-document 'make-index-document))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-document))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suffix))
      (common-lisp:list
       (common-lisp:cons "Suffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-document))
   common-lisp:nil))
(common-lisp:deftype initiated () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass initiator common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-initiator-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-initiator-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-initiator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'initiator
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'initiator 'make-initiator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input initiator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input initiator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-serialization common-lisp:nil
                       ((csv :initarg :csv :initform common-lisp:nil :type
                         (common-lisp:or csvinput common-lisp:null) :accessor
                         struct-shape-input-serialization-csv :shape "CSVInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor
                         struct-shape-input-serialization-compression-type
                         :shape "CompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (json :initarg :json :initform common-lisp:nil :type
                         (common-lisp:or jsoninput common-lisp:null) :accessor
                         struct-shape-input-serialization-json :shape
                         "JSONInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parquet :initarg :parquet :initform common-lisp:nil
                         :type (common-lisp:or parquet-input common-lisp:null)
                         :accessor struct-shape-input-serialization-parquet
                         :shape "ParquetInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-serialization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-serialization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-serialization 'make-input-serialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet))
      (common-lisp:list
       (common-lisp:cons "Parquet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-serialization))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-access-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-and-operator common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-and-operator-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-intelligent-tiering-and-operator-tags
                         :shape "TagSet" :location common-lisp:nil
                         :location-name "Tag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intelligent-tiering-and-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intelligent-tiering-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-and-operator
                    'make-intelligent-tiering-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-configuration common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-configuration-id
                         :shape "IntelligentTieringId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or intelligent-tiering-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-configuration-filter
                         :shape "IntelligentTieringFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or intelligent-tiering-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-configuration-status
                         :shape "IntelligentTieringStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tierings :initarg :tierings :initform
                         (common-lisp:error ":tierings is required") :type
                         (common-lisp:or tiering-list common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-configuration-tierings
                         :shape "TieringList" :location common-lisp:nil
                         :location-name "Tiering"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intelligent-tiering-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'intelligent-tiering-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-configuration
                    'make-intelligent-tiering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tierings))
      (common-lisp:list
       (common-lisp:cons "Tierings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype intelligent-tiering-configuration-list ()
   '(trivial-types:proper-list intelligent-tiering-configuration))
 (common-lisp:defun make-intelligent-tiering-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            intelligent-tiering-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype intelligent-tiering-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass intelligent-tiering-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-intelligent-tiering-filter-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-intelligent-tiering-filter-tag :shape
                         "Tag" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or intelligent-tiering-and-operator
                                         common-lisp:null)
                         :accessor struct-shape-intelligent-tiering-filter-and
                         :shape "IntelligentTieringAndOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-intelligent-tiering-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'intelligent-tiering-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'intelligent-tiering-filter
                    'make-intelligent-tiering-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intelligent-tiering-filter))
   common-lisp:nil))
(common-lisp:deftype intelligent-tiering-id () 'common-lisp:string)
(common-lisp:deftype intelligent-tiering-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-object-state
     (s3-error)
     ((storage-class :initarg :storage-class :initform common-lisp:nil :reader
       invalid-object-state-storage-class)
      (access-tier :initarg :access-tier :initform common-lisp:nil :reader
       invalid-object-state-access-tier)))
 (common-lisp:export
  (common-lisp:list 'invalid-object-state 'invalid-object-state-storage-class
                    'invalid-object-state-access-tier)))
(common-lisp:progn
 (common-lisp:defclass inventory-configuration common-lisp:nil
                       ((destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or inventory-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-inventory-configuration-destination
                         :shape "InventoryDestination" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (is-enabled :initarg :is-enabled :initform
                         (common-lisp:error ":is-enabled is required") :type
                         (common-lisp:or is-enabled common-lisp:null) :accessor
                         struct-shape-inventory-configuration-is-enabled :shape
                         "IsEnabled" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or inventory-filter common-lisp:null)
                         :accessor struct-shape-inventory-configuration-filter
                         :shape "InventoryFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor struct-shape-inventory-configuration-id
                         :shape "InventoryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (included-object-versions :initarg
                         :included-object-versions :initform
                         (common-lisp:error
                          ":included-object-versions is required")
                         :type
                         (common-lisp:or inventory-included-object-versions
                                         common-lisp:null)
                         :accessor
                         struct-shape-inventory-configuration-included-object-versions
                         :shape "InventoryIncludedObjectVersions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (optional-fields :initarg :optional-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or inventory-optional-fields
                                         common-lisp:null)
                         :accessor
                         struct-shape-inventory-configuration-optional-fields
                         :shape "InventoryOptionalFields" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform
                         (common-lisp:error ":schedule is required") :type
                         (common-lisp:or inventory-schedule common-lisp:null)
                         :accessor
                         struct-shape-inventory-configuration-schedule :shape
                         "InventorySchedule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-configuration 'make-inventory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "IsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'included-object-versions))
      (common-lisp:list
       (common-lisp:cons "IncludedObjectVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-fields))
      (common-lisp:list
       (common-lisp:cons "OptionalFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-configuration-list ()
   '(trivial-types:proper-list inventory-configuration))
 (common-lisp:defun make-inventory-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-destination common-lisp:nil
                       ((s3bucket-destination :initarg :s3bucket-destination
                         :initform
                         (common-lisp:error
                          ":s3bucket-destination is required")
                         :type
                         (common-lisp:or inventory-s3bucket-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-inventory-destination-s3bucket-destination
                         :shape "InventoryS3BucketDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-destination 'make-inventory-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-destination))
      (common-lisp:list
       (common-lisp:cons "S3BucketDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-encryption common-lisp:nil
                       ((sses3 :initarg :sses3 :initform common-lisp:nil :type
                         (common-lisp:or sses3 common-lisp:null) :accessor
                         struct-shape-inventory-encryption-sses3 :shape "SSES3"
                         :location common-lisp:nil :location-name "SSE-S3")
                        (ssekms :initarg :ssekms :initform common-lisp:nil
                         :type (common-lisp:or ssekms common-lisp:null)
                         :accessor struct-shape-inventory-encryption-ssekms
                         :shape "SSEKMS" :location common-lisp:nil
                         :location-name "SSE-KMS"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-encryption 'make-inventory-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sses3))
      (common-lisp:list
       (common-lisp:cons "SSES3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekms))
      (common-lisp:list
       (common-lisp:cons "SSEKMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         struct-shape-inventory-filter-prefix :shape "Prefix"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-format () 'common-lisp:string)
(common-lisp:deftype inventory-frequency () 'common-lisp:string)
(common-lisp:deftype inventory-id () 'common-lisp:string)
(common-lisp:deftype inventory-included-object-versions () 'common-lisp:string)
(common-lisp:deftype inventory-optional-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-optional-fields ()
   '(trivial-types:proper-list inventory-optional-field))
 (common-lisp:defun make-inventory-optional-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-optional-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-s3bucket-destination common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-inventory-s3bucket-destination-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-inventory-s3bucket-destination-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or inventory-format common-lisp:null)
                         :accessor
                         struct-shape-inventory-s3bucket-destination-format
                         :shape "InventoryFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-inventory-s3bucket-destination-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or inventory-encryption common-lisp:null)
                         :accessor
                         struct-shape-inventory-s3bucket-destination-encryption
                         :shape "InventoryEncryption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-s3bucket-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'inventory-s3bucket-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-s3bucket-destination
                    'make-inventory-s3bucket-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-s3bucket-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-schedule common-lisp:nil
                       ((frequency :initarg :frequency :initform
                         (common-lisp:error ":frequency is required") :type
                         (common-lisp:or inventory-frequency common-lisp:null)
                         :accessor struct-shape-inventory-schedule-frequency
                         :shape "InventoryFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inventory-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inventory-schedule 'make-inventory-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-schedule))
   common-lisp:nil))
(common-lisp:deftype is-enabled () 'common-lisp:boolean)
(common-lisp:deftype is-latest () 'common-lisp:boolean)
(common-lisp:deftype is-public () 'common-lisp:boolean)
(common-lisp:deftype is-restore-in-progress () 'common-lisp:boolean)
(common-lisp:deftype is-truncated () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass jsoninput common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or jsontype common-lisp:null) :accessor
                         struct-shape-jsoninput-type :shape "JSONType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jsoninput
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jsoninput
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'jsoninput 'make-jsoninput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsoninput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsoninput))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jsonoutput common-lisp:nil
                       ((record-delimiter :initarg :record-delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or record-delimiter common-lisp:null)
                         :accessor struct-shape-jsonoutput-record-delimiter
                         :shape "RecordDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jsonoutput
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jsonoutput
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'jsonoutput 'make-jsonoutput))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jsonoutput))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-delimiter))
      (common-lisp:list
       (common-lisp:cons "RecordDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jsonoutput))
   common-lisp:nil))
(common-lisp:deftype jsontype () 'common-lisp:string)
(common-lisp:deftype kmscontext () 'common-lisp:string)
(common-lisp:deftype key-count () 'common-lisp:integer)
(common-lisp:deftype key-marker () 'common-lisp:string)
(common-lisp:deftype key-prefix-equals () 'common-lisp:string)
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function-configuration common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-configuration-id :shape
                         "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lambda-function-arn :initarg :lambda-function-arn
                         :initform
                         (common-lisp:error ":lambda-function-arn is required")
                         :type
                         (common-lisp:or lambda-function-arn common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-configuration-lambda-function-arn
                         :shape "LambdaFunctionArn" :location common-lisp:nil
                         :location-name "CloudFunction")
                        (events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         struct-shape-lambda-function-configuration-events
                         :shape "EventList" :location common-lisp:nil
                         :location-name "Event")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-configuration-filter
                         :shape "NotificationConfigurationFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-configuration
                    'make-lambda-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lambda-function-configuration-list ()
   '(trivial-types:proper-list lambda-function-configuration))
 (common-lisp:defun make-lambda-function-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lambda-function-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lifecycle-configuration common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or rules common-lisp:null) :accessor
                         struct-shape-lifecycle-configuration-rules :shape
                         "Rules" :location common-lisp:nil :location-name
                         "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-configuration 'make-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-expiration common-lisp:nil
                       ((date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-lifecycle-expiration-date :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-lifecycle-expiration-days :shape "Days"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expired-object-delete-marker :initarg
                         :expired-object-delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or expired-object-delete-marker
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-expiration-expired-object-delete-marker
                         :shape "ExpiredObjectDeleteMarker" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-expiration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-expiration 'make-lifecycle-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expired-object-delete-marker))
      (common-lisp:list
       (common-lisp:cons "ExpiredObjectDeleteMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule common-lisp:nil
                       ((expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-expiration common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-expiration
                         :shape "LifecycleExpiration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-lifecycle-rule-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-rule-filter
                                         common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-filter :shape
                         "LifecycleRuleFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or expiration-status common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-status :shape
                         "ExpirationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transitions :initarg :transitions :initform
                         common-lisp:nil :type
                         (common-lisp:or transition-list common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-transitions
                         :shape "TransitionList" :location common-lisp:nil
                         :location-name "Transition")
                        (noncurrent-version-transitions :initarg
                         :noncurrent-version-transitions :initform
                         common-lisp:nil :type
                         (common-lisp:or noncurrent-version-transition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-noncurrent-version-transitions
                         :shape "NoncurrentVersionTransitionList" :location
                         common-lisp:nil :location-name
                         "NoncurrentVersionTransition")
                        (noncurrent-version-expiration :initarg
                         :noncurrent-version-expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or noncurrent-version-expiration
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-noncurrent-version-expiration
                         :shape "NoncurrentVersionExpiration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-incomplete-multipart-upload :initarg
                         :abort-incomplete-multipart-upload :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-incomplete-multipart-upload
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-abort-incomplete-multipart-upload
                         :shape "AbortIncompleteMultipartUpload" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lifecycle-rule 'make-lifecycle-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "Transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transitions))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-and-operator common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-and-operator-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-lifecycle-rule-and-operator-tags :shape
                         "TagSet" :location common-lisp:nil :location-name
                         "Tag")
                        (object-size-greater-than :initarg
                         :object-size-greater-than :initform common-lisp:nil
                         :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-and-operator-object-size-greater-than
                         :shape "ObjectSizeGreaterThanBytes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (object-size-less-than :initarg :object-size-less-than
                         :initform common-lisp:nil :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-and-operator-object-size-less-than
                         :shape "ObjectSizeLessThanBytes" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-rule-and-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-and-operator
                    'make-lifecycle-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-rule-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-filter-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-lifecycle-rule-filter-tag :shape "Tag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (object-size-greater-than :initarg
                         :object-size-greater-than :initform common-lisp:nil
                         :type
                         (common-lisp:or object-size-greater-than-bytes
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-filter-object-size-greater-than
                         :shape "ObjectSizeGreaterThanBytes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (object-size-less-than :initarg :object-size-less-than
                         :initform common-lisp:nil :type
                         (common-lisp:or object-size-less-than-bytes
                                         common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-rule-filter-object-size-less-than
                         :shape "ObjectSizeLessThanBytes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or lifecycle-rule-and-operator
                                         common-lisp:null)
                         :accessor struct-shape-lifecycle-rule-filter-and
                         :shape "LifecycleRuleAndOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-rule-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-rule-filter 'make-lifecycle-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-greater-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeGreaterThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-size-less-than))
      (common-lisp:list
       (common-lisp:cons "ObjectSizeLessThan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-rule-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-rules ()
   '(trivial-types:proper-list lifecycle-rule))
 (common-lisp:defun make-lifecycle-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lifecycle-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-bucket-analytics-configurations-output
                       common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-analytics-configurations-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-analytics-configurations-output-continuation-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :initform common-lisp:nil
                         :type (common-lisp:or next-token common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-analytics-configurations-output-next-continuation-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analytics-configuration-list :initarg
                         :analytics-configuration-list :initform
                         common-lisp:nil :type
                         (common-lisp:or analytics-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-analytics-configurations-output-analytics-configuration-list
                         :shape "AnalyticsConfigurationList" :location
                         common-lisp:nil :location-name
                         "AnalyticsConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-analytics-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-analytics-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-output
                    'make-list-bucket-analytics-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-analytics-configurations-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-analytics-configurations-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-analytics-configurations-request-continuation-token
                         :shape "Token" :location "querystring" :location-name
                         "continuation-token")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-bucket-analytics-configurations-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-analytics-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-analytics-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-analytics-configurations-request
                    'make-list-bucket-analytics-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-analytics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-intelligent-tiering-configurations-output
                       common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-output-continuation-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :initform common-lisp:nil
                         :type (common-lisp:or next-token common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-output-next-continuation-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (intelligent-tiering-configuration-list :initarg
                         :intelligent-tiering-configuration-list :initform
                         common-lisp:nil :type
                         (common-lisp:or intelligent-tiering-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-output-intelligent-tiering-configuration-list
                         :shape "IntelligentTieringConfigurationList" :location
                         common-lisp:nil :location-name
                         "IntelligentTieringConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-intelligent-tiering-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-intelligent-tiering-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-output
                    'make-list-bucket-intelligent-tiering-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration-list))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-intelligent-tiering-configurations-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-intelligent-tiering-configurations-request-continuation-token
                         :shape "Token" :location "querystring" :location-name
                         "continuation-token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-intelligent-tiering-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-intelligent-tiering-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-intelligent-tiering-configurations-request
                    'make-list-bucket-intelligent-tiering-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-intelligent-tiering-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-inventory-configurations-output
                       common-lisp:nil
                       ((continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-inventory-configurations-output-continuation-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inventory-configuration-list :initarg
                         :inventory-configuration-list :initform
                         common-lisp:nil :type
                         (common-lisp:or inventory-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-inventory-configurations-output-inventory-configuration-list
                         :shape "InventoryConfigurationList" :location
                         common-lisp:nil :location-name
                         "InventoryConfiguration")
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-inventory-configurations-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :initform common-lisp:nil
                         :type (common-lisp:or next-token common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-inventory-configurations-output-next-continuation-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-inventory-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-inventory-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-output
                    'make-list-bucket-inventory-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration-list))
      (common-lisp:list
       (common-lisp:cons "InventoryConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-inventory-configurations-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-inventory-configurations-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-inventory-configurations-request-continuation-token
                         :shape "Token" :location "querystring" :location-name
                         "continuation-token")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-bucket-inventory-configurations-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-inventory-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-inventory-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-inventory-configurations-request
                    'make-list-bucket-inventory-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-inventory-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-metrics-configurations-output
                       common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-metrics-configurations-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-metrics-configurations-output-continuation-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :initform common-lisp:nil
                         :type (common-lisp:or next-token common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-metrics-configurations-output-next-continuation-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics-configuration-list :initarg
                         :metrics-configuration-list :initform common-lisp:nil
                         :type
                         (common-lisp:or metrics-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-metrics-configurations-output-metrics-configuration-list
                         :shape "MetricsConfigurationList" :location
                         common-lisp:nil :location-name
                         "MetricsConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-metrics-configurations-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-metrics-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-output
                    'make-list-bucket-metrics-configurations-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration-list))
      (common-lisp:list
       (common-lisp:cons "MetricsConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bucket-metrics-configurations-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-bucket-metrics-configurations-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-bucket-metrics-configurations-request-continuation-token
                         :shape "Token" :location "querystring" :location-name
                         "continuation-token")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-bucket-metrics-configurations-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-bucket-metrics-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-bucket-metrics-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-bucket-metrics-configurations-request
                    'make-list-bucket-metrics-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bucket-metrics-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-buckets-output common-lisp:nil
                       ((buckets :initarg :buckets :initform common-lisp:nil
                         :type (common-lisp:or buckets common-lisp:null)
                         :accessor struct-shape-list-buckets-output-buckets
                         :shape "Buckets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-list-buckets-output-owner :shape "Owner"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-buckets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-buckets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-buckets-output 'make-list-buckets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-buckets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-buckets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-directory-buckets-output common-lisp:nil
                       ((buckets :initarg :buckets :initform common-lisp:nil
                         :type (common-lisp:or buckets common-lisp:null)
                         :accessor
                         struct-shape-list-directory-buckets-output-buckets
                         :shape "Buckets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or directory-bucket-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-directory-buckets-output-continuation-token
                         :shape "DirectoryBucketToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-directory-buckets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-directory-buckets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-directory-buckets-output
                    'make-list-directory-buckets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-directory-buckets-request common-lisp:nil
                       ((continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or directory-bucket-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-directory-buckets-request-continuation-token
                         :shape "DirectoryBucketToken" :location "querystring"
                         :location-name "continuation-token")
                        (max-directory-buckets :initarg :max-directory-buckets
                         :initform common-lisp:nil :type
                         (common-lisp:or max-directory-buckets
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-directory-buckets-request-max-directory-buckets
                         :shape "MaxDirectoryBuckets" :location "querystring"
                         :location-name "max-directory-buckets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-directory-buckets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-directory-buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-directory-buckets-request
                    'make-list-directory-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multipart-uploads-output common-lisp:nil
                       ((bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-bucket
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-marker :initarg :key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         struct-shape-list-multipart-uploads-output-key-marker
                         :shape "KeyMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upload-id-marker :initarg :upload-id-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id-marker common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-upload-id-marker
                         :shape "UploadIdMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-key-marker :initarg :next-key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or next-key-marker common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-next-key-marker
                         :shape "NextKeyMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-multipart-uploads-output-delimiter
                         :shape "Delimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-upload-id-marker :initarg :next-upload-id-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or next-upload-id-marker
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-next-upload-id-marker
                         :shape "NextUploadIdMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-uploads :initarg :max-uploads :initform
                         common-lisp:nil :type
                         (common-lisp:or max-uploads common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-max-uploads
                         :shape "MaxUploads" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uploads :initarg :uploads :initform common-lisp:nil
                         :type
                         (common-lisp:or multipart-upload-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-uploads
                         :shape "MultipartUploadList" :location common-lisp:nil
                         :location-name "Upload")
                        (common-prefixes :initarg :common-prefixes :initform
                         common-lisp:nil :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-common-prefixes
                         :shape "CommonPrefixList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-encoding-type
                         :shape "EncodingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multipart-uploads-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multipart-uploads-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-output
                    'make-list-multipart-uploads-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "UploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-upload-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextUploadIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-uploads))
      (common-lisp:list
       (common-lisp:cons "MaxUploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uploads))
      (common-lisp:list
       (common-lisp:cons "Uploads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multipart-uploads-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-multipart-uploads-request-delimiter
                         :shape "Delimiter" :location "querystring"
                         :location-name "delimiter")
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-encoding-type
                         :shape "EncodingType" :location "querystring"
                         :location-name "encoding-type")
                        (key-marker :initarg :key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         struct-shape-list-multipart-uploads-request-key-marker
                         :shape "KeyMarker" :location "querystring"
                         :location-name "key-marker")
                        (max-uploads :initarg :max-uploads :initform
                         common-lisp:nil :type
                         (common-lisp:or max-uploads common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-max-uploads
                         :shape "MaxUploads" :location "querystring"
                         :location-name "max-uploads")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-prefix
                         :shape "Prefix" :location "querystring" :location-name
                         "prefix")
                        (upload-id-marker :initarg :upload-id-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or upload-id-marker common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-upload-id-marker
                         :shape "UploadIdMarker" :location "querystring"
                         :location-name "upload-id-marker")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-multipart-uploads-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-list-multipart-uploads-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-multipart-uploads-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multipart-uploads-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-multipart-uploads-request
                    'make-list-multipart-uploads-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multipart-uploads-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-object-versions-output common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-marker :initarg :key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         struct-shape-list-object-versions-output-key-marker
                         :shape "KeyMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id-marker :initarg :version-id-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or version-id-marker common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-version-id-marker
                         :shape "VersionIdMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-key-marker :initarg :next-key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or next-key-marker common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-next-key-marker
                         :shape "NextKeyMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-version-id-marker :initarg
                         :next-version-id-marker :initform common-lisp:nil
                         :type
                         (common-lisp:or next-version-id-marker
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-next-version-id-marker
                         :shape "NextVersionIdMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versions :initarg :versions :initform common-lisp:nil
                         :type
                         (common-lisp:or object-version-list common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-versions
                         :shape "ObjectVersionList" :location common-lisp:nil
                         :location-name "Version")
                        (delete-markers :initarg :delete-markers :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-markers common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-delete-markers
                         :shape "DeleteMarkers" :location common-lisp:nil
                         :location-name "DeleteMarker")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-object-versions-output-delimiter
                         :shape "Delimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-max-keys
                         :shape "MaxKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :initform
                         common-lisp:nil :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-common-prefixes
                         :shape "CommonPrefixList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-encoding-type
                         :shape "EncodingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-object-versions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-object-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-output
                    'make-list-object-versions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-marker))
      (common-lisp:list
       (common-lisp:cons "KeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id-marker))
      (common-lisp:list
       (common-lisp:cons "VersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-key-marker))
      (common-lisp:list
       (common-lisp:cons "NextKeyMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-version-id-marker))
      (common-lisp:list
       (common-lisp:cons "NextVersionIdMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-markers))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-object-versions-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-object-versions-request-delimiter
                         :shape "Delimiter" :location "querystring"
                         :location-name "delimiter")
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-encoding-type
                         :shape "EncodingType" :location "querystring"
                         :location-name "encoding-type")
                        (key-marker :initarg :key-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or key-marker common-lisp:null) :accessor
                         struct-shape-list-object-versions-request-key-marker
                         :shape "KeyMarker" :location "querystring"
                         :location-name "key-marker")
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-max-keys
                         :shape "MaxKeys" :location "querystring"
                         :location-name "max-keys")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-prefix
                         :shape "Prefix" :location "querystring" :location-name
                         "prefix")
                        (version-id-marker :initarg :version-id-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or version-id-marker common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-version-id-marker
                         :shape "VersionIdMarker" :location "querystring"
                         :location-name "version-id-marker")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-object-versions-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (optional-object-attributes :initarg
                         :optional-object-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or optional-object-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-object-versions-request-optional-object-attributes
                         :shape "OptionalObjectAttributesList" :location
                         "header" :location-name
                         "x-amz-optional-object-attributes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-object-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-object-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-object-versions-request
                    'make-list-object-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-output common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-objects-output-is-truncated :shape
                         "IsTruncated" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-objects-output-marker
                         :shape "Marker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-marker :initarg :next-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or next-marker common-lisp:null)
                         :accessor struct-shape-list-objects-output-next-marker
                         :shape "NextMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contents :initarg :contents :initform common-lisp:nil
                         :type (common-lisp:or object-list common-lisp:null)
                         :accessor struct-shape-list-objects-output-contents
                         :shape "ObjectList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-objects-output-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-list-objects-output-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-objects-output-delimiter :shape
                         "Delimiter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor struct-shape-list-objects-output-max-keys
                         :shape "MaxKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :initform
                         common-lisp:nil :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor
                         struct-shape-list-objects-output-common-prefixes
                         :shape "CommonPrefixList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-objects-output-encoding-type :shape
                         "EncodingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-list-objects-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-objects-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-objects-output 'make-list-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-objects-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-objects-request-delimiter :shape
                         "Delimiter" :location "querystring" :location-name
                         "delimiter")
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-objects-request-encoding-type :shape
                         "EncodingType" :location "querystring" :location-name
                         "encoding-type")
                        (marker :initarg :marker :initform common-lisp:nil
                         :type (common-lisp:or marker common-lisp:null)
                         :accessor struct-shape-list-objects-request-marker
                         :shape "Marker" :location "querystring" :location-name
                         "marker")
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor struct-shape-list-objects-request-max-keys
                         :shape "MaxKeys" :location "querystring"
                         :location-name "max-keys")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-list-objects-request-prefix
                         :shape "Prefix" :location "querystring" :location-name
                         "prefix")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-list-objects-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-objects-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (optional-object-attributes :initarg
                         :optional-object-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or optional-object-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-objects-request-optional-object-attributes
                         :shape "OptionalObjectAttributesList" :location
                         "header" :location-name
                         "x-amz-optional-object-attributes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-objects-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-objects-request 'make-list-objects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-objects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-objects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-v2output common-lisp:nil
                       ((is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-is-truncated :shape
                         "IsTruncated" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contents :initarg :contents :initform common-lisp:nil
                         :type (common-lisp:or object-list common-lisp:null)
                         :accessor struct-shape-list-objects-v2output-contents
                         :shape "ObjectList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-objects-v2output-name
                         :shape "BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-list-objects-v2output-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-objects-v2output-delimiter :shape
                         "Delimiter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor struct-shape-list-objects-v2output-max-keys
                         :shape "MaxKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (common-prefixes :initarg :common-prefixes :initform
                         common-lisp:nil :type
                         (common-lisp:or common-prefix-list common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-common-prefixes
                         :shape "CommonPrefixList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-encoding-type
                         :shape "EncodingType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-count :initarg :key-count :initform
                         common-lisp:nil :type
                         (common-lisp:or key-count common-lisp:null) :accessor
                         struct-shape-list-objects-v2output-key-count :shape
                         "KeyCount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-objects-v2output-continuation-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-continuation-token :initarg
                         :next-continuation-token :initform common-lisp:nil
                         :type (common-lisp:or next-token common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-next-continuation-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-after :initarg :start-after :initform
                         common-lisp:nil :type
                         (common-lisp:or start-after common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-start-after :shape
                         "StartAfter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-objects-v2output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-v2output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2output 'make-list-objects-v2output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "Contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-keys))
      (common-lisp:list
       (common-lisp:cons "MaxKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-prefixes))
      (common-lisp:list
       (common-lisp:cons "CommonPrefixes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding-type))
      (common-lisp:list
       (common-lisp:cons "EncodingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-count))
      (common-lisp:list
       (common-lisp:cons "KeyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continuation-token))
      (common-lisp:list
       (common-lisp:cons "ContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-continuation-token))
      (common-lisp:list
       (common-lisp:cons "NextContinuationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-after))
      (common-lisp:list
       (common-lisp:cons "StartAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-objects-v2request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-objects-v2request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or delimiter common-lisp:null) :accessor
                         struct-shape-list-objects-v2request-delimiter :shape
                         "Delimiter" :location "querystring" :location-name
                         "delimiter")
                        (encoding-type :initarg :encoding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or encoding-type common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2request-encoding-type
                         :shape "EncodingType" :location "querystring"
                         :location-name "encoding-type")
                        (max-keys :initarg :max-keys :initform common-lisp:nil
                         :type (common-lisp:or max-keys common-lisp:null)
                         :accessor struct-shape-list-objects-v2request-max-keys
                         :shape "MaxKeys" :location "querystring"
                         :location-name "max-keys")
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-list-objects-v2request-prefix
                         :shape "Prefix" :location "querystring" :location-name
                         "prefix")
                        (continuation-token :initarg :continuation-token
                         :initform common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-objects-v2request-continuation-token
                         :shape "Token" :location "querystring" :location-name
                         "continuation-token")
                        (fetch-owner :initarg :fetch-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or fetch-owner common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2request-fetch-owner :shape
                         "FetchOwner" :location "querystring" :location-name
                         "fetch-owner")
                        (start-after :initarg :start-after :initform
                         common-lisp:nil :type
                         (common-lisp:or start-after common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2request-start-after :shape
                         "StartAfter" :location "querystring" :location-name
                         "start-after")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-objects-v2request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (optional-object-attributes :initarg
                         :optional-object-attributes :initform common-lisp:nil
                         :type
                         (common-lisp:or optional-object-attributes-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-objects-v2request-optional-object-attributes
                         :shape "OptionalObjectAttributesList" :location
                         "header" :location-name
                         "x-amz-optional-object-attributes"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-objects-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-objects-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-objects-v2request 'make-list-objects-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optional-object-attributes))
      (common-lisp:cons "x-amz-optional-object-attributes"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-objects-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parts-output common-lisp:nil
                       ((abort-date :initarg :abort-date :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-date common-lisp:null) :accessor
                         struct-shape-list-parts-output-abort-date :shape
                         "AbortDate" :location "header" :location-name
                         "x-amz-abort-date")
                        (abort-rule-id :initarg :abort-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-rule-id common-lisp:null)
                         :accessor struct-shape-list-parts-output-abort-rule-id
                         :shape "AbortRuleId" :location "header" :location-name
                         "x-amz-abort-rule-id")
                        (bucket :initarg :bucket :initform common-lisp:nil
                         :type (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-parts-output-bucket :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-list-parts-output-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor struct-shape-list-parts-output-upload-id
                         :shape "MultipartUploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (part-number-marker :initarg :part-number-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         struct-shape-list-parts-output-part-number-marker
                         :shape "PartNumberMarker" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-part-number-marker :initarg
                         :next-part-number-marker :initform common-lisp:nil
                         :type
                         (common-lisp:or next-part-number-marker
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-parts-output-next-part-number-marker
                         :shape "NextPartNumberMarker" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-parts :initarg :max-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         struct-shape-list-parts-output-max-parts :shape
                         "MaxParts" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-truncated :initarg :is-truncated :initform
                         common-lisp:nil :type
                         (common-lisp:or is-truncated common-lisp:null)
                         :accessor struct-shape-list-parts-output-is-truncated
                         :shape "IsTruncated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parts :initarg :parts :initform common-lisp:nil :type
                         (common-lisp:or parts common-lisp:null) :accessor
                         struct-shape-list-parts-output-parts :shape "Parts"
                         :location common-lisp:nil :location-name "Part")
                        (initiator :initarg :initiator :initform
                         common-lisp:nil :type
                         (common-lisp:or initiator common-lisp:null) :accessor
                         struct-shape-list-parts-output-initiator :shape
                         "Initiator" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-list-parts-output-owner :shape "Owner"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor struct-shape-list-parts-output-storage-class
                         :shape "StorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-list-parts-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-list-parts-output-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-parts-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-parts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-parts-output 'make-list-parts-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-date))
      (common-lisp:cons "x-amz-abort-date" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-rule-id))
      (common-lisp:cons "x-amz-abort-rule-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number-marker))
      (common-lisp:list
       (common-lisp:cons "PartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-part-number-marker))
      (common-lisp:list
       (common-lisp:cons "NextPartNumberMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-parts))
      (common-lisp:list
       (common-lisp:cons "MaxParts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts))
      (common-lisp:list
       (common-lisp:cons "Parts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-parts-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-list-parts-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-list-parts-request-key :shape "ObjectKey"
                         :location "uri" :location-name "Key")
                        (max-parts :initarg :max-parts :initform
                         common-lisp:nil :type
                         (common-lisp:or max-parts common-lisp:null) :accessor
                         struct-shape-list-parts-request-max-parts :shape
                         "MaxParts" :location "querystring" :location-name
                         "max-parts")
                        (part-number-marker :initarg :part-number-marker
                         :initform common-lisp:nil :type
                         (common-lisp:or part-number-marker common-lisp:null)
                         :accessor
                         struct-shape-list-parts-request-part-number-marker
                         :shape "PartNumberMarker" :location "querystring"
                         :location-name "part-number-marker")
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":upload-id is required") :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor struct-shape-list-parts-request-upload-id
                         :shape "MultipartUploadId" :location "querystring"
                         :location-name "uploadId")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-list-parts-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-parts-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-parts-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-list-parts-request-ssecustomer-key :shape
                         "SSECustomerKey" :location "header" :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-list-parts-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-parts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-parts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-parts-request 'make-list-parts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-parts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-parts-request))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass location-info common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or location-type common-lisp:null)
                         :accessor struct-shape-location-info-type :shape
                         "LocationType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or location-name-as-string
                                         common-lisp:null)
                         :accessor struct-shape-location-info-name :shape
                         "LocationNameAsString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location-info 'make-location-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location-info))
   common-lisp:nil))
(common-lisp:deftype location-name-as-string () 'common-lisp:string)
(common-lisp:deftype location-prefix () 'common-lisp:string)
(common-lisp:deftype location-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-enabled common-lisp:nil
                       ((target-bucket :initarg :target-bucket :initform
                         (common-lisp:error ":target-bucket is required") :type
                         (common-lisp:or target-bucket common-lisp:null)
                         :accessor struct-shape-logging-enabled-target-bucket
                         :shape "TargetBucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-grants :initarg :target-grants :initform
                         common-lisp:nil :type
                         (common-lisp:or target-grants common-lisp:null)
                         :accessor struct-shape-logging-enabled-target-grants
                         :shape "TargetGrants" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-prefix :initarg :target-prefix :initform
                         (common-lisp:error ":target-prefix is required") :type
                         (common-lisp:or target-prefix common-lisp:null)
                         :accessor struct-shape-logging-enabled-target-prefix
                         :shape "TargetPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-object-key-format :initarg
                         :target-object-key-format :initform common-lisp:nil
                         :type
                         (common-lisp:or target-object-key-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-logging-enabled-target-object-key-format
                         :shape "TargetObjectKeyFormat" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-logging-enabled
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'logging-enabled
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'logging-enabled 'make-logging-enabled))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-enabled))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-bucket))
      (common-lisp:list
       (common-lisp:cons "TargetBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-grants))
      (common-lisp:list
       (common-lisp:cons "TargetGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-prefix))
      (common-lisp:list
       (common-lisp:cons "TargetPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-object-key-format))
      (common-lisp:list
       (common-lisp:cons "TargetObjectKeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-enabled))
   common-lisp:nil))
(common-lisp:deftype mfa () 'common-lisp:string)
(common-lisp:deftype mfadelete () 'common-lisp:string)
(common-lisp:deftype mfadelete-status () 'common-lisp:string)
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-age-seconds () 'common-lisp:integer)
(common-lisp:deftype max-directory-buckets () 'common-lisp:integer)
(common-lisp:deftype max-keys () 'common-lisp:integer)
(common-lisp:deftype max-parts () 'common-lisp:integer)
(common-lisp:deftype max-uploads () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-directive () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-entry common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or metadata-key common-lisp:null)
                         :accessor struct-shape-metadata-entry-name :shape
                         "MetadataKey" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or metadata-value common-lisp:null)
                         :accessor struct-shape-metadata-entry-value :shape
                         "MetadataValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metadata-entry 'make-metadata-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-entry))
   common-lisp:nil))
(common-lisp:deftype metadata-key () 'common-lisp:string)
(common-lisp:deftype metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metrics common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or metrics-status common-lisp:null)
                         :accessor struct-shape-metrics-status :shape
                         "MetricsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-threshold :initarg :event-threshold :initform
                         common-lisp:nil :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor struct-shape-metrics-event-threshold :shape
                         "ReplicationTimeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-threshold))
      (common-lisp:list
       (common-lisp:cons "EventThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-and-operator common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-metrics-and-operator-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-metrics-and-operator-tags :shape "TagSet"
                         :location common-lisp:nil :location-name "Tag")
                        (access-point-arn :initarg :access-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or access-point-arn common-lisp:null)
                         :accessor
                         struct-shape-metrics-and-operator-access-point-arn
                         :shape "AccessPointArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics-and-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metrics-and-operator 'make-metrics-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-configuration common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         struct-shape-metrics-configuration-id :shape
                         "MetricsId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or metrics-filter common-lisp:null)
                         :accessor struct-shape-metrics-configuration-filter
                         :shape "MetricsFilter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metrics-configuration 'make-metrics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metrics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metrics-configuration-list ()
   '(trivial-types:proper-list metrics-configuration))
 (common-lisp:defun make-metrics-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metrics-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metrics-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-metrics-filter-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-metrics-filter-tag :shape "Tag" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-point-arn :initarg :access-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or access-point-arn common-lisp:null)
                         :accessor struct-shape-metrics-filter-access-point-arn
                         :shape "AccessPointArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or metrics-and-operator common-lisp:null)
                         :accessor struct-shape-metrics-filter-and :shape
                         "MetricsAndOperator" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metrics-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metrics-filter 'make-metrics-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "AccessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-filter))
   common-lisp:nil))
(common-lisp:deftype metrics-id () 'common-lisp:string)
(common-lisp:deftype metrics-status () 'common-lisp:string)
(common-lisp:deftype minutes () 'common-lisp:integer)
(common-lisp:deftype missing-meta () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass multipart-upload common-lisp:nil
                       ((upload-id :initarg :upload-id :initform
                         common-lisp:nil :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor struct-shape-multipart-upload-upload-id
                         :shape "MultipartUploadId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-multipart-upload-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (initiated :initarg :initiated :initform
                         common-lisp:nil :type
                         (common-lisp:or initiated common-lisp:null) :accessor
                         struct-shape-multipart-upload-initiated :shape
                         "Initiated" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor struct-shape-multipart-upload-storage-class
                         :shape "StorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-multipart-upload-owner :shape "Owner"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (initiator :initarg :initiator :initform
                         common-lisp:nil :type
                         (common-lisp:or initiator common-lisp:null) :accessor
                         struct-shape-multipart-upload-initiator :shape
                         "Initiator" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-multipart-upload-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-multipart-upload
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'multipart-upload
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'multipart-upload 'make-multipart-upload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multipart-upload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-id))
      (common-lisp:list
       (common-lisp:cons "UploadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated))
      (common-lisp:list
       (common-lisp:cons "Initiated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiator))
      (common-lisp:list
       (common-lisp:cons "Initiator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multipart-upload))
   common-lisp:nil))
(common-lisp:deftype multipart-upload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype multipart-upload-list ()
   '(trivial-types:proper-list multipart-upload))
 (common-lisp:defun make-multipart-upload-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multipart-upload))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-key-marker () 'common-lisp:string)
(common-lisp:deftype next-marker () 'common-lisp:string)
(common-lisp:deftype next-part-number-marker () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype next-upload-id-marker () 'common-lisp:string)
(common-lisp:deftype next-version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-bucket
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-bucket)))
(common-lisp:progn
 (common-lisp:define-condition no-such-key
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-key)))
(common-lisp:progn
 (common-lisp:define-condition no-such-upload
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-upload)))
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-expiration common-lisp:nil
                       ((noncurrent-days :initarg :noncurrent-days :initform
                         common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-noncurrent-version-expiration-noncurrent-days
                         :shape "Days" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (newer-noncurrent-versions :initarg
                         :newer-noncurrent-versions :initform common-lisp:nil
                         :type (common-lisp:or version-count common-lisp:null)
                         :accessor
                         struct-shape-noncurrent-version-expiration-newer-noncurrent-versions
                         :shape "VersionCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-noncurrent-version-expiration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-expiration
                    'make-noncurrent-version-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-expiration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass noncurrent-version-transition common-lisp:nil
                       ((noncurrent-days :initarg :noncurrent-days :initform
                         common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-noncurrent-version-transition-noncurrent-days
                         :shape "Days" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor
                         struct-shape-noncurrent-version-transition-storage-class
                         :shape "TransitionStorageClass" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (newer-noncurrent-versions :initarg
                         :newer-noncurrent-versions :initform common-lisp:nil
                         :type (common-lisp:or version-count common-lisp:null)
                         :accessor
                         struct-shape-noncurrent-version-transition-newer-noncurrent-versions
                         :shape "VersionCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-noncurrent-version-transition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'noncurrent-version-transition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'noncurrent-version-transition
                    'make-noncurrent-version-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noncurrent-days))
      (common-lisp:list
       (common-lisp:cons "NoncurrentDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'newer-noncurrent-versions))
      (common-lisp:list
       (common-lisp:cons "NewerNoncurrentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noncurrent-version-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype noncurrent-version-transition-list ()
   '(trivial-types:proper-list noncurrent-version-transition))
 (common-lisp:defun make-noncurrent-version-transition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            noncurrent-version-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((topic-configurations :initarg :topic-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-topic-configurations
                         :shape "TopicConfigurationList" :location
                         common-lisp:nil :location-name "TopicConfiguration")
                        (queue-configurations :initarg :queue-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or queue-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-queue-configurations
                         :shape "QueueConfigurationList" :location
                         common-lisp:nil :location-name "QueueConfiguration")
                        (lambda-function-configurations :initarg
                         :lambda-function-configurations :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-function-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-lambda-function-configurations
                         :shape "LambdaFunctionConfigurationList" :location
                         common-lisp:nil :location-name
                         "CloudFunctionConfiguration")
                        (event-bridge-configuration :initarg
                         :event-bridge-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or event-bridge-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-event-bridge-configuration
                         :shape "EventBridgeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'topic-configurations))
      (common-lisp:list
       (common-lisp:cons "TopicConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'queue-configurations))
      (common-lisp:list
       (common-lisp:cons "QueueConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lambda-function-configurations))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-bridge-configuration))
      (common-lisp:list
       (common-lisp:cons "EventBridgeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-configuration-deprecated common-lisp:nil
                       ((topic-configuration :initarg :topic-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or topic-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-deprecated-topic-configuration
                         :shape "TopicConfigurationDeprecated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (queue-configuration :initarg :queue-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or queue-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-deprecated-queue-configuration
                         :shape "QueueConfigurationDeprecated" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-function-configuration :initarg
                         :cloud-function-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-function-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-deprecated-cloud-function-configuration
                         :shape "CloudFunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration-deprecated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notification-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-deprecated
                    'make-notification-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-configuration))
      (common-lisp:list
       (common-lisp:cons "TopicConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-configuration))
      (common-lisp:list
       (common-lisp:cons "QueueConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-function-configuration))
      (common-lisp:list
       (common-lisp:cons "CloudFunctionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass notification-configuration-filter common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or s3key-filter common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-filter-key
                         :shape "S3KeyFilter" :location common-lisp:nil
                         :location-name "S3Key"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'notification-configuration-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration-filter
                    'make-notification-configuration-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration-filter))
   common-lisp:nil))
(common-lisp:deftype notification-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-object-key :shape "ObjectKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor struct-shape-object-last-modified :shape
                         "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-object-etag :shape "ETag" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm-list
                                         common-lisp:null)
                         :accessor struct-shape-object-checksum-algorithm
                         :shape "ChecksumAlgorithmList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-object-size :shape "Size" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or object-storage-class common-lisp:null)
                         :accessor struct-shape-object-storage-class :shape
                         "ObjectStorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-object-owner :shape "Owner" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (restore-status :initarg :restore-status :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-status common-lisp:null)
                         :accessor struct-shape-object-restore-status :shape
                         "RestoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'object 'make-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition object-already-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-already-in-active-tier-error)))
(common-lisp:deftype object-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-attributes-list ()
   '(trivial-types:proper-list object-attributes))
 (common-lisp:defun make-object-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-identifier common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-object-identifier-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-object-identifier-version-id
                         :shape "ObjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-identifier 'make-object-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-identifier-list ()
   '(trivial-types:proper-list object-identifier))
 (common-lisp:defun make-object-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-list () '(trivial-types:proper-list object))
 (common-lisp:defun make-object-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass object-lock-configuration common-lisp:nil
                       ((object-lock-enabled :initarg :object-lock-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or object-lock-enabled common-lisp:null)
                         :accessor
                         struct-shape-object-lock-configuration-object-lock-enabled
                         :shape "ObjectLockEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule :initarg :rule :initform common-lisp:nil :type
                         (common-lisp:or object-lock-rule common-lisp:null)
                         :accessor struct-shape-object-lock-configuration-rule
                         :shape "ObjectLockRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-lock-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-lock-configuration
                    'make-object-lock-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-enabled))
      (common-lisp:list
       (common-lisp:cons "ObjectLockEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-configuration))
   common-lisp:nil))
(common-lisp:deftype object-lock-enabled () 'common-lisp:string)
(common-lisp:deftype object-lock-enabled-for-bucket () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass object-lock-legal-hold common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor struct-shape-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-lock-legal-hold
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-legal-hold
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-lock-legal-hold 'make-object-lock-legal-hold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-legal-hold))
   common-lisp:nil))
(common-lisp:deftype object-lock-legal-hold-status () 'common-lisp:string)
(common-lisp:deftype object-lock-mode () 'common-lisp:string)
(common-lisp:deftype object-lock-retain-until-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lock-retention common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or object-lock-retention-mode
                                         common-lisp:null)
                         :accessor struct-shape-object-lock-retention-mode
                         :shape "ObjectLockRetentionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retain-until-date :initarg :retain-until-date
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-object-lock-retention-retain-until-date
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-lock-retention
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-retention
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-lock-retention 'make-object-lock-retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-until-date))
      (common-lisp:list
       (common-lisp:cons "RetainUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-lock-retention))
   common-lisp:nil))
(common-lisp:deftype object-lock-retention-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-lock-rule common-lisp:nil
                       ((default-retention :initarg :default-retention
                         :initform common-lisp:nil :type
                         (common-lisp:or default-retention common-lisp:null)
                         :accessor
                         struct-shape-object-lock-rule-default-retention :shape
                         "DefaultRetention" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-lock-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-lock-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'object-lock-rule 'make-object-lock-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-lock-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-retention))
      (common-lisp:list
       (common-lisp:cons "DefaultRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-lock-rule))
   common-lisp:nil))
(common-lisp:deftype object-lock-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition object-not-in-active-tier-error
     (s3-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'object-not-in-active-tier-error)))
(common-lisp:deftype object-ownership () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-part common-lisp:nil
                       ((part-number :initarg :part-number :initform
                         common-lisp:nil :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-object-part-part-number :shape
                         "PartNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-object-part-size :shape "Size" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor struct-shape-object-part-checksum-crc32
                         :shape "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor struct-shape-object-part-checksum-crc32c
                         :shape "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-object-part-checksum-sha1
                         :shape "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor struct-shape-object-part-checksum-sha256
                         :shape "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-part
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'object-part 'make-object-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-part))
   common-lisp:nil))
(common-lisp:deftype object-size () 'common-lisp:integer)
(common-lisp:deftype object-size-greater-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-size-less-than-bytes () 'common-lisp:integer)
(common-lisp:deftype object-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass object-version common-lisp:nil
                       ((etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-object-version-etag :shape "ETag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-object-version-checksum-algorithm :shape
                         "ChecksumAlgorithmList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-object-version-size :shape "Size"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-storage-class
                                         common-lisp:null)
                         :accessor struct-shape-object-version-storage-class
                         :shape "ObjectVersionStorageClass" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-object-version-key :shape "ObjectKey"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-object-version-version-id
                         :shape "ObjectVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-latest :initarg :is-latest :initform
                         common-lisp:nil :type
                         (common-lisp:or is-latest common-lisp:null) :accessor
                         struct-shape-object-version-is-latest :shape
                         "IsLatest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor struct-shape-object-version-last-modified
                         :shape "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-object-version-owner :shape "Owner"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (restore-status :initarg :restore-status :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-status common-lisp:null)
                         :accessor struct-shape-object-version-restore-status
                         :shape "RestoreStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-object-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'object-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'object-version 'make-object-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:list
       (common-lisp:cons "ChecksumAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest))
      (common-lisp:list
       (common-lisp:cons "IsLatest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-status))
      (common-lisp:list
       (common-lisp:cons "RestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-version))
   common-lisp:nil))
(common-lisp:deftype object-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-version-list ()
   '(trivial-types:proper-list object-version))
 (common-lisp:defun make-object-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-version-storage-class () 'common-lisp:string)
(common-lisp:deftype optional-object-attributes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype optional-object-attributes-list ()
   '(trivial-types:proper-list optional-object-attributes))
 (common-lisp:defun make-optional-object-attributes-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            optional-object-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-location common-lisp:nil
                       ((s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-output-location-s3 :shape "S3Location"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'output-location 'make-output-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-serialization common-lisp:nil
                       ((csv :initarg :csv :initform common-lisp:nil :type
                         (common-lisp:or csvoutput common-lisp:null) :accessor
                         struct-shape-output-serialization-csv :shape
                         "CSVOutput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (json :initarg :json :initform common-lisp:nil :type
                         (common-lisp:or jsonoutput common-lisp:null) :accessor
                         struct-shape-output-serialization-json :shape
                         "JSONOutput" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-serialization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-serialization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-serialization 'make-output-serialization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-serialization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "CSV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "JSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-serialization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass owner common-lisp:nil
                       ((display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or display-name common-lisp:null)
                         :accessor struct-shape-owner-display-name :shape
                         "DisplayName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-owner-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-owner
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'owner
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'owner 'make-owner))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input owner))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input owner))
   common-lisp:nil))
(common-lisp:deftype owner-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ownership-controls common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or ownership-controls-rules
                                         common-lisp:null)
                         :accessor struct-shape-ownership-controls-rules :shape
                         "OwnershipControlsRules" :location common-lisp:nil
                         :location-name "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ownership-controls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ownership-controls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ownership-controls 'make-ownership-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ownership-controls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ownership-controls))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ownership-controls-rule common-lisp:nil
                       ((object-ownership :initarg :object-ownership :initform
                         (common-lisp:error ":object-ownership is required")
                         :type
                         (common-lisp:or object-ownership common-lisp:null)
                         :accessor
                         struct-shape-ownership-controls-rule-object-ownership
                         :shape "ObjectOwnership" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ownership-controls-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ownership-controls-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ownership-controls-rule 'make-ownership-controls-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-ownership))
      (common-lisp:list
       (common-lisp:cons "ObjectOwnership"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ownership-controls-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ownership-controls-rules ()
   '(trivial-types:proper-list ownership-controls-rule))
 (common-lisp:defun make-ownership-controls-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ownership-controls-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parquet-input common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parquet-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parquet-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parquet-input 'make-parquet-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parquet-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parquet-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass part common-lisp:nil
                       ((part-number :initarg :part-number :initform
                         common-lisp:nil :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-part-part-number :shape
                         "PartNumber" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor struct-shape-part-last-modified :shape
                         "LastModified" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-part-etag :shape "ETag" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (size :initarg :size :initform common-lisp:nil :type
                         (common-lisp:or size common-lisp:null) :accessor
                         struct-shape-part-size :shape "Size" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor struct-shape-part-checksum-crc32 :shape
                         "ChecksumCRC32" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor struct-shape-part-checksum-crc32c :shape
                         "ChecksumCRC32C" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-part-checksum-sha1 :shape
                         "ChecksumSHA1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor struct-shape-part-checksum-sha256 :shape
                         "ChecksumSHA256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-part (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'part
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'part 'make-part))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input part))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'part-number))
      (common-lisp:list
       (common-lisp:cons "PartNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "ETag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:list
       (common-lisp:cons "ChecksumCRC32C"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:list
       (common-lisp:cons "ChecksumSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input part))
   common-lisp:nil))
(common-lisp:deftype part-number () 'common-lisp:integer)
(common-lisp:deftype part-number-marker () 'common-lisp:integer)
(common-lisp:deftype partition-date-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partitioned-prefix common-lisp:nil
                       ((partition-date-source :initarg :partition-date-source
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-date-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-partitioned-prefix-partition-date-source
                         :shape "PartitionDateSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partitioned-prefix
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partitioned-prefix
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partitioned-prefix 'make-partitioned-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-date-source))
      (common-lisp:list
       (common-lisp:cons "PartitionDateSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partitioned-prefix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parts () '(trivial-types:proper-list part))
 (common-lisp:defun make-parts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parts-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype parts-list () '(trivial-types:proper-list object-part))
 (common-lisp:defun make-parts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-part))
   aws-sdk/generator/shape::members))
(common-lisp:deftype payer () 'common-lisp:string)
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-status common-lisp:nil
                       ((is-public :initarg :is-public :initform
                         common-lisp:nil :type
                         (common-lisp:or is-public common-lisp:null) :accessor
                         struct-shape-policy-status-is-public :shape "IsPublic"
                         :location common-lisp:nil :location-name "IsPublic"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-status 'make-policy-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "IsPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-status))
   common-lisp:nil))
(common-lisp:deftype prefix () 'common-lisp:string)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass progress common-lisp:nil
                       ((bytes-scanned :initarg :bytes-scanned :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-scanned common-lisp:null)
                         :accessor struct-shape-progress-bytes-scanned :shape
                         "BytesScanned" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-processed :initarg :bytes-processed :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-processed common-lisp:null)
                         :accessor struct-shape-progress-bytes-processed :shape
                         "BytesProcessed" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-returned :initarg :bytes-returned :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-returned common-lisp:null)
                         :accessor struct-shape-progress-bytes-returned :shape
                         "BytesReturned" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-progress
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'progress
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'progress 'make-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass progress-event common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or progress common-lisp:null)
                         :accessor struct-shape-progress-event-details :shape
                         "Progress" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-progress-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'progress-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'progress-event 'make-progress-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-event))
   common-lisp:nil))
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass public-access-block-configuration common-lisp:nil
                       ((block-public-acls :initarg :block-public-acls
                         :initform common-lisp:nil :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         struct-shape-public-access-block-configuration-block-public-acls
                         :shape "Setting" :location common-lisp:nil
                         :location-name "BlockPublicAcls")
                        (ignore-public-acls :initarg :ignore-public-acls
                         :initform common-lisp:nil :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         struct-shape-public-access-block-configuration-ignore-public-acls
                         :shape "Setting" :location common-lisp:nil
                         :location-name "IgnorePublicAcls")
                        (block-public-policy :initarg :block-public-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or setting common-lisp:null) :accessor
                         struct-shape-public-access-block-configuration-block-public-policy
                         :shape "Setting" :location common-lisp:nil
                         :location-name "BlockPublicPolicy")
                        (restrict-public-buckets :initarg
                         :restrict-public-buckets :initform common-lisp:nil
                         :type (common-lisp:or setting common-lisp:null)
                         :accessor
                         struct-shape-public-access-block-configuration-restrict-public-buckets
                         :shape "Setting" :location common-lisp:nil
                         :location-name "RestrictPublicBuckets"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-public-access-block-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'public-access-block-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'public-access-block-configuration
                    'make-public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-acls))
      (common-lisp:list
       (common-lisp:cons "BlockPublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "IgnorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-public-policy))
      (common-lisp:list
       (common-lisp:cons "BlockPublicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "RestrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-bucket-accelerate-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-accelerate-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (accelerate-configuration :initarg
                         :accelerate-configuration :initform
                         (common-lisp:error
                          ":accelerate-configuration is required")
                         :type
                         (common-lisp:or accelerate-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-accelerate-configuration-request-accelerate-configuration
                         :shape "AccelerateConfiguration" :location
                         common-lisp:nil :location-name
                         "AccelerateConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-accelerate-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-accelerate-configuration-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-accelerate-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-accelerate-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-accelerate-configuration-request
                    'make-put-bucket-accelerate-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accelerate-configuration))
      (common-lisp:list
       (common-lisp:cons "AccelerateConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'accelerate-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-accelerate-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "AccelerateConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-acl-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or bucket-canned-acl common-lisp:null)
                         :accessor struct-shape-put-bucket-acl-request-acl
                         :shape "BucketCannedACL" :location "header"
                         :location-name "x-amz-acl")
                        (access-control-policy :initarg :access-control-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or access-control-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-access-control-policy
                         :shape "AccessControlPolicy" :location common-lisp:nil
                         :location-name "AccessControlPolicy")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-put-bucket-acl-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-content-md5 :shape
                         "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-put-bucket-acl-request-grant-read :shape
                         "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-grant-read-acp
                         :shape "GrantReadACP" :location "header"
                         :location-name "x-amz-grant-read-acp")
                        (grant-write :initarg :grant-write :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-grant-write :shape
                         "GrantWrite" :location "header" :location-name
                         "x-amz-grant-write")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-acl-request-grant-write-acp
                         :shape "GrantWriteACP" :location "header"
                         :location-name "x-amz-grant-write-acp")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-acl-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-acl-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-acl-request 'make-put-bucket-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'access-control-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-acl-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "AccessControlPolicy" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-analytics-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-analytics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or analytics-id common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-analytics-configuration-request-id
                         :shape "AnalyticsId" :location "querystring"
                         :location-name "id")
                        (analytics-configuration :initarg
                         :analytics-configuration :initform
                         (common-lisp:error
                          ":analytics-configuration is required")
                         :type
                         (common-lisp:or analytics-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-analytics-configuration-request-analytics-configuration
                         :shape "AnalyticsConfiguration" :location
                         common-lisp:nil :location-name
                         "AnalyticsConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-analytics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-analytics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-analytics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-analytics-configuration-request
                    'make-put-bucket-analytics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'analytics-configuration))
      (common-lisp:list
       (common-lisp:cons "AnalyticsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'analytics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-analytics-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "AnalyticsConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-cors-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-put-bucket-cors-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (corsconfiguration :initarg :corsconfiguration
                         :initform
                         (common-lisp:error ":corsconfiguration is required")
                         :type
                         (common-lisp:or corsconfiguration common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-cors-request-corsconfiguration
                         :shape "CORSConfiguration" :location common-lisp:nil
                         :location-name "CORSConfiguration")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-cors-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-cors-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-cors-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-cors-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-cors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-cors-request 'make-put-bucket-cors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'corsconfiguration))
      (common-lisp:list
       (common-lisp:cons "CORSConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'corsconfiguration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-cors-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "CORSConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-encryption-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-encryption-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-encryption-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-encryption-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (server-side-encryption-configuration :initarg
                         :server-side-encryption-configuration :initform
                         (common-lisp:error
                          ":server-side-encryption-configuration is required")
                         :type
                         (common-lisp:or server-side-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-encryption-request-server-side-encryption-configuration
                         :shape "ServerSideEncryptionConfiguration" :location
                         common-lisp:nil :location-name
                         "ServerSideEncryptionConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-encryption-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-encryption-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-encryption-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-encryption-request
                    'make-put-bucket-encryption-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "ServerSideEncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-encryption-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "ServerSideEncryptionConfiguration"
                     :xml-namespace "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-intelligent-tiering-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-intelligent-tiering-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or intelligent-tiering-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-intelligent-tiering-configuration-request-id
                         :shape "IntelligentTieringId" :location "querystring"
                         :location-name "id")
                        (intelligent-tiering-configuration :initarg
                         :intelligent-tiering-configuration :initform
                         (common-lisp:error
                          ":intelligent-tiering-configuration is required")
                         :type
                         (common-lisp:or intelligent-tiering-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-intelligent-tiering-configuration-request-intelligent-tiering-configuration
                         :shape "IntelligentTieringConfiguration" :location
                         common-lisp:nil :location-name
                         "IntelligentTieringConfiguration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-intelligent-tiering-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-intelligent-tiering-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-intelligent-tiering-configuration-request
                    'make-put-bucket-intelligent-tiering-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
      (common-lisp:list
       (common-lisp:cons "IntelligentTieringConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'intelligent-tiering-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-intelligent-tiering-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "IntelligentTieringConfiguration"
                     :xml-namespace "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-inventory-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-inventory-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or inventory-id common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-inventory-configuration-request-id
                         :shape "InventoryId" :location "querystring"
                         :location-name "id")
                        (inventory-configuration :initarg
                         :inventory-configuration :initform
                         (common-lisp:error
                          ":inventory-configuration is required")
                         :type
                         (common-lisp:or inventory-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-inventory-configuration-request-inventory-configuration
                         :shape "InventoryConfiguration" :location
                         common-lisp:nil :location-name
                         "InventoryConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-inventory-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-inventory-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-inventory-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-inventory-configuration-request
                    'make-put-bucket-inventory-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inventory-configuration))
      (common-lisp:list
       (common-lisp:cons "InventoryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'inventory-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-inventory-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "InventoryConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-lifecycle-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-configuration-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-configuration-request-lifecycle-configuration
                         :shape "BucketLifecycleConfiguration" :location
                         common-lisp:nil :location-name
                         "LifecycleConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-lifecycle-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-lifecycle-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-lifecycle-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-configuration-request
                    'make-put-bucket-lifecycle-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "LifecycleConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-lifecycle-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-lifecycle-request-lifecycle-configuration
                         :shape "LifecycleConfiguration" :location
                         common-lisp:nil :location-name
                         "LifecycleConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-lifecycle-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-lifecycle-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-lifecycle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-lifecycle-request
                    'make-put-bucket-lifecycle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-lifecycle-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "LifecycleConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-logging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-logging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (bucket-logging-status :initarg :bucket-logging-status
                         :initform
                         (common-lisp:error
                          ":bucket-logging-status is required")
                         :type
                         (common-lisp:or bucket-logging-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-logging-request-bucket-logging-status
                         :shape "BucketLoggingStatus" :location common-lisp:nil
                         :location-name "BucketLoggingStatus")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-logging-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-logging-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-logging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-logging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-logging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-logging-request
                    'make-put-bucket-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-logging-status))
      (common-lisp:list
       (common-lisp:cons "BucketLoggingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'bucket-logging-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-logging-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "BucketLoggingStatus" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-metrics-configuration-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-metrics-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or metrics-id common-lisp:null) :accessor
                         struct-shape-put-bucket-metrics-configuration-request-id
                         :shape "MetricsId" :location "querystring"
                         :location-name "id")
                        (metrics-configuration :initarg :metrics-configuration
                         :initform
                         (common-lisp:error
                          ":metrics-configuration is required")
                         :type
                         (common-lisp:or metrics-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-metrics-configuration-request-metrics-configuration
                         :shape "MetricsConfiguration" :location
                         common-lisp:nil :location-name "MetricsConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-metrics-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-metrics-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-metrics-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-metrics-configuration-request
                    'make-put-bucket-metrics-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metrics-configuration))
      (common-lisp:list
       (common-lisp:cons "MetricsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'metrics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-metrics-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "MetricsConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-notification-configuration-request
                       common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (notification-configuration :initarg
                         :notification-configuration :initform
                         (common-lisp:error
                          ":notification-configuration is required")
                         :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-configuration-request-notification-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name
                         "NotificationConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-notification-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (skip-destination-validation :initarg
                         :skip-destination-validation :initform common-lisp:nil
                         :type
                         (common-lisp:or skip-validation common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-configuration-request-skip-destination-validation
                         :shape "SkipValidation" :location "header"
                         :location-name "x-amz-skip-destination-validation"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-notification-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-configuration-request
                    'make-put-bucket-notification-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skip-destination-validation))
      (common-lisp:cons "x-amz-skip-destination-validation"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "NotificationConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-notification-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (notification-configuration :initarg
                         :notification-configuration :initform
                         (common-lisp:error
                          ":notification-configuration is required")
                         :type
                         (common-lisp:or notification-configuration-deprecated
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-notification-request-notification-configuration
                         :shape "NotificationConfigurationDeprecated" :location
                         common-lisp:nil :location-name
                         "NotificationConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-notification-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-notification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-notification-request
                    'make-put-bucket-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-notification-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "NotificationConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-ownership-controls-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-ownership-controls-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-ownership-controls-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-ownership-controls-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (ownership-controls :initarg :ownership-controls
                         :initform
                         (common-lisp:error ":ownership-controls is required")
                         :type
                         (common-lisp:or ownership-controls common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-ownership-controls-request-ownership-controls
                         :shape "OwnershipControls" :location common-lisp:nil
                         :location-name "OwnershipControls"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-ownership-controls-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-ownership-controls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-ownership-controls-request
                    'make-put-bucket-ownership-controls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-controls))
      (common-lisp:list
       (common-lisp:cons "OwnershipControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'ownership-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-ownership-controls-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "OwnershipControls" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-policy-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-policy-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-policy-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-policy-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (confirm-remove-self-bucket-access :initarg
                         :confirm-remove-self-bucket-access :initform
                         common-lisp:nil :type
                         (common-lisp:or confirm-remove-self-bucket-access
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-policy-request-confirm-remove-self-bucket-access
                         :shape "ConfirmRemoveSelfBucketAccess" :location
                         "header" :location-name
                         "x-amz-confirm-remove-self-bucket-access")
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-put-bucket-policy-request-policy :shape
                         "Policy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-policy-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-policy-request
                    'make-put-bucket-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'confirm-remove-self-bucket-access))
      (common-lisp:cons "x-amz-confirm-remove-self-bucket-access"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-policy-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass put-bucket-replication-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-replication-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-replication-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-replication-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (replication-configuration :initarg
                         :replication-configuration :initform
                         (common-lisp:error
                          ":replication-configuration is required")
                         :type
                         (common-lisp:or replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-replication-request-replication-configuration
                         :shape "ReplicationConfiguration" :location
                         common-lisp:nil :location-name
                         "ReplicationConfiguration")
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or object-lock-token common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-replication-request-token
                         :shape "ObjectLockToken" :location "header"
                         :location-name "x-amz-bucket-object-lock-token")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-replication-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-replication-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-replication-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-replication-request
                    'make-put-bucket-replication-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "ReplicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-replication-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "ReplicationConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-request-payment-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-request-payment-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-request-payment-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-request-payment-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (request-payment-configuration :initarg
                         :request-payment-configuration :initform
                         (common-lisp:error
                          ":request-payment-configuration is required")
                         :type
                         (common-lisp:or request-payment-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-request-payment-request-request-payment-configuration
                         :shape "RequestPaymentConfiguration" :location
                         common-lisp:nil :location-name
                         "RequestPaymentConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-request-payment-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-request-payment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-request-payment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-request-payment-request
                    'make-put-bucket-request-payment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-payment-configuration))
      (common-lisp:list
       (common-lisp:cons "RequestPaymentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'request-payment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-request-payment-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "RequestPaymentConfiguration"
                     :xml-namespace "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-tagging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-tagging-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-tagging-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (tagging :initarg :tagging :initform
                         (common-lisp:error ":tagging is required") :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         struct-shape-put-bucket-tagging-request-tagging :shape
                         "Tagging" :location common-lisp:nil :location-name
                         "Tagging")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-tagging-request
                    'make-put-bucket-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tagging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-tagging-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "Tagging" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-versioning-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-versioning-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-versioning-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-versioning-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (mfa :initarg :mfa :initform common-lisp:nil :type
                         (common-lisp:or mfa common-lisp:null) :accessor
                         struct-shape-put-bucket-versioning-request-mfa :shape
                         "MFA" :location "header" :location-name "x-amz-mfa")
                        (versioning-configuration :initarg
                         :versioning-configuration :initform
                         (common-lisp:error
                          ":versioning-configuration is required")
                         :type
                         (common-lisp:or versioning-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-versioning-request-versioning-configuration
                         :shape "VersioningConfiguration" :location
                         common-lisp:nil :location-name
                         "VersioningConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-versioning-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-versioning-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-bucket-versioning-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-versioning-request
                    'make-put-bucket-versioning-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:cons "x-amz-mfa" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'versioning-configuration))
      (common-lisp:list
       (common-lisp:cons "VersioningConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-versioning-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "VersioningConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-bucket-website-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-website-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-website-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-website-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (website-configuration :initarg :website-configuration
                         :initform
                         (common-lisp:error
                          ":website-configuration is required")
                         :type
                         (common-lisp:or website-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-bucket-website-request-website-configuration
                         :shape "WebsiteConfiguration" :location
                         common-lisp:nil :location-name "WebsiteConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-bucket-website-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-bucket-website-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-bucket-website-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-bucket-website-request
                    'make-put-bucket-website-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-configuration))
      (common-lisp:list
       (common-lisp:cons "WebsiteConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'website-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-bucket-website-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "WebsiteConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-object-acl-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-acl-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-acl-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-output 'make-put-object-acl-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-acl-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor struct-shape-put-object-acl-request-acl
                         :shape "ObjectCannedACL" :location "header"
                         :location-name "x-amz-acl")
                        (access-control-policy :initarg :access-control-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or access-control-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-access-control-policy
                         :shape "AccessControlPolicy" :location common-lisp:nil
                         :location-name "AccessControlPolicy")
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-put-object-acl-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-content-md5 :shape
                         "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-put-object-acl-request-grant-read :shape
                         "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-grant-read-acp
                         :shape "GrantReadACP" :location "header"
                         :location-name "x-amz-grant-read-acp")
                        (grant-write :initarg :grant-write :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-grant-write :shape
                         "GrantWrite" :location "header" :location-name
                         "x-amz-grant-write")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-grant-write-acp
                         :shape "GrantWriteACP" :location "header"
                         :location-name "x-amz-grant-write-acp")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-put-object-acl-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-object-acl-request-version-id :shape
                         "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-acl-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-acl-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-acl-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-acl-request 'make-put-object-acl-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write))
      (common-lisp:cons "x-amz-grant-write" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-policy))
      (common-lisp:list
       (common-lisp:cons "AccessControlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'access-control-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-object-acl-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "AccessControlPolicy" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-object-legal-hold-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-legal-hold-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-legal-hold-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-output
                    'make-put-object-legal-hold-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-legal-hold-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-put-object-legal-hold-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (legal-hold :initarg :legal-hold :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-legal-hold
                         :shape "ObjectLockLegalHold" :location common-lisp:nil
                         :location-name "LegalHold")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-legal-hold-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-legal-hold-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-legal-hold-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-legal-hold-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-legal-hold-request
                    'make-put-object-legal-hold-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'legal-hold))
      (common-lisp:list
       (common-lisp:cons "LegalHold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'legal-hold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-object-legal-hold-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "LegalHold" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-object-lock-configuration-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-lock-configuration-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-lock-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-output
                    'make-put-object-lock-configuration-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-lock-configuration-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (object-lock-configuration :initarg
                         :object-lock-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or object-lock-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-object-lock-configuration
                         :shape "ObjectLockConfiguration" :location
                         common-lisp:nil :location-name
                         "ObjectLockConfiguration")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (token :initarg :token :initform common-lisp:nil :type
                         (common-lisp:or object-lock-token common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-token
                         :shape "ObjectLockToken" :location "header"
                         :location-name "x-amz-bucket-object-lock-token")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-lock-configuration-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-lock-configuration-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-lock-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-object-lock-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-lock-configuration-request
                    'make-put-object-lock-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:cons "x-amz-bucket-object-lock-token"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-configuration))
      (common-lisp:list
       (common-lisp:cons "ObjectLockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'object-lock-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-object-lock-configuration-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "ObjectLockConfiguration" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-object-output common-lisp:nil
                       ((expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-put-object-output-expiration :shape
                         "Expiration" :location "header" :location-name
                         "x-amz-expiration")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-put-object-output-etag :shape "ETag"
                         :location "header" :location-name "ETag")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-checksum-crc32c :shape
                         "ChecksumCRC32C" :location "header" :location-name
                         "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor struct-shape-put-object-output-checksum-sha1
                         :shape "ChecksumSHA1" :location "header"
                         :location-name "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-checksum-sha256 :shape
                         "ChecksumSHA256" :location "header" :location-name
                         "x-amz-checksum-sha256")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor struct-shape-put-object-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-put-object-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-put-object-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-output 'make-put-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-expiration" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-request common-lisp:nil
                       ((acl :initarg :acl :initform common-lisp:nil :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor struct-shape-put-object-request-acl :shape
                         "ObjectCannedACL" :location "header" :location-name
                         "x-amz-acl")
                        (body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor struct-shape-put-object-request-body :shape
                         "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-put-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-cache-control :shape
                         "CacheControl" :location "header" :location-name
                         "Cache-Control")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-content-encoding
                         :shape "ContentEncoding" :location "header"
                         :location-name "Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-content-language
                         :shape "ContentLanguage" :location "header"
                         :location-name "Content-Language")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-content-length :shape
                         "ContentLength" :location "header" :location-name
                         "Content-Length")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor struct-shape-put-object-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor struct-shape-put-object-request-content-type
                         :shape "ContentType" :location "header" :location-name
                         "Content-Type")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-checksum-crc32c :shape
                         "ChecksumCRC32C" :location "header" :location-name
                         "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-checksum-sha1 :shape
                         "ChecksumSHA1" :location "header" :location-name
                         "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-checksum-sha256 :shape
                         "ChecksumSHA256" :location "header" :location-name
                         "x-amz-checksum-sha256")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor struct-shape-put-object-request-expires
                         :shape "Expires" :location "header" :location-name
                         "Expires")
                        (grant-full-control :initarg :grant-full-control
                         :initform common-lisp:nil :type
                         (common-lisp:or grant-full-control common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-grant-full-control
                         :shape "GrantFullControl" :location "header"
                         :location-name "x-amz-grant-full-control")
                        (grant-read :initarg :grant-read :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read common-lisp:null) :accessor
                         struct-shape-put-object-request-grant-read :shape
                         "GrantRead" :location "header" :location-name
                         "x-amz-grant-read")
                        (grant-read-acp :initarg :grant-read-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-read-acp common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-grant-read-acp :shape
                         "GrantReadACP" :location "header" :location-name
                         "x-amz-grant-read-acp")
                        (grant-write-acp :initarg :grant-write-acp :initform
                         common-lisp:nil :type
                         (common-lisp:or grant-write-acp common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-grant-write-acp :shape
                         "GrantWriteACP" :location "header" :location-name
                         "x-amz-grant-write-acp")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-put-object-request-key :shape "ObjectKey"
                         :location "uri" :location-name "Key")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor struct-shape-put-object-request-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-storage-class :shape
                         "StorageClass" :location "header" :location-name
                         "x-amz-storage-class")
                        (website-redirect-location :initarg
                         :website-redirect-location :initform common-lisp:nil
                         :type
                         (common-lisp:or website-redirect-location
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-website-redirect-location
                         :shape "WebsiteRedirectLocation" :location "header"
                         :location-name "x-amz-website-redirect-location")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-ssecustomer-key :shape
                         "SSECustomerKey" :location "header" :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-put-object-request-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (ssekmsencryption-context :initarg
                         :ssekmsencryption-context :initform common-lisp:nil
                         :type
                         (common-lisp:or ssekmsencryption-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-ssekmsencryption-context
                         :shape "SSEKMSEncryptionContext" :location "header"
                         :location-name "x-amz-server-side-encryption-context")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (tagging :initarg :tagging :initform common-lisp:nil
                         :type (common-lisp:or tagging-header common-lisp:null)
                         :accessor struct-shape-put-object-request-tagging
                         :shape "TaggingHeader" :location "header"
                         :location-name "x-amz-tagging")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-object-lock-mode
                         :shape "ObjectLockMode" :location "header"
                         :location-name "x-amz-object-lock-mode")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name "x-amz-object-lock-retain-until-date")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-request-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name "x-amz-object-lock-legal-hold")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-request 'make-put-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acl))
      (common-lisp:cons "x-amz-acl" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "Cache-Control" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "Content-Disposition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "Content-Language" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "Expires" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-full-control))
      (common-lisp:cons "x-amz-grant-full-control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read))
      (common-lisp:cons "x-amz-grant-read" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-read-acp))
      (common-lisp:cons "x-amz-grant-read-acp" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grant-write-acp))
      (common-lisp:cons "x-amz-grant-write-acp"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-storage-class" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'website-redirect-location))
      (common-lisp:cons "x-amz-website-redirect-location"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssekmsencryption-context))
      (common-lisp:cons "x-amz-server-side-encryption-context"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:cons "x-amz-tagging" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input put-object-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass put-object-retention-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-retention-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-retention-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-output
                    'make-put-object-retention-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-retention-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-put-object-retention-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (retention :initarg :retention :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retention
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-retention
                         :shape "ObjectLockRetention" :location common-lisp:nil
                         :location-name "Retention")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (bypass-governance-retention :initarg
                         :bypass-governance-retention :initform common-lisp:nil
                         :type
                         (common-lisp:or bypass-governance-retention
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-bypass-governance-retention
                         :shape "BypassGovernanceRetention" :location "header"
                         :location-name "x-amz-bypass-governance-retention")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-retention-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-retention-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-retention-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-retention-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-retention-request
                    'make-put-object-retention-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bypass-governance-retention))
      (common-lisp:cons "x-amz-bypass-governance-retention"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'retention))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-object-retention-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "Retention" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-object-tagging-output common-lisp:nil
                       ((version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-output-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-version-id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-tagging-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-tagging-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-output
                    'make-put-object-tagging-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-version-id" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-object-tagging-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-request-bucket :shape
                         "BucketName" :location "uri" :location-name "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-put-object-tagging-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-request-version-id
                         :shape "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (tagging :initarg :tagging :initform
                         (common-lisp:error ":tagging is required") :type
                         (common-lisp:or tagging common-lisp:null) :accessor
                         struct-shape-put-object-tagging-request-tagging :shape
                         "Tagging" :location common-lisp:nil :location-name
                         "Tagging")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-object-tagging-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-put-object-tagging-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-object-tagging-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-object-tagging-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-object-tagging-request
                    'make-put-object-tagging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'tagging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-object-tagging-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "Tagging" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:progn
 (common-lisp:defclass put-public-access-block-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-put-public-access-block-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor
                         struct-shape-put-public-access-block-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-put-public-access-block-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (public-access-block-configuration :initarg
                         :public-access-block-configuration :initform
                         (common-lisp:error
                          ":public-access-block-configuration is required")
                         :type
                         (common-lisp:or public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-public-access-block-request-public-access-block-configuration
                         :shape "PublicAccessBlockConfiguration" :location
                         common-lisp:nil :location-name
                         "PublicAccessBlockConfiguration")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-put-public-access-block-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-public-access-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-public-access-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-public-access-block-request
                    'make-put-public-access-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-access-block-configuration))
      (common-lisp:list
       (common-lisp:cons "PublicAccessBlockConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          put-public-access-block-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "PublicAccessBlockConfiguration"
                     :xml-namespace "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:deftype queue-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass queue-configuration common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor struct-shape-queue-configuration-id :shape
                         "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (queue-arn :initarg :queue-arn :initform
                         (common-lisp:error ":queue-arn is required") :type
                         (common-lisp:or queue-arn common-lisp:null) :accessor
                         struct-shape-queue-configuration-queue-arn :shape
                         "QueueArn" :location common-lisp:nil :location-name
                         "Queue")
                        (events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         struct-shape-queue-configuration-events :shape
                         "EventList" :location common-lisp:nil :location-name
                         "Event")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor struct-shape-queue-configuration-filter
                         :shape "NotificationConfigurationFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-queue-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'queue-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'queue-configuration 'make-queue-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-arn))
      (common-lisp:list
       (common-lisp:cons "QueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass queue-configuration-deprecated common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor
                         struct-shape-queue-configuration-deprecated-id :shape
                         "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event :initarg :event :initform common-lisp:nil :type
                         (common-lisp:or event common-lisp:null) :accessor
                         struct-shape-queue-configuration-deprecated-event
                         :shape "Event" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor
                         struct-shape-queue-configuration-deprecated-events
                         :shape "EventList" :location common-lisp:nil
                         :location-name "Event")
                        (queue :initarg :queue :initform common-lisp:nil :type
                         (common-lisp:or queue-arn common-lisp:null) :accessor
                         struct-shape-queue-configuration-deprecated-queue
                         :shape "QueueArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-queue-configuration-deprecated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'queue-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'queue-configuration-deprecated
                    'make-queue-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          queue-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queue-configuration-list ()
   '(trivial-types:proper-list queue-configuration))
 (common-lisp:defun make-queue-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quiet () 'common-lisp:boolean)
(common-lisp:deftype quote-character () 'common-lisp:string)
(common-lisp:deftype quote-escape-character () 'common-lisp:string)
(common-lisp:deftype quote-fields () 'common-lisp:string)
(common-lisp:deftype range () 'common-lisp:string)
(common-lisp:deftype record-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass records-event common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type (common-lisp:or body common-lisp:null) :accessor
                         struct-shape-records-event-payload :shape "Body"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-records-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'records-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'records-event 'make-records-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input records-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input records-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redirect common-lisp:nil
                       ((host-name :initarg :host-name :initform
                         common-lisp:nil :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         struct-shape-redirect-host-name :shape "HostName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http-redirect-code :initarg :http-redirect-code
                         :initform common-lisp:nil :type
                         (common-lisp:or http-redirect-code common-lisp:null)
                         :accessor struct-shape-redirect-http-redirect-code
                         :shape "HttpRedirectCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor struct-shape-redirect-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replace-key-prefix-with :initarg
                         :replace-key-prefix-with :initform common-lisp:nil
                         :type
                         (common-lisp:or replace-key-prefix-with
                                         common-lisp:null)
                         :accessor
                         struct-shape-redirect-replace-key-prefix-with :shape
                         "ReplaceKeyPrefixWith" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replace-key-with :initarg :replace-key-with :initform
                         common-lisp:nil :type
                         (common-lisp:or replace-key-with common-lisp:null)
                         :accessor struct-shape-redirect-replace-key-with
                         :shape "ReplaceKeyWith" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redirect
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redirect
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'redirect 'make-redirect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redirect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-redirect-code))
      (common-lisp:list
       (common-lisp:cons "HttpRedirectCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replace-key-prefix-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyPrefixWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-key-with))
      (common-lisp:list
       (common-lisp:cons "ReplaceKeyWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redirect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redirect-all-requests-to common-lisp:nil
                       ((host-name :initarg :host-name :initform
                         (common-lisp:error ":host-name is required") :type
                         (common-lisp:or host-name common-lisp:null) :accessor
                         struct-shape-redirect-all-requests-to-host-name :shape
                         "HostName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type (common-lisp:or protocol common-lisp:null)
                         :accessor
                         struct-shape-redirect-all-requests-to-protocol :shape
                         "Protocol" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redirect-all-requests-to
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redirect-all-requests-to
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redirect-all-requests-to 'make-redirect-all-requests-to))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "HostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redirect-all-requests-to))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype replace-key-prefix-with () 'common-lisp:string)
(common-lisp:deftype replace-key-with () 'common-lisp:string)
(common-lisp:deftype replica-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replica-modifications common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or replica-modifications-status
                                         common-lisp:null)
                         :accessor struct-shape-replica-modifications-status
                         :shape "ReplicaModificationsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replica-modifications
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replica-modifications
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replica-modifications 'make-replica-modifications))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replica-modifications))
   common-lisp:nil))
(common-lisp:deftype replica-modifications-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-configuration common-lisp:nil
                       ((role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-replication-configuration-role :shape
                         "Role" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or replication-rules common-lisp:null)
                         :accessor struct-shape-replication-configuration-rules
                         :shape "ReplicationRules" :location common-lisp:nil
                         :location-name "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-configuration
                    'make-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-replication-rule-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (priority :initarg :priority :initform common-lisp:nil
                         :type (common-lisp:or priority common-lisp:null)
                         :accessor struct-shape-replication-rule-priority
                         :shape "Priority" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-replication-rule-prefix :shape
                         "Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or replication-rule-filter
                                         common-lisp:null)
                         :accessor struct-shape-replication-rule-filter :shape
                         "ReplicationRuleFilter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or replication-rule-status
                                         common-lisp:null)
                         :accessor struct-shape-replication-rule-status :shape
                         "ReplicationRuleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-selection-criteria :initarg
                         :source-selection-criteria :initform common-lisp:nil
                         :type
                         (common-lisp:or source-selection-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-rule-source-selection-criteria
                         :shape "SourceSelectionCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (existing-object-replication :initarg
                         :existing-object-replication :initform common-lisp:nil
                         :type
                         (common-lisp:or existing-object-replication
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-rule-existing-object-replication
                         :shape "ExistingObjectReplication" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor struct-shape-replication-rule-destination
                         :shape "Destination" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-marker-replication :initarg
                         :delete-marker-replication :initform common-lisp:nil
                         :type
                         (common-lisp:or delete-marker-replication
                                         common-lisp:null)
                         :accessor
                         struct-shape-replication-rule-delete-marker-replication
                         :shape "DeleteMarkerReplication" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-rule 'make-replication-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-selection-criteria))
      (common-lisp:list
       (common-lisp:cons "SourceSelectionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-object-replication))
      (common-lisp:list
       (common-lisp:cons "ExistingObjectReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-marker-replication))
      (common-lisp:list
       (common-lisp:cons "DeleteMarkerReplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-and-operator common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor
                         struct-shape-replication-rule-and-operator-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-replication-rule-and-operator-tags :shape
                         "TagSet" :location common-lisp:nil :location-name
                         "Tag"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-rule-and-operator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'replication-rule-and-operator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-rule-and-operator
                    'make-replication-rule-and-operator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-and-operator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-rule-filter common-lisp:nil
                       ((prefix :initarg :prefix :initform common-lisp:nil
                         :type (common-lisp:or prefix common-lisp:null)
                         :accessor struct-shape-replication-rule-filter-prefix
                         :shape "Prefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag :initarg :tag :initform common-lisp:nil :type
                         (common-lisp:or tag common-lisp:null) :accessor
                         struct-shape-replication-rule-filter-tag :shape "Tag"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (and :initarg :and :initform common-lisp:nil :type
                         (common-lisp:or replication-rule-and-operator
                                         common-lisp:null)
                         :accessor struct-shape-replication-rule-filter-and
                         :shape "ReplicationRuleAndOperator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-rule-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-rule-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-rule-filter 'make-replication-rule-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'and))
      (common-lisp:list
       (common-lisp:cons "And"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-rule-filter))
   common-lisp:nil))
(common-lisp:deftype replication-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype replication-rules ()
   '(trivial-types:proper-list replication-rule))
 (common-lisp:defun make-replication-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list replication-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or replication-time-status
                                         common-lisp:null)
                         :accessor struct-shape-replication-time-status :shape
                         "ReplicationTimeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time :initarg :time :initform
                         (common-lisp:error ":time is required") :type
                         (common-lisp:or replication-time-value
                                         common-lisp:null)
                         :accessor struct-shape-replication-time-time :shape
                         "ReplicationTimeValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-time
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-time 'make-replication-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-time))
   common-lisp:nil))
(common-lisp:deftype replication-time-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass replication-time-value common-lisp:nil
                       ((minutes :initarg :minutes :initform common-lisp:nil
                         :type (common-lisp:or minutes common-lisp:null)
                         :accessor struct-shape-replication-time-value-minutes
                         :shape "Minutes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-time-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-time-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'replication-time-value 'make-replication-time-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          replication-time-value))
   common-lisp:nil))
(common-lisp:deftype request-charged () 'common-lisp:string)
(common-lisp:deftype request-payer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass request-payment-configuration common-lisp:nil
                       ((payer :initarg :payer :initform
                         (common-lisp:error ":payer is required") :type
                         (common-lisp:or payer common-lisp:null) :accessor
                         struct-shape-request-payment-configuration-payer
                         :shape "Payer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-request-payment-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'request-payment-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'request-payment-configuration
                    'make-request-payment-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payer))
      (common-lisp:list
       (common-lisp:cons "Payer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          request-payment-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass request-progress common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-request-progress
                                         common-lisp:null)
                         :accessor struct-shape-request-progress-enabled :shape
                         "EnableRequestProgress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-request-progress
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'request-progress
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'request-progress 'make-request-progress))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-progress))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-progress))
   common-lisp:nil))
(common-lisp:deftype request-route () 'common-lisp:string)
(common-lisp:deftype request-token () 'common-lisp:string)
(common-lisp:deftype response-cache-control () 'common-lisp:string)
(common-lisp:deftype response-content-disposition () 'common-lisp:string)
(common-lisp:deftype response-content-encoding () 'common-lisp:string)
(common-lisp:deftype response-content-language () 'common-lisp:string)
(common-lisp:deftype response-content-type () 'common-lisp:string)
(common-lisp:deftype response-expires () 'common-lisp:string)
(common-lisp:deftype restore () 'common-lisp:string)
(common-lisp:deftype restore-expiry-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-object-output common-lisp:nil
                       ((request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-restore-object-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged")
                        (restore-output-path :initarg :restore-output-path
                         :initform common-lisp:nil :type
                         (common-lisp:or restore-output-path common-lisp:null)
                         :accessor
                         struct-shape-restore-object-output-restore-output-path
                         :shape "RestoreOutputPath" :location "header"
                         :location-name "x-amz-restore-output-path"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-object-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-object-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-object-output 'make-restore-object-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-output-path))
      (common-lisp:cons "x-amz-restore-output-path"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-object-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-restore-object-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-restore-object-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-restore-object-request-version-id :shape
                         "ObjectVersionId" :location "querystring"
                         :location-name "versionId")
                        (restore-request :initarg :restore-request :initform
                         common-lisp:nil :type
                         (common-lisp:or restore-request common-lisp:null)
                         :accessor
                         struct-shape-restore-object-request-restore-request
                         :shape "RestoreRequest" :location common-lisp:nil
                         :location-name "RestoreRequest")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-restore-object-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-restore-object-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-restore-object-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-object-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-object-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-object-request 'make-restore-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-request))
      (common-lisp:list
       (common-lisp:cons "RestoreRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'restore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          restore-object-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list :location-name "RestoreRequest" :xml-namespace
                     "http://s3.amazonaws.com/doc/2006-03-01/")))
(common-lisp:deftype restore-output-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-request common-lisp:nil
                       ((days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-restore-request-days :shape "Days"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glacier-job-parameters :initarg
                         :glacier-job-parameters :initform common-lisp:nil
                         :type
                         (common-lisp:or glacier-job-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-request-glacier-job-parameters
                         :shape "GlacierJobParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or restore-request-type common-lisp:null)
                         :accessor struct-shape-restore-request-type :shape
                         "RestoreRequestType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tier :initarg :tier :initform common-lisp:nil :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         struct-shape-restore-request-tier :shape "Tier"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor struct-shape-restore-request-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (select-parameters :initarg :select-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or select-parameters common-lisp:null)
                         :accessor
                         struct-shape-restore-request-select-parameters :shape
                         "SelectParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-location :initarg :output-location :initform
                         common-lisp:nil :type
                         (common-lisp:or output-location common-lisp:null)
                         :accessor struct-shape-restore-request-output-location
                         :shape "OutputLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'restore-request 'make-restore-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'glacier-job-parameters))
      (common-lisp:list
       (common-lisp:cons "GlacierJobParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-parameters))
      (common-lisp:list
       (common-lisp:cons "SelectParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-request))
   common-lisp:nil))
(common-lisp:deftype restore-request-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-status common-lisp:nil
                       ((is-restore-in-progress :initarg
                         :is-restore-in-progress :initform common-lisp:nil
                         :type
                         (common-lisp:or is-restore-in-progress
                                         common-lisp:null)
                         :accessor
                         struct-shape-restore-status-is-restore-in-progress
                         :shape "IsRestoreInProgress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restore-expiry-date :initarg :restore-expiry-date
                         :initform common-lisp:nil :type
                         (common-lisp:or restore-expiry-date common-lisp:null)
                         :accessor
                         struct-shape-restore-status-restore-expiry-date :shape
                         "RestoreExpiryDate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'restore-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'restore-status 'make-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-restore-in-progress))
      (common-lisp:list
       (common-lisp:cons "IsRestoreInProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-expiry-date))
      (common-lisp:list
       (common-lisp:cons "RestoreExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input restore-status))
   common-lisp:nil))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass routing-rule common-lisp:nil
                       ((condition :initarg :condition :initform
                         common-lisp:nil :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-routing-rule-condition :shape "Condition"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (redirect :initarg :redirect :initform
                         (common-lisp:error ":redirect is required") :type
                         (common-lisp:or redirect common-lisp:null) :accessor
                         struct-shape-routing-rule-redirect :shape "Redirect"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-routing-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'routing-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'routing-rule 'make-routing-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input routing-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redirect))
      (common-lisp:list
       (common-lisp:cons "Redirect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input routing-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype routing-rules ()
   '(trivial-types:proper-list routing-rule))
 (common-lisp:defun make-routing-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list routing-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rule common-lisp:nil
                       ((expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or lifecycle-expiration common-lisp:null)
                         :accessor struct-shape-rule-expiration :shape
                         "LifecycleExpiration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-rule-id :shape "ID" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or prefix common-lisp:null) :accessor
                         struct-shape-rule-prefix :shape "Prefix" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or expiration-status common-lisp:null)
                         :accessor struct-shape-rule-status :shape
                         "ExpirationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transition :initarg :transition :initform
                         common-lisp:nil :type
                         (common-lisp:or transition common-lisp:null) :accessor
                         struct-shape-rule-transition :shape "Transition"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (noncurrent-version-transition :initarg
                         :noncurrent-version-transition :initform
                         common-lisp:nil :type
                         (common-lisp:or noncurrent-version-transition
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-noncurrent-version-transition :shape
                         "NoncurrentVersionTransition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (noncurrent-version-expiration :initarg
                         :noncurrent-version-expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or noncurrent-version-expiration
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-noncurrent-version-expiration :shape
                         "NoncurrentVersionExpiration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (abort-incomplete-multipart-upload :initarg
                         :abort-incomplete-multipart-upload :initform
                         common-lisp:nil :type
                         (common-lisp:or abort-incomplete-multipart-upload
                                         common-lisp:null)
                         :accessor
                         struct-shape-rule-abort-incomplete-multipart-upload
                         :shape "AbortIncompleteMultipartUpload" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rule (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "ID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transition))
      (common-lisp:list
       (common-lisp:cons "Transition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-transition))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionTransition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'noncurrent-version-expiration))
      (common-lisp:list
       (common-lisp:cons "NoncurrentVersionExpiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'abort-incomplete-multipart-upload))
      (common-lisp:list
       (common-lisp:cons "AbortIncompleteMultipartUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules () '(trivial-types:proper-list rule))
 (common-lisp:defun make-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3key-filter common-lisp:nil
                       ((filter-rules :initarg :filter-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-rule-list common-lisp:null)
                         :accessor struct-shape-s3key-filter-filter-rules
                         :shape "FilterRuleList" :location common-lisp:nil
                         :location-name "FilterRule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3key-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3key-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3key-filter 'make-s3key-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3key-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-rules))
      (common-lisp:list
       (common-lisp:cons "FilterRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3key-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         (common-lisp:error ":bucket-name is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-s3location-bucket-name :shape
                         "BucketName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or location-prefix common-lisp:null)
                         :accessor struct-shape-s3location-prefix :shape
                         "LocationPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption :initarg :encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or encryption common-lisp:null) :accessor
                         struct-shape-s3location-encryption :shape "Encryption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (canned-acl :initarg :canned-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or object-canned-acl common-lisp:null)
                         :accessor struct-shape-s3location-canned-acl :shape
                         "ObjectCannedACL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-control-list :initarg :access-control-list
                         :initform common-lisp:nil :type
                         (common-lisp:or grants common-lisp:null) :accessor
                         struct-shape-s3location-access-control-list :shape
                         "Grants" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tagging :initarg :tagging :initform common-lisp:nil
                         :type (common-lisp:or tagging common-lisp:null)
                         :accessor struct-shape-s3location-tagging :shape
                         "Tagging" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-metadata :initarg :user-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or user-metadata common-lisp:null)
                         :accessor struct-shape-s3location-user-metadata :shape
                         "UserMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor struct-shape-s3location-storage-class :shape
                         "StorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control-list))
      (common-lisp:list
       (common-lisp:cons "AccessControlList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tagging))
      (common-lisp:list
       (common-lisp:cons "Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:deftype ssecustomer-algorithm () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key () 'common-lisp:string)
(common-lisp:deftype ssecustomer-key-md5 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssekms common-lisp:nil
                       ((key-id :initarg :key-id :initform
                         (common-lisp:error ":key-id is required") :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-ssekms-key-id :shape
                         "SSEKMSKeyId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssekms
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssekms
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssekms 'make-ssekms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssekms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssekms))
   common-lisp:nil))
(common-lisp:deftype ssekmsencryption-context () 'common-lisp:string)
(common-lisp:deftype ssekmskey-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sses3 common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sses3
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sses3
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sses3 'make-sses3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sses3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sses3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scan-range common-lisp:nil
                       ((start :initarg :start :initform common-lisp:nil :type
                         (common-lisp:or start common-lisp:null) :accessor
                         struct-shape-scan-range-start :shape "Start" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or end common-lisp:null) :accessor
                         struct-shape-scan-range-end :shape "End" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scan-range
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scan-range
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scan-range 'make-scan-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scan-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scan-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-object-content-event-stream common-lisp:nil
                       ((records :initarg :records :initform common-lisp:nil
                         :type (common-lisp:or records-event common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-event-stream-records
                         :shape "RecordsEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stats :initarg :stats :initform common-lisp:nil :type
                         (common-lisp:or stats-event common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-event-stream-stats
                         :shape "StatsEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type (common-lisp:or progress-event common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-event-stream-progress
                         :shape "ProgressEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cont :initarg :cont :initform common-lisp:nil :type
                         (common-lisp:or continuation-event common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-event-stream-cont
                         :shape "ContinuationEvent" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end :initarg :end :initform common-lisp:nil :type
                         (common-lisp:or end-event common-lisp:null) :accessor
                         struct-shape-select-object-content-event-stream-end
                         :shape "EndEvent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-object-content-event-stream
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-object-content-event-stream
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-object-content-event-stream
                    'make-select-object-content-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stats))
      (common-lisp:list
       (common-lisp:cons "Stats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cont))
      (common-lisp:list
       (common-lisp:cons "Cont"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-object-content-output common-lisp:nil
                       ((payload :initarg :payload :initform common-lisp:nil
                         :type
                         (common-lisp:or select-object-content-event-stream
                                         common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-output-payload
                         :shape "SelectObjectContentEventStream" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-object-content-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'select-object-content-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-object-content-output
                    'make-select-object-content-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'payload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass select-object-content-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-select-object-content-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-select-object-content-request-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression-type :initarg :expression-type :initform
                         (common-lisp:error ":expression-type is required")
                         :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-expression-type
                         :shape "ExpressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-progress :initarg :request-progress :initform
                         common-lisp:nil :type
                         (common-lisp:or request-progress common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-request-progress
                         :shape "RequestProgress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-serialization :initarg :input-serialization
                         :initform
                         (common-lisp:error ":input-serialization is required")
                         :type
                         (common-lisp:or input-serialization common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-input-serialization
                         :shape "InputSerialization" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-serialization :initarg :output-serialization
                         :initform
                         (common-lisp:error
                          ":output-serialization is required")
                         :type
                         (common-lisp:or output-serialization common-lisp:null)
                         :accessor
                         struct-shape-select-object-content-request-output-serialization
                         :shape "OutputSerialization" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scan-range :initarg :scan-range :initform
                         common-lisp:nil :type
                         (common-lisp:or scan-range common-lisp:null) :accessor
                         struct-shape-select-object-content-request-scan-range
                         :shape "ScanRange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-select-object-content-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-object-content-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-object-content-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-object-content-request
                    'make-select-object-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-progress))
      (common-lisp:list
       (common-lisp:cons "RequestProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-range))
      (common-lisp:list
       (common-lisp:cons "ScanRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-object-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-parameters common-lisp:nil
                       ((input-serialization :initarg :input-serialization
                         :initform
                         (common-lisp:error ":input-serialization is required")
                         :type
                         (common-lisp:or input-serialization common-lisp:null)
                         :accessor
                         struct-shape-select-parameters-input-serialization
                         :shape "InputSerialization" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression-type :initarg :expression-type :initform
                         (common-lisp:error ":expression-type is required")
                         :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor
                         struct-shape-select-parameters-expression-type :shape
                         "ExpressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-select-parameters-expression :shape
                         "Expression" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-serialization :initarg :output-serialization
                         :initform
                         (common-lisp:error
                          ":output-serialization is required")
                         :type
                         (common-lisp:or output-serialization common-lisp:null)
                         :accessor
                         struct-shape-select-parameters-output-serialization
                         :shape "OutputSerialization" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'select-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-parameters 'make-select-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-serialization))
      (common-lisp:list
       (common-lisp:cons "InputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-serialization))
      (common-lisp:list
       (common-lisp:cons "OutputSerialization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-parameters))
   common-lisp:nil))
(common-lisp:deftype server-side-encryption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-by-default common-lisp:nil
                       ((ssealgorithm :initarg :ssealgorithm :initform
                         (common-lisp:error ":ssealgorithm is required") :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-by-default-ssealgorithm
                         :shape "ServerSideEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmsmaster-key-id :initarg :kmsmaster-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-by-default-kmsmaster-key-id
                         :shape "SSEKMSKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-side-encryption-by-default
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-by-default
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-by-default
                    'make-server-side-encryption-by-default))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssealgorithm))
      (common-lisp:list
       (common-lisp:cons "SSEAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsmaster-key-id))
      (common-lisp:list
       (common-lisp:cons "KMSMasterKeyID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-by-default))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-configuration common-lisp:nil
                       ((rules :initarg :rules :initform
                         (common-lisp:error ":rules is required") :type
                         (common-lisp:or server-side-encryption-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-configuration-rules
                         :shape "ServerSideEncryptionRules" :location
                         common-lisp:nil :location-name "Rule"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-side-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'server-side-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-configuration
                    'make-server-side-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass server-side-encryption-rule common-lisp:nil
                       ((apply-server-side-encryption-by-default :initarg
                         :apply-server-side-encryption-by-default :initform
                         common-lisp:nil :type
                         (common-lisp:or server-side-encryption-by-default
                                         common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-rule-apply-server-side-encryption-by-default
                         :shape "ServerSideEncryptionByDefault" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-server-side-encryption-rule-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-server-side-encryption-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'server-side-encryption-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'server-side-encryption-rule
                    'make-server-side-encryption-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-server-side-encryption-by-default))
      (common-lisp:list
       (common-lisp:cons "ApplyServerSideEncryptionByDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:list
       (common-lisp:cons "BucketKeyEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-side-encryption-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype server-side-encryption-rules ()
   '(trivial-types:proper-list server-side-encryption-rule))
 (common-lisp:defun make-server-side-encryption-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-side-encryption-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-credential-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-credentials common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":access-key-id is required") :type
                         (common-lisp:or access-key-id-value common-lisp:null)
                         :accessor
                         struct-shape-session-credentials-access-key-id :shape
                         "AccessKeyIdValue" :location common-lisp:nil
                         :location-name "AccessKeyId")
                        (secret-access-key :initarg :secret-access-key
                         :initform
                         (common-lisp:error ":secret-access-key is required")
                         :type
                         (common-lisp:or session-credential-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-credentials-secret-access-key
                         :shape "SessionCredentialValue" :location
                         common-lisp:nil :location-name "SecretAccessKey")
                        (session-token :initarg :session-token :initform
                         (common-lisp:error ":session-token is required") :type
                         (common-lisp:or session-credential-value
                                         common-lisp:null)
                         :accessor
                         struct-shape-session-credentials-session-token :shape
                         "SessionCredentialValue" :location common-lisp:nil
                         :location-name "SessionToken")
                        (expiration :initarg :expiration :initform
                         (common-lisp:error ":expiration is required") :type
                         (common-lisp:or session-expiration common-lisp:null)
                         :accessor struct-shape-session-credentials-expiration
                         :shape "SessionExpiration" :location common-lisp:nil
                         :location-name "Expiration"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'session-credentials 'make-session-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-credentials))
   common-lisp:nil))
(common-lisp:deftype session-expiration () 'common-lisp:string)
(common-lisp:deftype session-mode () 'common-lisp:string)
(common-lisp:deftype setting () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass simple-prefix common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-simple-prefix
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'simple-prefix
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'simple-prefix 'make-simple-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simple-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simple-prefix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simple-prefix))
   common-lisp:nil))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype skip-validation () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass source-selection-criteria common-lisp:nil
                       ((sse-kms-encrypted-objects :initarg
                         :sse-kms-encrypted-objects :initform common-lisp:nil
                         :type
                         (common-lisp:or sse-kms-encrypted-objects
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-selection-criteria-sse-kms-encrypted-objects
                         :shape "SseKmsEncryptedObjects" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (replica-modifications :initarg :replica-modifications
                         :initform common-lisp:nil :type
                         (common-lisp:or replica-modifications
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-selection-criteria-replica-modifications
                         :shape "ReplicaModifications" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-selection-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-selection-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-selection-criteria
                    'make-source-selection-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sse-kms-encrypted-objects))
      (common-lisp:list
       (common-lisp:cons "SseKmsEncryptedObjects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replica-modifications))
      (common-lisp:list
       (common-lisp:cons "ReplicaModifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-selection-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sse-kms-encrypted-objects common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or sse-kms-encrypted-objects-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-sse-kms-encrypted-objects-status :shape
                         "SseKmsEncryptedObjectsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sse-kms-encrypted-objects
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sse-kms-encrypted-objects
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sse-kms-encrypted-objects
                    'make-sse-kms-encrypted-objects))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sse-kms-encrypted-objects))
   common-lisp:nil))
(common-lisp:deftype sse-kms-encrypted-objects-status () 'common-lisp:string)
(common-lisp:deftype start () 'common-lisp:integer)
(common-lisp:deftype start-after () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stats common-lisp:nil
                       ((bytes-scanned :initarg :bytes-scanned :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-scanned common-lisp:null)
                         :accessor struct-shape-stats-bytes-scanned :shape
                         "BytesScanned" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-processed :initarg :bytes-processed :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-processed common-lisp:null)
                         :accessor struct-shape-stats-bytes-processed :shape
                         "BytesProcessed" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bytes-returned :initarg :bytes-returned :initform
                         common-lisp:nil :type
                         (common-lisp:or bytes-returned common-lisp:null)
                         :accessor struct-shape-stats-bytes-returned :shape
                         "BytesReturned" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stats
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stats
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stats 'make-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-processed))
      (common-lisp:list
       (common-lisp:cons "BytesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-returned))
      (common-lisp:list
       (common-lisp:cons "BytesReturned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stats-event common-lisp:nil
                       ((details :initarg :details :initform common-lisp:nil
                         :type (common-lisp:or stats common-lisp:null)
                         :accessor struct-shape-stats-event-details :shape
                         "Stats" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stats-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stats-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stats-event 'make-stats-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stats-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stats-event))
   common-lisp:nil))
(common-lisp:deftype storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-class-analysis common-lisp:nil
                       ((data-export :initarg :data-export :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class-analysis-data-export
                                         common-lisp:null)
                         :accessor
                         struct-shape-storage-class-analysis-data-export :shape
                         "StorageClassAnalysisDataExport" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-class-analysis
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-class-analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis 'make-storage-class-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-export))
      (common-lisp:list
       (common-lisp:cons "DataExport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-class-analysis-data-export common-lisp:nil
                       ((output-schema-version :initarg :output-schema-version
                         :initform
                         (common-lisp:error
                          ":output-schema-version is required")
                         :type
                         (common-lisp:or storage-class-analysis-schema-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-storage-class-analysis-data-export-output-schema-version
                         :shape "StorageClassAnalysisSchemaVersion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or analytics-export-destination
                                         common-lisp:null)
                         :accessor
                         struct-shape-storage-class-analysis-data-export-destination
                         :shape "AnalyticsExportDestination" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-class-analysis-data-export
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'storage-class-analysis-data-export
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'storage-class-analysis-data-export
                    'make-storage-class-analysis-data-export))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-schema-version))
      (common-lisp:list
       (common-lisp:cons "OutputSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-class-analysis-data-export))
   common-lisp:nil))
(common-lisp:deftype storage-class-analysis-schema-version ()
  'common-lisp:string)
(common-lisp:deftype suffix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "ObjectKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "Value" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype tag-set () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tagging common-lisp:nil
                       ((tag-set :initarg :tag-set :initform
                         (common-lisp:error ":tag-set is required") :type
                         (common-lisp:or tag-set common-lisp:null) :accessor
                         struct-shape-tagging-tag-set :shape "TagSet" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tagging
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tagging
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tagging 'make-tagging))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tagging))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-set))
      (common-lisp:list
       (common-lisp:cons "TagSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tagging))
   common-lisp:nil))
(common-lisp:deftype tagging-directive () 'common-lisp:string)
(common-lisp:deftype tagging-header () 'common-lisp:string)
(common-lisp:deftype target-bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-grant common-lisp:nil
                       ((grantee :initarg :grantee :initform common-lisp:nil
                         :type (common-lisp:or grantee common-lisp:null)
                         :accessor struct-shape-target-grant-grantee :shape
                         "Grantee" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permission :initarg :permission :initform
                         common-lisp:nil :type
                         (common-lisp:or bucket-logs-permission
                                         common-lisp:null)
                         :accessor struct-shape-target-grant-permission :shape
                         "BucketLogsPermission" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-grant
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-grant
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'target-grant 'make-target-grant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-grant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "Grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "Permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-grant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-grants ()
   '(trivial-types:proper-list target-grant))
 (common-lisp:defun make-target-grants
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-grant))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass target-object-key-format common-lisp:nil
                       ((simple-prefix :initarg :simple-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or simple-prefix common-lisp:null)
                         :accessor
                         struct-shape-target-object-key-format-simple-prefix
                         :shape "SimplePrefix" :location common-lisp:nil
                         :location-name "SimplePrefix")
                        (partitioned-prefix :initarg :partitioned-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or partitioned-prefix common-lisp:null)
                         :accessor
                         struct-shape-target-object-key-format-partitioned-prefix
                         :shape "PartitionedPrefix" :location common-lisp:nil
                         :location-name "PartitionedPrefix"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-target-object-key-format
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'target-object-key-format
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'target-object-key-format 'make-target-object-key-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simple-prefix))
      (common-lisp:list
       (common-lisp:cons "SimplePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitioned-prefix))
      (common-lisp:list
       (common-lisp:cons "PartitionedPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-object-key-format))
   common-lisp:nil))
(common-lisp:deftype target-prefix () 'common-lisp:string)
(common-lisp:deftype tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tiering common-lisp:nil
                       ((days :initarg :days :initform
                         (common-lisp:error ":days is required") :type
                         (common-lisp:or intelligent-tiering-days
                                         common-lisp:null)
                         :accessor struct-shape-tiering-days :shape
                         "IntelligentTieringDays" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-tier :initarg :access-tier :initform
                         (common-lisp:error ":access-tier is required") :type
                         (common-lisp:or intelligent-tiering-access-tier
                                         common-lisp:null)
                         :accessor struct-shape-tiering-access-tier :shape
                         "IntelligentTieringAccessTier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tiering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tiering
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tiering 'make-tiering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tiering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-tier))
      (common-lisp:list
       (common-lisp:cons "AccessTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tiering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tiering-list () '(trivial-types:proper-list tiering))
 (common-lisp:defun make-tiering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tiering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype topic-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass topic-configuration common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor struct-shape-topic-configuration-id :shape
                         "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic-arn :initarg :topic-arn :initform
                         (common-lisp:error ":topic-arn is required") :type
                         (common-lisp:or topic-arn common-lisp:null) :accessor
                         struct-shape-topic-configuration-topic-arn :shape
                         "TopicArn" :location common-lisp:nil :location-name
                         "Topic")
                        (events :initarg :events :initform
                         (common-lisp:error ":events is required") :type
                         (common-lisp:or event-list common-lisp:null) :accessor
                         struct-shape-topic-configuration-events :shape
                         "EventList" :location common-lisp:nil :location-name
                         "Event")
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or notification-configuration-filter
                                         common-lisp:null)
                         :accessor struct-shape-topic-configuration-filter
                         :shape "NotificationConfigurationFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'topic-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-configuration 'make-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "TopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input topic-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass topic-configuration-deprecated common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or notification-id common-lisp:null)
                         :accessor
                         struct-shape-topic-configuration-deprecated-id :shape
                         "NotificationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (events :initarg :events :initform common-lisp:nil
                         :type (common-lisp:or event-list common-lisp:null)
                         :accessor
                         struct-shape-topic-configuration-deprecated-events
                         :shape "EventList" :location common-lisp:nil
                         :location-name "Event")
                        (event :initarg :event :initform common-lisp:nil :type
                         (common-lisp:or event common-lisp:null) :accessor
                         struct-shape-topic-configuration-deprecated-event
                         :shape "Event" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topic :initarg :topic :initform common-lisp:nil :type
                         (common-lisp:or topic-arn common-lisp:null) :accessor
                         struct-shape-topic-configuration-deprecated-topic
                         :shape "TopicArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-topic-configuration-deprecated
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'topic-configuration-deprecated
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'topic-configuration-deprecated
                    'make-topic-configuration-deprecated))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "Topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          topic-configuration-deprecated))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype topic-configuration-list ()
   '(trivial-types:proper-list topic-configuration))
 (common-lisp:defun make-topic-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transition common-lisp:nil
                       ((date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-transition-date :shape "Date" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or days common-lisp:null) :accessor
                         struct-shape-transition-days :shape "Days" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or transition-storage-class
                                         common-lisp:null)
                         :accessor struct-shape-transition-storage-class :shape
                         "TransitionStorageClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'transition 'make-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "Days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "StorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transition-list ()
   '(trivial-types:proper-list transition))
 (common-lisp:defun make-transition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transition-storage-class () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype upload-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upload-part-copy-output common-lisp:nil
                       ((copy-source-version-id :initarg
                         :copy-source-version-id :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-version-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-copy-source-version-id
                         :shape "CopySourceVersionId" :location "header"
                         :location-name "x-amz-copy-source-version-id")
                        (copy-part-result :initarg :copy-part-result :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-part-result common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-copy-part-result
                         :shape "CopyPartResult" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-output-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-part-copy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-copy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-output 'make-upload-part-copy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-version-id))
      (common-lisp:cons "x-amz-copy-source-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-part-result))
      (common-lisp:list
       (common-lisp:cons "CopyPartResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'copy-part-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-output))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:defclass upload-part-copy-request common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-upload-part-copy-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (copy-source :initarg :copy-source :initform
                         (common-lisp:error ":copy-source is required") :type
                         (common-lisp:or copy-source common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source
                         :shape "CopySource" :location "header" :location-name
                         "x-amz-copy-source")
                        (copy-source-if-match :initarg :copy-source-if-match
                         :initform common-lisp:nil :type
                         (common-lisp:or copy-source-if-match common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-if-match
                         :shape "CopySourceIfMatch" :location "header"
                         :location-name "x-amz-copy-source-if-match")
                        (copy-source-if-modified-since :initarg
                         :copy-source-if-modified-since :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-if-modified-since
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-if-modified-since
                         :shape "CopySourceIfModifiedSince" :location "header"
                         :location-name "x-amz-copy-source-if-modified-since")
                        (copy-source-if-none-match :initarg
                         :copy-source-if-none-match :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-if-none-match
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-if-none-match
                         :shape "CopySourceIfNoneMatch" :location "header"
                         :location-name "x-amz-copy-source-if-none-match")
                        (copy-source-if-unmodified-since :initarg
                         :copy-source-if-unmodified-since :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-if-unmodified-since
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-if-unmodified-since
                         :shape "CopySourceIfUnmodifiedSince" :location
                         "header" :location-name
                         "x-amz-copy-source-if-unmodified-since")
                        (copy-source-range :initarg :copy-source-range
                         :initform common-lisp:nil :type
                         (common-lisp:or copy-source-range common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-range
                         :shape "CopySourceRange" :location "header"
                         :location-name "x-amz-copy-source-range")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-upload-part-copy-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (part-number :initarg :part-number :initform
                         (common-lisp:error ":part-number is required") :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-part-number
                         :shape "PartNumber" :location "querystring"
                         :location-name "partNumber")
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":upload-id is required") :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-upload-id :shape
                         "MultipartUploadId" :location "querystring"
                         :location-name "uploadId")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (copy-source-ssecustomer-algorithm :initarg
                         :copy-source-ssecustomer-algorithm :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-ssecustomer-algorithm
                         :shape "CopySourceSSECustomerAlgorithm" :location
                         "header" :location-name
                         "x-amz-copy-source-server-side-encryption-customer-algorithm")
                        (copy-source-ssecustomer-key :initarg
                         :copy-source-ssecustomer-key :initform common-lisp:nil
                         :type
                         (common-lisp:or copy-source-ssecustomer-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-ssecustomer-key
                         :shape "CopySourceSSECustomerKey" :location "header"
                         :location-name
                         "x-amz-copy-source-server-side-encryption-customer-key")
                        (copy-source-ssecustomer-key-md5 :initarg
                         :copy-source-ssecustomer-key-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-source-ssecustomer-key-md5
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-copy-source-ssecustomer-key-md5
                         :shape "CopySourceSSECustomerKeyMD5" :location
                         "header" :location-name
                         "x-amz-copy-source-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-upload-part-copy-request-request-payer
                         :shape "RequestPayer" :location "header"
                         :location-name "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-upload-part-copy-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner")
                        (expected-source-bucket-owner :initarg
                         :expected-source-bucket-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-upload-part-copy-request-expected-source-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-source-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-part-copy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-copy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-part-copy-request 'make-upload-part-copy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source))
      (common-lisp:cons "x-amz-copy-source" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-match))
      (common-lisp:cons "x-amz-copy-source-if-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-modified-since))
      (common-lisp:cons "x-amz-copy-source-if-modified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-none-match))
      (common-lisp:cons "x-amz-copy-source-if-none-match"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-if-unmodified-since))
      (common-lisp:cons "x-amz-copy-source-if-unmodified-since"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-source-range))
      (common-lisp:cons "x-amz-copy-source-range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key))
      (common-lisp:cons "x-amz-copy-source-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-source-ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-copy-source-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-source-bucket-owner))
      (common-lisp:cons "x-amz-source-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-part-copy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-part-output common-lisp:nil
                       ((server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name "x-amz-server-side-encryption")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-upload-part-output-etag :shape "ETag"
                         :location "header" :location-name "ETag")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-checksum-crc32c :shape
                         "ChecksumCRC32C" :location "header" :location-name
                         "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-checksum-sha1 :shape
                         "ChecksumSHA1" :location "header" :location-name
                         "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-checksum-sha256 :shape
                         "ChecksumSHA256" :location "header" :location-name
                         "x-amz-checksum-sha256")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor struct-shape-upload-part-output-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-server-side-encryption-aws-kms-key-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-bucket-key-enabled")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-upload-part-output-request-charged :shape
                         "RequestCharged" :location "header" :location-name
                         "x-amz-request-charged"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-part-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-part-output 'make-upload-part-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons "x-amz-server-side-encryption-aws-kms-key-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons "x-amz-server-side-encryption-bucket-key-enabled"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-request-charged"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upload-part-request common-lisp:nil
                       ((body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor struct-shape-upload-part-request-body :shape
                         "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor struct-shape-upload-part-request-bucket
                         :shape "BucketName" :location "uri" :location-name
                         "Bucket")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-content-length :shape
                         "ContentLength" :location "header" :location-name
                         "Content-Length")
                        (content-md5 :initarg :content-md5 :initform
                         common-lisp:nil :type
                         (common-lisp:or content-md5 common-lisp:null)
                         :accessor struct-shape-upload-part-request-content-md5
                         :shape "ContentMD5" :location "header" :location-name
                         "Content-MD5")
                        (checksum-algorithm :initarg :checksum-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-checksum-algorithm
                         :shape "ChecksumAlgorithm" :location "header"
                         :location-name "x-amz-sdk-checksum-algorithm")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-checksum-crc32 :shape
                         "ChecksumCRC32" :location "header" :location-name
                         "x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-checksum-crc32c
                         :shape "ChecksumCRC32C" :location "header"
                         :location-name "x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-checksum-sha1 :shape
                         "ChecksumSHA1" :location "header" :location-name
                         "x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-checksum-sha256
                         :shape "ChecksumSHA256" :location "header"
                         :location-name "x-amz-checksum-sha256")
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         struct-shape-upload-part-request-key :shape
                         "ObjectKey" :location "uri" :location-name "Key")
                        (part-number :initarg :part-number :initform
                         (common-lisp:error ":part-number is required") :type
                         (common-lisp:or part-number common-lisp:null)
                         :accessor struct-shape-upload-part-request-part-number
                         :shape "PartNumber" :location "querystring"
                         :location-name "partNumber")
                        (upload-id :initarg :upload-id :initform
                         (common-lisp:error ":upload-id is required") :type
                         (common-lisp:or multipart-upload-id common-lisp:null)
                         :accessor struct-shape-upload-part-request-upload-id
                         :shape "MultipartUploadId" :location "querystring"
                         :location-name "uploadId")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-algorithm")
                        (ssecustomer-key :initarg :ssecustomer-key :initform
                         common-lisp:nil :type
                         (common-lisp:or ssecustomer-key common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-ssecustomer-key
                         :shape "SSECustomerKey" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-server-side-encryption-customer-key-MD5")
                        (request-payer :initarg :request-payer :initform
                         common-lisp:nil :type
                         (common-lisp:or request-payer common-lisp:null)
                         :accessor
                         struct-shape-upload-part-request-request-payer :shape
                         "RequestPayer" :location "header" :location-name
                         "x-amz-request-payer")
                        (expected-bucket-owner :initarg :expected-bucket-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-upload-part-request-expected-bucket-owner
                         :shape "AccountId" :location "header" :location-name
                         "x-amz-expected-bucket-owner"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upload-part-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upload-part-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upload-part-request 'make-upload-part-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-md5))
      (common-lisp:cons "Content-MD5" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-sdk-checksum-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-checksum-crc32" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-checksum-sha1" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons "x-amz-server-side-encryption-customer-algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons "x-amz-server-side-encryption-customer-key-MD5"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-payer))
      (common-lisp:cons "x-amz-request-payer" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-bucket-owner))
      (common-lisp:cons "x-amz-expected-bucket-owner"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        ((aws-sdk/generator/shape::input upload-part-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:progn
 (common-lisp:deftype user-metadata ()
   '(trivial-types:proper-list metadata-entry))
 (common-lisp:defun make-user-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version-count () 'common-lisp:integer)
(common-lisp:deftype version-id-marker () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass versioning-configuration common-lisp:nil
                       ((mfadelete :initarg :mfadelete :initform
                         common-lisp:nil :type
                         (common-lisp:or mfadelete common-lisp:null) :accessor
                         struct-shape-versioning-configuration-mfadelete :shape
                         "MFADelete" :location common-lisp:nil :location-name
                         "MfaDelete")
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or bucket-versioning-status
                                         common-lisp:null)
                         :accessor struct-shape-versioning-configuration-status
                         :shape "BucketVersioningStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-versioning-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'versioning-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'versioning-configuration 'make-versioning-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadelete))
      (common-lisp:list
       (common-lisp:cons "MFADelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          versioning-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass website-configuration common-lisp:nil
                       ((error-document :initarg :error-document :initform
                         common-lisp:nil :type
                         (common-lisp:or error-document common-lisp:null)
                         :accessor
                         struct-shape-website-configuration-error-document
                         :shape "ErrorDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-document :initarg :index-document :initform
                         common-lisp:nil :type
                         (common-lisp:or index-document common-lisp:null)
                         :accessor
                         struct-shape-website-configuration-index-document
                         :shape "IndexDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redirect-all-requests-to :initarg
                         :redirect-all-requests-to :initform common-lisp:nil
                         :type
                         (common-lisp:or redirect-all-requests-to
                                         common-lisp:null)
                         :accessor
                         struct-shape-website-configuration-redirect-all-requests-to
                         :shape "RedirectAllRequestsTo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (routing-rules :initarg :routing-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or routing-rules common-lisp:null)
                         :accessor
                         struct-shape-website-configuration-routing-rules
                         :shape "RoutingRules" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-website-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'website-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'website-configuration 'make-website-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-document))
      (common-lisp:list
       (common-lisp:cons "ErrorDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-document))
      (common-lisp:list
       (common-lisp:cons "IndexDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-all-requests-to))
      (common-lisp:list
       (common-lisp:cons "RedirectAllRequestsTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'routing-rules))
      (common-lisp:list
       (common-lisp:cons "RoutingRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          website-configuration))
   common-lisp:nil))
(common-lisp:deftype website-redirect-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass write-get-object-response-request common-lisp:nil
                       ((request-route :initarg :request-route :initform
                         (common-lisp:error ":request-route is required") :type
                         (common-lisp:or request-route common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-request-route
                         :shape "RequestRoute" :location "header"
                         :location-name "x-amz-request-route")
                        (request-token :initarg :request-token :initform
                         (common-lisp:error ":request-token is required") :type
                         (common-lisp:or request-token common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-request-token
                         :shape "RequestToken" :location "header"
                         :location-name "x-amz-request-token")
                        (body :initarg :body :initform common-lisp:nil :type
                         (common-lisp:or body common-lisp:stream
                                         common-lisp:pathname
                                         common-lisp:string common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-body
                         :shape "Body" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or get-object-response-status-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-status-code
                         :shape "GetObjectResponseStatusCode" :location
                         "header" :location-name "x-amz-fwd-status")
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         struct-shape-write-get-object-response-request-error-code
                         :shape "ErrorCode" :location "header" :location-name
                         "x-amz-fwd-error-code")
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-error-message
                         :shape "ErrorMessage" :location "header"
                         :location-name "x-amz-fwd-error-message")
                        (accept-ranges :initarg :accept-ranges :initform
                         common-lisp:nil :type
                         (common-lisp:or accept-ranges common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-accept-ranges
                         :shape "AcceptRanges" :location "header"
                         :location-name "x-amz-fwd-header-accept-ranges")
                        (cache-control :initarg :cache-control :initform
                         common-lisp:nil :type
                         (common-lisp:or cache-control common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-cache-control
                         :shape "CacheControl" :location "header"
                         :location-name "x-amz-fwd-header-Cache-Control")
                        (content-disposition :initarg :content-disposition
                         :initform common-lisp:nil :type
                         (common-lisp:or content-disposition common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-disposition
                         :shape "ContentDisposition" :location "header"
                         :location-name "x-amz-fwd-header-Content-Disposition")
                        (content-encoding :initarg :content-encoding :initform
                         common-lisp:nil :type
                         (common-lisp:or content-encoding common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-encoding
                         :shape "ContentEncoding" :location "header"
                         :location-name "x-amz-fwd-header-Content-Encoding")
                        (content-language :initarg :content-language :initform
                         common-lisp:nil :type
                         (common-lisp:or content-language common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-language
                         :shape "ContentLanguage" :location "header"
                         :location-name "x-amz-fwd-header-Content-Language")
                        (content-length :initarg :content-length :initform
                         common-lisp:nil :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-length
                         :shape "ContentLength" :location "header"
                         :location-name "Content-Length")
                        (content-range :initarg :content-range :initform
                         common-lisp:nil :type
                         (common-lisp:or content-range common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-range
                         :shape "ContentRange" :location "header"
                         :location-name "x-amz-fwd-header-Content-Range")
                        (content-type :initarg :content-type :initform
                         common-lisp:nil :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-content-type
                         :shape "ContentType" :location "header" :location-name
                         "x-amz-fwd-header-Content-Type")
                        (checksum-crc32 :initarg :checksum-crc32 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32 common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-checksum-crc32
                         :shape "ChecksumCRC32" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-checksum-crc32")
                        (checksum-crc32c :initarg :checksum-crc32c :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-crc32c common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-checksum-crc32c
                         :shape "ChecksumCRC32C" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-checksum-crc32c")
                        (checksum-sha1 :initarg :checksum-sha1 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha1 common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-checksum-sha1
                         :shape "ChecksumSHA1" :location "header"
                         :location-name "x-amz-fwd-header-x-amz-checksum-sha1")
                        (checksum-sha256 :initarg :checksum-sha256 :initform
                         common-lisp:nil :type
                         (common-lisp:or checksum-sha256 common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-checksum-sha256
                         :shape "ChecksumSHA256" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-checksum-sha256")
                        (delete-marker :initarg :delete-marker :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-marker common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-delete-marker
                         :shape "DeleteMarker" :location "header"
                         :location-name "x-amz-fwd-header-x-amz-delete-marker")
                        (etag :initarg :etag :initform common-lisp:nil :type
                         (common-lisp:or etag common-lisp:null) :accessor
                         struct-shape-write-get-object-response-request-etag
                         :shape "ETag" :location "header" :location-name
                         "x-amz-fwd-header-ETag")
                        (expires :initarg :expires :initform common-lisp:nil
                         :type (common-lisp:or expires common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-expires
                         :shape "Expires" :location "header" :location-name
                         "x-amz-fwd-header-Expires")
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or expiration common-lisp:null) :accessor
                         struct-shape-write-get-object-response-request-expiration
                         :shape "Expiration" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-expiration")
                        (last-modified :initarg :last-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or last-modified common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-last-modified
                         :shape "LastModified" :location "header"
                         :location-name "x-amz-fwd-header-Last-Modified")
                        (missing-meta :initarg :missing-meta :initform
                         common-lisp:nil :type
                         (common-lisp:or missing-meta common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-missing-meta
                         :shape "MissingMeta" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-missing-meta")
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type (common-lisp:or metadata common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-metadata
                         :shape "Metadata" :location "headers" :location-name
                         "x-amz-meta-")
                        (object-lock-mode :initarg :object-lock-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-mode common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-object-lock-mode
                         :shape "ObjectLockMode" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-object-lock-mode")
                        (object-lock-legal-hold-status :initarg
                         :object-lock-legal-hold-status :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-legal-hold-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-object-lock-legal-hold-status
                         :shape "ObjectLockLegalHoldStatus" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-object-lock-legal-hold")
                        (object-lock-retain-until-date :initarg
                         :object-lock-retain-until-date :initform
                         common-lisp:nil :type
                         (common-lisp:or object-lock-retain-until-date
                                         common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-object-lock-retain-until-date
                         :shape "ObjectLockRetainUntilDate" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-object-lock-retain-until-date")
                        (parts-count :initarg :parts-count :initform
                         common-lisp:nil :type
                         (common-lisp:or parts-count common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-parts-count
                         :shape "PartsCount" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-mp-parts-count")
                        (replication-status :initarg :replication-status
                         :initform common-lisp:nil :type
                         (common-lisp:or replication-status common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-replication-status
                         :shape "ReplicationStatus" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-replication-status")
                        (request-charged :initarg :request-charged :initform
                         common-lisp:nil :type
                         (common-lisp:or request-charged common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-request-charged
                         :shape "RequestCharged" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-request-charged")
                        (restore :initarg :restore :initform common-lisp:nil
                         :type (common-lisp:or restore common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-restore
                         :shape "Restore" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-restore")
                        (server-side-encryption :initarg
                         :server-side-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or server-side-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-server-side-encryption
                         :shape "ServerSideEncryption" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-server-side-encryption")
                        (ssecustomer-algorithm :initarg :ssecustomer-algorithm
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-algorithm
                                         common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-ssecustomer-algorithm
                         :shape "SSECustomerAlgorithm" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm")
                        (ssekmskey-id :initarg :ssekmskey-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ssekmskey-id common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-ssekmskey-id
                         :shape "SSEKMSKeyId" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id")
                        (ssecustomer-key-md5 :initarg :ssecustomer-key-md5
                         :initform common-lisp:nil :type
                         (common-lisp:or ssecustomer-key-md5 common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-ssecustomer-key-md5
                         :shape "SSECustomerKeyMD5" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5")
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-class common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-storage-class
                         :shape "StorageClass" :location "header"
                         :location-name "x-amz-fwd-header-x-amz-storage-class")
                        (tag-count :initarg :tag-count :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-count common-lisp:null) :accessor
                         struct-shape-write-get-object-response-request-tag-count
                         :shape "TagCount" :location "header" :location-name
                         "x-amz-fwd-header-x-amz-tagging-count")
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or object-version-id common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-version-id
                         :shape "ObjectVersionId" :location "header"
                         :location-name "x-amz-fwd-header-x-amz-version-id")
                        (bucket-key-enabled :initarg :bucket-key-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or bucket-key-enabled common-lisp:null)
                         :accessor
                         struct-shape-write-get-object-response-request-bucket-key-enabled
                         :shape "BucketKeyEnabled" :location "header"
                         :location-name
                         "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-write-get-object-response-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'write-get-object-response-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'write-get-object-response-request
                    'make-write-get-object-response-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-route))
      (common-lisp:cons "x-amz-request-route" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-token))
      (common-lisp:cons "x-amz-request-token" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:cons "x-amz-fwd-status" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:cons "x-amz-fwd-error-code" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:cons "x-amz-fwd-error-message"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept-ranges))
      (common-lisp:cons "x-amz-fwd-header-accept-ranges"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-control))
      (common-lisp:cons "x-amz-fwd-header-Cache-Control"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-disposition))
      (common-lisp:cons "x-amz-fwd-header-Content-Disposition"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "x-amz-fwd-header-Content-Encoding"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-language))
      (common-lisp:cons "x-amz-fwd-header-Content-Language"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-range))
      (common-lisp:cons "x-amz-fwd-header-Content-Range"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "x-amz-fwd-header-Content-Type"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-crc32c))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-crc32c"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha1))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha1"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-sha256))
      (common-lisp:cons "x-amz-fwd-header-x-amz-checksum-sha256"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-marker))
      (common-lisp:cons "x-amz-fwd-header-x-amz-delete-marker"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "x-amz-fwd-header-ETag"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires))
      (common-lisp:cons "x-amz-fwd-header-Expires"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:cons "x-amz-fwd-header-x-amz-expiration"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "x-amz-fwd-header-Last-Modified"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-meta))
      (common-lisp:cons "x-amz-fwd-header-x-amz-missing-meta"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-lock-mode))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-mode"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-legal-hold-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-legal-hold"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-lock-retain-until-date))
      (common-lisp:cons "x-amz-fwd-header-x-amz-object-lock-retain-until-date"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parts-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-mp-parts-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-status))
      (common-lisp:cons "x-amz-fwd-header-x-amz-replication-status"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-charged))
      (common-lisp:cons "x-amz-fwd-header-x-amz-request-charged"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore))
      (common-lisp:cons "x-amz-fwd-header-x-amz-restore"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-encryption))
      (common-lisp:cons "x-amz-fwd-header-x-amz-server-side-encryption"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssecustomer-algorithm))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssekmskey-id))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssecustomer-key-md5))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5"
       aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:cons "x-amz-fwd-header-x-amz-storage-class"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-count))
      (common-lisp:cons "x-amz-fwd-header-x-amz-tagging-count"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:cons "x-amz-fwd-header-x-amz-version-id"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-key-enabled))
      (common-lisp:cons
       "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled"
       aws-sdk/generator/shape::value))
    (common-lisp:when
        (common-lisp:slot-value aws-sdk/generator/shape::input 'metadata)
      (common-lisp:loop aws-sdk/generator/shape::for aws-sdk/generator/shape::key aws-sdk/generator/shape::being aws-sdk/generator/shape::each aws-sdk/generator/shape::hash-key aws-sdk/generator/shape::of (common-lisp:slot-value
                                                                                                                                                                                                              aws-sdk/generator/shape::input
                                                                                                                                                                                                              'metadata) aws-sdk/generator/shape::using (aws-sdk/generator/shape::hash-value
                                                                                                                                                                                                                                                         aws-sdk/generator/shape::value)
                        aws-sdk/generator/shape::collect (common-lisp:cons
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "~A~A" "x-amz-meta-"
                                                           aws-sdk/generator/shape::key)
                                                          aws-sdk/generator/shape::value)))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload-properties
                        (
                         (aws-sdk/generator/shape::input
                          write-get-object-response-request))
   (common-lisp:declare (common-lisp:ignore aws-sdk/generator/shape::input))
   (common-lisp:list)))
(common-lisp:deftype years () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun abort-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key upload-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key upload-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-abort-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "AbortMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'abort-multipart-upload))
(common-lisp:progn
 (common-lisp:defun complete-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key multipart-upload upload-id
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key multipart-upload upload-id checksum-crc32
     checksum-crc32c checksum-sha1 checksum-sha256 request-payer
     expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-complete-multipart-upload-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CompleteMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'complete-multipart-upload))
(common-lisp:progn
 (common-lisp:defun copy-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     checksum-algorithm content-disposition content-encoding
                     content-language content-type copy-source
                     copy-source-if-match copy-source-if-modified-since
                     copy-source-if-none-match copy-source-if-unmodified-since
                     expires grant-full-control grant-read grant-read-acp
                     grant-write-acp key metadata metadata-directive
                     tagging-directive server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer tagging
                     object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control checksum-algorithm
     content-disposition content-encoding content-language content-type
     copy-source copy-source-if-match copy-source-if-modified-since
     copy-source-if-none-match copy-source-if-unmodified-since expires
     grant-full-control grant-read grant-read-acp grant-write-acp key metadata
     metadata-directive tagging-directive server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled copy-source-ssecustomer-algorithm
     copy-source-ssecustomer-key copy-source-ssecustomer-key-md5 request-payer
     tagging object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CopyObject"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'copy-object))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket create-bucket-configuration
                     grant-full-control grant-read grant-read-acp grant-write
                     grant-write-acp object-lock-enabled-for-bucket
                     object-ownership)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket create-bucket-configuration
     grant-full-control grant-read grant-read-acp grant-write grant-write-acp
     object-lock-enabled-for-bucket object-ownership))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "CreateBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-multipart-upload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl bucket cache-control
                     content-disposition content-encoding content-language
                     content-type expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable acl bucket cache-control content-disposition
     content-encoding content-language content-type expires grant-full-control
     grant-read grant-read-acp grant-write-acp key metadata
     server-side-encryption storage-class website-redirect-location
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 ssekmskey-id
     ssekmsencryption-context bucket-key-enabled request-payer tagging
     object-lock-mode object-lock-retain-until-date
     object-lock-legal-hold-status expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multipart-upload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "CreateMultipartUpload"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'create-multipart-upload))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-mode bucket)
   (common-lisp:declare (common-lisp:ignorable session-mode bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "CreateSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketAnalyticsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketCors"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-cors))
(common-lisp:progn
 (common-lisp:defun delete-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketEncryption"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun delete-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketIntelligentTieringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketInventoryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun delete-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketMetricsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun delete-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketOwnershipControls"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun delete-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-policy))
(common-lisp:progn
 (common-lisp:defun delete-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-bucket-replication-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-replication))
(common-lisp:progn
 (common-lisp:defun delete-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun delete-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-bucket-website))
(common-lisp:progn
 (common-lisp:defun delete-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key mfa version-id request-payer
                     bypass-governance-retention expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key mfa version-id request-payer
     bypass-governance-retention expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-object))
(common-lisp:progn
 (common-lisp:defun delete-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "DeleteObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-object-tagging))
(common-lisp:progn
 (common-lisp:defun delete-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delete mfa request-payer
                     bypass-governance-retention expected-bucket-owner
                     checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket delete mfa request-payer
     bypass-governance-retention expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?delete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeleteObjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-objects))
(common-lisp:progn
 (common-lisp:defun delete-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-public-access-block-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "DeletePublicAccessBlock"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'delete-public-access-block))
(common-lisp:progn
 (common-lisp:defun get-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAccelerateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAcl"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-acl))
(common-lisp:progn
 (common-lisp:defun get-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketAnalyticsConfiguration"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketCors"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-cors))
(common-lisp:progn
 (common-lisp:defun get-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketEncryption"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun get-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id)
   (common-lisp:declare (common-lisp:ignorable bucket id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketIntelligentTieringConfiguration"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketInventoryConfiguration"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun get-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLifecycleConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?location"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLocation"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-location))
(common-lisp:progn
 (common-lisp:defun get-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketLogging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-logging))
(common-lisp:progn
 (common-lisp:defun get-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketMetricsConfiguration"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-notification))
(common-lisp:progn
 (common-lisp:defun get-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketNotificationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketOwnershipControls"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicy"))
      "string" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-policy))
(common-lisp:progn
 (common-lisp:defun get-bucket-policy-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-policy-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policyStatus"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketPolicyStatus"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-policy-status))
(common-lisp:progn
 (common-lisp:defun get-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketReplication"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-replication))
(common-lisp:progn
 (common-lisp:defun get-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketRequestPayment"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun get-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun get-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketVersioning"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun get-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-bucket-website))
(common-lisp:progn
 (common-lisp:defun get-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range
                     response-cache-control response-content-disposition
                     response-content-encoding response-content-language
                     response-content-type response-expires version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range response-cache-control
     response-content-disposition response-content-encoding
     response-content-language response-content-type response-expires
     version-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     request-payer part-number expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObject")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object))
(common-lisp:progn
 (common-lisp:defun get-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAcl"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-acl))
(common-lisp:progn
 (common-lisp:defun get-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id max-parts
                     part-number-marker ssecustomer-algorithm ssecustomer-key
                     ssecustomer-key-md5 request-payer expected-bucket-owner
                     object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id max-parts part-number-marker
     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5 request-payer
     expected-bucket-owner object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?attributes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectAttributes"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-attributes))
(common-lisp:progn
 (common-lisp:defun get-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectLegalHold"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun get-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetObjectLockConfiguration"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun get-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id request-payer
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectRetention"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-retention))
(common-lisp:progn
 (common-lisp:defun get-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id
                     expected-bucket-owner request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id expected-bucket-owner
     request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-tagging))
(common-lisp:progn
 (common-lisp:defun get-object-torrent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key request-payer
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-torrent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?torrent"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "GetObjectTorrent")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-object-torrent))
(common-lisp:progn
 (common-lisp:defun get-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "GetPublicAccessBlock"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'get-public-access-block))
(common-lisp:progn
 (common-lisp:defun head-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket expected-bucket-owner)
   (common-lisp:declare (common-lisp:ignorable bucket expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "HeadBucket"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'head-bucket))
(common-lisp:progn
 (common-lisp:defun head-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket if-match if-modified-since
                     if-none-match if-unmodified-since key range version-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer part-number expected-bucket-owner
                     checksum-mode)
   (common-lisp:declare
    (common-lisp:ignorable bucket if-match if-modified-since if-none-match
     if-unmodified-since key range version-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer part-number
     expected-bucket-owner checksum-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-head-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "HEAD"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "HeadObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'head-object))
(common-lisp:progn
 (common-lisp:defun list-bucket-analytics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-analytics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketAnalyticsConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-bucket-analytics-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-intelligent-tiering-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token)
   (common-lisp:declare (common-lisp:ignorable bucket continuation-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-intelligent-tiering-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketIntelligentTieringConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-bucket-intelligent-tiering-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-inventory-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-inventory-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketInventoryConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-bucket-inventory-configurations))
(common-lisp:progn
 (common-lisp:defun list-bucket-metrics-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket continuation-token
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket continuation-token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-bucket-metrics-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListBucketMetricsConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-bucket-metrics-configurations))
(common-lisp:progn
 (common-lisp:defun list-buckets ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 's3-request :method "GET" :path "/" :operation
                                "ListBuckets"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'list-buckets))
(common-lisp:progn
 (common-lisp:defun list-directory-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continuation-token max-directory-buckets)
   (common-lisp:declare
    (common-lisp:ignorable continuation-token max-directory-buckets))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-directory-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/"
                                                        "ListDirectoryBuckets"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-directory-buckets))
(common-lisp:progn
 (common-lisp:defun list-multipart-uploads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-uploads prefix upload-id-marker expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker
     max-uploads prefix upload-id-marker expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multipart-uploads-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?uploads"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListMultipartUploads"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-multipart-uploads))
(common-lisp:progn
 (common-lisp:defun list-object-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type key-marker
                     max-keys prefix version-id-marker expected-bucket-owner
                     request-payer optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type key-marker max-keys
     prefix version-id-marker expected-bucket-owner request-payer
     optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-object-versions))
(common-lisp:progn
 (common-lisp:defun list-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type marker
                     max-keys prefix request-payer expected-bucket-owner
                     optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type marker max-keys
     prefix request-payer expected-bucket-owner optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjects"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-objects))
(common-lisp:progn
 (common-lisp:defun list-objects-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket delimiter encoding-type max-keys
                     prefix continuation-token fetch-owner start-after
                     request-payer expected-bucket-owner
                     optional-object-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bucket delimiter encoding-type max-keys prefix
     continuation-token fetch-owner start-after request-payer
     expected-bucket-owner optional-object-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-objects-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?list-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "ListObjectsV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-objects-v2))
(common-lisp:progn
 (common-lisp:defun list-parts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key max-parts part-number-marker
                     upload-id request-payer expected-bucket-owner
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5)
   (common-lisp:declare
    (common-lisp:ignorable bucket key max-parts part-number-marker upload-id
     request-payer expected-bucket-owner ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-parts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "ListParts"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'list-parts))
(common-lisp:progn
 (common-lisp:defun put-bucket-accelerate-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket accelerate-configuration
                     expected-bucket-owner checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable bucket accelerate-configuration
     expected-bucket-owner checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-accelerate-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?accelerate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAccelerateConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-accelerate-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAcl"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-acl))
(common-lisp:progn
 (common-lisp:defun put-bucket-analytics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id analytics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id analytics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-analytics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?analytics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketAnalyticsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-analytics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-cors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket corsconfiguration content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket corsconfiguration content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-cors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?cors"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketCors"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-cors))
(common-lisp:progn
 (common-lisp:defun put-bucket-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     server-side-encryption-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     server-side-encryption-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-encryption-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?encryption"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketEncryption"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-encryption))
(common-lisp:progn
 (common-lisp:defun put-bucket-intelligent-tiering-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id
                     intelligent-tiering-configuration)
   (common-lisp:declare
    (common-lisp:ignorable bucket id intelligent-tiering-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-intelligent-tiering-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?intelligent-tiering"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketIntelligentTieringConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-intelligent-tiering-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-inventory-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id inventory-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id inventory-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-inventory-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?inventory"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketInventoryConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-inventory-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     lifecycle-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-lifecycle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycle"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-lifecycle))
(common-lisp:progn
 (common-lisp:defun put-bucket-lifecycle-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket checksum-algorithm
                     lifecycle-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket checksum-algorithm lifecycle-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-lifecycle-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?lifecycle"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLifecycleConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-lifecycle-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket bucket-logging-status content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket bucket-logging-status content-md5
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?logging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketLogging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-logging))
(common-lisp:progn
 (common-lisp:defun put-bucket-metrics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket id metrics-configuration
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket id metrics-configuration
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-metrics-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketMetricsConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-metrics-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     notification-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     notification-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-notification-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-notification))
(common-lisp:progn
 (common-lisp:defun put-bucket-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket notification-configuration
                     expected-bucket-owner skip-destination-validation)
   (common-lisp:declare
    (common-lisp:ignorable bucket notification-configuration
     expected-bucket-owner skip-destination-validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketNotificationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-notification-configuration))
(common-lisp:progn
 (common-lisp:defun put-bucket-ownership-controls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 expected-bucket-owner
                     ownership-controls)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 expected-bucket-owner
     ownership-controls))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-ownership-controls-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?ownershipControls"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketOwnershipControls"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-ownership-controls))
(common-lisp:progn
 (common-lisp:defun put-bucket-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     confirm-remove-self-bucket-access policy
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     confirm-remove-self-bucket-access policy expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-policy))
(common-lisp:progn
 (common-lisp:defun put-bucket-replication
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     replication-configuration token expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     replication-configuration token expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-replication-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?replication"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketReplication"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-replication))
(common-lisp:progn
 (common-lisp:defun put-bucket-request-payment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     request-payment-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     request-payment-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-bucket-request-payment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?requestPayment"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketRequestPayment"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-request-payment))
(common-lisp:progn
 (common-lisp:defun put-bucket-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     tagging expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm tagging
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-tagging))
(common-lisp:progn
 (common-lisp:defun put-bucket-versioning
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm mfa
                     versioning-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm mfa
     versioning-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-versioning-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?versioning"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketVersioning"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-versioning))
(common-lisp:progn
 (common-lisp:defun put-bucket-website
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     website-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     website-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-bucket-website-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?website"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutBucketWebsite"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-bucket-website))
(common-lisp:progn
 (common-lisp:defun put-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl body bucket cache-control
                     content-disposition content-encoding content-language
                     content-length content-md5 content-type checksum-algorithm
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 expires grant-full-control grant-read
                     grant-read-acp grant-write-acp key metadata
                     server-side-encryption storage-class
                     website-redirect-location ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 ssekmskey-id
                     ssekmsencryption-context bucket-key-enabled request-payer
                     tagging object-lock-mode object-lock-retain-until-date
                     object-lock-legal-hold-status expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl body bucket cache-control content-disposition
     content-encoding content-language content-length content-md5 content-type
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 expires grant-full-control grant-read grant-read-acp
     grant-write-acp key metadata server-side-encryption storage-class
     website-redirect-location ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 ssekmskey-id ssekmsencryption-context
     bucket-key-enabled request-payer tagging object-lock-mode
     object-lock-retain-until-date object-lock-legal-hold-status
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object))
(common-lisp:progn
 (common-lisp:defun put-object-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acl access-control-policy bucket
                     content-md5 checksum-algorithm grant-full-control
                     grant-read grant-read-acp grant-write grant-write-acp key
                     request-payer version-id expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable acl access-control-policy bucket content-md5
     checksum-algorithm grant-full-control grant-read grant-read-acp
     grant-write grant-write-acp key request-payer version-id
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-acl-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?acl"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectAcl"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object-acl))
(common-lisp:progn
 (common-lisp:defun put-object-legal-hold
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key legal-hold request-payer
                     version-id content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key legal-hold request-payer version-id
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-legal-hold-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?legal-hold"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectLegalHold"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object-legal-hold))
(common-lisp:progn
 (common-lisp:defun put-object-lock-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket object-lock-configuration
                     request-payer token content-md5 checksum-algorithm
                     expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket object-lock-configuration request-payer token
     content-md5 checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-object-lock-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?object-lock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutObjectLockConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object-lock-configuration))
(common-lisp:progn
 (common-lisp:defun put-object-retention
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key retention request-payer
                     version-id bypass-governance-retention content-md5
                     checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key retention request-payer version-id
     bypass-governance-retention content-md5 checksum-algorithm
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-retention-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?retention"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectRetention"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object-retention))
(common-lisp:progn
 (common-lisp:defun put-object-tagging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id content-md5
                     checksum-algorithm tagging expected-bucket-owner
                     request-payer)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id content-md5 checksum-algorithm
     tagging expected-bucket-owner request-payer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-object-tagging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?tagging"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "PutObjectTagging"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-object-tagging))
(common-lisp:progn
 (common-lisp:defun put-public-access-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket content-md5 checksum-algorithm
                     public-access-block-configuration expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket content-md5 checksum-algorithm
     public-access-block-configuration expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-public-access-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A?publicAccessBlock"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))))
                                                        "PutPublicAccessBlock"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'put-public-access-block))
(common-lisp:progn
 (common-lisp:defun restore-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key version-id restore-request
                     request-payer checksum-algorithm expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key version-id restore-request request-payer
     checksum-algorithm expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?restore"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "RestoreObject"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'restore-object))
(common-lisp:progn
 (common-lisp:defun select-object-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket key ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5 expression
                     expression-type request-progress input-serialization
                     output-serialization scan-range expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket key ssecustomer-algorithm ssecustomer-key
     ssecustomer-key-md5 expression expression-type request-progress
     input-serialization output-serialization scan-range
     expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-select-object-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A?select&select-type=2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "SelectObjectContent"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'select-object-content))
(common-lisp:progn
 (common-lisp:defun upload-part
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key body bucket content-length content-md5
                     checksum-algorithm checksum-crc32 checksum-crc32c
                     checksum-sha1 checksum-sha256 key part-number upload-id
                     ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
                     request-payer expected-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable body bucket content-length content-md5
     checksum-algorithm checksum-crc32 checksum-crc32c checksum-sha1
     checksum-sha256 key part-number upload-id ssecustomer-algorithm
     ssecustomer-key ssecustomer-key-md5 request-payer expected-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPart"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'upload-part))
(common-lisp:progn
 (common-lisp:defun upload-part-copy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket copy-source copy-source-if-match
                     copy-source-if-modified-since copy-source-if-none-match
                     copy-source-if-unmodified-since copy-source-range key
                     part-number upload-id ssecustomer-algorithm
                     ssecustomer-key ssecustomer-key-md5
                     copy-source-ssecustomer-algorithm
                     copy-source-ssecustomer-key
                     copy-source-ssecustomer-key-md5 request-payer
                     expected-bucket-owner expected-source-bucket-owner)
   (common-lisp:declare
    (common-lisp:ignorable bucket copy-source copy-source-if-match
     copy-source-if-modified-since copy-source-if-none-match
     copy-source-if-unmodified-since copy-source-range key part-number
     upload-id ssecustomer-algorithm ssecustomer-key ssecustomer-key-md5
     copy-source-ssecustomer-algorithm copy-source-ssecustomer-key
     copy-source-ssecustomer-key-md5 request-payer expected-bucket-owner
     expected-source-bucket-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-part-copy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bucket))
                                                           (common-lisp:slot-value
                                                            aws-sdk/generator/operation::input
                                                            'key)))
                                                        "UploadPartCopy"))
      "structure" common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'upload-part-copy))
(common-lisp:progn
 (common-lisp:defun write-get-object-response
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key request-route request-token body
                     status-code error-code error-message accept-ranges
                     cache-control content-disposition content-encoding
                     content-language content-length content-range content-type
                     checksum-crc32 checksum-crc32c checksum-sha1
                     checksum-sha256 delete-marker etag expires expiration
                     last-modified missing-meta metadata object-lock-mode
                     object-lock-legal-hold-status
                     object-lock-retain-until-date parts-count
                     replication-status request-charged restore
                     server-side-encryption ssecustomer-algorithm ssekmskey-id
                     ssecustomer-key-md5 storage-class tag-count version-id
                     bucket-key-enabled)
   (common-lisp:declare
    (common-lisp:ignorable request-route request-token body status-code
     error-code error-message accept-ranges cache-control content-disposition
     content-encoding content-language content-length content-range
     content-type checksum-crc32 checksum-crc32c checksum-sha1 checksum-sha256
     delete-marker etag expires expiration last-modified missing-meta metadata
     object-lock-mode object-lock-legal-hold-status
     object-lock-retain-until-date parts-count replication-status
     request-charged restore server-side-encryption ssecustomer-algorithm
     ssekmskey-id ssecustomer-key-md5 storage-class tag-count version-id
     bucket-key-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-write-get-object-response-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 's3-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/WriteGetObjectResponse"
                                                        "WriteGetObjectResponse"))
      common-lisp:nil common-lisp:nil *error-map* "application/xml")))
 (common-lisp:export 'write-get-object-response))
