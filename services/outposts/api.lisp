;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/outposts/api (:use)
                             (:nicknames #:aws/outposts)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/outposts/api)
(common-lisp:progn
 (common-lisp:define-condition outposts-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'outposts-error))
(common-lisp:progn
 (common-lisp:defclass outposts-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "outposts" :api-version
                        "2019-12-03" :host-prefix "outposts" :signing-name
                        "outposts" :global-host common-lisp:nil))
 (common-lisp:export 'outposts-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass address common-lisp:nil
                       ((contact-name :initarg :contact-name :initform
                         common-lisp:nil :type
                         (common-lisp:or contact-name common-lisp:null)
                         :accessor struct-shape-address-contact-name :shape
                         "ContactName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contact-phone-number :initarg :contact-phone-number
                         :initform common-lisp:nil :type
                         (common-lisp:or contact-phone-number common-lisp:null)
                         :accessor struct-shape-address-contact-phone-number
                         :shape "ContactPhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-line1 :initarg :address-line1 :initform
                         (common-lisp:error ":address-line1 is required") :type
                         (common-lisp:or address-line1 common-lisp:null)
                         :accessor struct-shape-address-address-line1 :shape
                         "AddressLine1" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-line2 :initarg :address-line2 :initform
                         common-lisp:nil :type
                         (common-lisp:or address-line2 common-lisp:null)
                         :accessor struct-shape-address-address-line2 :shape
                         "AddressLine2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-line3 :initarg :address-line3 :initform
                         common-lisp:nil :type
                         (common-lisp:or address-line3 common-lisp:null)
                         :accessor struct-shape-address-address-line3 :shape
                         "AddressLine3" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (city :initarg :city :initform
                         (common-lisp:error ":city is required") :type
                         (common-lisp:or city common-lisp:null) :accessor
                         struct-shape-address-city :shape "City" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state-or-region :initarg :state-or-region :initform
                         (common-lisp:error ":state-or-region is required")
                         :type
                         (common-lisp:or state-or-region common-lisp:null)
                         :accessor struct-shape-address-state-or-region :shape
                         "StateOrRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (district-or-county :initarg :district-or-county
                         :initform common-lisp:nil :type
                         (common-lisp:or district-or-county common-lisp:null)
                         :accessor struct-shape-address-district-or-county
                         :shape "DistrictOrCounty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (postal-code :initarg :postal-code :initform
                         (common-lisp:error ":postal-code is required") :type
                         (common-lisp:or postal-code common-lisp:null)
                         :accessor struct-shape-address-postal-code :shape
                         "PostalCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (country-code :initarg :country-code :initform
                         (common-lisp:error ":country-code is required") :type
                         (common-lisp:or country-code common-lisp:null)
                         :accessor struct-shape-address-country-code :shape
                         "CountryCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (municipality :initarg :municipality :initform
                         common-lisp:nil :type
                         (common-lisp:or municipality common-lisp:null)
                         :accessor struct-shape-address-municipality :shape
                         "Municipality" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-address
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'address
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'address 'make-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-name))
      (common-lisp:list
       (common-lisp:cons "ContactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-phone-number))
      (common-lisp:list
       (common-lisp:cons "ContactPhoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line1))
      (common-lisp:list
       (common-lisp:cons "AddressLine1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line2))
      (common-lisp:list
       (common-lisp:cons "AddressLine2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-line3))
      (common-lisp:list
       (common-lisp:cons "AddressLine3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'city))
      (common-lisp:list
       (common-lisp:cons "City"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-or-region))
      (common-lisp:list
       (common-lisp:cons "StateOrRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'district-or-county))
      (common-lisp:list
       (common-lisp:cons "DistrictOrCounty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'postal-code))
      (common-lisp:list
       (common-lisp:cons "PostalCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country-code))
      (common-lisp:list
       (common-lisp:cons "CountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'municipality))
      (common-lisp:list
       (common-lisp:cons "Municipality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input address))
   common-lisp:nil))
(common-lisp:deftype address-line1 () 'common-lisp:string)
(common-lisp:deftype address-line2 () 'common-lisp:string)
(common-lisp:deftype address-line3 () 'common-lisp:string)
(common-lisp:deftype address-type () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype asset-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-info common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or asset-id common-lisp:null)
                         :accessor struct-shape-asset-info-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rack-id :initarg :rack-id :initform common-lisp:nil
                         :type (common-lisp:or rack-id common-lisp:null)
                         :accessor struct-shape-asset-info-rack-id :shape
                         "RackId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (asset-type :initarg :asset-type :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         struct-shape-asset-info-asset-type :shape "AssetType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compute-attributes :initarg :compute-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or compute-attributes common-lisp:null)
                         :accessor struct-shape-asset-info-compute-attributes
                         :shape "ComputeAttributes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-location :initarg :asset-location :initform
                         common-lisp:nil :type
                         (common-lisp:or asset-location common-lisp:null)
                         :accessor struct-shape-asset-info-asset-location
                         :shape "AssetLocation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-info 'make-asset-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rack-id))
      (common-lisp:list
       (common-lisp:cons "RackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "AssetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-attributes))
      (common-lisp:list
       (common-lisp:cons "ComputeAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-location))
      (common-lisp:list
       (common-lisp:cons "AssetLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-list-definition ()
   '(trivial-types:proper-list asset-info))
 (common-lisp:defun make-asset-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-location common-lisp:nil
                       ((rack-elevation :initarg :rack-elevation :initform
                         common-lisp:nil :type
                         (common-lisp:or rack-elevation common-lisp:null)
                         :accessor struct-shape-asset-location-rack-elevation
                         :shape "RackElevation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asset-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asset-location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asset-location 'make-asset-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rack-elevation))
      (common-lisp:list
       (common-lisp:cons "RackElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-location))
   common-lisp:nil))
(common-lisp:deftype asset-state () 'common-lisp:string)
(common-lisp:deftype asset-type () 'common-lisp:string)
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:deftype availability-zone-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zone-id-list ()
   '(trivial-types:proper-list availability-zone-id))
 (common-lisp:defun make-availability-zone-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidrlist () '(trivial-types:proper-list cidr))
 (common-lisp:defun make-cidrlist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cancel-order-input common-lisp:nil
                       ((order-id :initarg :order-id :initform
                         (common-lisp:error ":order-id is required") :type
                         (common-lisp:or order-id common-lisp:null) :accessor
                         struct-shape-cancel-order-input-order-id :shape
                         "OrderId" :location "uri" :location-name "OrderId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-order-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-order-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-order-input 'make-cancel-order-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-order-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-order-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-order-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-order-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-order-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-order-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-order-output 'make-cancel-order-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-order-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-order-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-order-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-item common-lisp:nil
                       ((catalog-item-id :initarg :catalog-item-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sku-code common-lisp:null) :accessor
                         struct-shape-catalog-item-catalog-item-id :shape
                         "SkuCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item-status :initarg :item-status :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-item-status common-lisp:null)
                         :accessor struct-shape-catalog-item-item-status :shape
                         "CatalogItemStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2capacities :initarg :ec2capacities :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2capacity-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-catalog-item-ec2capacities
                         :shape "EC2CapacityListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (power-kva :initarg :power-kva :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-item-power-kva
                                         common-lisp:null)
                         :accessor struct-shape-catalog-item-power-kva :shape
                         "CatalogItemPowerKva" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (weight-lbs :initarg :weight-lbs :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-item-weight-lbs
                                         common-lisp:null)
                         :accessor struct-shape-catalog-item-weight-lbs :shape
                         "CatalogItemWeightLbs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-uplink-gbps :initarg :supported-uplink-gbps
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-uplink-gbps-list-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-item-supported-uplink-gbps :shape
                         "SupportedUplinkGbpsListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supported-storage :initarg :supported-storage
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-storage-list
                                         common-lisp:null)
                         :accessor struct-shape-catalog-item-supported-storage
                         :shape "SupportedStorageList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'catalog-item 'make-catalog-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-item-id))
      (common-lisp:list
       (common-lisp:cons "CatalogItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-status))
      (common-lisp:list
       (common-lisp:cons "ItemStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2capacities))
      (common-lisp:list
       (common-lisp:cons "EC2Capacities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-kva))
      (common-lisp:list
       (common-lisp:cons "PowerKva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight-lbs))
      (common-lisp:list
       (common-lisp:cons "WeightLbs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-uplink-gbps))
      (common-lisp:list
       (common-lisp:cons "SupportedUplinkGbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-storage))
      (common-lisp:list
       (common-lisp:cons "SupportedStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-item))
   common-lisp:nil))
(common-lisp:deftype catalog-item-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype catalog-item-class-list ()
   '(trivial-types:proper-list catalog-item-class))
 (common-lisp:defun make-catalog-item-class-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-item-class))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype catalog-item-list-definition ()
   '(trivial-types:proper-list catalog-item))
 (common-lisp:defun make-catalog-item-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype catalog-item-power-kva () 'common-lisp:single-float)
(common-lisp:deftype catalog-item-status () 'common-lisp:string)
(common-lisp:deftype catalog-item-weight-lbs () 'common-lisp:integer)
(common-lisp:deftype city () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype city-list () '(trivial-types:proper-list city))
 (common-lisp:defun make-city-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list city))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compute-asset-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compute-attributes common-lisp:nil
                       ((host-id :initarg :host-id :initform common-lisp:nil
                         :type (common-lisp:or host-id common-lisp:null)
                         :accessor struct-shape-compute-attributes-host-id
                         :shape "HostId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or compute-asset-state common-lisp:null)
                         :accessor struct-shape-compute-attributes-state :shape
                         "ComputeAssetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-families :initarg :instance-families
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-families common-lisp:null)
                         :accessor
                         struct-shape-compute-attributes-instance-families
                         :shape "InstanceFamilies" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compute-attributes 'make-compute-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compute-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compute-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-id))
      (common-lisp:list
       (common-lisp:cons "HostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-families))
      (common-lisp:list
       (common-lisp:cons "InstanceFamilies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compute-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass connection-details common-lisp:nil
                       ((client-public-key :initarg :client-public-key
                         :initform common-lisp:nil :type
                         (common-lisp:or wire-guard-public-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-details-client-public-key
                         :shape "WireGuardPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-public-key :initarg :server-public-key
                         :initform common-lisp:nil :type
                         (common-lisp:or wire-guard-public-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-details-server-public-key
                         :shape "WireGuardPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (server-endpoint :initarg :server-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or server-endpoint common-lisp:null)
                         :accessor
                         struct-shape-connection-details-server-endpoint :shape
                         "ServerEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-tunnel-address :initarg :client-tunnel-address
                         :initform common-lisp:nil :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         struct-shape-connection-details-client-tunnel-address
                         :shape "CIDR" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (server-tunnel-address :initarg :server-tunnel-address
                         :initform common-lisp:nil :type
                         (common-lisp:or cidr common-lisp:null) :accessor
                         struct-shape-connection-details-server-tunnel-address
                         :shape "CIDR" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allowed-ips :initarg :allowed-ips :initform
                         common-lisp:nil :type
                         (common-lisp:or cidrlist common-lisp:null) :accessor
                         struct-shape-connection-details-allowed-ips :shape
                         "CIDRList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-details 'make-connection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-public-key))
      (common-lisp:list
       (common-lisp:cons "ClientPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-public-key))
      (common-lisp:list
       (common-lisp:cons "ServerPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-endpoint))
      (common-lisp:list
       (common-lisp:cons "ServerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-tunnel-address))
      (common-lisp:list
       (common-lisp:cons "ClientTunnelAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-tunnel-address))
      (common-lisp:list
       (common-lisp:cons "ServerTunnelAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-ips))
      (common-lisp:list
       (common-lisp:cons "AllowedIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-details))
   common-lisp:nil))
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:deftype contact-name () 'common-lisp:string)
(common-lisp:deftype contact-phone-number () 'common-lisp:string)
(common-lisp:deftype country-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype country-code-list ()
   '(trivial-types:proper-list country-code))
 (common-lisp:defun make-country-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list country-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-order-input common-lisp:nil
                       ((outpost-identifier :initarg :outpost-identifier
                         :initform
                         (common-lisp:error ":outpost-identifier is required")
                         :type
                         (common-lisp:or outpost-identifier common-lisp:null)
                         :accessor
                         struct-shape-create-order-input-outpost-identifier
                         :shape "OutpostIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (line-items :initarg :line-items :initform
                         (common-lisp:error ":line-items is required") :type
                         (common-lisp:or line-item-request-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-create-order-input-line-items
                         :shape "LineItemRequestListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         (common-lisp:error ":payment-option is required")
                         :type (common-lisp:or payment-option common-lisp:null)
                         :accessor
                         struct-shape-create-order-input-payment-option :shape
                         "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-term :initarg :payment-term :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-term common-lisp:null)
                         :accessor struct-shape-create-order-input-payment-term
                         :shape "PaymentTerm" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-order-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-order-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-order-input 'make-create-order-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-order-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-order-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-identifier))
      (common-lisp:list
       (common-lisp:cons "OutpostIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-items))
      (common-lisp:list
       (common-lisp:cons "LineItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-term))
      (common-lisp:list
       (common-lisp:cons "PaymentTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-order-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-order-output common-lisp:nil
                       ((order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-create-order-output-order :shape "Order"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-order-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-order-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-order-output 'make-create-order-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-order-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-order-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-order-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outpost-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or outpost-name common-lisp:null)
                         :accessor struct-shape-create-outpost-input-name
                         :shape "OutpostName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-description common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-input-description :shape
                         "OutpostDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-create-outpost-input-site-id :shape
                         "SiteId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-input-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-input-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-outpost-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-hardware-type :initarg
                         :supported-hardware-type :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-hardware-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-outpost-input-supported-hardware-type
                         :shape "SupportedHardwareType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outpost-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-outpost-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outpost-input 'make-create-outpost-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-outpost-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-hardware-type))
      (common-lisp:list
       (common-lisp:cons "SupportedHardwareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-outpost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outpost-output common-lisp:nil
                       ((outpost :initarg :outpost :initform common-lisp:nil
                         :type (common-lisp:or outpost common-lisp:null)
                         :accessor struct-shape-create-outpost-output-outpost
                         :shape "Outpost" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outpost-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-outpost-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outpost-output 'make-create-outpost-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost))
      (common-lisp:list
       (common-lisp:cons "Outpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outpost-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or site-name common-lisp:null) :accessor
                         struct-shape-create-site-input-name :shape "SiteName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or site-description common-lisp:null)
                         :accessor struct-shape-create-site-input-description
                         :shape "SiteDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or site-notes common-lisp:null) :accessor
                         struct-shape-create-site-input-notes :shape
                         "SiteNotes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-site-input-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (operating-address :initarg :operating-address
                         :initform common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-site-input-operating-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipping-address :initarg :shipping-address :initform
                         common-lisp:nil :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-create-site-input-shipping-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rack-physical-properties :initarg
                         :rack-physical-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or rack-physical-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-site-input-rack-physical-properties
                         :shape "RackPhysicalProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-site-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-input 'make-create-site-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-site-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-address))
      (common-lisp:list
       (common-lisp:cons "OperatingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipping-address))
      (common-lisp:list
       (common-lisp:cons "ShippingAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rack-physical-properties))
      (common-lisp:list
       (common-lisp:cons "RackPhysicalProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-site-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-output common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-create-site-output-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-site-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-output 'make-create-site-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-site-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-site-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-site-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outpost-input common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         (common-lisp:error ":outpost-id is required") :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-delete-outpost-input-outpost-id :shape
                         "OutpostId" :location "uri" :location-name
                         "OutpostId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outpost-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-outpost-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outpost-input 'make-delete-outpost-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-outpost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outpost-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outpost-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-outpost-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outpost-output 'make-delete-outpost-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outpost-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-site-input common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-delete-site-input-site-id :shape "SiteId"
                         :location "uri" :location-name "SiteId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-site-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-site-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-site-input 'make-delete-site-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-site-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-site-output common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-site-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-site-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-site-output 'make-delete-site-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-site-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-site-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-site-output))
   common-lisp:nil))
(common-lisp:deftype device-serial-number () 'common-lisp:string)
(common-lisp:deftype district-or-county () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ec2capacity common-lisp:nil
                       ((family :initarg :family :initform common-lisp:nil
                         :type (common-lisp:or family common-lisp:null)
                         :accessor struct-shape-ec2capacity-family :shape
                         "Family" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-size :initarg :max-size :initform common-lisp:nil
                         :type (common-lisp:or max-size common-lisp:null)
                         :accessor struct-shape-ec2capacity-max-size :shape
                         "MaxSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quantity :initarg :quantity :initform common-lisp:nil
                         :type (common-lisp:or quantity common-lisp:null)
                         :accessor struct-shape-ec2capacity-quantity :shape
                         "Quantity" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2capacity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2capacity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ec2capacity 'make-ec2capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'family))
      (common-lisp:list
       (common-lisp:cons "Family"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ec2capacity-list-definition ()
   '(trivial-types:proper-list ec2capacity))
 (common-lisp:defun make-ec2capacity-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ec2capacity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ec2family-list () '(trivial-types:proper-list family))
 (common-lisp:defun make-ec2family-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list family))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype family () 'common-lisp:string)
(common-lisp:deftype fiber-optic-cable-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-catalog-item-input common-lisp:nil
                       ((catalog-item-id :initarg :catalog-item-id :initform
                         (common-lisp:error ":catalog-item-id is required")
                         :type (common-lisp:or sku-code common-lisp:null)
                         :accessor
                         struct-shape-get-catalog-item-input-catalog-item-id
                         :shape "SkuCode" :location "uri" :location-name
                         "CatalogItemId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-catalog-item-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-catalog-item-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-catalog-item-input 'make-get-catalog-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-catalog-item-output common-lisp:nil
                       ((catalog-item :initarg :catalog-item :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-item common-lisp:null)
                         :accessor
                         struct-shape-get-catalog-item-output-catalog-item
                         :shape "CatalogItem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-catalog-item-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-catalog-item-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-catalog-item-output 'make-get-catalog-item-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-item))
      (common-lisp:list
       (common-lisp:cons "CatalogItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-item-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connection-id is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-get-connection-request-connection-id
                         :shape "ConnectionId" :location "uri" :location-name
                         "ConnectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-request 'make-get-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-response common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-get-connection-response-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-details :initarg :connection-details
                         :initform common-lisp:nil :type
                         (common-lisp:or connection-details common-lisp:null)
                         :accessor
                         struct-shape-get-connection-response-connection-details
                         :shape "ConnectionDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-response 'make-get-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-details))
      (common-lisp:list
       (common-lisp:cons "ConnectionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-order-input common-lisp:nil
                       ((order-id :initarg :order-id :initform
                         (common-lisp:error ":order-id is required") :type
                         (common-lisp:or order-id common-lisp:null) :accessor
                         struct-shape-get-order-input-order-id :shape "OrderId"
                         :location "uri" :location-name "OrderId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-order-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-order-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-order-input 'make-get-order-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-order-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-order-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-order-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-order-output common-lisp:nil
                       ((order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-get-order-output-order :shape "Order"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-order-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-order-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-order-output 'make-get-order-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-order-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-order-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "Order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-order-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-input common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         (common-lisp:error ":outpost-id is required") :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-get-outpost-input-outpost-id :shape
                         "OutpostId" :location "uri" :location-name
                         "OutpostId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-outpost-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-input 'make-get-outpost-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outpost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-instance-types-input common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         (common-lisp:error ":outpost-id is required") :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-get-outpost-instance-types-input-outpost-id
                         :shape "OutpostId" :location "uri" :location-name
                         "OutpostId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-outpost-instance-types-input-next-token
                         :shape "Token" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor
                         struct-shape-get-outpost-instance-types-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-instance-types-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-outpost-instance-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-instance-types-input
                    'make-get-outpost-instance-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-instance-types-output common-lisp:nil
                       ((instance-types :initarg :instance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type-list-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-outpost-instance-types-output-instance-types
                         :shape "InstanceTypeListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-outpost-instance-types-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-id :initarg :outpost-id :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-get-outpost-instance-types-output-outpost-id
                         :shape "OutpostId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor
                         struct-shape-get-outpost-instance-types-output-outpost-arn
                         :shape "OutpostArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-instance-types-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-outpost-instance-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-instance-types-output
                    'make-get-outpost-instance-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-types))
      (common-lisp:list
       (common-lisp:cons "InstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-outpost-instance-types-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-outpost-output common-lisp:nil
                       ((outpost :initarg :outpost :initform common-lisp:nil
                         :type (common-lisp:or outpost common-lisp:null)
                         :accessor struct-shape-get-outpost-output-outpost
                         :shape "Outpost" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-outpost-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-outpost-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-outpost-output 'make-get-outpost-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-outpost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-outpost-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost))
      (common-lisp:list
       (common-lisp:cons "Outpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-outpost-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-address-input common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-get-site-address-input-site-id :shape
                         "SiteId" :location "uri" :location-name "SiteId")
                        (address-type :initarg :address-type :initform
                         (common-lisp:error ":address-type is required") :type
                         (common-lisp:or address-type common-lisp:null)
                         :accessor
                         struct-shape-get-site-address-input-address-type
                         :shape "AddressType" :location "querystring"
                         :location-name "AddressType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-address-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-site-address-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-site-address-input 'make-get-site-address-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-address-output common-lisp:nil
                       ((site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-get-site-address-output-site-id
                         :shape "SiteId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address-type :initarg :address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or address-type common-lisp:null)
                         :accessor
                         struct-shape-get-site-address-output-address-type
                         :shape "AddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor struct-shape-get-site-address-output-address
                         :shape "Address" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-address-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-site-address-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-site-address-output 'make-get-site-address-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-type))
      (common-lisp:list
       (common-lisp:cons "AddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-site-address-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-input common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-get-site-input-site-id :shape "SiteId"
                         :location "uri" :location-name "SiteId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-site-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-site-input 'make-get-site-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-site-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-output common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-get-site-output-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-site-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-site-output 'make-get-site-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-site-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-site-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-site-output))
   common-lisp:nil))
(common-lisp:deftype host-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype host-id-list () '(trivial-types:proper-list host-id))
 (common-lisp:defun make-host-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iso8601timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-families ()
   '(trivial-types:proper-list instance-family-name))
 (common-lisp:defun make-instance-families
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-family-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-family-name () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-type-item common-lisp:nil
                       ((instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor
                         struct-shape-instance-type-item-instance-type :shape
                         "InstanceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-type-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-type-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-type-item 'make-instance-type-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-type-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-type-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-type-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-type-list-definition ()
   '(trivial-types:proper-list instance-type-item))
 (common-lisp:defun make-instance-type-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype life-cycle-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype life-cycle-status-list ()
   '(trivial-types:proper-list life-cycle-status))
 (common-lisp:defun make-life-cycle-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list life-cycle-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass line-item common-lisp:nil
                       ((catalog-item-id :initarg :catalog-item-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sku-code common-lisp:null) :accessor
                         struct-shape-line-item-catalog-item-id :shape
                         "SkuCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (line-item-id :initarg :line-item-id :initform
                         common-lisp:nil :type
                         (common-lisp:or line-item-id common-lisp:null)
                         :accessor struct-shape-line-item-line-item-id :shape
                         "LineItemId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quantity :initarg :quantity :initform common-lisp:nil
                         :type
                         (common-lisp:or line-item-quantity common-lisp:null)
                         :accessor struct-shape-line-item-quantity :shape
                         "LineItemQuantity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or line-item-status common-lisp:null)
                         :accessor struct-shape-line-item-status :shape
                         "LineItemStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipment-information :initarg :shipment-information
                         :initform common-lisp:nil :type
                         (common-lisp:or shipment-information common-lisp:null)
                         :accessor struct-shape-line-item-shipment-information
                         :shape "ShipmentInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-information-list :initarg
                         :asset-information-list :initform common-lisp:nil
                         :type
                         (common-lisp:or line-item-asset-information-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-line-item-asset-information-list :shape
                         "LineItemAssetInformationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (previous-line-item-id :initarg :previous-line-item-id
                         :initform common-lisp:nil :type
                         (common-lisp:or line-item-id common-lisp:null)
                         :accessor struct-shape-line-item-previous-line-item-id
                         :shape "LineItemId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-order-id :initarg :previous-order-id
                         :initform common-lisp:nil :type
                         (common-lisp:or order-id common-lisp:null) :accessor
                         struct-shape-line-item-previous-order-id :shape
                         "OrderId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-line-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'line-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'line-item 'make-line-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-item-id))
      (common-lisp:list
       (common-lisp:cons "CatalogItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-item-id))
      (common-lisp:list
       (common-lisp:cons "LineItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shipment-information))
      (common-lisp:list
       (common-lisp:cons "ShipmentInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-information-list))
      (common-lisp:list
       (common-lisp:cons "AssetInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'previous-line-item-id))
      (common-lisp:list
       (common-lisp:cons "PreviousLineItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-order-id))
      (common-lisp:list
       (common-lisp:cons "PreviousOrderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass line-item-asset-information common-lisp:nil
                       ((asset-id :initarg :asset-id :initform common-lisp:nil
                         :type (common-lisp:or asset-id common-lisp:null)
                         :accessor
                         struct-shape-line-item-asset-information-asset-id
                         :shape "AssetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mac-address-list :initarg :mac-address-list :initform
                         common-lisp:nil :type
                         (common-lisp:or mac-address-list common-lisp:null)
                         :accessor
                         struct-shape-line-item-asset-information-mac-address-list
                         :shape "MacAddressList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-line-item-asset-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'line-item-asset-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'line-item-asset-information
                    'make-line-item-asset-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          line-item-asset-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          line-item-asset-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address-list))
      (common-lisp:list
       (common-lisp:cons "MacAddressList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          line-item-asset-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype line-item-asset-information-list ()
   '(trivial-types:proper-list line-item-asset-information))
 (common-lisp:defun make-line-item-asset-information-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            line-item-asset-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype line-item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype line-item-list-definition ()
   '(trivial-types:proper-list line-item))
 (common-lisp:defun make-line-item-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list line-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype line-item-quantity () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass line-item-request common-lisp:nil
                       ((catalog-item-id :initarg :catalog-item-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sku-code common-lisp:null) :accessor
                         struct-shape-line-item-request-catalog-item-id :shape
                         "SkuCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (quantity :initarg :quantity :initform common-lisp:nil
                         :type
                         (common-lisp:or line-item-quantity common-lisp:null)
                         :accessor struct-shape-line-item-request-quantity
                         :shape "LineItemQuantity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-line-item-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'line-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'line-item-request 'make-line-item-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input line-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input line-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-item-id))
      (common-lisp:list
       (common-lisp:cons "CatalogItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantity))
      (common-lisp:list
       (common-lisp:cons "Quantity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input line-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype line-item-request-list-definition ()
   '(trivial-types:proper-list line-item-request))
 (common-lisp:defun make-line-item-request-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list line-item-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype line-item-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype line-item-status-counts () 'common-lisp:hash-table)
 (common-lisp:defun make-line-item-status-counts
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass list-assets-input common-lisp:nil
                       ((outpost-identifier :initarg :outpost-identifier
                         :initform
                         (common-lisp:error ":outpost-identifier is required")
                         :type
                         (common-lisp:or outpost-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-assets-input-outpost-identifier
                         :shape "OutpostIdentifier" :location "uri"
                         :location-name "OutpostId")
                        (host-id-filter :initarg :host-id-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or host-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-assets-input-host-id-filter :shape
                         "HostIdList" :location "querystring" :location-name
                         "HostIdFilter")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor struct-shape-list-assets-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assets-input-next-token :shape
                         "Token" :location "querystring" :location-name
                         "NextToken")
                        (status-filter :initarg :status-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or status-list common-lisp:null)
                         :accessor struct-shape-list-assets-input-status-filter
                         :shape "StatusList" :location "querystring"
                         :location-name "StatusFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assets-input 'make-list-assets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assets-output common-lisp:nil
                       ((assets :initarg :assets :initform common-lisp:nil
                         :type
                         (common-lisp:or asset-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-list-assets-output-assets
                         :shape "AssetListDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-assets-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-assets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-assets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-assets-output 'make-list-assets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "Assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-catalog-items-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-catalog-items-input-next-token
                         :shape "Token" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor
                         struct-shape-list-catalog-items-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults")
                        (item-class-filter :initarg :item-class-filter
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-item-class-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-catalog-items-input-item-class-filter
                         :shape "CatalogItemClassList" :location "querystring"
                         :location-name "ItemClassFilter")
                        (supported-storage-filter :initarg
                         :supported-storage-filter :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-storage-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-catalog-items-input-supported-storage-filter
                         :shape "SupportedStorageList" :location "querystring"
                         :location-name "SupportedStorageFilter")
                        (ec2family-filter :initarg :ec2family-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2family-list common-lisp:null)
                         :accessor
                         struct-shape-list-catalog-items-input-ec2family-filter
                         :shape "EC2FamilyList" :location "querystring"
                         :location-name "EC2FamilyFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-catalog-items-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-catalog-items-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-catalog-items-input 'make-list-catalog-items-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-catalog-items-output common-lisp:nil
                       ((catalog-items :initarg :catalog-items :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-item-list-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-catalog-items-output-catalog-items
                         :shape "CatalogItemListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-catalog-items-output-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-catalog-items-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-catalog-items-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-catalog-items-output
                    'make-list-catalog-items-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-items))
      (common-lisp:list
       (common-lisp:cons "CatalogItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-catalog-items-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-orders-input common-lisp:nil
                       ((outpost-identifier-filter :initarg
                         :outpost-identifier-filter :initform common-lisp:nil
                         :type
                         (common-lisp:or outpost-identifier common-lisp:null)
                         :accessor
                         struct-shape-list-orders-input-outpost-identifier-filter
                         :shape "OutpostIdentifier" :location "querystring"
                         :location-name "OutpostIdentifierFilter")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-orders-input-next-token :shape
                         "Token" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor struct-shape-list-orders-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-orders-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-orders-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-orders-input 'make-list-orders-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-orders-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-orders-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-orders-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-orders-output common-lisp:nil
                       ((orders :initarg :orders :initform common-lisp:nil
                         :type
                         (common-lisp:or order-summary-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-list-orders-output-orders
                         :shape "OrderSummaryListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-orders-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-orders-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-orders-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-orders-output 'make-list-orders-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-orders-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-orders-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orders))
      (common-lisp:list
       (common-lisp:cons "Orders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-orders-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outposts-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-outposts-input-next-token :shape
                         "Token" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor struct-shape-list-outposts-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults")
                        (life-cycle-status-filter :initarg
                         :life-cycle-status-filter :initform common-lisp:nil
                         :type
                         (common-lisp:or life-cycle-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-outposts-input-life-cycle-status-filter
                         :shape "LifeCycleStatusList" :location "querystring"
                         :location-name "LifeCycleStatusFilter")
                        (availability-zone-filter :initarg
                         :availability-zone-filter :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-outposts-input-availability-zone-filter
                         :shape "AvailabilityZoneList" :location "querystring"
                         :location-name "AvailabilityZoneFilter")
                        (availability-zone-id-filter :initarg
                         :availability-zone-id-filter :initform common-lisp:nil
                         :type
                         (common-lisp:or availability-zone-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-outposts-input-availability-zone-id-filter
                         :shape "AvailabilityZoneIdList" :location
                         "querystring" :location-name
                         "AvailabilityZoneIdFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outposts-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-outposts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outposts-input 'make-list-outposts-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-outposts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-outposts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-outposts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-outposts-output common-lisp:nil
                       ((outposts :initarg :outposts :initform common-lisp:nil
                         :type
                         (common-lisp:or |outpostListDefinition|
                                         common-lisp:null)
                         :accessor struct-shape-list-outposts-output-outposts
                         :shape "outpostListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-outposts-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-outposts-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-outposts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-outposts-output 'make-list-outposts-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-outposts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-outposts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outposts))
      (common-lisp:list
       (common-lisp:cons "Outposts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-outposts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sites-input common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-sites-input-next-token :shape
                         "Token" :location "querystring" :location-name
                         "NextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results1000 common-lisp:null)
                         :accessor struct-shape-list-sites-input-max-results
                         :shape "MaxResults1000" :location "querystring"
                         :location-name "MaxResults")
                        (operating-address-country-code-filter :initarg
                         :operating-address-country-code-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or country-code-list common-lisp:null)
                         :accessor
                         struct-shape-list-sites-input-operating-address-country-code-filter
                         :shape "CountryCodeList" :location "querystring"
                         :location-name "OperatingAddressCountryCodeFilter")
                        (operating-address-state-or-region-filter :initarg
                         :operating-address-state-or-region-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or state-or-region-list common-lisp:null)
                         :accessor
                         struct-shape-list-sites-input-operating-address-state-or-region-filter
                         :shape "StateOrRegionList" :location "querystring"
                         :location-name "OperatingAddressStateOrRegionFilter")
                        (operating-address-city-filter :initarg
                         :operating-address-city-filter :initform
                         common-lisp:nil :type
                         (common-lisp:or city-list common-lisp:null) :accessor
                         struct-shape-list-sites-input-operating-address-city-filter
                         :shape "CityList" :location "querystring"
                         :location-name "OperatingAddressCityFilter"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sites-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sites-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sites-input 'make-list-sites-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-sites-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-sites-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-sites-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sites-output common-lisp:nil
                       ((sites :initarg :sites :initform common-lisp:nil :type
                         (common-lisp:or |siteListDefinition| common-lisp:null)
                         :accessor struct-shape-list-sites-output-sites :shape
                         "siteListDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-sites-output-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sites-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sites-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sites-output 'make-list-sites-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-sites-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-sites-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sites))
      (common-lisp:list
       (common-lisp:cons "Sites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-sites-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype mac-address-list ()
   '(trivial-types:proper-list mac-address))
 (common-lisp:defun make-mac-address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mac-address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-results1000 () 'common-lisp:integer)
(common-lisp:deftype max-size () 'common-lisp:string)
(common-lisp:deftype maximum-supported-weight-lbs () 'common-lisp:string)
(common-lisp:deftype municipality () 'common-lisp:string)
(common-lisp:deftype network-interface-device-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype optical-standard () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-id-only common-lisp:null)
                         :accessor struct-shape-order-outpost-id :shape
                         "OutpostIdOnly" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-id :initarg :order-id :initform common-lisp:nil
                         :type (common-lisp:or order-id common-lisp:null)
                         :accessor struct-shape-order-order-id :shape "OrderId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or order-status common-lisp:null)
                         :accessor struct-shape-order-status :shape
                         "OrderStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (line-items :initarg :line-items :initform
                         common-lisp:nil :type
                         (common-lisp:or line-item-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-order-line-items :shape
                         "LineItemListDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-option common-lisp:null)
                         :accessor struct-shape-order-payment-option :shape
                         "PaymentOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-submission-date :initarg :order-submission-date
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601timestamp common-lisp:null)
                         :accessor struct-shape-order-order-submission-date
                         :shape "ISO8601Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-fulfilled-date :initarg :order-fulfilled-date
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601timestamp common-lisp:null)
                         :accessor struct-shape-order-order-fulfilled-date
                         :shape "ISO8601Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-term :initarg :payment-term :initform
                         common-lisp:nil :type
                         (common-lisp:or payment-term common-lisp:null)
                         :accessor struct-shape-order-payment-term :shape
                         "PaymentTerm" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (order-type :initarg :order-type :initform
                         common-lisp:nil :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-order-order-type :shape "OrderType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'order 'make-order))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-id))
      (common-lisp:list
       (common-lisp:cons "OrderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-items))
      (common-lisp:list
       (common-lisp:cons "LineItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'order-submission-date))
      (common-lisp:list
       (common-lisp:cons "OrderSubmissionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'order-fulfilled-date))
      (common-lisp:list
       (common-lisp:cons "OrderFulfilledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-term))
      (common-lisp:list
       (common-lisp:cons "PaymentTerm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-type))
      (common-lisp:list
       (common-lisp:cons "OrderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order))
   common-lisp:nil))
(common-lisp:deftype order-id () 'common-lisp:string)
(common-lisp:deftype order-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order-summary common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-id-only common-lisp:null)
                         :accessor struct-shape-order-summary-outpost-id :shape
                         "OutpostIdOnly" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-id :initarg :order-id :initform common-lisp:nil
                         :type (common-lisp:or order-id common-lisp:null)
                         :accessor struct-shape-order-summary-order-id :shape
                         "OrderId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (order-type :initarg :order-type :initform
                         common-lisp:nil :type
                         (common-lisp:or order-type common-lisp:null) :accessor
                         struct-shape-order-summary-order-type :shape
                         "OrderType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or order-status common-lisp:null)
                         :accessor struct-shape-order-summary-status :shape
                         "OrderStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (line-item-counts-by-status :initarg
                         :line-item-counts-by-status :initform common-lisp:nil
                         :type
                         (common-lisp:or line-item-status-counts
                                         common-lisp:null)
                         :accessor
                         struct-shape-order-summary-line-item-counts-by-status
                         :shape "LineItemStatusCounts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (order-submission-date :initarg :order-submission-date
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601timestamp common-lisp:null)
                         :accessor
                         struct-shape-order-summary-order-submission-date
                         :shape "ISO8601Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-fulfilled-date :initarg :order-fulfilled-date
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601timestamp common-lisp:null)
                         :accessor
                         struct-shape-order-summary-order-fulfilled-date :shape
                         "ISO8601Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'order-summary 'make-order-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-id))
      (common-lisp:list
       (common-lisp:cons "OrderId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-type))
      (common-lisp:list
       (common-lisp:cons "OrderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'line-item-counts-by-status))
      (common-lisp:list
       (common-lisp:cons "LineItemCountsByStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'order-submission-date))
      (common-lisp:list
       (common-lisp:cons "OrderSubmissionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'order-fulfilled-date))
      (common-lisp:list
       (common-lisp:cons "OrderFulfilledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype order-summary-list-definition ()
   '(trivial-types:proper-list order-summary))
 (common-lisp:defun make-order-summary-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype order-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass outpost common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-outpost-outpost-id :shape "OutpostId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or owner-id common-lisp:null)
                         :accessor struct-shape-outpost-owner-id :shape
                         "OwnerId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (outpost-arn :initarg :outpost-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-arn common-lisp:null)
                         :accessor struct-shape-outpost-outpost-arn :shape
                         "OutpostArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-outpost-site-id :shape "SiteId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or outpost-name common-lisp:null)
                         :accessor struct-shape-outpost-name :shape
                         "OutpostName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-description common-lisp:null)
                         :accessor struct-shape-outpost-description :shape
                         "OutpostDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (life-cycle-status :initarg :life-cycle-status
                         :initform common-lisp:nil :type
                         (common-lisp:or life-cycle-status common-lisp:null)
                         :accessor struct-shape-outpost-life-cycle-status
                         :shape "LifeCycleStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor struct-shape-outpost-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone-id :initarg :availability-zone-id
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone-id common-lisp:null)
                         :accessor struct-shape-outpost-availability-zone-id
                         :shape "AvailabilityZoneId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-outpost-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (site-arn :initarg :site-arn :initform common-lisp:nil
                         :type (common-lisp:or site-arn common-lisp:null)
                         :accessor struct-shape-outpost-site-arn :shape
                         "SiteArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (supported-hardware-type :initarg
                         :supported-hardware-type :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-hardware-type
                                         common-lisp:null)
                         :accessor struct-shape-outpost-supported-hardware-type
                         :shape "SupportedHardwareType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outpost
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'outpost
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'outpost 'make-outpost))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outpost))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-id))
      (common-lisp:list
       (common-lisp:cons "OutpostId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost-arn))
      (common-lisp:list
       (common-lisp:cons "OutpostArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle-status))
      (common-lisp:list
       (common-lisp:cons "LifeCycleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-id))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-arn))
      (common-lisp:list
       (common-lisp:cons "SiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-hardware-type))
      (common-lisp:list
       (common-lisp:cons "SupportedHardwareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outpost))
   common-lisp:nil))
(common-lisp:deftype outpost-arn () 'common-lisp:string)
(common-lisp:deftype outpost-description () 'common-lisp:string)
(common-lisp:deftype outpost-id () 'common-lisp:string)
(common-lisp:deftype outpost-id-only () 'common-lisp:string)
(common-lisp:deftype outpost-identifier () 'common-lisp:string)
(common-lisp:deftype outpost-name () 'common-lisp:string)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:deftype payment-option () 'common-lisp:string)
(common-lisp:deftype payment-term () 'common-lisp:string)
(common-lisp:deftype postal-code () 'common-lisp:string)
(common-lisp:deftype power-connector () 'common-lisp:string)
(common-lisp:deftype power-draw-kva () 'common-lisp:string)
(common-lisp:deftype power-feed-drop () 'common-lisp:string)
(common-lisp:deftype power-phase () 'common-lisp:string)
(common-lisp:deftype quantity () 'common-lisp:string)
(common-lisp:deftype rack-elevation () 'common-lisp:single-float)
(common-lisp:deftype rack-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rack-physical-properties common-lisp:nil
                       ((power-draw-kva :initarg :power-draw-kva :initform
                         common-lisp:nil :type
                         (common-lisp:or power-draw-kva common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-power-draw-kva
                         :shape "PowerDrawKva" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-phase :initarg :power-phase :initform
                         common-lisp:nil :type
                         (common-lisp:or power-phase common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-power-phase
                         :shape "PowerPhase" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-connector :initarg :power-connector :initform
                         common-lisp:nil :type
                         (common-lisp:or power-connector common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-power-connector
                         :shape "PowerConnector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-feed-drop :initarg :power-feed-drop :initform
                         common-lisp:nil :type
                         (common-lisp:or power-feed-drop common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-power-feed-drop
                         :shape "PowerFeedDrop" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-gbps :initarg :uplink-gbps :initform
                         common-lisp:nil :type
                         (common-lisp:or uplink-gbps common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-uplink-gbps
                         :shape "UplinkGbps" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-count :initarg :uplink-count :initform
                         common-lisp:nil :type
                         (common-lisp:or uplink-count common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-uplink-count
                         :shape "UplinkCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fiber-optic-cable-type :initarg
                         :fiber-optic-cable-type :initform common-lisp:nil
                         :type
                         (common-lisp:or fiber-optic-cable-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-fiber-optic-cable-type
                         :shape "FiberOpticCableType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optical-standard :initarg :optical-standard :initform
                         common-lisp:nil :type
                         (common-lisp:or optical-standard common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-optical-standard
                         :shape "OpticalStandard" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-supported-weight-lbs :initarg
                         :maximum-supported-weight-lbs :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-supported-weight-lbs
                                         common-lisp:null)
                         :accessor
                         struct-shape-rack-physical-properties-maximum-supported-weight-lbs
                         :shape "MaximumSupportedWeightLbs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rack-physical-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rack-physical-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rack-physical-properties 'make-rack-physical-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rack-physical-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rack-physical-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-draw-kva))
      (common-lisp:list
       (common-lisp:cons "PowerDrawKva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-phase))
      (common-lisp:list
       (common-lisp:cons "PowerPhase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-connector))
      (common-lisp:list
       (common-lisp:cons "PowerConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-feed-drop))
      (common-lisp:list
       (common-lisp:cons "PowerFeedDrop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-gbps))
      (common-lisp:list
       (common-lisp:cons "UplinkGbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-count))
      (common-lisp:list
       (common-lisp:cons "UplinkCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fiber-optic-cable-type))
      (common-lisp:list
       (common-lisp:cons "FiberOpticCableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optical-standard))
      (common-lisp:list
       (common-lisp:cons "OpticalStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-supported-weight-lbs))
      (common-lisp:list
       (common-lisp:cons "MaximumSupportedWeightLbs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rack-physical-properties))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype server-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype shipment-carrier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass shipment-information common-lisp:nil
                       ((shipment-tracking-number :initarg
                         :shipment-tracking-number :initform common-lisp:nil
                         :type (common-lisp:or tracking-id common-lisp:null)
                         :accessor
                         struct-shape-shipment-information-shipment-tracking-number
                         :shape "TrackingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shipment-carrier :initarg :shipment-carrier :initform
                         common-lisp:nil :type
                         (common-lisp:or shipment-carrier common-lisp:null)
                         :accessor
                         struct-shape-shipment-information-shipment-carrier
                         :shape "ShipmentCarrier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-shipment-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'shipment-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'shipment-information 'make-shipment-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shipment-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shipment-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shipment-tracking-number))
      (common-lisp:list
       (common-lisp:cons "ShipmentTrackingNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shipment-carrier))
      (common-lisp:list
       (common-lisp:cons "ShipmentCarrier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shipment-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass site common-lisp:nil
                       ((site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-site-site-id :shape "SiteId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-site-account-id :shape "AccountId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or site-name common-lisp:null) :accessor
                         struct-shape-site-name :shape "SiteName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or site-description common-lisp:null)
                         :accessor struct-shape-site-description :shape
                         "SiteDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-site-tags :shape "TagMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (site-arn :initarg :site-arn :initform common-lisp:nil
                         :type (common-lisp:or site-arn common-lisp:null)
                         :accessor struct-shape-site-site-arn :shape "SiteArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or site-notes common-lisp:null) :accessor
                         struct-shape-site-notes :shape "SiteNotes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (operating-address-country-code :initarg
                         :operating-address-country-code :initform
                         common-lisp:nil :type
                         (common-lisp:or country-code common-lisp:null)
                         :accessor
                         struct-shape-site-operating-address-country-code
                         :shape "CountryCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-address-state-or-region :initarg
                         :operating-address-state-or-region :initform
                         common-lisp:nil :type
                         (common-lisp:or state-or-region common-lisp:null)
                         :accessor
                         struct-shape-site-operating-address-state-or-region
                         :shape "StateOrRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (operating-address-city :initarg
                         :operating-address-city :initform common-lisp:nil
                         :type (common-lisp:or city common-lisp:null) :accessor
                         struct-shape-site-operating-address-city :shape "City"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rack-physical-properties :initarg
                         :rack-physical-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or rack-physical-properties
                                         common-lisp:null)
                         :accessor struct-shape-site-rack-physical-properties
                         :shape "RackPhysicalProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-site (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'site
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'site 'make-site))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input site))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input site))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-arn))
      (common-lisp:list
       (common-lisp:cons "SiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-address-country-code))
      (common-lisp:list
       (common-lisp:cons "OperatingAddressCountryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-address-state-or-region))
      (common-lisp:list
       (common-lisp:cons "OperatingAddressStateOrRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operating-address-city))
      (common-lisp:list
       (common-lisp:cons "OperatingAddressCity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rack-physical-properties))
      (common-lisp:list
       (common-lisp:cons "RackPhysicalProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input site))
   common-lisp:nil))
(common-lisp:deftype site-arn () 'common-lisp:string)
(common-lisp:deftype site-description () 'common-lisp:string)
(common-lisp:deftype site-id () 'common-lisp:string)
(common-lisp:deftype site-name () 'common-lisp:string)
(common-lisp:deftype site-notes () 'common-lisp:string)
(common-lisp:deftype sku-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-connection-request common-lisp:nil
                       ((device-serial-number :initarg :device-serial-number
                         :initform common-lisp:nil :type
                         (common-lisp:or device-serial-number common-lisp:null)
                         :accessor
                         struct-shape-start-connection-request-device-serial-number
                         :shape "DeviceSerialNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asset-id :initarg :asset-id :initform
                         (common-lisp:error ":asset-id is required") :type
                         (common-lisp:or asset-id common-lisp:null) :accessor
                         struct-shape-start-connection-request-asset-id :shape
                         "AssetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-public-key :initarg :client-public-key
                         :initform
                         (common-lisp:error ":client-public-key is required")
                         :type
                         (common-lisp:or wire-guard-public-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-connection-request-client-public-key
                         :shape "WireGuardPublicKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-interface-device-index :initarg
                         :network-interface-device-index :initform
                         (common-lisp:error
                          ":network-interface-device-index is required")
                         :type
                         (common-lisp:or network-interface-device-index
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-connection-request-network-interface-device-index
                         :shape "NetworkInterfaceDeviceIndex" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-connection-request 'make-start-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-serial-number))
      (common-lisp:list
       (common-lisp:cons "DeviceSerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-public-key))
      (common-lisp:list
       (common-lisp:cons "ClientPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-device-index))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceDeviceIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-connection-response common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-start-connection-response-connection-id
                         :shape "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (underlay-ip-address :initarg :underlay-ip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or underlay-ip-address common-lisp:null)
                         :accessor
                         struct-shape-start-connection-response-underlay-ip-address
                         :shape "UnderlayIpAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-connection-response
                    'make-start-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'underlay-ip-address))
      (common-lisp:list
       (common-lisp:cons "UnderlayIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-connection-response))
   common-lisp:nil))
(common-lisp:deftype state-or-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype state-or-region-list ()
   '(trivial-types:proper-list state-or-region))
 (common-lisp:defun make-state-or-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list state-or-region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype status-list () '(trivial-types:proper-list asset-state))
 (common-lisp:defun make-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype supported-hardware-type () 'common-lisp:string)
(common-lisp:deftype supported-storage-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supported-storage-list ()
   '(trivial-types:proper-list supported-storage-enum))
 (common-lisp:defun make-supported-storage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-storage-enum))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-uplink-gbps () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype supported-uplink-gbps-list-definition ()
   '(trivial-types:proper-list supported-uplink-gbps))
 (common-lisp:defun make-supported-uplink-gbps-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-uplink-gbps))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "ResourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype tracking-id () 'common-lisp:string)
(common-lisp:deftype underlay-ip-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "ResourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-outpost-input common-lisp:nil
                       ((outpost-id :initarg :outpost-id :initform
                         (common-lisp:error ":outpost-id is required") :type
                         (common-lisp:or outpost-id common-lisp:null) :accessor
                         struct-shape-update-outpost-input-outpost-id :shape
                         "OutpostId" :location "uri" :location-name
                         "OutpostId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or outpost-name common-lisp:null)
                         :accessor struct-shape-update-outpost-input-name
                         :shape "OutpostName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or outpost-description common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-input-description :shape
                         "OutpostDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-hardware-type :initarg
                         :supported-hardware-type :initform common-lisp:nil
                         :type
                         (common-lisp:or supported-hardware-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-outpost-input-supported-hardware-type
                         :shape "SupportedHardwareType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-outpost-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-outpost-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-outpost-input 'make-update-outpost-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-outpost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-outpost-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-hardware-type))
      (common-lisp:list
       (common-lisp:cons "SupportedHardwareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-outpost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-outpost-output common-lisp:nil
                       ((outpost :initarg :outpost :initform common-lisp:nil
                         :type (common-lisp:or outpost common-lisp:null)
                         :accessor struct-shape-update-outpost-output-outpost
                         :shape "Outpost" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-outpost-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-outpost-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-outpost-output 'make-update-outpost-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outpost))
      (common-lisp:list
       (common-lisp:cons "Outpost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-outpost-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-address-input common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-update-site-address-input-site-id :shape
                         "SiteId" :location "uri" :location-name "SiteId")
                        (address-type :initarg :address-type :initform
                         (common-lisp:error ":address-type is required") :type
                         (common-lisp:or address-type common-lisp:null)
                         :accessor
                         struct-shape-update-site-address-input-address-type
                         :shape "AddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address :initarg :address :initform
                         (common-lisp:error ":address is required") :type
                         (common-lisp:or address common-lisp:null) :accessor
                         struct-shape-update-site-address-input-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-address-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-address-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-address-input
                    'make-update-site-address-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-type))
      (common-lisp:list
       (common-lisp:cons "AddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-address-output common-lisp:nil
                       ((address-type :initarg :address-type :initform
                         common-lisp:nil :type
                         (common-lisp:or address-type common-lisp:null)
                         :accessor
                         struct-shape-update-site-address-output-address-type
                         :shape "AddressType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type (common-lisp:or address common-lisp:null)
                         :accessor
                         struct-shape-update-site-address-output-address :shape
                         "Address" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-address-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-address-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-address-output
                    'make-update-site-address-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address-type))
      (common-lisp:list
       (common-lisp:cons "AddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-site-address-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-input common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-update-site-input-site-id :shape "SiteId"
                         :location "uri" :location-name "SiteId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or site-name common-lisp:null) :accessor
                         struct-shape-update-site-input-name :shape "SiteName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or site-description common-lisp:null)
                         :accessor struct-shape-update-site-input-description
                         :shape "SiteDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notes :initarg :notes :initform common-lisp:nil :type
                         (common-lisp:or site-notes common-lisp:null) :accessor
                         struct-shape-update-site-input-notes :shape
                         "SiteNotes" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-input 'make-update-site-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-site-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-site-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-site-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-output common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-update-site-output-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-output 'make-update-site-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-site-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-site-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-site-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-rack-physical-properties-input
                       common-lisp:nil
                       ((site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-update-site-rack-physical-properties-input-site-id
                         :shape "SiteId" :location "uri" :location-name
                         "SiteId")
                        (power-draw-kva :initarg :power-draw-kva :initform
                         common-lisp:nil :type
                         (common-lisp:or power-draw-kva common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-power-draw-kva
                         :shape "PowerDrawKva" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-phase :initarg :power-phase :initform
                         common-lisp:nil :type
                         (common-lisp:or power-phase common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-power-phase
                         :shape "PowerPhase" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-connector :initarg :power-connector :initform
                         common-lisp:nil :type
                         (common-lisp:or power-connector common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-power-connector
                         :shape "PowerConnector" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (power-feed-drop :initarg :power-feed-drop :initform
                         common-lisp:nil :type
                         (common-lisp:or power-feed-drop common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-power-feed-drop
                         :shape "PowerFeedDrop" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-gbps :initarg :uplink-gbps :initform
                         common-lisp:nil :type
                         (common-lisp:or uplink-gbps common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-uplink-gbps
                         :shape "UplinkGbps" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uplink-count :initarg :uplink-count :initform
                         common-lisp:nil :type
                         (common-lisp:or uplink-count common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-uplink-count
                         :shape "UplinkCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fiber-optic-cable-type :initarg
                         :fiber-optic-cable-type :initform common-lisp:nil
                         :type
                         (common-lisp:or fiber-optic-cable-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-fiber-optic-cable-type
                         :shape "FiberOpticCableType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optical-standard :initarg :optical-standard :initform
                         common-lisp:nil :type
                         (common-lisp:or optical-standard common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-optical-standard
                         :shape "OpticalStandard" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-supported-weight-lbs :initarg
                         :maximum-supported-weight-lbs :initform
                         common-lisp:nil :type
                         (common-lisp:or maximum-supported-weight-lbs
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-site-rack-physical-properties-input-maximum-supported-weight-lbs
                         :shape "MaximumSupportedWeightLbs" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-rack-physical-properties-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-site-rack-physical-properties-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-rack-physical-properties-input
                    'make-update-site-rack-physical-properties-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-draw-kva))
      (common-lisp:list
       (common-lisp:cons "PowerDrawKva"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-phase))
      (common-lisp:list
       (common-lisp:cons "PowerPhase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-connector))
      (common-lisp:list
       (common-lisp:cons "PowerConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-feed-drop))
      (common-lisp:list
       (common-lisp:cons "PowerFeedDrop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-gbps))
      (common-lisp:list
       (common-lisp:cons "UplinkGbps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-count))
      (common-lisp:list
       (common-lisp:cons "UplinkCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fiber-optic-cable-type))
      (common-lisp:list
       (common-lisp:cons "FiberOpticCableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optical-standard))
      (common-lisp:list
       (common-lisp:cons "OpticalStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-supported-weight-lbs))
      (common-lisp:list
       (common-lisp:cons "MaximumSupportedWeightLbs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-rack-physical-properties-output
                       common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-update-site-rack-physical-properties-output-site
                         :shape "Site" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-rack-physical-properties-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-site-rack-physical-properties-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-rack-physical-properties-output
                    'make-update-site-rack-physical-properties-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-site-rack-physical-properties-output))
   common-lisp:nil))
(common-lisp:deftype uplink-count () 'common-lisp:string)
(common-lisp:deftype uplink-gbps () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (outposts-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype wire-guard-public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |outpostListDefinition| ()
   '(trivial-types:proper-list outpost))
 (common-lisp:defun make-outpostlistdefinition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outpost))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |siteListDefinition| ()
   '(trivial-types:proper-list site))
 (common-lisp:defun make-sitelistdefinition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list site))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun cancel-order
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key order-id)
   (common-lisp:declare (common-lisp:ignorable order-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-order-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/orders/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'order-id))))
                                                        "CancelOrder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-order))
(common-lisp:progn
 (common-lisp:defun create-order
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-identifier line-items
                     payment-option payment-term)
   (common-lisp:declare
    (common-lisp:ignorable outpost-identifier line-items payment-option
     payment-term))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-order-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/orders"
                                                        "CreateOrder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-order))
(common-lisp:progn
 (common-lisp:defun create-outpost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description site-id
                     availability-zone availability-zone-id tags
                     supported-hardware-type)
   (common-lisp:declare
    (common-lisp:ignorable name description site-id availability-zone
     availability-zone-id tags supported-hardware-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-outpost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/outposts"
                                                        "CreateOutpost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-outpost))
(common-lisp:progn
 (common-lisp:defun create-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description notes tags
                     operating-address shipping-address
                     rack-physical-properties)
   (common-lisp:declare
    (common-lisp:ignorable name description notes tags operating-address
     shipping-address rack-physical-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-site-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/sites"
                                                        "CreateSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-site))
(common-lisp:progn
 (common-lisp:defun delete-outpost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-id)
   (common-lisp:declare (common-lisp:ignorable outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-outpost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/outposts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'outpost-id))))
                                                        "DeleteOutpost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-outpost))
(common-lisp:progn
 (common-lisp:defun delete-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id)
   (common-lisp:declare (common-lisp:ignorable site-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-site-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "DeleteSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-site))
(common-lisp:progn
 (common-lisp:defun get-catalog-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-item-id)
   (common-lisp:declare (common-lisp:ignorable catalog-item-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-catalog-item-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/catalog/item/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'catalog-item-id))))
                                                        "GetCatalogItem"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-catalog-item))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/connections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "GetConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-order
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key order-id)
   (common-lisp:declare (common-lisp:ignorable order-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-order-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/orders/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'order-id))))
                                                        "GetOrder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-order))
(common-lisp:progn
 (common-lisp:defun get-outpost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-id)
   (common-lisp:declare (common-lisp:ignorable outpost-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-outpost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/outposts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'outpost-id))))
                                                        "GetOutpost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-outpost))
(common-lisp:progn
 (common-lisp:defun get-outpost-instance-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable outpost-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-outpost-instance-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/outposts/~A/instanceTypes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'outpost-id))))
                                                        "GetOutpostInstanceTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-outpost-instance-types))
(common-lisp:progn
 (common-lisp:defun get-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id)
   (common-lisp:declare (common-lisp:ignorable site-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-site-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "GetSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-site))
(common-lisp:progn
 (common-lisp:defun get-site-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id address-type)
   (common-lisp:declare (common-lisp:ignorable site-id address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-site-address-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A/address"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "GetSiteAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-site-address))
(common-lisp:progn
 (common-lisp:defun list-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-identifier host-id-filter
                     max-results next-token status-filter)
   (common-lisp:declare
    (common-lisp:ignorable outpost-identifier host-id-filter max-results
     next-token status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/outposts/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'outpost-id))))
                                                        "ListAssets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-assets))
(common-lisp:progn
 (common-lisp:defun list-catalog-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results item-class-filter
                     supported-storage-filter ec2family-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results item-class-filter
     supported-storage-filter ec2family-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-catalog-items-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/catalog/items"
                                                        "ListCatalogItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-catalog-items))
(common-lisp:progn
 (common-lisp:defun list-orders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-identifier-filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable outpost-identifier-filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-orders-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/list-orders"
                                                        "ListOrders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-orders))
(common-lisp:progn
 (common-lisp:defun list-outposts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     life-cycle-status-filter availability-zone-filter
                     availability-zone-id-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results life-cycle-status-filter
     availability-zone-filter availability-zone-id-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-outposts-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/outposts"
                                                        "ListOutposts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-outposts))
(common-lisp:progn
 (common-lisp:defun list-sites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     operating-address-country-code-filter
                     operating-address-state-or-region-filter
                     operating-address-city-filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results
     operating-address-country-code-filter
     operating-address-state-or-region-filter operating-address-city-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sites-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/sites"
                                                        "ListSites"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sites))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-serial-number asset-id
                     client-public-key network-interface-device-index)
   (common-lisp:declare
    (common-lisp:ignorable device-serial-number asset-id client-public-key
     network-interface-device-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/connections"
                                                        "StartConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-connection))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-outpost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key outpost-id name description
                     supported-hardware-type)
   (common-lisp:declare
    (common-lisp:ignorable outpost-id name description
     supported-hardware-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-outpost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/outposts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'outpost-id))))
                                                        "UpdateOutpost"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-outpost))
(common-lisp:progn
 (common-lisp:defun update-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id name description notes)
   (common-lisp:declare (common-lisp:ignorable site-id name description notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-site-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "UpdateSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-site))
(common-lisp:progn
 (common-lisp:defun update-site-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id address-type address)
   (common-lisp:declare (common-lisp:ignorable site-id address-type address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-site-address-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A/address"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "UpdateSiteAddress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-site-address))
(common-lisp:progn
 (common-lisp:defun update-site-rack-physical-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key site-id power-draw-kva power-phase
                     power-connector power-feed-drop uplink-gbps uplink-count
                     fiber-optic-cable-type optical-standard
                     maximum-supported-weight-lbs)
   (common-lisp:declare
    (common-lisp:ignorable site-id power-draw-kva power-phase power-connector
     power-feed-drop uplink-gbps uplink-count fiber-optic-cable-type
     optical-standard maximum-supported-weight-lbs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-site-rack-physical-properties-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'outposts-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sites/~A/rackPhysicalProperties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "UpdateSiteRackPhysicalProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-site-rack-physical-properties))
